
ContadorPersonas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08004fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0005de54  2000007c  08005028  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2005ded0  08005028  0002ded0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bfea  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000373f  00000000  00000000  0003c094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d000  00000000  00000000  0003f7d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f90  00000000  00000000  0004c7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001560  00000000  00000000  0004d768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000921a  00000000  00000000  0004ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006500  00000000  00000000  00057ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005e3e2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003658  00000000  00000000  0005e460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004d24 	.word	0x08004d24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08004d24 	.word	0x08004d24

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_InitTick+0x3c>)
{
 80005f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_InitTick+0x40>)
 80005f8:	7818      	ldrb	r0, [r3, #0]
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000602:	6810      	ldr	r0, [r2, #0]
 8000604:	fbb0 f0f3 	udiv	r0, r0, r3
 8000608:	f000 f89e 	bl	8000748 <HAL_SYSTICK_Config>
 800060c:	4604      	mov	r4, r0
 800060e:	b958      	cbnz	r0, 8000628 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000610:	2d0f      	cmp	r5, #15
 8000612:	d809      	bhi.n	8000628 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	4602      	mov	r2, r0
 8000616:	4629      	mov	r1, r5
 8000618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800061c:	f000 f84e 	bl	80006bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_InitTick+0x44>)
 8000622:	4620      	mov	r0, r4
 8000624:	601d      	str	r5, [r3, #0]
 8000626:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000628:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	20000014 	.word	0x20000014
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_Init>:
{
 8000638:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063a:	2003      	movs	r0, #3
 800063c:	f000 f82c 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffd5 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000646:	f003 f995 	bl	8003974 <HAL_MspInit>
}
 800064a:	2000      	movs	r0, #0
 800064c:	bd08      	pop	{r3, pc}
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000ac 	.word	0x200000ac
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200000ac 	.word	0x200000ac

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000680:	bf1e      	ittt	ne
 8000682:	4b04      	ldrne	r3, [pc, #16]	; (8000694 <HAL_Delay+0x20>)
 8000684:	781b      	ldrbne	r3, [r3, #0]
 8000686:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	1b40      	subs	r0, r0, r5
 800068e:	4284      	cmp	r4, r0
 8000690:	d8fa      	bhi.n	8000688 <HAL_Delay+0x14>
  {
  }
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	68dc      	ldr	r4, [r3, #12]
 80006c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	bf28      	it	cs
 80006d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	bf8c      	ite	hi
 80006da:	3c03      	subhi	r4, #3
 80006dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006e8:	ea01 0103 	and.w	r1, r1, r3
 80006ec:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	fa05 f404 	lsl.w	r4, r5, r4
 80006f4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80006f8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	ea42 0201 	orr.w	r2, r2, r1
 8000700:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000704:	db07      	blt.n	8000716 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000710:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000714:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e000ed14 	.word	0xe000ed14

0800072c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800072c:	2800      	cmp	r0, #0
 800072e:	db08      	blt.n	8000742 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000730:	0942      	lsrs	r2, r0, #5
 8000732:	2301      	movs	r3, #1
 8000734:	f000 001f 	and.w	r0, r0, #31
 8000738:	fa03 f000 	lsl.w	r0, r3, r0
 800073c:	4b01      	ldr	r3, [pc, #4]	; (8000744 <HAL_NVIC_EnableIRQ+0x18>)
 800073e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100

08000748 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	3801      	subs	r0, #1
 800074a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800074e:	d20a      	bcs.n	8000766 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	21f0      	movs	r1, #240	; 0xf0
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8000774:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000776:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if(hdcmi->XferCount != 0)
 8000778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800077a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800077c:	b1c3      	cbz	r3, 80007b0 <DCMI_DMAXferCplt+0x3c>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800077e:	6803      	ldr	r3, [r0, #0]
 8000780:	6819      	ldr	r1, [r3, #0]
    if(((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8000782:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000784:	f012 0201 	ands.w	r2, r2, #1
 8000788:	d10b      	bne.n	80007a2 <DCMI_DMAXferCplt+0x2e>
 800078a:	0309      	lsls	r1, r1, #12
 800078c:	d509      	bpl.n	80007a2 <DCMI_DMAXferCplt+0x2e>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800078e:	68db      	ldr	r3, [r3, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY0);
 8000790:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY1);
 8000792:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8000796:	f000 fd0b 	bl	80011b0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800079a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800079c:	3b01      	subs	r3, #1
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
  {
    tmp = hdcmi->pBuffPtr;
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4*hdcmi->XferSize));
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800079e:	63a3      	str	r3, [r4, #56]	; 0x38
 80007a0:	e00c      	b.n	80007bc <DCMI_DMAXferCplt+0x48>
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	0312      	lsls	r2, r2, #12
 80007a6:	d409      	bmi.n	80007bc <DCMI_DMAXferCplt+0x48>
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80007a8:	691b      	ldr	r3, [r3, #16]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80007ae:	e7f0      	b.n	8000792 <DCMI_DMAXferCplt+0x1e>
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 80007b0:	6803      	ldr	r3, [r0, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	0311      	lsls	r1, r2, #12
 80007b6:	d511      	bpl.n	80007dc <DCMI_DMAXferCplt+0x68>
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80007b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007ba:	60da      	str	r2, [r3, #12]
  }

  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80007bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d10a      	bne.n	80007da <DCMI_DMAXferCplt+0x66>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	68da      	ldr	r2, [r3, #12]
 80007c8:	f042 0201 	orr.w	r2, r2, #1
 80007cc:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	079b      	lsls	r3, r3, #30
 80007d2:	d502      	bpl.n	80007da <DCMI_DMAXferCplt+0x66>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80007d4:	2301      	movs	r3, #1
 80007d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80007da:	bd10      	pop	{r4, pc}
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	0312      	lsls	r2, r2, #12
 80007e0:	d4ec      	bmi.n	80007bc <DCMI_DMAXferCplt+0x48>
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4*hdcmi->XferSize));
 80007e2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80007e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007e6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80007ea:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80007ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ee:	e7d6      	b.n	800079e <DCMI_DMAXferCplt+0x2a>

080007f0 <HAL_DCMI_Init>:
{     
 80007f0:	b538      	push	{r3, r4, r5, lr}
  if(hdcmi == NULL)
 80007f2:	4604      	mov	r4, r0
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d03d      	beq.n	8000874 <HAL_DCMI_Init+0x84>
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80007f8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80007fc:	b90b      	cbnz	r3, 8000802 <HAL_DCMI_Init+0x12>
    HAL_DCMI_MspInit(hdcmi);
 80007fe:	f003 f8d1 	bl	80039a4 <HAL_DCMI_MspInit>
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000802:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000804:	2302      	movs	r3, #2
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000806:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000808:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <HAL_DCMI_Init+0x88>)
 800080e:	6811      	ldr	r1, [r2, #0]
 8000810:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000812:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000814:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000816:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000818:	6963      	ldr	r3, [r4, #20]
 800081a:	6810      	ldr	r0, [r2, #0]
 800081c:	ea43 0301 	orr.w	r3, r3, r1
 8000820:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000824:	6925      	ldr	r5, [r4, #16]
 8000826:	ea43 0305 	orr.w	r3, r3, r5
 800082a:	68a5      	ldr	r5, [r4, #8]
 800082c:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000830:	69a5      	ldr	r5, [r4, #24]
 8000832:	ea43 0305 	orr.w	r3, r3, r5
 8000836:	6a25      	ldr	r5, [r4, #32]
 8000838:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800083c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800083e:	ea43 0305 	orr.w	r3, r3, r5
 8000842:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000844:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000848:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800084a:	ea43 0305 	orr.w	r3, r3, r5
 800084e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000850:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000854:	ea43 0300 	orr.w	r3, r3, r0
 8000858:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800085a:	d101      	bne.n	8000860 <HAL_DCMI_Init+0x70>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800085c:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800085e:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000860:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000862:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000864:	f043 031e 	orr.w	r3, r3, #30
 8000868:	60d3      	str	r3, [r2, #12]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800086a:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800086c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800086e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000872:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8000874:	2001      	movs	r0, #1
}
 8000876:	bd38      	pop	{r3, r4, r5, pc}
 8000878:	ffe0f007 	.word	0xffe0f007

0800087c <HAL_DCMI_Start_DMA>:
{  
 800087c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800087e:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 8000880:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
{  
 8000884:	4616      	mov	r6, r2
  __HAL_LOCK(hdcmi);
 8000886:	2801      	cmp	r0, #1
 8000888:	f04f 0002 	mov.w	r0, #2
 800088c:	d02d      	beq.n	80008ea <HAL_DCMI_Start_DMA+0x6e>
  __HAL_DCMI_ENABLE(hdcmi);
 800088e:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hdcmi);
 8000890:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000894:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  if(Length <= 0xFFFF)
 8000898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  __HAL_DCMI_ENABLE(hdcmi);
 800089c:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hdcmi);
 800089e:	f884 e034 	strb.w	lr, [r4, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 80008a2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008a6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8000934 <HAL_DCMI_Start_DMA+0xb8>
  __HAL_DCMI_ENABLE(hdcmi);
 80008aa:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80008ac:	6828      	ldr	r0, [r5, #0]
 80008ae:	f020 0002 	bic.w	r0, r0, #2
 80008b2:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80008b4:	6828      	ldr	r0, [r5, #0]
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80008bc:	6029      	str	r1, [r5, #0]
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80008be:	491c      	ldr	r1, [pc, #112]	; (8000930 <HAL_DCMI_Start_DMA+0xb4>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008c0:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80008c4:	64c1      	str	r1, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80008c6:	f04f 0100 	mov.w	r1, #0
 80008ca:	6501      	str	r1, [r0, #80]	; 0x50
  hdcmi->XferCount = 0;
 80008cc:	63a1      	str	r1, [r4, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80008ce:	6421      	str	r1, [r4, #64]	; 0x40
  if(Length <= 0xFFFF)
 80008d0:	d20d      	bcs.n	80008ee <HAL_DCMI_Start_DMA+0x72>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80008d2:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80008d6:	f000 f975 	bl	8000bc4 <HAL_DMA_Start_IT>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80008da:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 80008dc:	2000      	movs	r0, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80008de:	6813      	ldr	r3, [r2, #0]
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 80008e6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80008ea:	b003      	add	sp, #12
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt; 
 80008ee:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
    hdcmi->XferCount = 1;
 80008f2:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
    hdcmi->pBuffPtr = pData;
 80008f6:	6462      	str	r2, [r4, #68]	; 0x44
    hdcmi->XferSize = Length;
 80008f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    while(hdcmi->XferSize > 0xFFFF)
 80008fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000900:	d20f      	bcs.n	8000922 <HAL_DCMI_Start_DMA+0xa6>
    hdcmi->XferCount = (hdcmi->XferCount - 2);
 8000902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8000904:	f105 0128 	add.w	r1, r5, #40	; 0x28
    hdcmi->XferCount = (hdcmi->XferCount - 2);
 8000908:	3b02      	subs	r3, #2
 800090a:	63a3      	str	r3, [r4, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800090c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800090e:	6423      	str	r3, [r4, #64]	; 0x40
    SecondMemAddress = (uint32_t)(pData + (4*hdcmi->XferSize));
 8000910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8000912:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8000918:	9200      	str	r2, [sp, #0]
 800091a:	4632      	mov	r2, r6
 800091c:	f000 fa5c 	bl	8000dd8 <HAL_DMAEx_MultiBufferStart_IT>
 8000920:	e7db      	b.n	80008da <HAL_DCMI_Start_DMA+0x5e>
      hdcmi->XferSize = (hdcmi->XferSize/2);
 8000922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2;
 8000928:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	63a3      	str	r3, [r4, #56]	; 0x38
 800092e:	e7e4      	b.n	80008fa <HAL_DCMI_Start_DMA+0x7e>
 8000930:	080009db 	.word	0x080009db
 8000934:	08000775 	.word	0x08000775

08000938 <HAL_DCMI_Suspend>:
  __HAL_LOCK(hdcmi);
 8000938:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800093c:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800093e:	2a01      	cmp	r2, #1
 8000940:	d02c      	beq.n	800099c <HAL_DCMI_Suspend+0x64>
 8000942:	2101      	movs	r1, #1
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 8000944:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <HAL_DCMI_Suspend+0x68>)
  __HAL_LOCK(hdcmi);
 8000946:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 800094a:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 800094e:	6812      	ldr	r2, [r2, #0]
  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8000950:	2902      	cmp	r1, #2
 8000952:	d004      	beq.n	800095e <HAL_DCMI_Suspend+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8000954:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 800095c:	4770      	bx	lr
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 800095e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000962:	fbb2 f1f1 	udiv	r1, r2, r1
 8000966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800096a:	434a      	muls	r2, r1
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800096c:	2105      	movs	r1, #5
 800096e:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8000972:	6801      	ldr	r1, [r0, #0]
 8000974:	6808      	ldr	r0, [r1, #0]
 8000976:	f020 0001 	bic.w	r0, r0, #1
 800097a:	6008      	str	r0, [r1, #0]
      if (count-- == 0)
 800097c:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8000980:	d208      	bcs.n	8000994 <HAL_DCMI_Suspend+0x5c>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8000982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        status = HAL_TIMEOUT;
 8000984:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8000986:	f042 0220 	orr.w	r2, r2, #32
 800098a:	64da      	str	r2, [r3, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 800098c:	2201      	movs	r2, #1
 800098e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 8000992:	e7e0      	b.n	8000956 <HAL_DCMI_Suspend+0x1e>
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 8000994:	6808      	ldr	r0, [r1, #0]
 8000996:	07c0      	lsls	r0, r0, #31
 8000998:	d4f0      	bmi.n	800097c <HAL_DCMI_Suspend+0x44>
 800099a:	e7db      	b.n	8000954 <HAL_DCMI_Suspend+0x1c>
  __HAL_LOCK(hdcmi);
 800099c:	2002      	movs	r0, #2
}
 800099e:	4770      	bx	lr
 80009a0:	20000014 	.word	0x20000014

080009a4 <HAL_DCMI_Resume>:
  __HAL_LOCK(hdcmi);
 80009a4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d013      	beq.n	80009d4 <HAL_DCMI_Resume+0x30>
 80009ac:	2301      	movs	r3, #1
 80009ae:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 80009b2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009b6:	2b05      	cmp	r3, #5
 80009b8:	d107      	bne.n	80009ca <HAL_DCMI_Resume+0x26>
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 80009ba:	2302      	movs	r3, #2
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80009bc:	6802      	ldr	r2, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 80009be:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80009c2:	6813      	ldr	r3, [r2, #0]
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 80009ca:	2300      	movs	r3, #0
 80009cc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  return HAL_OK;
 80009d0:	4618      	mov	r0, r3
 80009d2:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 80009d4:	2002      	movs	r0, #2
}
 80009d6:	4770      	bx	lr

080009d8 <HAL_DCMI_ErrorCallback>:
 80009d8:	4770      	bx	lr

080009da <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009da:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80009dc:	b508      	push	{r3, lr}
 
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80009de:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80009e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d006      	beq.n	80009f4 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80009e6:	2301      	movs	r3, #1
 80009e8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80009ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80009ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f2:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
    HAL_DCMI_ErrorCallback(hdcmi);
 80009f4:	f7ff fff0 	bl	80009d8 <HAL_DCMI_ErrorCallback>
 80009f8:	bd08      	pop	{r3, pc}

080009fa <HAL_DCMI_LineEventCallback>:
 80009fa:	4770      	bx	lr

080009fc <HAL_DCMI_VsyncEventCallback>:
 80009fc:	4770      	bx	lr
	...

08000a00 <HAL_DCMI_IRQHandler>:
{  
 8000a00:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8000a02:	6803      	ldr	r3, [r0, #0]
{  
 8000a04:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8000a06:	691d      	ldr	r5, [r3, #16]
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8000a08:	0769      	lsls	r1, r5, #29
 8000a0a:	d50c      	bpl.n	8000a26 <HAL_DCMI_IRQHandler+0x26>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8000a10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	64c3      	str	r3, [r0, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000a18:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_DCMI_IRQHandler+0x90>)
 8000a1e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8000a20:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle); 
 8000a22:	f000 f90c 	bl	8000c3e <HAL_DMA_Abort_IT>
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8000a26:	07aa      	lsls	r2, r5, #30
 8000a28:	d50e      	bpl.n	8000a48 <HAL_DCMI_IRQHandler+0x48>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a2e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000a30:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000a32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_DCMI_IRQHandler+0x90>)
 8000a42:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000a44:	f000 f8fb 	bl	8000c3e <HAL_DMA_Abort_IT>
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8000a48:	06eb      	lsls	r3, r5, #27
 8000a4a:	d505      	bpl.n	8000a58 <HAL_DCMI_IRQHandler+0x58>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 8000a50:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000a52:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8000a54:	f7ff ffd1 	bl	80009fa <HAL_DCMI_LineEventCallback>
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8000a58:	0728      	lsls	r0, r5, #28
 8000a5a:	d505      	bpl.n	8000a68 <HAL_DCMI_IRQHandler+0x68>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000a60:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000a62:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000a64:	f7ff ffca 	bl	80009fc <HAL_DCMI_VsyncEventCallback>
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)   
 8000a68:	07e9      	lsls	r1, r5, #31
 8000a6a:	d510      	bpl.n	8000a8e <HAL_DCMI_IRQHandler+0x8e>
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	0792      	lsls	r2, r2, #30
 8000a72:	d503      	bpl.n	8000a7c <HAL_DCMI_IRQHandler+0x7c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	f022 021e 	bic.w	r2, r2, #30
 8000a7a:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000a7c:	68da      	ldr	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000a7e:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000a80:	f022 0201 	bic.w	r2, r2, #1
 8000a84:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8000a86:	2201      	movs	r2, #1
 8000a88:	615a      	str	r2, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000a8a:	f002 fac7 	bl	800301c <HAL_DCMI_FrameEventCallback>
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
 8000a90:	080009db 	.word	0x080009db

08000a94 <HAL_DCMI_GetState>:
  return hdcmi->State;
 8000a94:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8000a98:	4770      	bx	lr
	...

08000a9c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000a9c:	6803      	ldr	r3, [r0, #0]
 8000a9e:	2118      	movs	r1, #24
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000aa6:	3a10      	subs	r2, #16
 8000aa8:	f023 0303 	bic.w	r3, r3, #3
 8000aac:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ab0:	4904      	ldr	r1, [pc, #16]	; (8000ac4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000ab2:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ab4:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ab6:	bf88      	it	hi
 8000ab8:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000aba:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000abc:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000abe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	08004d3c 	.word	0x08004d3c

08000ac8 <HAL_DMA_Init>:
{
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff fdcc 	bl	8000668 <HAL_GetTick>
 8000ad0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d071      	beq.n	8000bba <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000ad6:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8000ad8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000ada:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000ae4:	6813      	ldr	r3, [r2, #0]
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000aec:	6821      	ldr	r1, [r4, #0]
 8000aee:	680b      	ldr	r3, [r1, #0]
 8000af0:	07d8      	lsls	r0, r3, #31
 8000af2:	d43c      	bmi.n	8000b6e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000af4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000af6:	4d32      	ldr	r5, [pc, #200]	; (8000bc0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000af8:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000afa:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000afc:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afe:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b00:	4313      	orrs	r3, r2
 8000b02:	68e2      	ldr	r2, [r4, #12]
 8000b04:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b06:	6922      	ldr	r2, [r4, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	6962      	ldr	r2, [r4, #20]
 8000b0c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0e:	69e2      	ldr	r2, [r4, #28]
 8000b10:	4303      	orrs	r3, r0
 8000b12:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b14:	6a22      	ldr	r2, [r4, #32]
 8000b16:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b1a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b1c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b20:	bf01      	itttt	eq
 8000b22:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000b24:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000b26:	4335      	orreq	r5, r6
 8000b28:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b2a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000b2c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b2e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b30:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000b34:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b38:	d10b      	bne.n	8000b52 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000b3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b3c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000b3e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b40:	b13d      	cbz	r5, 8000b52 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b42:	b9f8      	cbnz	r0, 8000b84 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000b44:	2a01      	cmp	r2, #1
 8000b46:	d02d      	beq.n	8000ba4 <HAL_DMA_Init+0xdc>
 8000b48:	d301      	bcc.n	8000b4e <HAL_DMA_Init+0x86>
 8000b4a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000b4c:	d101      	bne.n	8000b52 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b4e:	01ea      	lsls	r2, r5, #7
 8000b50:	d42b      	bmi.n	8000baa <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000b52:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b54:	4620      	mov	r0, r4
 8000b56:	f7ff ffa1 	bl	8000a9c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b5c:	233f      	movs	r3, #63	; 0x3f
 8000b5e:	4093      	lsls	r3, r2
 8000b60:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b62:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000b64:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b66:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b68:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b6c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b6e:	f7ff fd7b 	bl	8000668 <HAL_GetTick>
 8000b72:	1b40      	subs	r0, r0, r5
 8000b74:	2805      	cmp	r0, #5
 8000b76:	d9b9      	bls.n	8000aec <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b78:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b7a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b7c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000b7e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b84:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000b88:	d113      	bne.n	8000bb2 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000b8a:	2a03      	cmp	r2, #3
 8000b8c:	d8e1      	bhi.n	8000b52 <HAL_DMA_Init+0x8a>
 8000b8e:	a001      	add	r0, pc, #4	; (adr r0, 8000b94 <HAL_DMA_Init+0xcc>)
 8000b90:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000b94:	08000bab 	.word	0x08000bab
 8000b98:	08000b4f 	.word	0x08000b4f
 8000b9c:	08000bab 	.word	0x08000bab
 8000ba0:	08000ba5 	.word	0x08000ba5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ba4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000ba8:	d1d3      	bne.n	8000b52 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000baa:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000bac:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bae:	6563      	str	r3, [r4, #84]	; 0x54
 8000bb0:	e7e5      	b.n	8000b7e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000bb2:	2a02      	cmp	r2, #2
 8000bb4:	d9f9      	bls.n	8000baa <HAL_DMA_Init+0xe2>
 8000bb6:	2a03      	cmp	r2, #3
 8000bb8:	e7c8      	b.n	8000b4c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000bba:	2001      	movs	r0, #1
 8000bbc:	bd70      	pop	{r4, r5, r6, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e010803f 	.word	0xe010803f

08000bc4 <HAL_DMA_Start_IT>:
{
 8000bc4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000bc6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000bca:	2c01      	cmp	r4, #1
 8000bcc:	d035      	beq.n	8000c3a <HAL_DMA_Start_IT+0x76>
 8000bce:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bd0:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000bd2:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000bd4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bd8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000bdc:	2c01      	cmp	r4, #1
 8000bde:	f04f 0402 	mov.w	r4, #2
 8000be2:	d128      	bne.n	8000c36 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000be4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000be8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bea:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000bec:	6825      	ldr	r5, [r4, #0]
 8000bee:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000bf2:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000bf4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bf6:	6883      	ldr	r3, [r0, #8]
 8000bf8:	2b40      	cmp	r3, #64	; 0x40
 8000bfa:	d119      	bne.n	8000c30 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000bfc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000bfe:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c00:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000c02:	233f      	movs	r3, #63	; 0x3f
 8000c04:	4093      	lsls	r3, r2
 8000c06:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	f043 0316 	orr.w	r3, r3, #22
 8000c0e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000c10:	6963      	ldr	r3, [r4, #20]
 8000c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c16:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c18:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c1a:	b11b      	cbz	r3, 8000c24 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c24:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c26:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6023      	str	r3, [r4, #0]
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000c30:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c32:	60e2      	str	r2, [r4, #12]
 8000c34:	e7e4      	b.n	8000c00 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000c36:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000c3a:	2002      	movs	r0, #2
}
 8000c3c:	bd70      	pop	{r4, r5, r6, pc}

08000c3e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c3e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d003      	beq.n	8000c4e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000c4e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c50:	2305      	movs	r3, #5
 8000c52:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000c56:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000c58:	6813      	ldr	r3, [r2, #0]
 8000c5a:	f023 0301 	bic.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000c64:	2300      	movs	r3, #0
{
 8000c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000c68:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c6a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000c6c:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <HAL_DMA_IRQHandler+0x170>)
{
 8000c6e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c70:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000c72:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c74:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000c76:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	4216      	tst	r6, r2
 8000c7c:	d00c      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000c7e:	6801      	ldr	r1, [r0, #0]
 8000c80:	6808      	ldr	r0, [r1, #0]
 8000c82:	0740      	lsls	r0, r0, #29
 8000c84:	d508      	bpl.n	8000c98 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000c86:	6808      	ldr	r0, [r1, #0]
 8000c88:	f020 0004 	bic.w	r0, r0, #4
 8000c8c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000c8e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c90:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c92:	f042 0201 	orr.w	r2, r2, #1
 8000c96:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	4216      	tst	r6, r2
 8000c9e:	d008      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ca0:	6821      	ldr	r1, [r4, #0]
 8000ca2:	6949      	ldr	r1, [r1, #20]
 8000ca4:	0609      	lsls	r1, r1, #24
 8000ca6:	d504      	bpl.n	8000cb2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ca8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000caa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cac:	f042 0202 	orr.w	r2, r2, #2
 8000cb0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	4216      	tst	r6, r2
 8000cb8:	d008      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cba:	6821      	ldr	r1, [r4, #0]
 8000cbc:	6809      	ldr	r1, [r1, #0]
 8000cbe:	0788      	lsls	r0, r1, #30
 8000cc0:	d504      	bpl.n	8000ccc <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000cc2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000cc4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cc6:	f042 0204 	orr.w	r2, r2, #4
 8000cca:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ccc:	2210      	movs	r2, #16
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	4216      	tst	r6, r2
 8000cd2:	d010      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	0709      	lsls	r1, r1, #28
 8000cda:	d50c      	bpl.n	8000cf6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000cdc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	0350      	lsls	r0, r2, #13
 8000ce2:	d535      	bpl.n	8000d50 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	0319      	lsls	r1, r3, #12
 8000ce8:	d401      	bmi.n	8000cee <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000cea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cec:	e000      	b.n	8000cf0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000cee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000cf0:	b10b      	cbz	r3, 8000cf6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000cf6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	408a      	lsls	r2, r1
 8000cfc:	4216      	tst	r6, r2
 8000cfe:	d038      	beq.n	8000d72 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	06c6      	lsls	r6, r0, #27
 8000d06:	d534      	bpl.n	8000d72 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d08:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d0a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d0e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d10:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d12:	d125      	bne.n	8000d60 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d14:	f022 0216 	bic.w	r2, r2, #22
 8000d18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d20:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d22:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d24:	b90a      	cbnz	r2, 8000d2a <HAL_DMA_IRQHandler+0xc6>
 8000d26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d28:	b11a      	cbz	r2, 8000d32 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	f022 0208 	bic.w	r2, r2, #8
 8000d30:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d32:	233f      	movs	r3, #63	; 0x3f
 8000d34:	408b      	lsls	r3, r1
 8000d36:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d44:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000d46:	b10b      	cbz	r3, 8000d4c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4798      	blx	r3
}
 8000d4c:	b003      	add	sp, #12
 8000d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	05d2      	lsls	r2, r2, #23
 8000d54:	d4c9      	bmi.n	8000cea <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	f022 0208 	bic.w	r2, r2, #8
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e7c4      	b.n	8000cea <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d60:	0350      	lsls	r0, r2, #13
 8000d62:	d528      	bpl.n	8000db6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	0319      	lsls	r1, r3, #12
 8000d68:	d432      	bmi.n	8000dd0 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000d6c:	b10b      	cbz	r3, 8000d72 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000d6e:	4620      	mov	r0, r4
 8000d70:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0e9      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d7a:	07da      	lsls	r2, r3, #31
 8000d7c:	d519      	bpl.n	8000db2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d7e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000d80:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000d86:	6813      	ldr	r3, [r2, #0]
 8000d88:	f023 0301 	bic.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000d8e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d92:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	d302      	bcc.n	8000da6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000da0:	6813      	ldr	r3, [r2, #0]
 8000da2:	07db      	lsls	r3, r3, #31
 8000da4:	d4f7      	bmi.n	8000d96 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000da6:	2300      	movs	r3, #0
 8000da8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000dac:	2301      	movs	r3, #1
 8000dae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000db2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000db4:	e7c7      	b.n	8000d46 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000dbc:	d108      	bne.n	8000dd0 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000dbe:	6819      	ldr	r1, [r3, #0]
 8000dc0:	f021 0110 	bic.w	r1, r1, #16
 8000dc4:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000dc6:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000dc8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000dcc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000dd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000dd2:	e7cb      	b.n	8000d6c <HAL_DMA_IRQHandler+0x108>
 8000dd4:	20000014 	.word	0x20000014

08000dd8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8000dd8:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dda:	6886      	ldr	r6, [r0, #8]
 8000ddc:	2e80      	cmp	r6, #128	; 0x80
 8000dde:	d104      	bne.n	8000dea <HAL_DMAEx_MultiBufferStart_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000dea:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000dee:	2c01      	cmp	r4, #1
 8000df0:	f000 81d4 	beq.w	800119c <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 8000df4:	2401      	movs	r4, #1
 8000df6:	2500      	movs	r5, #0
 8000df8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dfc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000e00:	2c01      	cmp	r4, #1
 8000e02:	f04f 0402 	mov.w	r4, #2
 8000e06:	f040 81c7 	bne.w	8001198 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e0a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e0e:	2e40      	cmp	r6, #64	; 0x40
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000e10:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e12:	6545      	str	r5, [r0, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000e14:	6825      	ldr	r5, [r4, #0]
 8000e16:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 8000e1a:	6025      	str	r5, [r4, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8000e1c:	6123      	str	r3, [r4, #16]
  hdma->Instance->NDTR = DataLength;
 8000e1e:	9b04      	ldr	r3, [sp, #16]
 8000e20:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e22:	d13f      	bne.n	8000ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e24:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e26:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e28:	4bb0      	ldr	r3, [pc, #704]	; (80010ec <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d942      	bls.n	8000eb4 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
 8000e2e:	3318      	adds	r3, #24
 8000e30:	429c      	cmp	r4, r3
 8000e32:	d03a      	beq.n	8000eaa <HAL_DMAEx_MultiBufferStart_IT+0xd2>
 8000e34:	4aae      	ldr	r2, [pc, #696]	; (80010f0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8000e36:	4294      	cmp	r4, r2
 8000e38:	d039      	beq.n	8000eae <HAL_DMAEx_MultiBufferStart_IT+0xd6>
 8000e3a:	3218      	adds	r2, #24
 8000e3c:	4294      	cmp	r4, r2
 8000e3e:	bf14      	ite	ne
 8000e40:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000e44:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000e48:	49aa      	ldr	r1, [pc, #680]	; (80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e4a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e4c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e4e:	f040 80b3 	bne.w	8000fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1e0>
 8000e52:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e54:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e56:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e58:	f040 80e6 	bne.w	8001028 <HAL_DMAEx_MultiBufferStart_IT+0x250>
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	49a5      	ldr	r1, [pc, #660]	; (80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e60:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e62:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e64:	f040 8118 	bne.w	8001098 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 8000e68:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000e6a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e6c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000e6e:	f040 815f 	bne.w	8001130 <HAL_DMAEx_MultiBufferStart_IT+0x358>
 8000e72:	2301      	movs	r3, #1
 8000e74:	4a9f      	ldr	r2, [pc, #636]	; (80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8000e76:	60d3      	str	r3, [r2, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	f043 0316 	orr.w	r3, r3, #22
 8000e7e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000e80:	6963      	ldr	r3, [r4, #20]
 8000e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e86:	6163      	str	r3, [r4, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e8a:	b90b      	cbnz	r3, 8000e90 <HAL_DMAEx_MultiBufferStart_IT+0xb8>
 8000e8c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000e8e:	b11b      	cbz	r3, 8000e98 <HAL_DMAEx_MultiBufferStart_IT+0xc0>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma); 
 8000e98:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000ea4:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000ea6:	60e2      	str	r2, [r4, #12]
 8000ea8:	e7be      	b.n	8000e28 <HAL_DMAEx_MultiBufferStart_IT+0x50>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eaa:	2220      	movs	r2, #32
 8000eac:	e7cc      	b.n	8000e48 <HAL_DMAEx_MultiBufferStart_IT+0x70>
 8000eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eb2:	e7c9      	b.n	8000e48 <HAL_DMAEx_MultiBufferStart_IT+0x70>
 8000eb4:	4b90      	ldr	r3, [pc, #576]	; (80010f8 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	d92a      	bls.n	8000f10 <HAL_DMAEx_MultiBufferStart_IT+0x138>
 8000eba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000ebe:	429c      	cmp	r4, r3
 8000ec0:	d021      	beq.n	8000f06 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8000ec2:	4a8e      	ldr	r2, [pc, #568]	; (80010fc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8000ec4:	4294      	cmp	r4, r2
 8000ec6:	d020      	beq.n	8000f0a <HAL_DMAEx_MultiBufferStart_IT+0x132>
 8000ec8:	3218      	adds	r2, #24
 8000eca:	4294      	cmp	r4, r2
 8000ecc:	bf14      	ite	ne
 8000ece:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000ed2:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000ed6:	4987      	ldr	r1, [pc, #540]	; (80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ed8:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eda:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000edc:	d17a      	bne.n	8000fd4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8000ede:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ee0:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ee2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ee4:	f040 80ae 	bne.w	8001044 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8000ee8:	2208      	movs	r2, #8
 8000eea:	4982      	ldr	r1, [pc, #520]	; (80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000eec:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000eee:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ef0:	f040 80e0 	bne.w	80010b4 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 8000ef4:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000ef6:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000ef8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000efa:	f040 8126 	bne.w	800114a <HAL_DMAEx_MultiBufferStart_IT+0x372>
 8000efe:	2301      	movs	r3, #1
 8000f00:	4a7c      	ldr	r2, [pc, #496]	; (80010f4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8000f02:	6093      	str	r3, [r2, #8]
 8000f04:	e7b8      	b.n	8000e78 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f06:	2220      	movs	r2, #32
 8000f08:	e7e5      	b.n	8000ed6 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8000f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f0e:	e7e2      	b.n	8000ed6 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8000f10:	4b7b      	ldr	r3, [pc, #492]	; (8001100 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8000f12:	429c      	cmp	r4, r3
 8000f14:	d928      	bls.n	8000f68 <HAL_DMAEx_MultiBufferStart_IT+0x190>
 8000f16:	3318      	adds	r3, #24
 8000f18:	429c      	cmp	r4, r3
 8000f1a:	d020      	beq.n	8000f5e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8000f1c:	4a79      	ldr	r2, [pc, #484]	; (8001104 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8000f1e:	4294      	cmp	r4, r2
 8000f20:	d01f      	beq.n	8000f62 <HAL_DMAEx_MultiBufferStart_IT+0x18a>
 8000f22:	3218      	adds	r2, #24
 8000f24:	4294      	cmp	r4, r2
 8000f26:	bf14      	ite	ne
 8000f28:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000f2c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000f30:	4975      	ldr	r1, [pc, #468]	; (8001108 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f32:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f34:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f36:	d15b      	bne.n	8000ff0 <HAL_DMAEx_MultiBufferStart_IT+0x218>
 8000f38:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f3a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f3c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f3e:	f040 808f 	bne.w	8001060 <HAL_DMAEx_MultiBufferStart_IT+0x288>
 8000f42:	2208      	movs	r2, #8
 8000f44:	4970      	ldr	r1, [pc, #448]	; (8001108 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f46:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f48:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f4a:	f040 80c1 	bne.w	80010d0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>
 8000f4e:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f50:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f52:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f54:	f040 8106 	bne.w	8001164 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	4a6b      	ldr	r2, [pc, #428]	; (8001108 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8000f5c:	e78b      	b.n	8000e76 <HAL_DMAEx_MultiBufferStart_IT+0x9e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f5e:	2220      	movs	r2, #32
 8000f60:	e7e6      	b.n	8000f30 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8000f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f66:	e7e3      	b.n	8000f30 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8000f68:	4b68      	ldr	r3, [pc, #416]	; (800110c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8000f6a:	429c      	cmp	r4, r3
 8000f6c:	d01f      	beq.n	8000fae <HAL_DMAEx_MultiBufferStart_IT+0x1d6>
 8000f6e:	4a68      	ldr	r2, [pc, #416]	; (8001110 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8000f70:	4294      	cmp	r4, r2
 8000f72:	d01e      	beq.n	8000fb2 <HAL_DMAEx_MultiBufferStart_IT+0x1da>
 8000f74:	3218      	adds	r2, #24
 8000f76:	4294      	cmp	r4, r2
 8000f78:	bf14      	ite	ne
 8000f7a:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000f7e:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000f82:	4961      	ldr	r1, [pc, #388]	; (8001108 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f84:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f86:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f88:	d140      	bne.n	800100c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8000f8a:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f8c:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f8e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f90:	d174      	bne.n	800107c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>
 8000f92:	2208      	movs	r2, #8
 8000f94:	495c      	ldr	r1, [pc, #368]	; (8001108 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f96:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f98:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f9a:	f040 80bb 	bne.w	8001114 <HAL_DMAEx_MultiBufferStart_IT+0x33c>
 8000f9e:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000fa0:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fa2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000fa4:	f040 80eb 	bne.w	800117e <HAL_DMAEx_MultiBufferStart_IT+0x3a6>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4a57      	ldr	r2, [pc, #348]	; (8001108 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8000fac:	e7a9      	b.n	8000f02 <HAL_DMAEx_MultiBufferStart_IT+0x12a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fae:	2220      	movs	r2, #32
 8000fb0:	e7e7      	b.n	8000f82 <HAL_DMAEx_MultiBufferStart_IT+0x1aa>
 8000fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb6:	e7e4      	b.n	8000f82 <HAL_DMAEx_MultiBufferStart_IT+0x1aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fb8:	4a4d      	ldr	r2, [pc, #308]	; (80010f0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8000fba:	4294      	cmp	r4, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8000fbe:	3218      	adds	r2, #24
 8000fc0:	4294      	cmp	r4, r2
 8000fc2:	bf14      	ite	ne
 8000fc4:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8000fc8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000fcc:	e742      	b.n	8000e54 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
 8000fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd2:	e73f      	b.n	8000e54 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
 8000fd4:	4a49      	ldr	r2, [pc, #292]	; (80010fc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8000fd6:	4294      	cmp	r4, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8000fda:	3218      	adds	r2, #24
 8000fdc:	4294      	cmp	r4, r2
 8000fde:	bf14      	ite	ne
 8000fe0:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8000fe4:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000fe8:	e77a      	b.n	8000ee0 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 8000fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fee:	e777      	b.n	8000ee0 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 8000ff0:	4a44      	ldr	r2, [pc, #272]	; (8001104 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8000ff2:	4294      	cmp	r4, r2
 8000ff4:	d007      	beq.n	8001006 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
 8000ff6:	3218      	adds	r2, #24
 8000ff8:	4294      	cmp	r4, r2
 8000ffa:	bf14      	ite	ne
 8000ffc:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8001000:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001004:	e799      	b.n	8000f3a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100a:	e796      	b.n	8000f3a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800100c:	4a40      	ldr	r2, [pc, #256]	; (8001110 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800100e:	4294      	cmp	r4, r2
 8001010:	d007      	beq.n	8001022 <HAL_DMAEx_MultiBufferStart_IT+0x24a>
 8001012:	3218      	adds	r2, #24
 8001014:	4294      	cmp	r4, r2
 8001016:	bf14      	ite	ne
 8001018:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800101c:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001020:	e7b4      	b.n	8000f8c <HAL_DMAEx_MultiBufferStart_IT+0x1b4>
 8001022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001026:	e7b1      	b.n	8000f8c <HAL_DMAEx_MultiBufferStart_IT+0x1b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001028:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800102a:	4294      	cmp	r4, r2
 800102c:	d007      	beq.n	800103e <HAL_DMAEx_MultiBufferStart_IT+0x266>
 800102e:	3218      	adds	r2, #24
 8001030:	4294      	cmp	r4, r2
 8001032:	bf14      	ite	ne
 8001034:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001038:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 800103c:	e70f      	b.n	8000e5e <HAL_DMAEx_MultiBufferStart_IT+0x86>
 800103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001042:	e70c      	b.n	8000e5e <HAL_DMAEx_MultiBufferStart_IT+0x86>
 8001044:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001046:	4294      	cmp	r4, r2
 8001048:	d007      	beq.n	800105a <HAL_DMAEx_MultiBufferStart_IT+0x282>
 800104a:	3218      	adds	r2, #24
 800104c:	4294      	cmp	r4, r2
 800104e:	bf14      	ite	ne
 8001050:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001054:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8001058:	e747      	b.n	8000eea <HAL_DMAEx_MultiBufferStart_IT+0x112>
 800105a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105e:	e744      	b.n	8000eea <HAL_DMAEx_MultiBufferStart_IT+0x112>
 8001060:	4a28      	ldr	r2, [pc, #160]	; (8001104 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001062:	4294      	cmp	r4, r2
 8001064:	d007      	beq.n	8001076 <HAL_DMAEx_MultiBufferStart_IT+0x29e>
 8001066:	3218      	adds	r2, #24
 8001068:	4294      	cmp	r4, r2
 800106a:	bf14      	ite	ne
 800106c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001070:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8001074:	e766      	b.n	8000f44 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107a:	e763      	b.n	8000f44 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800107c:	4a24      	ldr	r2, [pc, #144]	; (8001110 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800107e:	4294      	cmp	r4, r2
 8001080:	d007      	beq.n	8001092 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 8001082:	3218      	adds	r2, #24
 8001084:	4294      	cmp	r4, r2
 8001086:	bf14      	ite	ne
 8001088:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 800108c:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8001090:	e780      	b.n	8000f94 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
 8001092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001096:	e77d      	b.n	8000f94 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8001098:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800109a:	4294      	cmp	r4, r2
 800109c:	d007      	beq.n	80010ae <HAL_DMAEx_MultiBufferStart_IT+0x2d6>
 800109e:	3218      	adds	r2, #24
 80010a0:	4294      	cmp	r4, r2
 80010a2:	bf14      	ite	ne
 80010a4:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80010a8:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80010ac:	e6dd      	b.n	8000e6a <HAL_DMAEx_MultiBufferStart_IT+0x92>
 80010ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b2:	e6da      	b.n	8000e6a <HAL_DMAEx_MultiBufferStart_IT+0x92>
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80010b6:	4294      	cmp	r4, r2
 80010b8:	d007      	beq.n	80010ca <HAL_DMAEx_MultiBufferStart_IT+0x2f2>
 80010ba:	3218      	adds	r2, #24
 80010bc:	4294      	cmp	r4, r2
 80010be:	bf14      	ite	ne
 80010c0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80010c4:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80010c8:	e715      	b.n	8000ef6 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 80010ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ce:	e712      	b.n	8000ef6 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80010d2:	4294      	cmp	r4, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 80010d6:	3218      	adds	r2, #24
 80010d8:	4294      	cmp	r4, r2
 80010da:	bf14      	ite	ne
 80010dc:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80010e0:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80010e4:	e734      	b.n	8000f50 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 80010e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ea:	e731      	b.n	8000f50 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 80010ec:	40026458 	.word	0x40026458
 80010f0:	40026488 	.word	0x40026488
 80010f4:	40026400 	.word	0x40026400
 80010f8:	400260b8 	.word	0x400260b8
 80010fc:	40026428 	.word	0x40026428
 8001100:	40026058 	.word	0x40026058
 8001104:	40026088 	.word	0x40026088
 8001108:	40026000 	.word	0x40026000
 800110c:	40026010 	.word	0x40026010
 8001110:	40026028 	.word	0x40026028
 8001114:	4a22      	ldr	r2, [pc, #136]	; (80011a0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>)
 8001116:	4294      	cmp	r4, r2
 8001118:	d007      	beq.n	800112a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800111a:	3218      	adds	r2, #24
 800111c:	4294      	cmp	r4, r2
 800111e:	bf14      	ite	ne
 8001120:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8001124:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001128:	e73a      	b.n	8000fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1c8>
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	e737      	b.n	8000fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1c8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>)
 8001132:	429c      	cmp	r4, r3
 8001134:	d007      	beq.n	8001146 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 8001136:	3318      	adds	r3, #24
 8001138:	429c      	cmp	r4, r3
 800113a:	bf14      	ite	ne
 800113c:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8001140:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001144:	e696      	b.n	8000e74 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 8001146:	2340      	movs	r3, #64	; 0x40
 8001148:	e694      	b.n	8000e74 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>)
 800114c:	429c      	cmp	r4, r3
 800114e:	d007      	beq.n	8001160 <HAL_DMAEx_MultiBufferStart_IT+0x388>
 8001150:	3318      	adds	r3, #24
 8001152:	429c      	cmp	r4, r3
 8001154:	bf14      	ite	ne
 8001156:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800115a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800115e:	e6cf      	b.n	8000f00 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	e6cd      	b.n	8000f00 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_DMAEx_MultiBufferStart_IT+0x3d4>)
 8001166:	429c      	cmp	r4, r3
 8001168:	d007      	beq.n	800117a <HAL_DMAEx_MultiBufferStart_IT+0x3a2>
 800116a:	3318      	adds	r3, #24
 800116c:	429c      	cmp	r4, r3
 800116e:	bf14      	ite	ne
 8001170:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8001174:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001178:	e6ef      	b.n	8000f5a <HAL_DMAEx_MultiBufferStart_IT+0x182>
 800117a:	2340      	movs	r3, #64	; 0x40
 800117c:	e6ed      	b.n	8000f5a <HAL_DMAEx_MultiBufferStart_IT+0x182>
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>)
 8001180:	429c      	cmp	r4, r3
 8001182:	d007      	beq.n	8001194 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8001184:	3318      	adds	r3, #24
 8001186:	429c      	cmp	r4, r3
 8001188:	bf14      	ite	ne
 800118a:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800118e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001192:	e70a      	b.n	8000faa <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 8001194:	2340      	movs	r3, #64	; 0x40
 8001196:	e708      	b.n	8000faa <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
    __HAL_UNLOCK(hdma);	  
 8001198:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800119c:	2002      	movs	r0, #2
}
 800119e:	bd70      	pop	{r4, r5, r6, pc}
 80011a0:	40026028 	.word	0x40026028
 80011a4:	40026488 	.word	0x40026488
 80011a8:	40026428 	.word	0x40026428
 80011ac:	40026088 	.word	0x40026088

080011b0 <HAL_DMAEx_ChangeMemory>:
{
 80011b0:	6803      	ldr	r3, [r0, #0]
  if(memory == MEMORY0)
 80011b2:	b912      	cbnz	r2, 80011ba <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M0AR = Address;
 80011b4:	60d9      	str	r1, [r3, #12]
}
 80011b6:	2000      	movs	r0, #0
 80011b8:	4770      	bx	lr
    hdma->Instance->M1AR = Address;
 80011ba:	6119      	str	r1, [r3, #16]
 80011bc:	e7fb      	b.n	80011b6 <HAL_DMAEx_ChangeMemory+0x6>
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c4:	680b      	ldr	r3, [r1, #0]
{
 80011c6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800138c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011cc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011ce:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011d2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001390 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80011d6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80011dc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80011e4:	45b6      	cmp	lr, r6
 80011e6:	f040 80b3 	bne.w	8001350 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	684c      	ldr	r4, [r1, #4]
 80011ec:	f024 0710 	bic.w	r7, r4, #16
 80011f0:	2f02      	cmp	r7, #2
 80011f2:	d116      	bne.n	8001222 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80011f4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011f8:	f003 0b07 	and.w	fp, r3, #7
 80011fc:	f04f 0c0f 	mov.w	ip, #15
 8001200:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001204:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001208:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800120c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001210:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001214:	690d      	ldr	r5, [r1, #16]
 8001216:	fa05 f50b 	lsl.w	r5, r5, fp
 800121a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800121e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001222:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001226:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001228:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800122c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001230:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001234:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001236:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800123a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800123e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001242:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8001246:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124a:	d811      	bhi.n	8001270 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800124c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800124e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001252:	68cf      	ldr	r7, [r1, #12]
 8001254:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001258:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800125c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800125e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001264:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001268:	409f      	lsls	r7, r3
 800126a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800126e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001270:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001272:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001274:	688f      	ldr	r7, [r1, #8]
 8001276:	fa07 f70a 	lsl.w	r7, r7, sl
 800127a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800127c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127e:	00e5      	lsls	r5, r4, #3
 8001280:	d566      	bpl.n	8001350 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001286:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800128a:	f003 0e03 	and.w	lr, r3, #3
 800128e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8001296:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800129a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80012a2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80012a6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80012aa:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80012ae:	9503      	str	r5, [sp, #12]
 80012b0:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012b2:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80012b6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012ba:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012be:	4d32      	ldr	r5, [pc, #200]	; (8001388 <HAL_GPIO_Init+0x1c8>)
 80012c0:	42a8      	cmp	r0, r5
 80012c2:	d04c      	beq.n	800135e <HAL_GPIO_Init+0x19e>
 80012c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012c8:	42a8      	cmp	r0, r5
 80012ca:	d04a      	beq.n	8001362 <HAL_GPIO_Init+0x1a2>
 80012cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012d0:	42a8      	cmp	r0, r5
 80012d2:	d048      	beq.n	8001366 <HAL_GPIO_Init+0x1a6>
 80012d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012d8:	42a8      	cmp	r0, r5
 80012da:	d046      	beq.n	800136a <HAL_GPIO_Init+0x1aa>
 80012dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012e0:	42a8      	cmp	r0, r5
 80012e2:	d044      	beq.n	800136e <HAL_GPIO_Init+0x1ae>
 80012e4:	4548      	cmp	r0, r9
 80012e6:	d044      	beq.n	8001372 <HAL_GPIO_Init+0x1b2>
 80012e8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80012ec:	42a8      	cmp	r0, r5
 80012ee:	d042      	beq.n	8001376 <HAL_GPIO_Init+0x1b6>
 80012f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012f4:	42a8      	cmp	r0, r5
 80012f6:	d040      	beq.n	800137a <HAL_GPIO_Init+0x1ba>
 80012f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012fc:	42a8      	cmp	r0, r5
 80012fe:	d03e      	beq.n	800137e <HAL_GPIO_Init+0x1be>
 8001300:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001304:	42a8      	cmp	r0, r5
 8001306:	bf14      	ite	ne
 8001308:	250a      	movne	r5, #10
 800130a:	2509      	moveq	r5, #9
 800130c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001310:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001314:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001318:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800131a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800131e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001320:	bf0c      	ite	eq
 8001322:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001324:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001326:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800132a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800132c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800132e:	bf0c      	ite	eq
 8001330:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001332:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001334:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001338:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800133a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800133c:	bf0c      	ite	eq
 800133e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001340:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001342:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001344:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001346:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001348:	bf54      	ite	pl
 800134a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800134c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800134e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001350:	3301      	adds	r3, #1
 8001352:	2b10      	cmp	r3, #16
 8001354:	f47f af3f 	bne.w	80011d6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001358:	b005      	add	sp, #20
 800135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800135e:	2500      	movs	r5, #0
 8001360:	e7d4      	b.n	800130c <HAL_GPIO_Init+0x14c>
 8001362:	2501      	movs	r5, #1
 8001364:	e7d2      	b.n	800130c <HAL_GPIO_Init+0x14c>
 8001366:	2502      	movs	r5, #2
 8001368:	e7d0      	b.n	800130c <HAL_GPIO_Init+0x14c>
 800136a:	2503      	movs	r5, #3
 800136c:	e7ce      	b.n	800130c <HAL_GPIO_Init+0x14c>
 800136e:	2504      	movs	r5, #4
 8001370:	e7cc      	b.n	800130c <HAL_GPIO_Init+0x14c>
 8001372:	2505      	movs	r5, #5
 8001374:	e7ca      	b.n	800130c <HAL_GPIO_Init+0x14c>
 8001376:	2506      	movs	r5, #6
 8001378:	e7c8      	b.n	800130c <HAL_GPIO_Init+0x14c>
 800137a:	2507      	movs	r5, #7
 800137c:	e7c6      	b.n	800130c <HAL_GPIO_Init+0x14c>
 800137e:	2508      	movs	r5, #8
 8001380:	e7c4      	b.n	800130c <HAL_GPIO_Init+0x14c>
 8001382:	bf00      	nop
 8001384:	40013c00 	.word	0x40013c00
 8001388:	40020000 	.word	0x40020000
 800138c:	40023800 	.word	0x40023800
 8001390:	40021400 	.word	0x40021400

08001394 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001394:	6903      	ldr	r3, [r0, #16]
 8001396:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001398:	bf14      	ite	ne
 800139a:	2001      	movne	r0, #1
 800139c:	2000      	moveq	r0, #0
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	b10a      	cbz	r2, 80013a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013a2:	6181      	str	r1, [r0, #24]
 80013a4:	4770      	bx	lr
 80013a6:	0409      	lsls	r1, r1, #16
 80013a8:	e7fb      	b.n	80013a2 <HAL_GPIO_WritePin+0x2>

080013aa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013aa:	6943      	ldr	r3, [r0, #20]
 80013ac:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013b0:	bf08      	it	eq
 80013b2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b4:	6181      	str	r1, [r0, #24]
 80013b6:	4770      	bx	lr

080013b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ba:	4604      	mov	r4, r0
 80013bc:	2800      	cmp	r0, #0
 80013be:	d04a      	beq.n	8001456 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013c8:	b91b      	cbnz	r3, 80013d2 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ca:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013ce:	f002 fba3 	bl	8003b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d2:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013d4:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013da:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013e6:	6862      	ldr	r2, [r4, #4]
 80013e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f8:	d124      	bne.n	8001444 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fe:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001400:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001402:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001404:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001406:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800140a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800140e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001416:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001418:	6922      	ldr	r2, [r4, #16]
 800141a:	430a      	orrs	r2, r1
 800141c:	69a1      	ldr	r1, [r4, #24]
 800141e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001422:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001424:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001426:	69e2      	ldr	r2, [r4, #28]
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001434:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001436:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001438:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800143c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800143e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001442:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001444:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001448:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800144a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800144c:	d1d8      	bne.n	8001400 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800144e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	e7d4      	b.n	8001400 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
}
 8001458:	bd10      	pop	{r4, pc}

0800145a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800145a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	2a20      	cmp	r2, #32
{
 8001462:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001464:	d11d      	bne.n	80014a2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001466:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800146a:	2b01      	cmp	r3, #1
 800146c:	d019      	beq.n	80014a2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800146e:	2324      	movs	r3, #36	; 0x24
 8001470:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001474:	6803      	ldr	r3, [r0, #0]
 8001476:	681c      	ldr	r4, [r3, #0]
 8001478:	f024 0401 	bic.w	r4, r4, #1
 800147c:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800147e:	681c      	ldr	r4, [r3, #0]
 8001480:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001484:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001486:	681c      	ldr	r4, [r3, #0]
 8001488:	4321      	orrs	r1, r4
 800148a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	f041 0101 	orr.w	r1, r1, #1
 8001492:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001494:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001496:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800149a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800149e:	4618      	mov	r0, r3
 80014a0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80014a2:	2002      	movs	r0, #2
  }
}
 80014a4:	bd10      	pop	{r4, pc}

080014a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014a6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80014ac:	b2e4      	uxtb	r4, r4
 80014ae:	2c20      	cmp	r4, #32
 80014b0:	d11c      	bne.n	80014ec <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d018      	beq.n	80014ec <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014ba:	2324      	movs	r3, #36	; 0x24
 80014bc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014c0:	6803      	ldr	r3, [r0, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014ca:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014cc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014d0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014d4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	f042 0201 	orr.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014de:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80014e0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80014e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80014ec:	2002      	movs	r0, #2
  }
}
 80014ee:	bd10      	pop	{r4, pc}

080014f0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80014f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014f6:	4c19      	ldr	r4, [pc, #100]	; (800155c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff f8aa 	bl	8000668 <HAL_GetTick>
 8001514:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001516:	6863      	ldr	r3, [r4, #4]
 8001518:	03da      	lsls	r2, r3, #15
 800151a:	d50c      	bpl.n	8001536 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001522:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001524:	f7ff f8a0 	bl	8000668 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001528:	4c0c      	ldr	r4, [pc, #48]	; (800155c <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800152a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800152c:	6863      	ldr	r3, [r4, #4]
 800152e:	039b      	lsls	r3, r3, #14
 8001530:	d50a      	bpl.n	8001548 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001532:	2000      	movs	r0, #0
 8001534:	e006      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001536:	f7ff f897 	bl	8000668 <HAL_GetTick>
 800153a:	1b40      	subs	r0, r0, r5
 800153c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001540:	d9e9      	bls.n	8001516 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001542:	2003      	movs	r0, #3
}
 8001544:	b003      	add	sp, #12
 8001546:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001548:	f7ff f88e 	bl	8000668 <HAL_GetTick>
 800154c:	1b40      	subs	r0, r0, r5
 800154e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001552:	d9eb      	bls.n	800152c <HAL_PWREx_EnableOverDrive+0x3c>
 8001554:	e7f5      	b.n	8001542 <HAL_PWREx_EnableOverDrive+0x52>
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001564:	4604      	mov	r4, r0
 8001566:	b918      	cbnz	r0, 8001570 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800156a:	b002      	add	sp, #8
 800156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001570:	6803      	ldr	r3, [r0, #0]
 8001572:	07d8      	lsls	r0, r3, #31
 8001574:	d410      	bmi.n	8001598 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	0799      	lsls	r1, r3, #30
 800157a:	d45e      	bmi.n	800163a <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	0719      	lsls	r1, r3, #28
 8001580:	f100 80a3 	bmi.w	80016ca <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	075a      	lsls	r2, r3, #29
 8001588:	f100 80c4 	bmi.w	8001714 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158c:	69a2      	ldr	r2, [r4, #24]
 800158e:	2a00      	cmp	r2, #0
 8001590:	f040 812e 	bne.w	80017f0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001594:	2000      	movs	r0, #0
 8001596:	e7e8      	b.n	800156a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001598:	4b93      	ldr	r3, [pc, #588]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	f002 020c 	and.w	r2, r2, #12
 80015a0:	2a04      	cmp	r2, #4
 80015a2:	d007      	beq.n	80015b4 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	f002 020c 	and.w	r2, r2, #12
 80015aa:	2a08      	cmp	r2, #8
 80015ac:	d10a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x64>
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	025a      	lsls	r2, r3, #9
 80015b2:	d507      	bpl.n	80015c4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	039b      	lsls	r3, r3, #14
 80015ba:	d5dc      	bpl.n	8001576 <HAL_RCC_OscConfig+0x16>
 80015bc:	6863      	ldr	r3, [r4, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1d9      	bne.n	8001576 <HAL_RCC_OscConfig+0x16>
 80015c2:	e7d1      	b.n	8001568 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	6863      	ldr	r3, [r4, #4]
 80015c6:	4d88      	ldr	r5, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d111      	bne.n	80015f2 <HAL_RCC_OscConfig+0x92>
 80015ce:	682b      	ldr	r3, [r5, #0]
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015d6:	f7ff f847 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4d83      	ldr	r5, [pc, #524]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80015dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	039f      	lsls	r7, r3, #14
 80015e2:	d4c8      	bmi.n	8001576 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff f840 	bl	8000668 <HAL_GetTick>
 80015e8:	1b80      	subs	r0, r0, r6
 80015ea:	2864      	cmp	r0, #100	; 0x64
 80015ec:	d9f7      	bls.n	80015de <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80015ee:	2003      	movs	r0, #3
 80015f0:	e7bb      	b.n	800156a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f2:	b99b      	cbnz	r3, 800161c <HAL_RCC_OscConfig+0xbc>
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	602b      	str	r3, [r5, #0]
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001604:	f7ff f830 	bl	8000668 <HAL_GetTick>
 8001608:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	682b      	ldr	r3, [r5, #0]
 800160c:	0398      	lsls	r0, r3, #14
 800160e:	d5b2      	bpl.n	8001576 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff f82a 	bl	8000668 <HAL_GetTick>
 8001614:	1b80      	subs	r0, r0, r6
 8001616:	2864      	cmp	r0, #100	; 0x64
 8001618:	d9f7      	bls.n	800160a <HAL_RCC_OscConfig+0xaa>
 800161a:	e7e8      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	d103      	bne.n	800162c <HAL_RCC_OscConfig+0xcc>
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	602b      	str	r3, [r5, #0]
 800162a:	e7d0      	b.n	80015ce <HAL_RCC_OscConfig+0x6e>
 800162c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001630:	602b      	str	r3, [r5, #0]
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001638:	e7cc      	b.n	80015d4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163a:	4b6b      	ldr	r3, [pc, #428]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	f012 0f0c 	tst.w	r2, #12
 8001642:	d007      	beq.n	8001654 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	f002 020c 	and.w	r2, r2, #12
 800164a:	2a08      	cmp	r2, #8
 800164c:	d111      	bne.n	8001672 <HAL_RCC_OscConfig+0x112>
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	0259      	lsls	r1, r3, #9
 8001652:	d40e      	bmi.n	8001672 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001654:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	0792      	lsls	r2, r2, #30
 800165a:	d502      	bpl.n	8001662 <HAL_RCC_OscConfig+0x102>
 800165c:	68e2      	ldr	r2, [r4, #12]
 800165e:	2a01      	cmp	r2, #1
 8001660:	d182      	bne.n	8001568 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	6921      	ldr	r1, [r4, #16]
 8001666:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800166a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800166e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001670:	e784      	b.n	800157c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001672:	68e3      	ldr	r3, [r4, #12]
 8001674:	4d5c      	ldr	r5, [pc, #368]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 8001676:	b1bb      	cbz	r3, 80016a8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001678:	682b      	ldr	r3, [r5, #0]
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001680:	f7fe fff2 	bl	8000668 <HAL_GetTick>
 8001684:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	079f      	lsls	r7, r3, #30
 800168a:	d507      	bpl.n	800169c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	6922      	ldr	r2, [r4, #16]
 8001690:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001694:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	e76f      	b.n	800157c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169c:	f7fe ffe4 	bl	8000668 <HAL_GetTick>
 80016a0:	1b80      	subs	r0, r0, r6
 80016a2:	2802      	cmp	r0, #2
 80016a4:	d9ef      	bls.n	8001686 <HAL_RCC_OscConfig+0x126>
 80016a6:	e7a2      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016b0:	f7fe ffda 	bl	8000668 <HAL_GetTick>
 80016b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	0798      	lsls	r0, r3, #30
 80016ba:	f57f af5f 	bpl.w	800157c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016be:	f7fe ffd3 	bl	8000668 <HAL_GetTick>
 80016c2:	1b80      	subs	r0, r0, r6
 80016c4:	2802      	cmp	r0, #2
 80016c6:	d9f6      	bls.n	80016b6 <HAL_RCC_OscConfig+0x156>
 80016c8:	e791      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ca:	6963      	ldr	r3, [r4, #20]
 80016cc:	4d46      	ldr	r5, [pc, #280]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 80016ce:	b183      	cbz	r3, 80016f2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80016d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80016d8:	f7fe ffc6 	bl	8000668 <HAL_GetTick>
 80016dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016e0:	079b      	lsls	r3, r3, #30
 80016e2:	f53f af4f 	bmi.w	8001584 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e6:	f7fe ffbf 	bl	8000668 <HAL_GetTick>
 80016ea:	1b80      	subs	r0, r0, r6
 80016ec:	2802      	cmp	r0, #2
 80016ee:	d9f6      	bls.n	80016de <HAL_RCC_OscConfig+0x17e>
 80016f0:	e77d      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80016f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80016fa:	f7fe ffb5 	bl	8000668 <HAL_GetTick>
 80016fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001702:	079f      	lsls	r7, r3, #30
 8001704:	f57f af3e 	bpl.w	8001584 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001708:	f7fe ffae 	bl	8000668 <HAL_GetTick>
 800170c:	1b80      	subs	r0, r0, r6
 800170e:	2802      	cmp	r0, #2
 8001710:	d9f6      	bls.n	8001700 <HAL_RCC_OscConfig+0x1a0>
 8001712:	e76c      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 8001716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001718:	00d0      	lsls	r0, r2, #3
 800171a:	d427      	bmi.n	800176c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800171e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001730:	4d2e      	ldr	r5, [pc, #184]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	05d9      	lsls	r1, r3, #23
 8001736:	d51b      	bpl.n	8001770 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	68a3      	ldr	r3, [r4, #8]
 800173a:	4d2b      	ldr	r5, [pc, #172]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 800173c:	2b01      	cmp	r3, #1
 800173e:	d127      	bne.n	8001790 <HAL_RCC_OscConfig+0x230>
 8001740:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800174c:	f7fe ff8c 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	4f25      	ldr	r7, [pc, #148]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001752:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001756:	079b      	lsls	r3, r3, #30
 8001758:	d53f      	bpl.n	80017da <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800175a:	2e00      	cmp	r6, #0
 800175c:	f43f af16 	beq.w	800158c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001760:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <HAL_RCC_OscConfig+0x288>)
 8001762:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	e70f      	b.n	800158c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800176c:	2600      	movs	r6, #0
 800176e:	e7df      	b.n	8001730 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001778:	f7fe ff76 	bl	8000668 <HAL_GetTick>
 800177c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	05da      	lsls	r2, r3, #23
 8001782:	d4d9      	bmi.n	8001738 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7fe ff70 	bl	8000668 <HAL_GetTick>
 8001788:	1bc0      	subs	r0, r0, r7
 800178a:	2864      	cmp	r0, #100	; 0x64
 800178c:	d9f7      	bls.n	800177e <HAL_RCC_OscConfig+0x21e>
 800178e:	e72e      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	b9ab      	cbnz	r3, 80017be <HAL_RCC_OscConfig+0x25e>
 8001792:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	672b      	str	r3, [r5, #112]	; 0x70
 800179e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017a0:	f023 0304 	bic.w	r3, r3, #4
 80017a4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80017a6:	f7fe ff5f 	bl	8000668 <HAL_GetTick>
 80017aa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017ae:	0798      	lsls	r0, r3, #30
 80017b0:	d5d3      	bpl.n	800175a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7fe ff59 	bl	8000668 <HAL_GetTick>
 80017b6:	1bc0      	subs	r0, r0, r7
 80017b8:	4540      	cmp	r0, r8
 80017ba:	d9f7      	bls.n	80017ac <HAL_RCC_OscConfig+0x24c>
 80017bc:	e717      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017be:	2b05      	cmp	r3, #5
 80017c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017c2:	d103      	bne.n	80017cc <HAL_RCC_OscConfig+0x26c>
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	672b      	str	r3, [r5, #112]	; 0x70
 80017ca:	e7b9      	b.n	8001740 <HAL_RCC_OscConfig+0x1e0>
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	672b      	str	r3, [r5, #112]	; 0x70
 80017d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	e7b5      	b.n	8001746 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7fe ff45 	bl	8000668 <HAL_GetTick>
 80017de:	eba0 0008 	sub.w	r0, r0, r8
 80017e2:	42a8      	cmp	r0, r5
 80017e4:	d9b6      	bls.n	8001754 <HAL_RCC_OscConfig+0x1f4>
 80017e6:	e702      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f0:	4d24      	ldr	r5, [pc, #144]	; (8001884 <HAL_RCC_OscConfig+0x324>)
 80017f2:	68ab      	ldr	r3, [r5, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	f43f aeb5 	beq.w	8001568 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80017fe:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001800:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001806:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001808:	d12f      	bne.n	800186a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800180a:	f7fe ff2d 	bl	8000668 <HAL_GetTick>
 800180e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	0199      	lsls	r1, r3, #6
 8001814:	d423      	bmi.n	800185e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001816:	6a22      	ldr	r2, [r4, #32]
 8001818:	69e3      	ldr	r3, [r4, #28]
 800181a:	4313      	orrs	r3, r2
 800181c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800181e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001822:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001824:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001828:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800182a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800182e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	4c14      	ldr	r4, [pc, #80]	; (8001884 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001832:	0852      	lsrs	r2, r2, #1
 8001834:	3a01      	subs	r2, #1
 8001836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800183a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001842:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001844:	f7fe ff10 	bl	8000668 <HAL_GetTick>
 8001848:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	019a      	lsls	r2, r3, #6
 800184e:	f53f aea1 	bmi.w	8001594 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001852:	f7fe ff09 	bl	8000668 <HAL_GetTick>
 8001856:	1b40      	subs	r0, r0, r5
 8001858:	2802      	cmp	r0, #2
 800185a:	d9f6      	bls.n	800184a <HAL_RCC_OscConfig+0x2ea>
 800185c:	e6c7      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185e:	f7fe ff03 	bl	8000668 <HAL_GetTick>
 8001862:	1b80      	subs	r0, r0, r6
 8001864:	2802      	cmp	r0, #2
 8001866:	d9d3      	bls.n	8001810 <HAL_RCC_OscConfig+0x2b0>
 8001868:	e6c1      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800186a:	f7fe fefd 	bl	8000668 <HAL_GetTick>
 800186e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	019b      	lsls	r3, r3, #6
 8001874:	f57f ae8e 	bpl.w	8001594 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7fe fef6 	bl	8000668 <HAL_GetTick>
 800187c:	1b00      	subs	r0, r0, r4
 800187e:	2802      	cmp	r0, #2
 8001880:	d9f6      	bls.n	8001870 <HAL_RCC_OscConfig+0x310>
 8001882:	e6b4      	b.n	80015ee <HAL_RCC_OscConfig+0x8e>
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001888:	4910      	ldr	r1, [pc, #64]	; (80018cc <HAL_RCC_GetSysClockFreq+0x44>)
{
 800188a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800188c:	688b      	ldr	r3, [r1, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001896:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001898:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800189c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018a0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x48>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018aa:	bf18      	it	ne
 80018ac:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ae:	fba1 0100 	umull	r0, r1, r1, r0
 80018b2:	f7fe fd15 	bl	80002e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_RCC_GetSysClockFreq+0x44>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80018be:	3301      	adds	r3, #1
 80018c0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80018c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80018c6:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80018c8:	4801      	ldr	r0, [pc, #4]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018ca:	bd08      	pop	{r3, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	00f42400 	.word	0x00f42400

080018d4 <HAL_RCC_ClockConfig>:
{
 80018d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80018da:	4604      	mov	r4, r0
 80018dc:	b910      	cbnz	r0, 80018e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80018de:	2001      	movs	r0, #1
 80018e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4a46      	ldr	r2, [pc, #280]	; (8001a00 <HAL_RCC_ClockConfig+0x12c>)
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d328      	bcc.n	8001942 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	6821      	ldr	r1, [r4, #0]
 80018f2:	078f      	lsls	r7, r1, #30
 80018f4:	d430      	bmi.n	8001958 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	07c8      	lsls	r0, r1, #31
 80018f8:	d443      	bmi.n	8001982 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018fa:	4a41      	ldr	r2, [pc, #260]	; (8001a00 <HAL_RCC_ClockConfig+0x12c>)
 80018fc:	6813      	ldr	r3, [r2, #0]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	429d      	cmp	r5, r3
 8001904:	d367      	bcc.n	80019d6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001906:	6822      	ldr	r2, [r4, #0]
 8001908:	0751      	lsls	r1, r2, #29
 800190a:	d470      	bmi.n	80019ee <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	0713      	lsls	r3, r2, #28
 800190e:	d507      	bpl.n	8001920 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001910:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <HAL_RCC_ClockConfig+0x130>)
 8001912:	6921      	ldr	r1, [r4, #16]
 8001914:	6893      	ldr	r3, [r2, #8]
 8001916:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800191a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800191e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001920:	f7ff ffb2 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001924:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_ClockConfig+0x130>)
 8001926:	4a38      	ldr	r2, [pc, #224]	; (8001a08 <HAL_RCC_ClockConfig+0x134>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	40d8      	lsrs	r0, r3
 8001932:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_RCC_ClockConfig+0x138>)
 8001934:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001936:	2000      	movs	r0, #0
 8001938:	f7fe fe5a 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 800193c:	2000      	movs	r0, #0
 800193e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	6813      	ldr	r3, [r2, #0]
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	430b      	orrs	r3, r1
 800194a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194c:	6813      	ldr	r3, [r2, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4299      	cmp	r1, r3
 8001954:	d1c3      	bne.n	80018de <HAL_RCC_ClockConfig+0xa>
 8001956:	e7cb      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	f011 0f04 	tst.w	r1, #4
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_RCC_ClockConfig+0x130>)
 800195e:	d003      	beq.n	8001968 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001966:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	070e      	lsls	r6, r1, #28
 800196a:	d503      	bpl.n	8001974 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001972:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	68a0      	ldr	r0, [r4, #8]
 8001978:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800197c:	4302      	orrs	r2, r0
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	e7b9      	b.n	80018f6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	6861      	ldr	r1, [r4, #4]
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_RCC_ClockConfig+0x130>)
 8001986:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001988:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	d11c      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	d0a5      	beq.n	80018de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001998:	4e1a      	ldr	r6, [pc, #104]	; (8001a04 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199a:	f022 0203 	bic.w	r2, r2, #3
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80019a2:	f7fe fe61 	bl	8000668 <HAL_GetTick>
 80019a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a8:	68b3      	ldr	r3, [r6, #8]
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019b4:	d0a1      	beq.n	80018fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b6:	f7fe fe57 	bl	8000668 <HAL_GetTick>
 80019ba:	1bc0      	subs	r0, r0, r7
 80019bc:	4540      	cmp	r0, r8
 80019be:	d9f3      	bls.n	80019a8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80019c0:	2003      	movs	r0, #3
}
 80019c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c6:	2902      	cmp	r1, #2
 80019c8:	d102      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80019ce:	e7df      	b.n	8001990 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	f012 0f02 	tst.w	r2, #2
 80019d4:	e7dc      	b.n	8001990 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	6813      	ldr	r3, [r2, #0]
 80019d8:	f023 030f 	bic.w	r3, r3, #15
 80019dc:	432b      	orrs	r3, r5
 80019de:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	429d      	cmp	r5, r3
 80019e8:	f47f af79 	bne.w	80018de <HAL_RCC_ClockConfig+0xa>
 80019ec:	e78b      	b.n	8001906 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ee:	4905      	ldr	r1, [pc, #20]	; (8001a04 <HAL_RCC_ClockConfig+0x130>)
 80019f0:	68e0      	ldr	r0, [r4, #12]
 80019f2:	688b      	ldr	r3, [r1, #8]
 80019f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80019f8:	4303      	orrs	r3, r0
 80019fa:	608b      	str	r3, [r1, #8]
 80019fc:	e786      	b.n	800190c <HAL_RCC_ClockConfig+0x38>
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08004ee9 	.word	0x08004ee9
 8001a0c:	20000014 	.word	0x20000014

08001a10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a1e:	6810      	ldr	r0, [r2, #0]
}
 8001a20:	40d8      	lsrs	r0, r3
 8001a22:	4770      	bx	lr
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08004ef9 	.word	0x08004ef9
 8001a2c:	20000014 	.word	0x20000014

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a3e:	6810      	ldr	r0, [r2, #0]
}
 8001a40:	40d8      	lsrs	r0, r3
 8001a42:	4770      	bx	lr
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08004ef9 	.word	0x08004ef9
 8001a4c:	20000014 	.word	0x20000014

08001a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a54:	6802      	ldr	r2, [r0, #0]
{
 8001a56:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a58:	f012 0601 	ands.w	r6, r2, #1
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a5e:	4bba      	ldr	r3, [pc, #744]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a60:	6899      	ldr	r1, [r3, #8]
 8001a62:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001a66:	6099      	str	r1, [r3, #8]
 8001a68:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a6e:	fab6 f686 	clz	r6, r6
 8001a72:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a74:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a76:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001a7a:	d012      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a7c:	49b2      	ldr	r1, [pc, #712]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001a7e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001a80:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a84:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001a8c:	bf08      	it	eq
 8001a8e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a90:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a94:	bf16      	itet	ne
 8001a96:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001a9a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a9c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001aa2:	02d7      	lsls	r7, r2, #11
 8001aa4:	d510      	bpl.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001aa6:	48a8      	ldr	r0, [pc, #672]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001aa8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aaa:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001aae:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ab2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ab6:	ea43 0301 	orr.w	r3, r3, r1
 8001aba:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001abe:	f000 81a9 	beq.w	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001ac2:	2900      	cmp	r1, #0
 8001ac4:	bf08      	it	eq
 8001ac6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001ac8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001acc:	bf18      	it	ne
 8001ace:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad0:	0690      	lsls	r0, r2, #26
 8001ad2:	d531      	bpl.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b9c      	ldr	r3, [pc, #624]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ad6:	4f9d      	ldr	r7, [pc, #628]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ada:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af2:	f7fe fdb9 	bl	8000668 <HAL_GetTick>
 8001af6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	05d9      	lsls	r1, r3, #23
 8001afc:	f140 818c 	bpl.w	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b00:	4f91      	ldr	r7, [pc, #580]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b04:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b08:	f040 8191 	bne.w	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b0e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001b12:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001b16:	4a8c      	ldr	r2, [pc, #560]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b18:	f040 81af 	bne.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001b1c:	6891      	ldr	r1, [r2, #8]
 8001b1e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001b22:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001b26:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001b2a:	4301      	orrs	r1, r0
 8001b2c:	6091      	str	r1, [r2, #8]
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	06df      	lsls	r7, r3, #27
 8001b3c:	d50c      	bpl.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b3e:	4a82      	ldr	r2, [pc, #520]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b40:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001b44:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001b48:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001b4c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001b50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b52:	4301      	orrs	r1, r0
 8001b54:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b58:	0458      	lsls	r0, r3, #17
 8001b5a:	d508      	bpl.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b5c:	497a      	ldr	r1, [pc, #488]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b5e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001b60:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b64:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001b68:	4302      	orrs	r2, r0
 8001b6a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b6e:	0419      	lsls	r1, r3, #16
 8001b70:	d508      	bpl.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b72:	4975      	ldr	r1, [pc, #468]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b74:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001b76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b7a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001b7e:	4302      	orrs	r2, r0
 8001b80:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b84:	03da      	lsls	r2, r3, #15
 8001b86:	d508      	bpl.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b88:	496f      	ldr	r1, [pc, #444]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b8a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001b8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001b90:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001b94:	4302      	orrs	r2, r0
 8001b96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001b9a:	039f      	lsls	r7, r3, #14
 8001b9c:	d508      	bpl.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001b9e:	496a      	ldr	r1, [pc, #424]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ba0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001ba2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ba6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001baa:	4302      	orrs	r2, r0
 8001bac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bb0:	0658      	lsls	r0, r3, #25
 8001bb2:	d508      	bpl.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bb4:	4964      	ldr	r1, [pc, #400]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001bb6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001bb8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bbc:	f022 0203 	bic.w	r2, r2, #3
 8001bc0:	4302      	orrs	r2, r0
 8001bc2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bc6:	0619      	lsls	r1, r3, #24
 8001bc8:	d508      	bpl.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bca:	495f      	ldr	r1, [pc, #380]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001bcc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001bce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bd2:	f022 020c 	bic.w	r2, r2, #12
 8001bd6:	4302      	orrs	r2, r0
 8001bd8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bdc:	05da      	lsls	r2, r3, #23
 8001bde:	d508      	bpl.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001be0:	4959      	ldr	r1, [pc, #356]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001be2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001be4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001be8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001bec:	4302      	orrs	r2, r0
 8001bee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001bf2:	059f      	lsls	r7, r3, #22
 8001bf4:	d508      	bpl.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001bf6:	4954      	ldr	r1, [pc, #336]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001bf8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001bfa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001c02:	4302      	orrs	r2, r0
 8001c04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c08:	0558      	lsls	r0, r3, #21
 8001c0a:	d508      	bpl.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c0c:	494e      	ldr	r1, [pc, #312]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c18:	4302      	orrs	r2, r0
 8001c1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c1e:	0519      	lsls	r1, r3, #20
 8001c20:	d508      	bpl.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c22:	4949      	ldr	r1, [pc, #292]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c26:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c2e:	4302      	orrs	r2, r0
 8001c30:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001c34:	04da      	lsls	r2, r3, #19
 8001c36:	d508      	bpl.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001c38:	4943      	ldr	r1, [pc, #268]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c3a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001c3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c40:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001c44:	4302      	orrs	r2, r0
 8001c46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001c4a:	049f      	lsls	r7, r3, #18
 8001c4c:	d508      	bpl.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001c4e:	493e      	ldr	r1, [pc, #248]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c50:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001c52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c56:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001c5a:	4302      	orrs	r2, r0
 8001c5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c60:	0258      	lsls	r0, r3, #9
 8001c62:	d508      	bpl.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c64:	4938      	ldr	r1, [pc, #224]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c66:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001c68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c6c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001c70:	4302      	orrs	r2, r0
 8001c72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c76:	0299      	lsls	r1, r3, #10
 8001c78:	d50c      	bpl.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c7a:	4833      	ldr	r0, [pc, #204]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c7c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001c7e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001c82:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c86:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001c8a:	bf08      	it	eq
 8001c8c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001c94:	f013 0f08 	tst.w	r3, #8
 8001c98:	bf18      	it	ne
 8001c9a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c9c:	035a      	lsls	r2, r3, #13
 8001c9e:	d508      	bpl.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ca0:	4929      	ldr	r1, [pc, #164]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ca2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001ca4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ca8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cac:	4302      	orrs	r2, r0
 8001cae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001cb2:	021f      	lsls	r7, r3, #8
 8001cb4:	d509      	bpl.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001cb6:	4924      	ldr	r1, [pc, #144]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cb8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001cbc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cc0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001cc4:	4302      	orrs	r2, r0
 8001cc6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001cca:	0158      	lsls	r0, r3, #5
 8001ccc:	d509      	bpl.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001cce:	491e      	ldr	r1, [pc, #120]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cd0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001cd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cd8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001cdc:	4302      	orrs	r2, r0
 8001cde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ce2:	0119      	lsls	r1, r3, #4
 8001ce4:	d509      	bpl.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ce6:	4918      	ldr	r1, [pc, #96]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ce8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001cec:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001cf0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001cf4:	4302      	orrs	r2, r0
 8001cf6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001cfa:	00da      	lsls	r2, r3, #3
 8001cfc:	d509      	bpl.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001cfe:	4912      	ldr	r1, [pc, #72]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d00:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001d04:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001d08:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d0c:	4302      	orrs	r2, r0
 8001d0e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d12:	2e01      	cmp	r6, #1
 8001d14:	f000 80b5 	beq.w	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d1c:	f000 80b1 	beq.w	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001d20:	2d01      	cmp	r5, #1
 8001d22:	d175      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d24:	4d08      	ldr	r5, [pc, #32]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d2e:	f7fe fc9b 	bl	8000668 <HAL_GetTick>
 8001d32:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d34:	682b      	ldr	r3, [r5, #0]
 8001d36:	009f      	lsls	r7, r3, #2
 8001d38:	f100 8127 	bmi.w	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001d3c:	6821      	ldr	r1, [r4, #0]
 8001d3e:	030e      	lsls	r6, r1, #12
 8001d40:	d506      	bpl.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001d42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d44:	b143      	cbz	r3, 8001d58 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001d46:	e003      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	02cd      	lsls	r5, r1, #11
 8001d52:	d51d      	bpl.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d56:	b9db      	cbnz	r3, 8001d90 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d58:	4a93      	ldr	r2, [pc, #588]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001d5e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001d62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d66:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001d6a:	4303      	orrs	r3, r0
 8001d6c:	6960      	ldr	r0, [r4, #20]
 8001d6e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d72:	69a0      	ldr	r0, [r4, #24]
 8001d74:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d7c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d82:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001d86:	3801      	subs	r0, #1
 8001d88:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001d8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d90:	0288      	lsls	r0, r1, #10
 8001d92:	d515      	bpl.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001d94:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d9a:	d111      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d9c:	4a82      	ldr	r2, [pc, #520]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001d9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001da2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001da6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001daa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001dae:	4303      	orrs	r3, r0
 8001db0:	6960      	ldr	r0, [r4, #20]
 8001db2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001db6:	6a20      	ldr	r0, [r4, #32]
 8001db8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001dc0:	070a      	lsls	r2, r1, #28
 8001dc2:	d519      	bpl.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001dc4:	4978      	ldr	r1, [pc, #480]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001dc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001dca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001dce:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	6962      	ldr	r2, [r4, #20]
 8001dda:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001dde:	69e2      	ldr	r2, [r4, #28]
 8001de0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001de8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001dec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001df8:	4c6b      	ldr	r4, [pc, #428]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e02:	f7fe fc31 	bl	8000668 <HAL_GetTick>
 8001e06:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f140 80c4 	bpl.w	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e10:	2000      	movs	r0, #0
 8001e12:	e009      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001e14:	2601      	movs	r6, #1
 8001e16:	e657      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e18:	f7fe fc26 	bl	8000668 <HAL_GetTick>
 8001e1c:	eba0 0008 	sub.w	r0, r0, r8
 8001e20:	2864      	cmp	r0, #100	; 0x64
 8001e22:	f67f ae69 	bls.w	8001af8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001e26:	2003      	movs	r0, #3
}
 8001e28:	b003      	add	sp, #12
 8001e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e30:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e34:	4293      	cmp	r3, r2
 8001e36:	f43f ae69 	beq.w	8001b0c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e46:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e4e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001e50:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e54:	07da      	lsls	r2, r3, #31
 8001e56:	f57f ae59 	bpl.w	8001b0c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fc05 	bl	8000668 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001e62:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e66:	079b      	lsls	r3, r3, #30
 8001e68:	f53f ae50 	bmi.w	8001b0c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7fe fbfc 	bl	8000668 <HAL_GetTick>
 8001e70:	eba0 0008 	sub.w	r0, r0, r8
 8001e74:	4548      	cmp	r0, r9
 8001e76:	d9f5      	bls.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001e78:	e7d5      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e7a:	6891      	ldr	r1, [r2, #8]
 8001e7c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001e80:	e654      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001e82:	4e49      	ldr	r6, [pc, #292]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001e84:	6833      	ldr	r3, [r6, #0]
 8001e86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e8a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001e8c:	f7fe fbec 	bl	8000668 <HAL_GetTick>
 8001e90:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e92:	6833      	ldr	r3, [r6, #0]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	d472      	bmi.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e98:	6822      	ldr	r2, [r4, #0]
 8001e9a:	07d7      	lsls	r7, r2, #31
 8001e9c:	d512      	bpl.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ea0:	b983      	cbnz	r3, 8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ea2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ea6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eae:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	6861      	ldr	r1, [r4, #4]
 8001eb6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001eba:	68a1      	ldr	r1, [r4, #8]
 8001ebc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ec0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ec4:	0316      	lsls	r6, r2, #12
 8001ec6:	d503      	bpl.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001ec8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ece:	d005      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001ed0:	02d0      	lsls	r0, r2, #11
 8001ed2:	d51e      	bpl.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eda:	d11a      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001edc:	4932      	ldr	r1, [pc, #200]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ede:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ee2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eea:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001eee:	4303      	orrs	r3, r0
 8001ef0:	6860      	ldr	r0, [r4, #4]
 8001ef2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ef6:	68e0      	ldr	r0, [r4, #12]
 8001ef8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001efc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f00:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f06:	f020 001f 	bic.w	r0, r0, #31
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	4303      	orrs	r3, r0
 8001f0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f12:	01d1      	lsls	r1, r2, #7
 8001f14:	d511      	bpl.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f16:	4924      	ldr	r1, [pc, #144]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f18:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f1c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f20:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001f24:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	6860      	ldr	r0, [r4, #4]
 8001f2c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001f30:	6920      	ldr	r0, [r4, #16]
 8001f32:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001f36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f3a:	0192      	lsls	r2, r2, #6
 8001f3c:	d50d      	bpl.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f3e:	6923      	ldr	r3, [r4, #16]
 8001f40:	6862      	ldr	r2, [r4, #4]
 8001f42:	041b      	lsls	r3, r3, #16
 8001f44:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f48:	68e2      	ldr	r2, [r4, #12]
 8001f4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f4e:	68a2      	ldr	r2, [r4, #8]
 8001f50:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001f5a:	4e13      	ldr	r6, [pc, #76]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f5c:	6833      	ldr	r3, [r6, #0]
 8001f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f62:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001f64:	f7fe fb80 	bl	8000668 <HAL_GetTick>
 8001f68:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f6a:	6833      	ldr	r3, [r6, #0]
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	f53f aed7 	bmi.w	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f72:	f7fe fb79 	bl	8000668 <HAL_GetTick>
 8001f76:	1bc0      	subs	r0, r0, r7
 8001f78:	2864      	cmp	r0, #100	; 0x64
 8001f7a:	d9f6      	bls.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001f7c:	e753      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f7e:	f7fe fb73 	bl	8000668 <HAL_GetTick>
 8001f82:	1bc0      	subs	r0, r0, r7
 8001f84:	2864      	cmp	r0, #100	; 0x64
 8001f86:	d984      	bls.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001f88:	e74d      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f8a:	f7fe fb6d 	bl	8000668 <HAL_GetTick>
 8001f8e:	1b80      	subs	r0, r0, r6
 8001f90:	2864      	cmp	r0, #100	; 0x64
 8001f92:	f67f aecf 	bls.w	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001f96:	e746      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f98:	f7fe fb66 	bl	8000668 <HAL_GetTick>
 8001f9c:	1b40      	subs	r0, r0, r5
 8001f9e:	2864      	cmp	r0, #100	; 0x64
 8001fa0:	f67f af32 	bls.w	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001fa4:	e73f      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fac:	6a03      	ldr	r3, [r0, #32]
 8001fae:	f023 0301 	bic.w	r3, r3, #1
{
 8001fb2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fb4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fb6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fb8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fba:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fbc:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8001fc0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fc2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001fc6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001fca:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fcc:	688d      	ldr	r5, [r1, #8]
 8001fce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fd0:	4d0e      	ldr	r5, [pc, #56]	; (800200c <TIM_OC1_SetConfig+0x60>)
 8001fd2:	42a8      	cmp	r0, r5
 8001fd4:	d002      	beq.n	8001fdc <TIM_OC1_SetConfig+0x30>
 8001fd6:	4e0e      	ldr	r6, [pc, #56]	; (8002010 <TIM_OC1_SetConfig+0x64>)
 8001fd8:	42b0      	cmp	r0, r6
 8001fda:	d111      	bne.n	8002000 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fdc:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fe0:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe2:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8001fe4:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fec:	d002      	beq.n	8001ff4 <TIM_OC1_SetConfig+0x48>
 8001fee:	4d08      	ldr	r5, [pc, #32]	; (8002010 <TIM_OC1_SetConfig+0x64>)
 8001ff0:	42a8      	cmp	r0, r5
 8001ff2:	d105      	bne.n	8002000 <TIM_OC1_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ff4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ff6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ffa:	698e      	ldr	r6, [r1, #24]
 8001ffc:	4335      	orrs	r5, r6
 8001ffe:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002000:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002002:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002004:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002006:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002008:	6203      	str	r3, [r0, #32]
 800200a:	bd70      	pop	{r4, r5, r6, pc}
 800200c:	40010000 	.word	0x40010000
 8002010:	40010400 	.word	0x40010400

08002014 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002014:	6a03      	ldr	r3, [r0, #32]
 8002016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800201a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800201c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002020:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002022:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8002028:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800202a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800202e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002032:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002034:	688d      	ldr	r5, [r1, #8]
 8002036:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800203a:	4d11      	ldr	r5, [pc, #68]	; (8002080 <TIM_OC3_SetConfig+0x6c>)
 800203c:	42a8      	cmp	r0, r5
 800203e:	d003      	beq.n	8002048 <TIM_OC3_SetConfig+0x34>
 8002040:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002044:	42a8      	cmp	r0, r5
 8002046:	d114      	bne.n	8002072 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002048:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800204a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800204e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002052:	4d0b      	ldr	r5, [pc, #44]	; (8002080 <TIM_OC3_SetConfig+0x6c>)
 8002054:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800205a:	d003      	beq.n	8002064 <TIM_OC3_SetConfig+0x50>
 800205c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002060:	42a8      	cmp	r0, r5
 8002062:	d106      	bne.n	8002072 <TIM_OC3_SetConfig+0x5e>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002064:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002066:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800206a:	698e      	ldr	r6, [r1, #24]
 800206c:	4335      	orrs	r5, r6
 800206e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002072:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002074:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002076:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002078:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800207a:	6203      	str	r3, [r0, #32]
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000

08002084 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002084:	6a03      	ldr	r3, [r0, #32]
 8002086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800208a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800208c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002090:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002092:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002098:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800209a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020a6:	688d      	ldr	r5, [r1, #8]
 80020a8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ac:	4d08      	ldr	r5, [pc, #32]	; (80020d0 <TIM_OC4_SetConfig+0x4c>)
 80020ae:	42a8      	cmp	r0, r5
 80020b0:	d003      	beq.n	80020ba <TIM_OC4_SetConfig+0x36>
 80020b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020b6:	42a8      	cmp	r0, r5
 80020b8:	d104      	bne.n	80020c4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020ba:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020be:	694d      	ldr	r5, [r1, #20]
 80020c0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020c8:	684b      	ldr	r3, [r1, #4]
 80020ca:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020cc:	6202      	str	r2, [r0, #32]
 80020ce:	bd30      	pop	{r4, r5, pc}
 80020d0:	40010000 	.word	0x40010000

080020d4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020d4:	6a03      	ldr	r3, [r0, #32]
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80020da:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020de:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80020e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80020e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80020f2:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80020f4:	688d      	ldr	r5, [r1, #8]
 80020f6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fa:	4d09      	ldr	r5, [pc, #36]	; (8002120 <TIM_OC5_SetConfig+0x4c>)
 80020fc:	42a8      	cmp	r0, r5
 80020fe:	d003      	beq.n	8002108 <TIM_OC5_SetConfig+0x34>
 8002100:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002104:	42a8      	cmp	r0, r5
 8002106:	d104      	bne.n	8002112 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002108:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800210c:	694d      	ldr	r5, [r1, #20]
 800210e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002112:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002114:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002116:	684b      	ldr	r3, [r1, #4]
 8002118:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800211a:	6202      	str	r2, [r0, #32]
 800211c:	bd30      	pop	{r4, r5, pc}
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000

08002124 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002124:	6a03      	ldr	r3, [r0, #32]
 8002126:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800212a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800212c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800212e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002130:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002132:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002134:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002138:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800213a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002142:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002146:	688d      	ldr	r5, [r1, #8]
 8002148:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800214c:	4d08      	ldr	r5, [pc, #32]	; (8002170 <TIM_OC6_SetConfig+0x4c>)
 800214e:	42a8      	cmp	r0, r5
 8002150:	d003      	beq.n	800215a <TIM_OC6_SetConfig+0x36>
 8002152:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002156:	42a8      	cmp	r0, r5
 8002158:	d104      	bne.n	8002164 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800215a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800215e:	694d      	ldr	r5, [r1, #20]
 8002160:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002164:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002166:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002168:	684b      	ldr	r3, [r1, #4]
 800216a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216c:	6202      	str	r2, [r0, #32]
 800216e:	bd30      	pop	{r4, r5, pc}
 8002170:	40010000 	.word	0x40010000

08002174 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002174:	6803      	ldr	r3, [r0, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_TIM_Base_Start_IT+0x28>)
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002184:	2a06      	cmp	r2, #6
 8002186:	d006      	beq.n	8002196 <HAL_TIM_Base_Start_IT+0x22>
 8002188:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800218c:	d003      	beq.n	8002196 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
}
 8002196:	2000      	movs	r0, #0
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	00010007 	.word	0x00010007

080021a0 <HAL_TIM_PWM_MspInit>:
 80021a0:	4770      	bx	lr

080021a2 <HAL_TIM_OC_DelayElapsedCallback>:
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_IC_CaptureCallback>:
 80021a4:	4770      	bx	lr

080021a6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_TriggerCallback>:
 80021a8:	4770      	bx	lr

080021aa <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021aa:	6803      	ldr	r3, [r0, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	0791      	lsls	r1, r2, #30
{
 80021b0:	b510      	push	{r4, lr}
 80021b2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021b4:	d50f      	bpl.n	80021d6 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	0792      	lsls	r2, r2, #30
 80021ba:	d50c      	bpl.n	80021d6 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021bc:	f06f 0202 	mvn.w	r2, #2
 80021c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c2:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c8:	0799      	lsls	r1, r3, #30
 80021ca:	f000 8085 	beq.w	80022d8 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	f7ff ffe9 	bl	80021a4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	2300      	movs	r3, #0
 80021d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	0752      	lsls	r2, r2, #29
 80021dc:	d510      	bpl.n	8002200 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	0750      	lsls	r0, r2, #29
 80021e2:	d50d      	bpl.n	8002200 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e4:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80021e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ec:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80021f6:	d075      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80021f8:	f7ff ffd4 	bl	80021a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fc:	2300      	movs	r3, #0
 80021fe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	0711      	lsls	r1, r2, #28
 8002206:	d50f      	bpl.n	8002228 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	0712      	lsls	r2, r2, #28
 800220c:	d50c      	bpl.n	8002228 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800220e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002216:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002218:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800221c:	079b      	lsls	r3, r3, #30
 800221e:	d067      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002220:	f7ff ffc0 	bl	80021a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002224:	2300      	movs	r3, #0
 8002226:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	06d0      	lsls	r0, r2, #27
 800222e:	d510      	bpl.n	8002252 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	06d1      	lsls	r1, r2, #27
 8002234:	d50d      	bpl.n	8002252 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002236:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800223c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800223e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002240:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002242:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002244:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002248:	d058      	beq.n	80022fc <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	f7ff ffab 	bl	80021a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	2300      	movs	r3, #0
 8002250:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	07d2      	lsls	r2, r2, #31
 8002258:	d508      	bpl.n	800226c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	07d0      	lsls	r0, r2, #31
 800225e:	d505      	bpl.n	800226c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002260:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002264:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002266:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002268:	f000 feec 	bl	8003044 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	0611      	lsls	r1, r2, #24
 8002272:	d508      	bpl.n	8002286 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	0612      	lsls	r2, r2, #24
 8002278:	d505      	bpl.n	8002286 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800227e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002280:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002282:	f000 fa9a 	bl	80027ba <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	05d0      	lsls	r0, r2, #23
 800228c:	d508      	bpl.n	80022a0 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	0611      	lsls	r1, r2, #24
 8002292:	d505      	bpl.n	80022a0 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002294:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8002298:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800229a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800229c:	f000 fa8e 	bl	80027bc <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	0652      	lsls	r2, r2, #25
 80022a6:	d508      	bpl.n	80022ba <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	0650      	lsls	r0, r2, #25
 80022ac:	d505      	bpl.n	80022ba <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80022b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022b6:	f7ff ff77 	bl	80021a8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	0691      	lsls	r1, r2, #26
 80022c0:	d522      	bpl.n	8002308 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	0692      	lsls	r2, r2, #26
 80022c6:	d51f      	bpl.n	8002308 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80022cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ce:	611a      	str	r2, [r3, #16]
}
 80022d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80022d4:	f000 ba70 	b.w	80027b8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d8:	f7ff ff63 	bl	80021a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff ff62 	bl	80021a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80022e2:	e776      	b.n	80021d2 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e4:	f7ff ff5d 	bl	80021a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff ff5c 	bl	80021a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80022ee:	e785      	b.n	80021fc <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f0:	f7ff ff57 	bl	80021a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff ff56 	bl	80021a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80022fa:	e793      	b.n	8002224 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fc:	f7ff ff51 	bl	80021a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff ff50 	bl	80021a6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002306:	e7a2      	b.n	800224e <HAL_TIM_IRQHandler+0xa4>
 8002308:	bd10      	pop	{r4, pc}
	...

0800230c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800230c:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800230e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002310:	4290      	cmp	r0, r2
 8002312:	d012      	beq.n	800233a <TIM_Base_SetConfig+0x2e>
 8002314:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002318:	d00f      	beq.n	800233a <TIM_Base_SetConfig+0x2e>
 800231a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800231e:	4290      	cmp	r0, r2
 8002320:	d00b      	beq.n	800233a <TIM_Base_SetConfig+0x2e>
 8002322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002326:	4290      	cmp	r0, r2
 8002328:	d007      	beq.n	800233a <TIM_Base_SetConfig+0x2e>
 800232a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800232e:	4290      	cmp	r0, r2
 8002330:	d003      	beq.n	800233a <TIM_Base_SetConfig+0x2e>
 8002332:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002336:	4290      	cmp	r0, r2
 8002338:	d119      	bne.n	800236e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800233a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002340:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002342:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <TIM_Base_SetConfig+0xc4>)
 8002344:	4290      	cmp	r0, r2
 8002346:	d029      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 8002348:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800234c:	d026      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 800234e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002352:	4290      	cmp	r0, r2
 8002354:	d022      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 8002356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800235a:	4290      	cmp	r0, r2
 800235c:	d01e      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 800235e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002362:	4290      	cmp	r0, r2
 8002364:	d01a      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 8002366:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800236a:	4290      	cmp	r0, r2
 800236c:	d016      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 800236e:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <TIM_Base_SetConfig+0xc8>)
 8002370:	4290      	cmp	r0, r2
 8002372:	d013      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 8002374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002378:	4290      	cmp	r0, r2
 800237a:	d00f      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 800237c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002380:	4290      	cmp	r0, r2
 8002382:	d00b      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 8002384:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002388:	4290      	cmp	r0, r2
 800238a:	d007      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 800238c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002390:	4290      	cmp	r0, r2
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0x90>
 8002394:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002398:	4290      	cmp	r0, r2
 800239a:	d103      	bne.n	80023a4 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800239c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a0:	68ca      	ldr	r2, [r1, #12]
 80023a2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a4:	694a      	ldr	r2, [r1, #20]
 80023a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023aa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023ac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ae:	688b      	ldr	r3, [r1, #8]
 80023b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80023b2:	680b      	ldr	r3, [r1, #0]
 80023b4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <TIM_Base_SetConfig+0xc4>)
 80023b8:	4298      	cmp	r0, r3
 80023ba:	d003      	beq.n	80023c4 <TIM_Base_SetConfig+0xb8>
 80023bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c0:	4298      	cmp	r0, r3
 80023c2:	d101      	bne.n	80023c8 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80023c4:	690b      	ldr	r3, [r1, #16]
 80023c6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80023c8:	2301      	movs	r3, #1
 80023ca:	6143      	str	r3, [r0, #20]
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40014000 	.word	0x40014000

080023d8 <HAL_TIM_Base_Init>:
{
 80023d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80023da:	4604      	mov	r4, r0
 80023dc:	b1a0      	cbz	r0, 8002408 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023e6:	b91b      	cbnz	r3, 80023f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80023e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80023ec:	f001 fbca 	bl	8003b84 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	6820      	ldr	r0, [r4, #0]
 80023f4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80023f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fa:	f7ff ff87 	bl	800230c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80023fe:	2301      	movs	r3, #1
  return HAL_OK;
 8002400:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002402:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002406:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002408:	2001      	movs	r0, #1
}
 800240a:	bd10      	pop	{r4, pc}

0800240c <HAL_TIM_PWM_Init>:
{
 800240c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800240e:	4604      	mov	r4, r0
 8002410:	b1a0      	cbz	r0, 800243c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002412:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002416:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800241a:	b91b      	cbnz	r3, 8002424 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800241c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002420:	f7ff febe 	bl	80021a0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002426:	6820      	ldr	r0, [r4, #0]
 8002428:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800242a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242e:	f7ff ff6d 	bl	800230c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002432:	2301      	movs	r3, #1
  return HAL_OK;
 8002434:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800243a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800243c:	2001      	movs	r0, #1
}
 800243e:	bd10      	pop	{r4, pc}

08002440 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002440:	6a03      	ldr	r3, [r0, #32]
 8002442:	f023 0310 	bic.w	r3, r3, #16
{
 8002446:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002448:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800244a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800244c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800244e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002450:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002454:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002456:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800245a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800245e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002462:	688d      	ldr	r5, [r1, #8]
 8002464:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002468:	4d10      	ldr	r5, [pc, #64]	; (80024ac <TIM_OC2_SetConfig+0x6c>)
 800246a:	42a8      	cmp	r0, r5
 800246c:	d003      	beq.n	8002476 <TIM_OC2_SetConfig+0x36>
 800246e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002472:	42a8      	cmp	r0, r5
 8002474:	d114      	bne.n	80024a0 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002476:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800247c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002480:	4d0a      	ldr	r5, [pc, #40]	; (80024ac <TIM_OC2_SetConfig+0x6c>)
 8002482:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002488:	d003      	beq.n	8002492 <TIM_OC2_SetConfig+0x52>
 800248a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800248e:	42a8      	cmp	r0, r5
 8002490:	d106      	bne.n	80024a0 <TIM_OC2_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002492:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002494:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002498:	698e      	ldr	r6, [r1, #24]
 800249a:	4335      	orrs	r5, r6
 800249c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80024a0:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80024a2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80024a4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80024a6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80024a8:	6203      	str	r3, [r0, #32]
 80024aa:	bd70      	pop	{r4, r5, r6, pc}
 80024ac:	40010000 	.word	0x40010000

080024b0 <HAL_TIM_PWM_ConfigChannel>:
{
 80024b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80024b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80024b6:	4604      	mov	r4, r0
 80024b8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d010      	beq.n	80024e0 <HAL_TIM_PWM_ConfigChannel+0x30>
 80024be:	2301      	movs	r3, #1
  switch (Channel)
 80024c0:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 80024c2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80024c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80024ca:	d043      	beq.n	8002554 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80024cc:	d809      	bhi.n	80024e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80024ce:	b1fa      	cbz	r2, 8002510 <HAL_TIM_PWM_ConfigChannel+0x60>
 80024d0:	2a04      	cmp	r2, #4
 80024d2:	d02e      	beq.n	8002532 <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80024d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80024dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80024e0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80024e2:	2a10      	cmp	r2, #16
 80024e4:	d047      	beq.n	8002576 <HAL_TIM_PWM_ConfigChannel+0xc6>
 80024e6:	2a14      	cmp	r2, #20
 80024e8:	d056      	beq.n	8002598 <HAL_TIM_PWM_ConfigChannel+0xe8>
 80024ea:	2a0c      	cmp	r2, #12
 80024ec:	d1f2      	bne.n	80024d4 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024ee:	6820      	ldr	r0, [r4, #0]
 80024f0:	f7ff fdc8 	bl	8002084 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024f6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002506:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002508:	69da      	ldr	r2, [r3, #28]
 800250a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800250e:	e030      	b.n	8002572 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002510:	6820      	ldr	r0, [r4, #0]
 8002512:	f7ff fd4b 	bl	8001fac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002516:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002518:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	f042 0208 	orr.w	r2, r2, #8
 8002520:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	f022 0204 	bic.w	r2, r2, #4
 8002528:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800252e:	619a      	str	r2, [r3, #24]
      break;
 8002530:	e7d0      	b.n	80024d4 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002532:	6820      	ldr	r0, [r4, #0]
 8002534:	f7ff ff84 	bl	8002440 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002538:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800253a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002552:	e7ec      	b.n	800252e <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002554:	6820      	ldr	r0, [r4, #0]
 8002556:	f7ff fd5d 	bl	8002014 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800255a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800255c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	f042 0208 	orr.w	r2, r2, #8
 8002564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	f022 0204 	bic.w	r2, r2, #4
 800256c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002572:	61da      	str	r2, [r3, #28]
      break;
 8002574:	e7ae      	b.n	80024d4 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002576:	6820      	ldr	r0, [r4, #0]
 8002578:	f7ff fdac 	bl	80020d4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800257c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800257e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800258a:	f022 0204 	bic.w	r2, r2, #4
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002592:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002596:	e79d      	b.n	80024d4 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	f7ff fdc3 	bl	8002124 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800259e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025b8:	e7ec      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0xe4>

080025ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025ba:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025bc:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80025be:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025c0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025c8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ca:	6083      	str	r3, [r0, #8]
 80025cc:	bd10      	pop	{r4, pc}
	...

080025d0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80025d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025d4:	2b01      	cmp	r3, #1
{
 80025d6:	b570      	push	{r4, r5, r6, lr}
 80025d8:	4604      	mov	r4, r0
 80025da:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80025de:	d017      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80025e4:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80025e6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80025e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80025ec:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_TIM_ConfigClockSource+0x124>)
 80025f0:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80025f2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80025f4:	680b      	ldr	r3, [r1, #0]
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d065      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0xf6>
 80025fa:	d815      	bhi.n	8002628 <HAL_TIM_ConfigClockSource+0x58>
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d00c      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x4a>
 8002600:	d807      	bhi.n	8002612 <HAL_TIM_ConfigClockSource+0x42>
 8002602:	b153      	cbz	r3, 800261a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002604:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002606:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002608:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800260c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002610:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002612:	2b20      	cmp	r3, #32
 8002614:	d001      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x4a>
 8002616:	2b30      	cmp	r3, #48	; 0x30
 8002618:	d1f4      	bne.n	8002604 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800261a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800261c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002620:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002624:	4313      	orrs	r3, r2
 8002626:	e01a      	b.n	800265e <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8002628:	2b60      	cmp	r3, #96	; 0x60
 800262a:	d034      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0xc6>
 800262c:	d819      	bhi.n	8002662 <HAL_TIM_ConfigClockSource+0x92>
 800262e:	2b50      	cmp	r3, #80	; 0x50
 8002630:	d1e8      	bne.n	8002604 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	684a      	ldr	r2, [r1, #4]
 8002634:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002636:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002638:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800263a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800263e:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8002642:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002644:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002646:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800264c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002650:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002652:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002654:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800265a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800265e:	6083      	str	r3, [r0, #8]
 8002660:	e7d0      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8002662:	2b70      	cmp	r3, #112	; 0x70
 8002664:	d00c      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0xb0>
 8002666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266a:	d1cb      	bne.n	8002604 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800266c:	68cb      	ldr	r3, [r1, #12]
 800266e:	684a      	ldr	r2, [r1, #4]
 8002670:	6889      	ldr	r1, [r1, #8]
 8002672:	f7ff ffa2 	bl	80025ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	6893      	ldr	r3, [r2, #8]
 800267a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267e:	e008      	b.n	8002692 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8002680:	68cb      	ldr	r3, [r1, #12]
 8002682:	684a      	ldr	r2, [r1, #4]
 8002684:	6889      	ldr	r1, [r1, #8]
 8002686:	f7ff ff98 	bl	80025ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800268a:	6822      	ldr	r2, [r4, #0]
 800268c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800268e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002692:	6093      	str	r3, [r2, #8]
      break;
 8002694:	e7b6      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002696:	684d      	ldr	r5, [r1, #4]
 8002698:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800269a:	6a01      	ldr	r1, [r0, #32]
 800269c:	f021 0110 	bic.w	r1, r1, #16
 80026a0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026a2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80026a4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026a6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026ae:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80026b2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80026b6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80026b8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80026ba:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026c0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80026c4:	e7cb      	b.n	800265e <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c6:	684a      	ldr	r2, [r1, #4]
 80026c8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80026ca:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026cc:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ce:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d2:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80026d6:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026da:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80026e4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80026e6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80026e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026ee:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80026f2:	e7b4      	b.n	800265e <HAL_TIM_ConfigClockSource+0x8e>
 80026f4:	fffe0088 	.word	0xfffe0088

080026f8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026f8:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026fc:	6a03      	ldr	r3, [r0, #32]
{
 80026fe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002700:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002702:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002704:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002706:	ea23 0304 	bic.w	r3, r3, r4
 800270a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800270c:	6a03      	ldr	r3, [r0, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	6202      	str	r2, [r0, #32]
 8002712:	bd10      	pop	{r4, pc}

08002714 <HAL_TIM_PWM_Start>:
{
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002718:	2201      	movs	r2, #1
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	f7ff ffec 	bl	80026f8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <HAL_TIM_PWM_Start+0x44>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d011      	beq.n	800274c <HAL_TIM_PWM_Start+0x38>
 8002728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800272c:	4293      	cmp	r3, r2
 800272e:	d00d      	beq.n	800274c <HAL_TIM_PWM_Start+0x38>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002730:	6899      	ldr	r1, [r3, #8]
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_TIM_PWM_Start+0x48>)
 8002734:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	2a06      	cmp	r2, #6
 8002738:	d006      	beq.n	8002748 <HAL_TIM_PWM_Start+0x34>
 800273a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800273e:	d003      	beq.n	8002748 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
}
 8002748:	2000      	movs	r0, #0
 800274a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800274c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002752:	645a      	str	r2, [r3, #68]	; 0x44
 8002754:	e7ec      	b.n	8002730 <HAL_TIM_PWM_Start+0x1c>
 8002756:	bf00      	nop
 8002758:	40010000 	.word	0x40010000
 800275c:	00010007 	.word	0x00010007

08002760 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002760:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	f04f 0302 	mov.w	r3, #2
{
 800276a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800276c:	d01f      	beq.n	80027ae <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800276e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002770:	4d10      	ldr	r5, [pc, #64]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002772:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002776:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002778:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800277a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800277c:	d003      	beq.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800277e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002782:	42aa      	cmp	r2, r5
 8002784:	d103      	bne.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002786:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800278a:	684d      	ldr	r5, [r1, #4]
 800278c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800278e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002790:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002794:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002796:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800279a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800279c:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800279e:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80027a2:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80027a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a8:	2300      	movs	r3, #0
 80027aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80027ae:	4618      	mov	r0, r3

  return HAL_OK;
}
 80027b0:	bd30      	pop	{r4, r5, pc}
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000

080027b8 <HAL_TIMEx_CommutCallback>:
 80027b8:	4770      	bx	lr

080027ba <HAL_TIMEx_BreakCallback>:
 80027ba:	4770      	bx	lr

080027bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027bc:	4770      	bx	lr
	...

080027c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c0:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027c2:	69c2      	ldr	r2, [r0, #28]
{
 80027c4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027c6:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027c8:	6881      	ldr	r1, [r0, #8]
 80027ca:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027cc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027ce:	4301      	orrs	r1, r0
 80027d0:	6960      	ldr	r0, [r4, #20]
 80027d2:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027d4:	4890      	ldr	r0, [pc, #576]	; (8002a18 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027d6:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027d8:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80027da:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027dc:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027de:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027e0:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80027e8:	4301      	orrs	r1, r0
 80027ea:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027ec:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ee:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80027f0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027f2:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 80027f6:	4301      	orrs	r1, r0
 80027f8:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027fa:	4988      	ldr	r1, [pc, #544]	; (8002a1c <UART_SetConfig+0x25c>)
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d117      	bne.n	8002830 <UART_SetConfig+0x70>
 8002800:	4b87      	ldr	r3, [pc, #540]	; (8002a20 <UART_SetConfig+0x260>)
 8002802:	4988      	ldr	r1, [pc, #544]	; (8002a24 <UART_SetConfig+0x264>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800280c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002810:	5ccb      	ldrb	r3, [r1, r3]
 8002812:	d129      	bne.n	8002868 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8002814:	2b08      	cmp	r3, #8
 8002816:	f200 809d 	bhi.w	8002954 <UART_SetConfig+0x194>
 800281a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800281e:	008c      	.short	0x008c
 8002820:	00ee00e8 	.word	0x00ee00e8
 8002824:	00fa009b 	.word	0x00fa009b
 8002828:	009b009b 	.word	0x009b009b
 800282c:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002830:	497d      	ldr	r1, [pc, #500]	; (8002a28 <UART_SetConfig+0x268>)
 8002832:	428b      	cmp	r3, r1
 8002834:	d106      	bne.n	8002844 <UART_SetConfig+0x84>
 8002836:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <UART_SetConfig+0x260>)
 8002838:	497c      	ldr	r1, [pc, #496]	; (8002a2c <UART_SetConfig+0x26c>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	e7e3      	b.n	800280c <UART_SetConfig+0x4c>
 8002844:	497a      	ldr	r1, [pc, #488]	; (8002a30 <UART_SetConfig+0x270>)
 8002846:	428b      	cmp	r3, r1
 8002848:	d11d      	bne.n	8002886 <UART_SetConfig+0xc6>
 800284a:	4b75      	ldr	r3, [pc, #468]	; (8002a20 <UART_SetConfig+0x260>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002854:	2b10      	cmp	r3, #16
 8002856:	f000 80d9 	beq.w	8002a0c <UART_SetConfig+0x24c>
 800285a:	d80e      	bhi.n	800287a <UART_SetConfig+0xba>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d067      	beq.n	8002930 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002860:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002864:	d076      	beq.n	8002954 <UART_SetConfig+0x194>
 8002866:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8002868:	2b08      	cmp	r3, #8
 800286a:	d873      	bhi.n	8002954 <UART_SetConfig+0x194>
 800286c:	e8df f003 	tbb	[pc, r3]
 8002870:	72a29f99 	.word	0x72a29f99
 8002874:	727272b4 	.word	0x727272b4
 8002878:	b7          	.byte	0xb7
 8002879:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800287a:	2b20      	cmp	r3, #32
 800287c:	f000 80ba 	beq.w	80029f4 <UART_SetConfig+0x234>
 8002880:	2b30      	cmp	r3, #48	; 0x30
 8002882:	d03f      	beq.n	8002904 <UART_SetConfig+0x144>
 8002884:	e7ec      	b.n	8002860 <UART_SetConfig+0xa0>
 8002886:	496b      	ldr	r1, [pc, #428]	; (8002a34 <UART_SetConfig+0x274>)
 8002888:	428b      	cmp	r3, r1
 800288a:	d10d      	bne.n	80028a8 <UART_SetConfig+0xe8>
 800288c:	4b64      	ldr	r3, [pc, #400]	; (8002a20 <UART_SetConfig+0x260>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002896:	2b40      	cmp	r3, #64	; 0x40
 8002898:	f000 80b8 	beq.w	8002a0c <UART_SetConfig+0x24c>
 800289c:	d9de      	bls.n	800285c <UART_SetConfig+0x9c>
 800289e:	2b80      	cmp	r3, #128	; 0x80
 80028a0:	f000 80a8 	beq.w	80029f4 <UART_SetConfig+0x234>
 80028a4:	2bc0      	cmp	r3, #192	; 0xc0
 80028a6:	e7ec      	b.n	8002882 <UART_SetConfig+0xc2>
 80028a8:	4963      	ldr	r1, [pc, #396]	; (8002a38 <UART_SetConfig+0x278>)
 80028aa:	428b      	cmp	r3, r1
 80028ac:	d110      	bne.n	80028d0 <UART_SetConfig+0x110>
 80028ae:	4b5c      	ldr	r3, [pc, #368]	; (8002a20 <UART_SetConfig+0x260>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028bc:	f000 80a6 	beq.w	8002a0c <UART_SetConfig+0x24c>
 80028c0:	d9cc      	bls.n	800285c <UART_SetConfig+0x9c>
 80028c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c6:	f000 8095 	beq.w	80029f4 <UART_SetConfig+0x234>
 80028ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ce:	e7d8      	b.n	8002882 <UART_SetConfig+0xc2>
 80028d0:	495a      	ldr	r1, [pc, #360]	; (8002a3c <UART_SetConfig+0x27c>)
 80028d2:	428b      	cmp	r3, r1
 80028d4:	d11e      	bne.n	8002914 <UART_SetConfig+0x154>
 80028d6:	4b52      	ldr	r3, [pc, #328]	; (8002a20 <UART_SetConfig+0x260>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e4:	f000 8092 	beq.w	8002a0c <UART_SetConfig+0x24c>
 80028e8:	d806      	bhi.n	80028f8 <UART_SetConfig+0x138>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d07c      	beq.n	80029e8 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80028f2:	d12f      	bne.n	8002954 <UART_SetConfig+0x194>
 80028f4:	2310      	movs	r3, #16
 80028f6:	e78d      	b.n	8002814 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fc:	d07a      	beq.n	80029f4 <UART_SetConfig+0x234>
 80028fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002902:	d1f4      	bne.n	80028ee <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002904:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002908:	d169      	bne.n	80029de <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800290a:	6863      	ldr	r3, [r4, #4]
 800290c:	0858      	lsrs	r0, r3, #1
 800290e:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8002912:	e078      	b.n	8002a06 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002914:	494a      	ldr	r1, [pc, #296]	; (8002a40 <UART_SetConfig+0x280>)
 8002916:	428b      	cmp	r3, r1
 8002918:	d124      	bne.n	8002964 <UART_SetConfig+0x1a4>
 800291a:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <UART_SetConfig+0x260>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002928:	d070      	beq.n	8002a0c <UART_SetConfig+0x24c>
 800292a:	d815      	bhi.n	8002958 <UART_SetConfig+0x198>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1de      	bne.n	80028ee <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002930:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002934:	d135      	bne.n	80029a2 <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002936:	f7ff f86b 	bl	8001a10 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800293a:	6862      	ldr	r2, [r4, #4]
 800293c:	0853      	lsrs	r3, r2, #1
 800293e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002942:	fbb0 f0f2 	udiv	r0, r0, r2
 8002946:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002948:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800294c:	f1a0 0210 	sub.w	r2, r0, #16
 8002950:	429a      	cmp	r2, r3
 8002952:	d91a      	bls.n	800298a <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8002954:	2001      	movs	r0, #1
 8002956:	e020      	b.n	800299a <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295c:	d04a      	beq.n	80029f4 <UART_SetConfig+0x234>
 800295e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002962:	e7ce      	b.n	8002902 <UART_SetConfig+0x142>
 8002964:	4937      	ldr	r1, [pc, #220]	; (8002a44 <UART_SetConfig+0x284>)
 8002966:	428b      	cmp	r3, r1
 8002968:	d1f4      	bne.n	8002954 <UART_SetConfig+0x194>
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <UART_SetConfig+0x260>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002978:	d048      	beq.n	8002a0c <UART_SetConfig+0x24c>
 800297a:	f67f af6f 	bls.w	800285c <UART_SetConfig+0x9c>
 800297e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002982:	d037      	beq.n	80029f4 <UART_SetConfig+0x234>
 8002984:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002988:	e77b      	b.n	8002882 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800298a:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800298e:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	4318      	orrs	r0, r3
 8002996:	60d0      	str	r0, [r2, #12]
 8002998:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800299e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80029a0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029a2:	f7ff f835 	bl	8001a10 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029a6:	6863      	ldr	r3, [r4, #4]
 80029a8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029ac:	e008      	b.n	80029c0 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029ae:	f7ff f83f 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80029b2:	e7f8      	b.n	80029a6 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	0858      	lsrs	r0, r3, #1
 80029b8:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 80029bc:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80029c4:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80029ca:	f1a0 0210 	sub.w	r2, r0, #16
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d8c0      	bhi.n	8002954 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	60d8      	str	r0, [r3, #12]
 80029d6:	e7df      	b.n	8002998 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029d8:	f7fe ff56 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 80029dc:	e7e3      	b.n	80029a6 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029de:	6863      	ldr	r3, [r4, #4]
 80029e0:	0858      	lsrs	r0, r3, #1
 80029e2:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80029e6:	e7eb      	b.n	80029c0 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80029ec:	d1df      	bne.n	80029ae <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029ee:	f7ff f81f 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80029f2:	e7a2      	b.n	800293a <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80029f8:	d1dc      	bne.n	80029b4 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029fa:	6863      	ldr	r3, [r4, #4]
 80029fc:	0858      	lsrs	r0, r3, #1
 80029fe:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8002a02:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a06:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a0a:	e79c      	b.n	8002946 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002a10:	d1e2      	bne.n	80029d8 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a12:	f7fe ff39 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8002a16:	e790      	b.n	800293a <UART_SetConfig+0x17a>
 8002a18:	efff69f3 	.word	0xefff69f3
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08004d44 	.word	0x08004d44
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	08004d48 	.word	0x08004d48
 8002a30:	40004800 	.word	0x40004800
 8002a34:	40004c00 	.word	0x40004c00
 8002a38:	40005000 	.word	0x40005000
 8002a3c:	40011400 	.word	0x40011400
 8002a40:	40007800 	.word	0x40007800
 8002a44:	40007c00 	.word	0x40007c00

08002a48 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a4a:	07da      	lsls	r2, r3, #31
{
 8002a4c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a4e:	d506      	bpl.n	8002a5e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a50:	6801      	ldr	r1, [r0, #0]
 8002a52:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a54:	684a      	ldr	r2, [r1, #4]
 8002a56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a5a:	4322      	orrs	r2, r4
 8002a5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a5e:	079c      	lsls	r4, r3, #30
 8002a60:	d506      	bpl.n	8002a70 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a62:	6801      	ldr	r1, [r0, #0]
 8002a64:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a66:	684a      	ldr	r2, [r1, #4]
 8002a68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a6c:	4322      	orrs	r2, r4
 8002a6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a70:	0759      	lsls	r1, r3, #29
 8002a72:	d506      	bpl.n	8002a82 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a74:	6801      	ldr	r1, [r0, #0]
 8002a76:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a78:	684a      	ldr	r2, [r1, #4]
 8002a7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a7e:	4322      	orrs	r2, r4
 8002a80:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a82:	071a      	lsls	r2, r3, #28
 8002a84:	d506      	bpl.n	8002a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a86:	6801      	ldr	r1, [r0, #0]
 8002a88:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a8a:	684a      	ldr	r2, [r1, #4]
 8002a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a90:	4322      	orrs	r2, r4
 8002a92:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a94:	06dc      	lsls	r4, r3, #27
 8002a96:	d506      	bpl.n	8002aa6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a98:	6801      	ldr	r1, [r0, #0]
 8002a9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002a9c:	688a      	ldr	r2, [r1, #8]
 8002a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aa2:	4322      	orrs	r2, r4
 8002aa4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aa6:	0699      	lsls	r1, r3, #26
 8002aa8:	d506      	bpl.n	8002ab8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aaa:	6801      	ldr	r1, [r0, #0]
 8002aac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002aae:	688a      	ldr	r2, [r1, #8]
 8002ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab4:	4322      	orrs	r2, r4
 8002ab6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab8:	065a      	lsls	r2, r3, #25
 8002aba:	d510      	bpl.n	8002ade <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002abc:	6801      	ldr	r1, [r0, #0]
 8002abe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ac0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ac6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002aca:	ea42 0204 	orr.w	r2, r2, r4
 8002ace:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ad0:	d105      	bne.n	8002ade <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ad2:	684a      	ldr	r2, [r1, #4]
 8002ad4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ad6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ada:	4322      	orrs	r2, r4
 8002adc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	d506      	bpl.n	8002af0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ae2:	6802      	ldr	r2, [r0, #0]
 8002ae4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ae6:	6853      	ldr	r3, [r2, #4]
 8002ae8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6053      	str	r3, [r2, #4]
 8002af0:	bd10      	pop	{r4, pc}

08002af2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af6:	9d06      	ldr	r5, [sp, #24]
 8002af8:	4604      	mov	r4, r0
 8002afa:	460f      	mov	r7, r1
 8002afc:	4616      	mov	r6, r2
 8002afe:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b00:	6821      	ldr	r1, [r4, #0]
 8002b02:	69ca      	ldr	r2, [r1, #28]
 8002b04:	ea37 0302 	bics.w	r3, r7, r2
 8002b08:	bf0c      	ite	eq
 8002b0a:	2201      	moveq	r2, #1
 8002b0c:	2200      	movne	r2, #0
 8002b0e:	42b2      	cmp	r2, r6
 8002b10:	d002      	beq.n	8002b18 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b12:	2000      	movs	r0, #0
}
 8002b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	1c6b      	adds	r3, r5, #1
 8002b1a:	d0f2      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1c:	f7fd fda4 	bl	8000668 <HAL_GetTick>
 8002b20:	eba0 0008 	sub.w	r0, r0, r8
 8002b24:	4285      	cmp	r5, r0
 8002b26:	d301      	bcc.n	8002b2c <UART_WaitOnFlagUntilTimeout+0x3a>
 8002b28:	2d00      	cmp	r5, #0
 8002b2a:	d1e9      	bne.n	8002b00 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b2c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002b2e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002b40:	2320      	movs	r3, #32
 8002b42:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002b44:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002b46:	2300      	movs	r3, #0
 8002b48:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b50 <HAL_UART_Transmit>:
{
 8002b50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b54:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002b56:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002b58:	4604      	mov	r4, r0
 8002b5a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002b5c:	2b20      	cmp	r3, #32
{
 8002b5e:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002b60:	d14b      	bne.n	8002bfa <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d047      	beq.n	8002bf6 <HAL_UART_Transmit+0xa6>
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	d045      	beq.n	8002bf6 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002b6a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d043      	beq.n	8002bfa <HAL_UART_Transmit+0xaa>
 8002b72:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8002b76:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b7a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b7e:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002b80:	f7fd fd72 	bl	8000668 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002b86:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002b88:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002b90:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b94:	d103      	bne.n	8002b9e <HAL_UART_Transmit+0x4e>
 8002b96:	6923      	ldr	r3, [r4, #16]
 8002b98:	b90b      	cbnz	r3, 8002b9e <HAL_UART_Transmit+0x4e>
 8002b9a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002b9c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8002b9e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002ba8:	b292      	uxth	r2, r2
 8002baa:	b94a      	cbnz	r2, 8002bc0 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bac:	2140      	movs	r1, #64	; 0x40
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f7ff ff9f 	bl	8002af2 <UART_WaitOnFlagUntilTimeout>
 8002bb4:	b950      	cbnz	r0, 8002bcc <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8002bb6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002bb8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8002bbc:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8002bbe:	e006      	b.n	8002bce <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff ff94 	bl	8002af2 <UART_WaitOnFlagUntilTimeout>
 8002bca:	b118      	cbz	r0, 8002bd4 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002bcc:	2003      	movs	r0, #3
}
 8002bce:	b003      	add	sp, #12
 8002bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bd4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002bd6:	b95e      	cbnz	r6, 8002bf0 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be0:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002be2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002bee:	e7d6      	b.n	8002b9e <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bf0:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002bf4:	e7f4      	b.n	8002be0 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	e7e9      	b.n	8002bce <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	e7e7      	b.n	8002bce <HAL_UART_Transmit+0x7e>

08002bfe <UART_CheckIdleState>:
{
 8002bfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	2500      	movs	r5, #0
{
 8002c02:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002c06:	f7fd fd2f 	bl	8000668 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c0a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002c0c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	0712      	lsls	r2, r2, #28
 8002c12:	d407      	bmi.n	8002c24 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8002c14:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002c16:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002c1a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8002c20:	b003      	add	sp, #12
 8002c22:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c24:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002c28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	9200      	str	r2, [sp, #0]
 8002c30:	462a      	mov	r2, r5
 8002c32:	f7ff ff5e 	bl	8002af2 <UART_WaitOnFlagUntilTimeout>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d0ec      	beq.n	8002c14 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	e7f0      	b.n	8002c20 <UART_CheckIdleState+0x22>

08002c3e <HAL_UART_Init>:
{
 8002c3e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002c40:	4604      	mov	r4, r0
 8002c42:	b340      	cbz	r0, 8002c96 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c44:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002c46:	b91b      	cbnz	r3, 8002c50 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002c48:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002c4c:	f000 ffee 	bl	8003c2c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c50:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c52:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c54:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002c56:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002c58:	6813      	ldr	r3, [r2, #0]
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c60:	f7ff fdae 	bl	80027c0 <UART_SetConfig>
 8002c64:	2801      	cmp	r0, #1
 8002c66:	d016      	beq.n	8002c96 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c6a:	b113      	cbz	r3, 8002c72 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f7ff feeb 	bl	8002a48 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c72:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002c74:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c84:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
}
 8002c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002c90:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002c92:	f7ff bfb4 	b.w	8002bfe <UART_CheckIdleState>
}
 8002c96:	2001      	movs	r0, #1
 8002c98:	bd10      	pop	{r4, pc}
	...

08002c9c <SCCB_GPIO_Config>:
#include "SCCB.h"
#include "dwt_delay.h"
//#define DWT_Delay(x) HAL_Delay(1)
#include "main.h"

void SCCB_GPIO_Config(void) {
 8002c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c9e:	2214      	movs	r2, #20
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	a801      	add	r0, sp, #4
 8002ca4:	f001 f8da 	bl	8003e5c <memset>

	GPIO_InitStruct.Pin = CAM_SIOC_Pin | CAM_SIOD_Pin;
 8002ca8:	f44f 7310 	mov.w	r3, #576	; 0x240
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	a901      	add	r1, sp, #4
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <SCCB_GPIO_Config+0x28>)
	GPIO_InitStruct.Pin = CAM_SIOC_Pin | CAM_SIOD_Pin;
 8002cb0:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cba:	f7fe fa81 	bl	80011c0 <HAL_GPIO_Init>

}
 8002cbe:	b007      	add	sp, #28
 8002cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cc4:	40020400 	.word	0x40020400

08002cc8 <SCCB_SID_GPIO_OUTPUT>:

void SCCB_SID_GPIO_OUTPUT(void) {
 8002cc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cca:	2214      	movs	r2, #20
 8002ccc:	2100      	movs	r1, #0
 8002cce:	a801      	add	r0, sp, #4
 8002cd0:	f001 f8c4 	bl	8003e5c <memset>
	GPIO_InitStruct.Pin = CAM_SIOD_Pin;
 8002cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd8:	a901      	add	r1, sp, #4
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <SCCB_SID_GPIO_OUTPUT+0x28>)
	GPIO_InitStruct.Pin = CAM_SIOD_Pin;
 8002cdc:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	f7fe fa6b 	bl	80011c0 <HAL_GPIO_Init>
}
 8002cea:	b007      	add	sp, #28
 8002cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cf0:	40020400 	.word	0x40020400

08002cf4 <SCCB_SID_GPIO_INPUT>:

void SCCB_SID_GPIO_INPUT(void) {
 8002cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cf6:	2214      	movs	r2, #20
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	a801      	add	r0, sp, #4
 8002cfc:	f001 f8ae 	bl	8003e5c <memset>
	GPIO_InitStruct.Pin = CAM_SIOD_Pin;
 8002d00:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	a901      	add	r1, sp, #4
 8002d06:	4803      	ldr	r0, [pc, #12]	; (8002d14 <SCCB_SID_GPIO_INPUT+0x20>)
	GPIO_InitStruct.Pin = CAM_SIOD_Pin;
 8002d08:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f7fe fa59 	bl	80011c0 <HAL_GPIO_Init>
}
 8002d0e:	b007      	add	sp, #28
 8002d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d14:	40020400 	.word	0x40020400

08002d18 <startSCCB>:

void startSCCB(void) {
 8002d18:	b510      	push	{r4, lr}
	SCCB_SID_H();
 8002d1a:	4c14      	ldr	r4, [pc, #80]	; (8002d6c <startSCCB+0x54>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7fe fb3c 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8002d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d2c:	f000 f8aa 	bl	8002e84 <DWT_Delay>

	SCCB_SIC_H();
 8002d30:	2201      	movs	r2, #1
 8002d32:	2140      	movs	r1, #64	; 0x40
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fe fb33 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8002d3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d3e:	f000 f8a1 	bl	8002e84 <DWT_Delay>

	SCCB_SID_L();
 8002d42:	2200      	movs	r2, #0
 8002d44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f7fe fb29 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8002d4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d52:	f000 f897 	bl	8002e84 <DWT_Delay>

	SCCB_SIC_L();
 8002d56:	4620      	mov	r0, r4
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	f7fe fb20 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8002d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8002d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DWT_Delay(500);
 8002d68:	f000 b88c 	b.w	8002e84 <DWT_Delay>
 8002d6c:	40020400 	.word	0x40020400

08002d70 <stopSCCB>:
void stopSCCB(void) {
 8002d70:	b510      	push	{r4, lr}
	SCCB_SID_L();
 8002d72:	4c10      	ldr	r4, [pc, #64]	; (8002db4 <stopSCCB+0x44>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7fe fb10 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8002d80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d84:	f000 f87e 	bl	8002e84 <DWT_Delay>

	SCCB_SIC_H();
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2140      	movs	r1, #64	; 0x40
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7fe fb07 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8002d92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d96:	f000 f875 	bl	8002e84 <DWT_Delay>

	SCCB_SID_H();
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002da2:	f7fe fafd 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8002da6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8002daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DWT_Delay(500);
 8002dae:	f000 b869 	b.w	8002e84 <DWT_Delay>
 8002db2:	bf00      	nop
 8002db4:	40020400 	.word	0x40020400

08002db8 <SCCBwriteByte>:

	SCCB_SID_L();
	DWT_Delay(500);
}

unsigned char SCCBwriteByte(unsigned char m_data) {
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	4606      	mov	r6, r0
 8002dbc:	2400      	movs	r4, #0

	for (j = 0; j < 8; j++) {
		if ((m_data << j) & 0x80) {
			SCCB_SID_H();
		} else {
			SCCB_SID_L();
 8002dbe:	4d23      	ldr	r5, [pc, #140]	; (8002e4c <SCCBwriteByte+0x94>)
		if ((m_data << j) & 0x80) {
 8002dc0:	fa06 f204 	lsl.w	r2, r6, r4
			SCCB_SID_L();
 8002dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc8:	4628      	mov	r0, r5
 8002dca:	3401      	adds	r4, #1
		if ((m_data << j) & 0x80) {
 8002dcc:	f012 0280 	ands.w	r2, r2, #128	; 0x80
			SCCB_SID_H();
 8002dd0:	bf18      	it	ne
 8002dd2:	2201      	movne	r2, #1
			SCCB_SID_L();
 8002dd4:	f7fe fae4 	bl	80013a0 <HAL_GPIO_WritePin>
		}
		DWT_Delay(10);
 8002dd8:	200a      	movs	r0, #10
 8002dda:	f000 f853 	bl	8002e84 <DWT_Delay>
		SCCB_SIC_H();
 8002dde:	2201      	movs	r2, #1
 8002de0:	2140      	movs	r1, #64	; 0x40
 8002de2:	481a      	ldr	r0, [pc, #104]	; (8002e4c <SCCBwriteByte+0x94>)
 8002de4:	f7fe fadc 	bl	80013a0 <HAL_GPIO_WritePin>
		DWT_Delay(10);
 8002de8:	200a      	movs	r0, #10
 8002dea:	f000 f84b 	bl	8002e84 <DWT_Delay>
		SCCB_SIC_L();
 8002dee:	2200      	movs	r2, #0
 8002df0:	2140      	movs	r1, #64	; 0x40
 8002df2:	4816      	ldr	r0, [pc, #88]	; (8002e4c <SCCBwriteByte+0x94>)
 8002df4:	f7fe fad4 	bl	80013a0 <HAL_GPIO_WritePin>
		DWT_Delay(10);
 8002df8:	200a      	movs	r0, #10
 8002dfa:	f000 f843 	bl	8002e84 <DWT_Delay>
	for (j = 0; j < 8; j++) {
 8002dfe:	2c08      	cmp	r4, #8
 8002e00:	d1de      	bne.n	8002dc0 <SCCBwriteByte+0x8>
	}
	DWT_Delay(10);
 8002e02:	200a      	movs	r0, #10
 8002e04:	f000 f83e 	bl	8002e84 <DWT_Delay>
	SCCB_SID_IN;
 8002e08:	f7ff ff74 	bl	8002cf4 <SCCB_SID_GPIO_INPUT>
	DWT_Delay(10);
 8002e0c:	200a      	movs	r0, #10
 8002e0e:	f000 f839 	bl	8002e84 <DWT_Delay>
	SCCB_SIC_H();
 8002e12:	2201      	movs	r2, #1
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	480d      	ldr	r0, [pc, #52]	; (8002e4c <SCCBwriteByte+0x94>)
 8002e18:	f7fe fac2 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8002e1c:	200a      	movs	r0, #10
 8002e1e:	f000 f831 	bl	8002e84 <DWT_Delay>
	if (SCCB_SID_STATE) {
 8002e22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e26:	4809      	ldr	r0, [pc, #36]	; (8002e4c <SCCBwriteByte+0x94>)
 8002e28:	f7fe fab4 	bl	8001394 <HAL_GPIO_ReadPin>
		tem = 0;
	} else {
		tem = 1;
	}
	SCCB_SIC_L();
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2140      	movs	r1, #64	; 0x40
	if (SCCB_SID_STATE) {
 8002e30:	4604      	mov	r4, r0
	SCCB_SIC_L();
 8002e32:	4806      	ldr	r0, [pc, #24]	; (8002e4c <SCCBwriteByte+0x94>)
 8002e34:	f7fe fab4 	bl	80013a0 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8002e38:	200a      	movs	r0, #10
 8002e3a:	f000 f823 	bl	8002e84 <DWT_Delay>
	SCCB_SID_OUT;
 8002e3e:	f7ff ff43 	bl	8002cc8 <SCCB_SID_GPIO_OUTPUT>

	return (tem);
}
 8002e42:	f114 30ff 	adds.w	r0, r4, #4294967295	; 0xffffffff
 8002e46:	bf18      	it	ne
 8002e48:	2001      	movne	r0, #1
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	40020400 	.word	0x40020400

08002e50 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8002e50:	4909      	ldr	r1, [pc, #36]	; (8002e78 <DWT_Init+0x28>)
 8002e52:	68ca      	ldr	r2, [r1, #12]
 8002e54:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
 8002e58:	d10c      	bne.n	8002e74 <DWT_Init+0x24>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002e5a:	68cb      	ldr	r3, [r1, #12]
 8002e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e60:	60cb      	str	r3, [r1, #12]
        DWT->LAR = 0xC5ACCE55;
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <DWT_Init+0x2c>)
 8002e64:	4906      	ldr	r1, [pc, #24]	; (8002e80 <DWT_Init+0x30>)
 8002e66:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 8002e6a:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000edf0 	.word	0xe000edf0
 8002e7c:	e0001000 	.word	0xe0001000
 8002e80:	c5acce55 	.word	0xc5acce55

08002e84 <DWT_Delay>:
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
             delayTicks = us * (SystemCoreClock/1000000);
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <DWT_Delay+0x1c>)
    uint32_t startTick = DWT->CYCCNT,
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <DWT_Delay+0x20>)
             delayTicks = us * (SystemCoreClock/1000000);
 8002e88:	681b      	ldr	r3, [r3, #0]
    uint32_t startTick = DWT->CYCCNT,
 8002e8a:	6851      	ldr	r1, [r2, #4]
{
 8002e8c:	b510      	push	{r4, lr}
             delayTicks = us * (SystemCoreClock/1000000);
 8002e8e:	4c06      	ldr	r4, [pc, #24]	; (8002ea8 <DWT_Delay+0x24>)
 8002e90:	fbb3 f3f4 	udiv	r3, r3, r4
 8002e94:	4358      	muls	r0, r3

    while ((DWT->CYCCNT - startTick) < delayTicks);
 8002e96:	6853      	ldr	r3, [r2, #4]
 8002e98:	1a5b      	subs	r3, r3, r1
 8002e9a:	4298      	cmp	r0, r3
 8002e9c:	d8fb      	bhi.n	8002e96 <DWT_Delay+0x12>
}
 8002e9e:	bd10      	pop	{r4, pc}
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	e0001000 	.word	0xe0001000
 8002ea8:	000f4240 	.word	0x000f4240

08002eac <diferencia>:
#include "funciones.h"




void diferencia(uint8_t* img1, uint8_t* img2, uint8_t umbral){
 8002eac:	b530      	push	{r4, r5, lr}
 8002eae:	1e45      	subs	r5, r0, #1
 8002eb0:	f500 3095 	add.w	r0, r0, #76288	; 0x12a00
 8002eb4:	3901      	subs	r1, #1
 8002eb6:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    uint8_t valor = 0;
    for (int i=0;i < TOTAL; i++) {
    	if(img1[i] >= img2[i]){
 8002eba:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8002ebe:	784b      	ldrb	r3, [r1, #1]
 8002ec0:	429c      	cmp	r4, r3
    		valor = (uint8_t)(img1[i] - img2[i]);
 8002ec2:	bf2c      	ite	cs
 8002ec4:	1ae3      	subcs	r3, r4, r3
    	}
    	else{
    		valor = (uint8_t)(img2[i] - img1[i]);
 8002ec6:	1b1b      	subcc	r3, r3, r4
 8002ec8:	b2db      	uxtb	r3, r3
    	}
        img2[i] = valor >= umbral ? valor : 0;
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	bf38      	it	cc
 8002ece:	2300      	movcc	r3, #0
    for (int i=0;i < TOTAL; i++) {
 8002ed0:	4285      	cmp	r5, r0
        img2[i] = valor >= umbral ? valor : 0;
 8002ed2:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (int i=0;i < TOTAL; i++) {
 8002ed6:	d1f0      	bne.n	8002eba <diferencia+0xe>
    }
}
 8002ed8:	bd30      	pop	{r4, r5, pc}

08002eda <copy>:

void copy(uint8_t *src, uint8_t *dest)
{
 8002eda:	1e43      	subs	r3, r0, #1
 8002edc:	f500 3095 	add.w	r0, r0, #76288	; 0x12a00
 8002ee0:	3901      	subs	r1, #1
 8002ee2:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    for (int i=0;i < TOTAL; i++) {
        dest[i] = src[i];
 8002ee6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    for (int i=0;i < TOTAL; i++) {
 8002eea:	4283      	cmp	r3, r0
        dest[i] = src[i];
 8002eec:	f801 2f01 	strb.w	r2, [r1, #1]!
    for (int i=0;i < TOTAL; i++) {
 8002ef0:	d1f9      	bne.n	8002ee6 <copy+0xc>
    }
}
 8002ef2:	4770      	bx	lr

08002ef4 <conteo>:

int conteo(uint8_t *img)
{
 8002ef4:	f500 3395 	add.w	r3, r0, #76288	; 0x12a00
 8002ef8:	1e42      	subs	r2, r0, #1
    int res = 0;
 8002efa:	2000      	movs	r0, #0
 8002efc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    for (int i=0;i < TOTAL; i++) {
        res += ((int)img[i]) > 0 ? 1 : 0;
 8002f00:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002f04:	2900      	cmp	r1, #0
 8002f06:	bf18      	it	ne
 8002f08:	3001      	addne	r0, #1
    for (int i=0;i < TOTAL; i++) {
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d1f8      	bne.n	8002f00 <conteo+0xc>
    }
    return res;
}
 8002f0e:	4770      	bx	lr

08002f10 <binarizar>:

void binarizar(uint8_t *img, uint8_t umbral)
{
 8002f10:	1e43      	subs	r3, r0, #1
 8002f12:	f500 3095 	add.w	r0, r0, #76288	; 0x12a00
 8002f16:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    for (int i=0;i < TOTAL; i++) {
        img[i] = ((int)img[i]) > umbral ? 255 : 0;
 8002f1a:	785a      	ldrb	r2, [r3, #1]
 8002f1c:	428a      	cmp	r2, r1
 8002f1e:	bf8c      	ite	hi
 8002f20:	22ff      	movhi	r2, #255	; 0xff
 8002f22:	2200      	movls	r2, #0
 8002f24:	f803 2f01 	strb.w	r2, [r3, #1]!
    for (int i=0;i < TOTAL; i++) {
 8002f28:	4283      	cmp	r3, r0
 8002f2a:	d1f6      	bne.n	8002f1a <binarizar+0xa>
    }
}
 8002f2c:	4770      	bx	lr
	...

08002f30 <erosion>:
    //Libero recursos
    free(temp);
}

void erosion(uint8_t *img)
{
 8002f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f34:	4604      	mov	r4, r0
    //Imagen temporal
    uint8_t* temp = (uint8_t*)malloc(TOTAL);
 8002f36:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
 8002f3a:	f000 ff7f 	bl	8003e3c <malloc>

    copy(img, temp);
 8002f3e:	4601      	mov	r1, r0
    uint8_t* temp = (uint8_t*)malloc(TOTAL);
 8002f40:	4607      	mov	r7, r0
    copy(img, temp);
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ffc9 	bl	8002eda <copy>

    // Evito el borde
    int x = 0;
    int y = 0;
    for (int j=1;j < (ALTO - 1); j++) {
        for (int i=1;i < (ANCHO - 1); i++) {
 8002f48:	f240 183f 	movw	r8, #319	; 0x13f
 8002f4c:	f504 7020 	add.w	r0, r4, #640	; 0x280
    copy(img, temp);
 8002f50:	f44f 72a0 	mov.w	r2, #320	; 0x140
            if((int)temp[(j*ANCHO)+i] < 127){
                x = i - 1; y = j - 1; img[(y*ANCHO) + x] = 0;
 8002f54:	2300      	movs	r3, #0
    for (int j=1;j < (ALTO - 1); j++) {
 8002f56:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002fa8 <erosion+0x78>
 8002f5a:	f5a2 7ca0 	sub.w	ip, r2, #320	; 0x140
 8002f5e:	f5a0 7120 	sub.w	r1, r0, #640	; 0x280
{
 8002f62:	4604      	mov	r4, r0
 8002f64:	2501      	movs	r5, #1
            if((int)temp[(j*ANCHO)+i] < 127){
 8002f66:	eb07 0e02 	add.w	lr, r7, r2
 8002f6a:	f81e 6005 	ldrb.w	r6, [lr, r5]
 8002f6e:	2e7e      	cmp	r6, #126	; 0x7e
 8002f70:	d80a      	bhi.n	8002f88 <erosion+0x58>
 8002f72:	eba1 060c 	sub.w	r6, r1, ip
                x = i - 1; y = j - 1; img[(y*ANCHO) + x] = 0;
 8002f76:	700b      	strb	r3, [r1, #0]
                x = i + 0; y = j - 1; img[(y*ANCHO) + x] = 0;
 8002f78:	704b      	strb	r3, [r1, #1]
                x = i + 1; y = j - 1; img[(y*ANCHO) + x] = 0;
 8002f7a:	708b      	strb	r3, [r1, #2]

                x = i - 1; y = j; img[(y*ANCHO) + x] = 0;
 8002f7c:	54b3      	strb	r3, [r6, r2]
                x = i + 1; y = j; img[(y*ANCHO) + x] = 0;
 8002f7e:	4416      	add	r6, r2
 8002f80:	70b3      	strb	r3, [r6, #2]

                x = i - 1; y = j + 1; img[(y*ANCHO) + x] = 0;
 8002f82:	7023      	strb	r3, [r4, #0]
                x = i + 0; y = j + 1; img[(y*ANCHO) + x] = 0;
 8002f84:	7063      	strb	r3, [r4, #1]
                x = i + 1; y = j + 1; img[(y*ANCHO) + x] = 0;
 8002f86:	70a3      	strb	r3, [r4, #2]
        for (int i=1;i < (ANCHO - 1); i++) {
 8002f88:	3501      	adds	r5, #1
 8002f8a:	3101      	adds	r1, #1
 8002f8c:	3401      	adds	r4, #1
 8002f8e:	4545      	cmp	r5, r8
 8002f90:	d1eb      	bne.n	8002f6a <erosion+0x3a>
 8002f92:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002f96:	f500 70a0 	add.w	r0, r0, #320	; 0x140
    for (int j=1;j < (ALTO - 1); j++) {
 8002f9a:	454a      	cmp	r2, r9
 8002f9c:	d1dd      	bne.n	8002f5a <erosion+0x2a>
            }
        }
    }

    //Libero recursos
    free(temp);
 8002f9e:	4638      	mov	r0, r7
}
 8002fa0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    free(temp);
 8002fa4:	f000 bf52 	b.w	8003e4c <free>
 8002fa8:	00012ac0 	.word	0x00012ac0

08002fac <bound_rectangulo>:
            }
        }
    }
}

void bound_rectangulo(uint8_t *img, uint8_t valor, uint16_t* rect){
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    // x1,y1,x2,y2
    rect[0] = (uint16_t)ANCHO;
    rect[1] = (uint16_t)ALTO;
 8002fae:	23f0      	movs	r3, #240	; 0xf0
    rect[0] = (uint16_t)ANCHO;
 8002fb0:	f44f 74a0 	mov.w	r4, #320	; 0x140
    rect[1] = (uint16_t)ALTO;
 8002fb4:	8053      	strh	r3, [r2, #2]
 8002fb6:	4625      	mov	r5, r4
    rect[2] = 0;
 8002fb8:	2300      	movs	r3, #0
    rect[0] = (uint16_t)ANCHO;
 8002fba:	8014      	strh	r4, [r2, #0]
    rect[2] = 0;
 8002fbc:	8093      	strh	r3, [r2, #4]
    rect[3] = 0;
 8002fbe:	80d3      	strh	r3, [r2, #6]
 8002fc0:	fb05 0603 	mla	r6, r5, r3, r0
void bound_rectangulo(uint8_t *img, uint8_t valor, uint16_t* rect){
 8002fc4:	2400      	movs	r4, #0

    for (int j=0;j < ALTO; j++) {
        for (int i=0;i < ANCHO; i++) {
            // Encontrado Valor
            if((int)img[(j*ANCHO)+i] == valor){
 8002fc6:	5d37      	ldrb	r7, [r6, r4]
 8002fc8:	428f      	cmp	r7, r1
 8002fca:	d10f      	bne.n	8002fec <bound_rectangulo+0x40>
                if(i < rect[0]) rect[0] = (uint16_t)i;
 8002fcc:	8817      	ldrh	r7, [r2, #0]
 8002fce:	42a7      	cmp	r7, r4
                if(j < rect[1]) rect[1] = (uint16_t)j;
 8002fd0:	8857      	ldrh	r7, [r2, #2]
                if(i < rect[0]) rect[0] = (uint16_t)i;
 8002fd2:	bfc8      	it	gt
 8002fd4:	8014      	strhgt	r4, [r2, #0]
                if(j < rect[1]) rect[1] = (uint16_t)j;
 8002fd6:	429f      	cmp	r7, r3
                if(i > rect[2]) rect[2] = (uint16_t)i;
 8002fd8:	8897      	ldrh	r7, [r2, #4]
                if(j < rect[1]) rect[1] = (uint16_t)j;
 8002fda:	bfc8      	it	gt
 8002fdc:	8053      	strhgt	r3, [r2, #2]
                if(i > rect[2]) rect[2] = (uint16_t)i;
 8002fde:	42a7      	cmp	r7, r4
                if(j > rect[3]) rect[3] = (uint16_t)j;
 8002fe0:	88d7      	ldrh	r7, [r2, #6]
                if(i > rect[2]) rect[2] = (uint16_t)i;
 8002fe2:	bfb8      	it	lt
 8002fe4:	8094      	strhlt	r4, [r2, #4]
                if(j > rect[3]) rect[3] = (uint16_t)j;
 8002fe6:	429f      	cmp	r7, r3
 8002fe8:	bfb8      	it	lt
 8002fea:	80d3      	strhlt	r3, [r2, #6]
        for (int i=0;i < ANCHO; i++) {
 8002fec:	3401      	adds	r4, #1
 8002fee:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8002ff2:	d1e8      	bne.n	8002fc6 <bound_rectangulo+0x1a>
    for (int j=0;j < ALTO; j++) {
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	2bf0      	cmp	r3, #240	; 0xf0
 8002ff8:	d1e2      	bne.n	8002fc0 <bound_rectangulo+0x14>
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ffc <__io_putchar>:
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

// Redirecciono el 'printf' al UART 3
extern int __io_putchar(int ch) {
 8002ffc:	b507      	push	{r0, r1, r2, lr}
 8002ffe:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8003000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003004:	2201      	movs	r2, #1
extern int __io_putchar(int ch) {
 8003006:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800300a:	4803      	ldr	r0, [pc, #12]	; (8003018 <__io_putchar+0x1c>)
 800300c:	f7ff fda0 	bl	8002b50 <HAL_UART_Transmit>
	return ch;
}
 8003010:	9801      	ldr	r0, [sp, #4]
 8003012:	b003      	add	sp, #12
 8003014:	f85d fb04 	ldr.w	pc, [sp], #4
 8003018:	20012cb0 	.word	0x20012cb0

0800301c <HAL_DCMI_FrameEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *obj) {
 800301c:	b508      	push	{r3, lr}
	if (hdcmi.Instance != obj->Instance)
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_DCMI_FrameEventCallback+0x1c>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	6803      	ldr	r3, [r0, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d106      	bne.n	8003036 <HAL_DCMI_FrameEventCallback+0x1a>
		return;

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	4804      	ldr	r0, [pc, #16]	; (800303c <HAL_DCMI_FrameEventCallback+0x20>)
 800302c:	f7fe f9bd 	bl	80013aa <HAL_GPIO_TogglePin>
	flagFrame = 1;
 8003030:	2201      	movs	r2, #1
 8003032:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_DCMI_FrameEventCallback+0x24>)
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	bd08      	pop	{r3, pc}
 8003038:	20025a1c 	.word	0x20025a1c
 800303c:	40020400 	.word	0x40020400
 8003040:	2000009a 	.word	0x2000009a

08003044 <HAL_TIM_PeriodElapsedCallback>:
}

// Barrido de Displays
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance != htim2.Instance)
 8003044:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003046:	6802      	ldr	r2, [r0, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	429a      	cmp	r2, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800304c:	b570      	push	{r4, r5, r6, lr}
	if (htim->Instance != htim2.Instance)
 800304e:	d16d      	bne.n	800312c <HAL_TIM_PeriodElapsedCallback+0xe8>
		return;

	//Apagar
	HAL_GPIO_WritePin(DISP1_GPIO_Port, DISP1_Pin, GPIO_PIN_SET);
 8003050:	2201      	movs	r2, #1
 8003052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003056:	4837      	ldr	r0, [pc, #220]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003058:	f7fe f9a2 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP2_GPIO_Port, DISP2_Pin, GPIO_PIN_SET);
 800305c:	2201      	movs	r2, #1
 800305e:	2102      	movs	r1, #2
 8003060:	4835      	ldr	r0, [pc, #212]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003062:	f7fe f99d 	bl	80013a0 <HAL_GPIO_WritePin>

	digTurno++;
 8003066:	4a35      	ldr	r2, [pc, #212]	; (800313c <HAL_TIM_PeriodElapsedCallback+0xf8>)

	if (digTurno % brillo) {
 8003068:	4935      	ldr	r1, [pc, #212]	; (8003140 <HAL_TIM_PeriodElapsedCallback+0xfc>)
	digTurno++;
 800306a:	7813      	ldrb	r3, [r2, #0]
	if (digTurno % brillo) {
 800306c:	7808      	ldrb	r0, [r1, #0]
	digTurno++;
 800306e:	3301      	adds	r3, #1
 8003070:	b2db      	uxtb	r3, r3
	if (digTurno % brillo) {
 8003072:	fbb3 f1f0 	udiv	r1, r3, r0
 8003076:	fb00 3111 	mls	r1, r0, r1, r3
	digTurno++;
 800307a:	7013      	strb	r3, [r2, #0]
	if (digTurno % brillo) {
 800307c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8003080:	d154      	bne.n	800312c <HAL_TIM_PeriodElapsedCallback+0xe8>
		return;
	}

	if (digTurno >= (brillo * 2)) {
 8003082:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
		digTurno = 0;
	}

	GPIO_TypeDef* Puerto = DISP1_GPIO_Port;
	uint16_t Pin = DISP1_Pin;
	uint8_t valor = numero % 10;
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_TIM_PeriodElapsedCallback+0x100>)
		digTurno = 0;
 8003088:	bfa8      	it	ge
 800308a:	7011      	strbge	r1, [r2, #0]

	if (digTurno) {
 800308c:	7810      	ldrb	r0, [r2, #0]
 800308e:	220a      	movs	r2, #10
	uint8_t valor = numero % 10;
 8003090:	781b      	ldrb	r3, [r3, #0]
	if (digTurno) {
 8003092:	2800      	cmp	r0, #0
 8003094:	d141      	bne.n	800311a <HAL_TIM_PeriodElapsedCallback+0xd6>
	uint16_t Pin = DISP1_Pin;
 8003096:	f44f 7600 	mov.w	r6, #512	; 0x200
	GPIO_TypeDef* Puerto = DISP1_GPIO_Port;
 800309a:	4d26      	ldr	r5, [pc, #152]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0xf0>)
	uint8_t valor = numero % 10;
 800309c:	fbb3 f1f2 	udiv	r1, r3, r2
 80030a0:	fb02 3311 	mls	r3, r2, r1, r3
 80030a4:	b2db      	uxtb	r3, r3
	}

	if (valor > 9)
		valor = 9;

	uint8_t digito = dig7seg[valor];
 80030a6:	4a28      	ldr	r2, [pc, #160]	; (8003148 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80030a8:	5cd4      	ldrb	r4, [r2, r3]

	// Quitar el 0 en numeros menores a 10.
	if (digTurno && !valor) {
 80030aa:	b110      	cbz	r0, 80030b2 <HAL_TIM_PeriodElapsedCallback+0x6e>
		digito = 0;
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf08      	it	eq
 80030b0:	2400      	moveq	r4, #0
	}

	HAL_GPIO_WritePin(Da_GPIO_Port, Da_Pin,
 80030b2:	f004 0201 	and.w	r2, r4, #1
 80030b6:	2101      	movs	r1, #1
 80030b8:	4824      	ldr	r0, [pc, #144]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80030ba:	f7fe f971 	bl	80013a0 <HAL_GPIO_WritePin>
			(digito & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Db_GPIO_Port, Db_Pin,
 80030be:	f3c4 0240 	ubfx	r2, r4, #1, #1
 80030c2:	2101      	movs	r1, #1
 80030c4:	4822      	ldr	r0, [pc, #136]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80030c6:	f7fe f96b 	bl	80013a0 <HAL_GPIO_WritePin>
			(digito & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Dc_GPIO_Port, Dc_Pin,
 80030ca:	f3c4 0280 	ubfx	r2, r4, #2, #1
 80030ce:	2104      	movs	r1, #4
 80030d0:	4820      	ldr	r0, [pc, #128]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80030d2:	f7fe f965 	bl	80013a0 <HAL_GPIO_WritePin>
			(digito & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Dd_GPIO_Port, Dd_Pin,
 80030d6:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 80030da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030de:	481e      	ldr	r0, [pc, #120]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80030e0:	f7fe f95e 	bl	80013a0 <HAL_GPIO_WritePin>
			(digito & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(De_GPIO_Port, De_Pin,
 80030e4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80030e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030ec:	481a      	ldr	r0, [pc, #104]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80030ee:	f7fe f957 	bl	80013a0 <HAL_GPIO_WritePin>
			(digito & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Df_GPIO_Port, Df_Pin,
 80030f2:	f3c4 1240 	ubfx	r2, r4, #5, #1
 80030f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030fa:	4817      	ldr	r0, [pc, #92]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80030fc:	f7fe f950 	bl	80013a0 <HAL_GPIO_WritePin>
			(digito & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Dg_GPIO_Port, Dg_Pin,
 8003100:	f3c4 1280 	ubfx	r2, r4, #6, #1
 8003104:	2104      	movs	r1, #4
 8003106:	4811      	ldr	r0, [pc, #68]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003108:	f7fe f94a 	bl	80013a0 <HAL_GPIO_WritePin>
			(digito & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);

	//Prender
	HAL_GPIO_WritePin(Puerto, Pin, GPIO_PIN_RESET);
 800310c:	4631      	mov	r1, r6
 800310e:	4628      	mov	r0, r5
 8003110:	2200      	movs	r2, #0
}
 8003112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(Puerto, Pin, GPIO_PIN_RESET);
 8003116:	f7fe b943 	b.w	80013a0 <HAL_GPIO_WritePin>
 800311a:	fbb3 f3f2 	udiv	r3, r3, r2
 800311e:	2b09      	cmp	r3, #9
		Pin = DISP2_Pin;
 8003120:	f04f 0602 	mov.w	r6, #2
		Puerto = DISP2_GPIO_Port;
 8003124:	4d04      	ldr	r5, [pc, #16]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003126:	bf28      	it	cs
 8003128:	2309      	movcs	r3, #9
 800312a:	e7bc      	b.n	80030a6 <HAL_TIM_PeriodElapsedCallback+0x62>
 800312c:	bd70      	pop	{r4, r5, r6, pc}
 800312e:	bf00      	nop
 8003130:	2005de6c 	.word	0x2005de6c
 8003134:	40021400 	.word	0x40021400
 8003138:	40021800 	.word	0x40021800
 800313c:	20000098 	.word	0x20000098
 8003140:	20000008 	.word	0x20000008
 8003144:	2000009b 	.word	0x2000009b
 8003148:	20000009 	.word	0x20000009
 800314c:	40020400 	.word	0x40020400
 8003150:	40020000 	.word	0x40020000
 8003154:	40021000 	.word	0x40021000
 8003158:	40020c00 	.word	0x40020c00

0800315c <getTiempoMS>:

int getTiempoMS() {
 800315c:	b538      	push	{r3, r4, r5, lr}
	int res = HAL_GetTick() - tiempo;
 800315e:	4d05      	ldr	r5, [pc, #20]	; (8003174 <getTiempoMS+0x18>)
 8003160:	f7fd fa82 	bl	8000668 <HAL_GetTick>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	1ac4      	subs	r4, r0, r3
	tiempo = HAL_GetTick();
 8003168:	f7fd fa7e 	bl	8000668 <HAL_GetTick>
 800316c:	6028      	str	r0, [r5, #0]
	return res;
}
 800316e:	4620      	mov	r0, r4
 8003170:	bd38      	pop	{r3, r4, r5, pc}
 8003172:	bf00      	nop
 8003174:	2000009c 	.word	0x2000009c

08003178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003178:	b510      	push	{r4, lr}
 800317a:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800317c:	2234      	movs	r2, #52	; 0x34
 800317e:	2100      	movs	r1, #0
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003180:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003182:	a807      	add	r0, sp, #28
 8003184:	f000 fe6a 	bl	8003e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003188:	2214      	movs	r2, #20
 800318a:	2100      	movs	r1, #0
 800318c:	a802      	add	r0, sp, #8
 800318e:	f000 fe65 	bl	8003e5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003192:	2100      	movs	r1, #0
 8003194:	2290      	movs	r2, #144	; 0x90
 8003196:	a814      	add	r0, sp, #80	; 0x50
 8003198:	f000 fe60 	bl	8003e5c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b22      	ldr	r3, [pc, #136]	; (8003228 <SystemClock_Config+0xb0>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800319e:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <SystemClock_Config+0xb4>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031be:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031c4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80031c6:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80031cc:	2303      	movs	r3, #3
 80031ce:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031d6:	2301      	movs	r3, #1
 80031d8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031da:	2310      	movs	r3, #16
 80031dc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031e2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031e4:	2308      	movs	r3, #8
 80031e6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80031e8:	23d8      	movs	r3, #216	; 0xd8
 80031ea:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ec:	f7fe f9b8 	bl	8001560 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80031f0:	f7fe f97e 	bl	80014f0 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031f4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031f6:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031f8:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031fa:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003200:	2107      	movs	r1, #7
 8003202:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003204:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800320a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800320c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800320e:	f7fe fb61 	bl	80018d4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8003212:	f44f 4382 	mov.w	r3, #16640	; 0x4100
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003216:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003218:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800321a:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 800321c:	2320      	movs	r3, #32
 800321e:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003220:	f7fe fc16 	bl	8001a50 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003224:	b038      	add	sp, #224	; 0xe0
 8003226:	bd10      	pop	{r4, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	40007000 	.word	0x40007000

08003230 <main>:
{
 8003230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003234:	b09b      	sub	sp, #108	; 0x6c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003236:	4eba      	ldr	r6, [pc, #744]	; (8003520 <main+0x2f0>)
  HAL_Init();
 8003238:	f7fd f9fe 	bl	8000638 <HAL_Init>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Dc_Pin */
  GPIO_InitStruct.Pin = Dc_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323e:	ac13      	add	r4, sp, #76	; 0x4c
  SystemClock_Config();
 8003240:	f7ff ff9a 	bl	8003178 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	2314      	movs	r3, #20
 8003246:	2100      	movs	r1, #0
 8003248:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324a:	2701      	movs	r7, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	461a      	mov	r2, r3
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	f000 fe04 	bl	8003e5c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003254:	6b32      	ldr	r2, [r6, #48]	; 0x30
  HAL_GPIO_WritePin(Dc_GPIO_Port, Dc_Pin, GPIO_PIN_RESET);
 8003256:	2104      	movs	r1, #4
 8003258:	48b2      	ldr	r0, [pc, #712]	; (8003524 <main+0x2f4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800325a:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DISP1_Pin */
  GPIO_InitStruct.Pin = DISP1_Pin;
 800325e:	f44f 7b00 	mov.w	fp, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003262:	f04f 0911 	mov.w	r9, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : DISP2_Pin */
  GPIO_InitStruct.Pin = DISP2_Pin;
 8003266:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800326a:	6332      	str	r2, [r6, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DISP2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800326c:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003270:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8003272:	f002 0210 	and.w	r2, r2, #16
 8003276:	9204      	str	r2, [sp, #16]
 8003278:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800327a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800327c:	f042 0204 	orr.w	r2, r2, #4
 8003280:	6332      	str	r2, [r6, #48]	; 0x30
 8003282:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8003284:	f002 0204 	and.w	r2, r2, #4
 8003288:	9205      	str	r2, [sp, #20]
 800328a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800328c:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800328e:	f042 0220 	orr.w	r2, r2, #32
 8003292:	6332      	str	r2, [r6, #48]	; 0x30
 8003294:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8003296:	f002 0220 	and.w	r2, r2, #32
 800329a:	9206      	str	r2, [sp, #24]
 800329c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800329e:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032a4:	6332      	str	r2, [r6, #48]	; 0x30
 80032a6:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80032ac:	9207      	str	r2, [sp, #28]
 80032ae:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b0:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	6332      	str	r2, [r6, #48]	; 0x30
 80032b8:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032ba:	f002 0201 	and.w	r2, r2, #1
 80032be:	9208      	str	r2, [sp, #32]
 80032c0:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c2:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032c4:	f042 0202 	orr.w	r2, r2, #2
 80032c8:	6332      	str	r2, [r6, #48]	; 0x30
 80032ca:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032cc:	f002 0202 	and.w	r2, r2, #2
 80032d0:	9209      	str	r2, [sp, #36]	; 0x24
 80032d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032d4:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032da:	6332      	str	r2, [r6, #48]	; 0x30
 80032dc:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032de:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80032e2:	920a      	str	r2, [sp, #40]	; 0x28
 80032e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032e6:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032e8:	f042 0208 	orr.w	r2, r2, #8
 80032ec:	6332      	str	r2, [r6, #48]	; 0x30
 80032ee:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80032f0:	f002 0208 	and.w	r2, r2, #8
 80032f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80032f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(Dc_GPIO_Port, Dc_Pin, GPIO_PIN_RESET);
 80032f8:	2200      	movs	r2, #0
 80032fa:	f7fe f851 	bl	80013a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DISP1_GPIO_Port, DISP1_Pin, GPIO_PIN_SET);
 80032fe:	2201      	movs	r2, #1
 8003300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003304:	4888      	ldr	r0, [pc, #544]	; (8003528 <main+0x2f8>)
 8003306:	f7fe f84b 	bl	80013a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 800330a:	2200      	movs	r2, #0
 800330c:	2101      	movs	r1, #1
 800330e:	4887      	ldr	r0, [pc, #540]	; (800352c <main+0x2fc>)
 8003310:	f7fe f846 	bl	80013a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, Db_Pin|CAM_PWD_Pin, GPIO_PIN_RESET);
 8003314:	2200      	movs	r2, #0
 8003316:	2109      	movs	r1, #9
 8003318:	4885      	ldr	r0, [pc, #532]	; (8003530 <main+0x300>)
 800331a:	f7fe f841 	bl	80013a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Da_Pin|Dg_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800331e:	2200      	movs	r2, #0
 8003320:	f244 0185 	movw	r1, #16517	; 0x4085
 8003324:	4883      	ldr	r0, [pc, #524]	; (8003534 <main+0x304>)
 8003326:	f7fe f83b 	bl	80013a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DISP2_GPIO_Port, DISP2_Pin, GPIO_PIN_SET);
 800332a:	2201      	movs	r2, #1
 800332c:	2102      	movs	r1, #2
 800332e:	4882      	ldr	r0, [pc, #520]	; (8003538 <main+0x308>)
 8003330:	f7fe f836 	bl	80013a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, Dd_Pin|De_Pin|Df_Pin, GPIO_PIN_RESET);
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800333a:	4880      	ldr	r0, [pc, #512]	; (800353c <main+0x30c>)
 800333c:	f7fe f830 	bl	80013a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003340:	2200      	movs	r2, #0
 8003342:	2140      	movs	r1, #64	; 0x40
 8003344:	487c      	ldr	r0, [pc, #496]	; (8003538 <main+0x308>)
 8003346:	f7fe f82b 	bl	80013a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Dc_Pin;
 800334a:	2204      	movs	r2, #4
  HAL_GPIO_Init(Dc_GPIO_Port, &GPIO_InitStruct);
 800334c:	4621      	mov	r1, r4
 800334e:	4875      	ldr	r0, [pc, #468]	; (8003524 <main+0x2f4>)
  GPIO_InitStruct.Pin = Dc_Pin;
 8003350:	9213      	str	r2, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003356:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(Dc_GPIO_Port, &GPIO_InitStruct);
 8003358:	f7fd ff32 	bl	80011c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800335c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003360:	4621      	mov	r1, r4
 8003362:	4872      	ldr	r0, [pc, #456]	; (800352c <main+0x2fc>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003364:	9213      	str	r2, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003366:	4a76      	ldr	r2, [pc, #472]	; (8003540 <main+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800336a:	9214      	str	r2, [sp, #80]	; 0x50
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800336c:	f7fd ff28 	bl	80011c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISP1_GPIO_Port, &GPIO_InitStruct);
 8003370:	4621      	mov	r1, r4
 8003372:	486d      	ldr	r0, [pc, #436]	; (8003528 <main+0x2f8>)
  GPIO_InitStruct.Pin = DISP1_Pin;
 8003374:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003378:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(DISP1_GPIO_Port, &GPIO_InitStruct);
 8003380:	f7fd ff1e 	bl	80011c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8003384:	4621      	mov	r1, r4
 8003386:	4869      	ldr	r0, [pc, #420]	; (800352c <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 800338c:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338e:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 8003390:	f7fd ff16 	bl	80011c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Db_Pin|CAM_PWD_Pin;
 8003394:	2209      	movs	r2, #9
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	4621      	mov	r1, r4
 8003398:	4865      	ldr	r0, [pc, #404]	; (8003530 <main+0x300>)
  GPIO_InitStruct.Pin = Db_Pin|CAM_PWD_Pin;
 800339a:	9213      	str	r2, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a0:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a2:	f7fd ff0d 	bl	80011c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Da_Pin|Dg_Pin|LD2_Pin;
 80033a6:	2285      	movs	r2, #133	; 0x85
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a8:	4621      	mov	r1, r4
 80033aa:	4862      	ldr	r0, [pc, #392]	; (8003534 <main+0x304>)
  GPIO_InitStruct.Pin = Da_Pin|Dg_Pin|LD2_Pin;
 80033ac:	9213      	str	r2, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b0:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b2:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b4:	f7fd ff04 	bl	80011c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISP2_GPIO_Port, &GPIO_InitStruct);
 80033b8:	4621      	mov	r1, r4
 80033ba:	485f      	ldr	r0, [pc, #380]	; (8003538 <main+0x308>)
  GPIO_InitStruct.Pin = DISP2_Pin;
 80033bc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80033c0:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80033c4:	f04f 0980 	mov.w	r9, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(DISP2_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f7fd fef8 	bl	80011c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2203      	movs	r2, #3
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80033d2:	4621      	mov	r1, r4
 80033d4:	4857      	ldr	r0, [pc, #348]	; (8003534 <main+0x304>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d6:	9216      	str	r2, [sp, #88]	; 0x58
 80033d8:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = LD3_Pin;
 80033dc:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e0:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80033e2:	f7fd feed 	bl	80011c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Dd_Pin|De_Pin|Df_Pin;
 80033e6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ea:	4854      	ldr	r0, [pc, #336]	; (800353c <main+0x30c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = Dd_Pin|De_Pin|Df_Pin;
 80033ee:	9113      	str	r1, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f0:	4621      	mov	r1, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f4:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f6:	f7fd fee3 	bl	80011c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80033fa:	2140      	movs	r1, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80033fc:	484e      	ldr	r0, [pc, #312]	; (8003538 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003400:	9113      	str	r1, [sp, #76]	; 0x4c
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003402:	4621      	mov	r1, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003406:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003408:	f7fd feda 	bl	80011c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800340c:	4621      	mov	r1, r4
 800340e:	484a      	ldr	r0, [pc, #296]	; (8003538 <main+0x308>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003410:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003414:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003418:	f7fd fed2 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341c:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800341e:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	4843      	ldr	r0, [pc, #268]	; (8003530 <main+0x300>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	9216      	str	r2, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003426:	220a      	movs	r2, #10
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003428:	9113      	str	r1, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342a:	4621      	mov	r1, r4
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800342c:	9217      	str	r2, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003434:	f7fd fec4 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003438:	4621      	mov	r1, r4
 800343a:	483d      	ldr	r0, [pc, #244]	; (8003530 <main+0x300>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800343c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003440:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003444:	f7fd febc 	bl	80011c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003448:	6b32      	ldr	r2, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800344a:	2105      	movs	r1, #5
 800344c:	2039      	movs	r0, #57	; 0x39
  htim2.Instance = TIM2;
 800344e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 800354c <main+0x31c>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003452:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003456:	6332      	str	r2, [r6, #48]	; 0x30
 8003458:	6b32      	ldr	r2, [r6, #48]	; 0x30
  htim3.Instance = TIM3;
 800345a:	4e3a      	ldr	r6, [pc, #232]	; (8003544 <main+0x314>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800345c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003460:	9203      	str	r2, [sp, #12]
 8003462:	9a03      	ldr	r2, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003464:	462a      	mov	r2, r5
 8003466:	f7fd f929 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800346a:	2039      	movs	r0, #57	; 0x39
 800346c:	f7fd f95e 	bl	800072c <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003470:	4629      	mov	r1, r5
 8003472:	2210      	movs	r2, #16
 8003474:	4620      	mov	r0, r4
 8003476:	f000 fcf1 	bl	8003e5c <memset>
  htim2.Init.Prescaler = 10000;
 800347a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800347e:	f242 7310 	movw	r3, #10000	; 0x2710
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003482:	4658      	mov	r0, fp
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003484:	950f      	str	r5, [sp, #60]	; 0x3c
 8003486:	9510      	str	r5, [sp, #64]	; 0x40
 8003488:	9511      	str	r5, [sp, #68]	; 0x44
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348a:	f8cb 5008 	str.w	r5, [fp, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348e:	f8cb 5010 	str.w	r5, [fp, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003492:	f8cb 9018 	str.w	r9, [fp, #24]
  htim2.Init.Prescaler = 10000;
 8003496:	e88b 000c 	stmia.w	fp, {r2, r3}
  htim2.Init.Period = 20;
 800349a:	9b01      	ldr	r3, [sp, #4]
 800349c:	f8cb 300c 	str.w	r3, [fp, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034a0:	f7fe ff9a 	bl	80023d8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034a8:	4621      	mov	r1, r4
 80034aa:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80034ae:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034b0:	f7ff f88e 	bl	80025d0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034b4:	a90f      	add	r1, sp, #60	; 0x3c
 80034b6:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034b8:	950f      	str	r5, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ba:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034bc:	f7ff f950 	bl	8002760 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034c0:	4629      	mov	r1, r5
 80034c2:	2210      	movs	r2, #16
 80034c4:	a80f      	add	r0, sp, #60	; 0x3c
 80034c6:	f000 fcc9 	bl	8003e5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034ca:	4629      	mov	r1, r5
 80034cc:	221c      	movs	r2, #28
 80034ce:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d0:	950c      	str	r5, [sp, #48]	; 0x30
 80034d2:	950d      	str	r5, [sp, #52]	; 0x34
 80034d4:	950e      	str	r5, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034d6:	f000 fcc1 	bl	8003e5c <memset>
  htim3.Instance = TIM3;
 80034da:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <main+0x318>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034dc:	4630      	mov	r0, r6
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034de:	60b5      	str	r5, [r6, #8]
  htim3.Init.Period = 2;
 80034e0:	f8c6 800c 	str.w	r8, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e4:	6135      	str	r5, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034e6:	f8c6 9018 	str.w	r9, [r6, #24]
  hi2c1.Instance = I2C1;
 80034ea:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8003550 <main+0x320>
  htim3.Init.Prescaler = 1;
 80034ee:	e886 0084 	stmia.w	r6, {r2, r7}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034f2:	f7fe ff71 	bl	80023d8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f6:	9b00      	ldr	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034f8:	a90f      	add	r1, sp, #60	; 0x3c
 80034fa:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034fc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034fe:	f7ff f867 	bl	80025d0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003502:	4630      	mov	r0, r6
 8003504:	f7fe ff82 	bl	800240c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003508:	a90c      	add	r1, sp, #48	; 0x30
 800350a:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350c:	950c      	str	r5, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003510:	f7ff f926 	bl	8002760 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003514:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003516:	4621      	mov	r1, r4
 8003518:	462a      	mov	r2, r5
 800351a:	4630      	mov	r0, r6
 800351c:	e01a      	b.n	8003554 <main+0x324>
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40021000 	.word	0x40021000
 8003528:	40021400 	.word	0x40021400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020400 	.word	0x40020400
 8003538:	40021800 	.word	0x40021800
 800353c:	40020c00 	.word	0x40020c00
 8003540:	10110000 	.word	0x10110000
 8003544:	200259dc 	.word	0x200259dc
 8003548:	40000400 	.word	0x40000400
 800354c:	2005de6c 	.word	0x2005de6c
 8003550:	20012d30 	.word	0x20012d30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003554:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003556:	9515      	str	r5, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003558:	9517      	str	r5, [sp, #92]	; 0x5c
  sConfigOC.Pulse = 1;
 800355a:	9714      	str	r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800355c:	f7fe ffa8 	bl	80024b0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8003560:	4630      	mov	r0, r6
 8003562:	f000 fb3d 	bl	8003be0 <HAL_TIM_MspPostInit>
  huart3.Instance = USART3;
 8003566:	48bf      	ldr	r0, [pc, #764]	; (8003864 <main+0x634>)
  huart3.Init.BaudRate = 9600;
 8003568:	4abf      	ldr	r2, [pc, #764]	; (8003868 <main+0x638>)
 800356a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800356e:	6085      	str	r5, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003570:	60c5      	str	r5, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003572:	6105      	str	r5, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003574:	6185      	str	r5, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003576:	61c5      	str	r5, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003578:	6205      	str	r5, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800357a:	6245      	str	r5, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 9600;
 800357c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003580:	230c      	movs	r3, #12
 8003582:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003584:	f7ff fb5b 	bl	8002c3e <HAL_UART_Init>
  hdcmi.Instance = DCMI;
 8003588:	48b8      	ldr	r0, [pc, #736]	; (800386c <main+0x63c>)
 800358a:	4bb9      	ldr	r3, [pc, #740]	; (8003870 <main+0x640>)
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800358c:	6105      	str	r5, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800358e:	6145      	str	r5, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003590:	6185      	str	r5, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8003592:	6205      	str	r5, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8003594:	6245      	str	r5, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8003596:	6285      	str	r5, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8003598:	62c5      	str	r5, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800359a:	6305      	str	r5, [r0, #48]	; 0x30
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800359c:	f8c0 900c 	str.w	r9, [r0, #12]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80035a0:	e880 0028 	stmia.w	r0, {r3, r5}
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80035a4:	2320      	movs	r3, #32
 80035a6:	6083      	str	r3, [r0, #8]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80035a8:	f7fd f922 	bl	80007f0 <HAL_DCMI_Init>
  hi2c1.Instance = I2C1;
 80035ac:	4bb1      	ldr	r3, [pc, #708]	; (8003874 <main+0x644>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035ae:	4640      	mov	r0, r8
  hi2c1.Init.OwnAddress1 = 0;
 80035b0:	f8c8 5008 	str.w	r5, [r8, #8]
  hi2c1.Instance = I2C1;
 80035b4:	f8c8 3000 	str.w	r3, [r8]
  hi2c1.Init.Timing = 0x20404768;
 80035b8:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035bc:	f8c8 5010 	str.w	r5, [r8, #16]
  hi2c1.Init.Timing = 0x20404768;
 80035c0:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
  hi2c1.Init.OwnAddress2 = 0;
 80035c4:	f8c8 5014 	str.w	r5, [r8, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035c8:	f8c8 5018 	str.w	r5, [r8, #24]
  hi2c1.Init.Timing = 0x20404768;
 80035cc:	f8c8 3004 	str.w	r3, [r8, #4]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035d0:	f8c8 501c 	str.w	r5, [r8, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035d4:	f8c8 5020 	str.w	r5, [r8, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035d8:	f8c8 700c 	str.w	r7, [r8, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035dc:	f7fd feec 	bl	80013b8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035e0:	4629      	mov	r1, r5
 80035e2:	4640      	mov	r0, r8
 80035e4:	f7fd ff39 	bl	800145a <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80035e8:	4629      	mov	r1, r5
 80035ea:	4640      	mov	r0, r8
 80035ec:	f7fd ff5b 	bl	80014a6 <HAL_I2CEx_ConfigDigitalFilter>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80035f0:	463a      	mov	r2, r7
 80035f2:	4649      	mov	r1, r9
 80035f4:	48a0      	ldr	r0, [pc, #640]	; (8003878 <main+0x648>)
 80035f6:	f7fd fed3 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80035fa:	463a      	mov	r2, r7
 80035fc:	4651      	mov	r1, sl
 80035fe:	489e      	ldr	r0, [pc, #632]	; (8003878 <main+0x648>)
 8003600:	f7fd fece 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8003604:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003608:	f7fd f834 	bl	8000674 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800360c:	462a      	mov	r2, r5
 800360e:	4649      	mov	r1, r9
 8003610:	4899      	ldr	r0, [pc, #612]	; (8003878 <main+0x648>)
 8003612:	f7fd fec5 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003616:	462a      	mov	r2, r5
 8003618:	4651      	mov	r1, sl
 800361a:	4897      	ldr	r0, [pc, #604]	; (8003878 <main+0x648>)
 800361c:	f7fd fec0 	bl	80013a0 <HAL_GPIO_WritePin>
	printf("\n\n\n\n\nEMPEZANDO!\r\n\n");
 8003620:	4896      	ldr	r0, [pc, #600]	; (800387c <main+0x64c>)
 8003622:	f000 fd43 	bl	80040ac <puts>
	DWT_Init(); // Delay de micro segundos
 8003626:	f7ff fc13 	bl	8002e50 <DWT_Init>
	tiempo = HAL_GetTick();
 800362a:	f7fd f81d 	bl	8000668 <HAL_GetTick>
 800362e:	4b94      	ldr	r3, [pc, #592]	; (8003880 <main+0x650>)
 8003630:	6018      	str	r0, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8003632:	4658      	mov	r0, fp
 8003634:	f7fe fd9e 	bl	8002174 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003638:	4629      	mov	r1, r5
		printf("CAM: Error al Inicializar.\r\n");
 800363a:	4d92      	ldr	r5, [pc, #584]	; (8003884 <main+0x654>)
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800363c:	4630      	mov	r0, r6
 800363e:	f7ff f869 	bl	8002714 <HAL_TIM_PWM_Start>
	while (!OV7670_init()) {
 8003642:	f000 f965 	bl	8003910 <OV7670_init>
 8003646:	2800      	cmp	r0, #0
 8003648:	f000 80a3 	beq.w	8003792 <main+0x562>
	OV7670_config();
 800364c:	f000 f976 	bl	800393c <OV7670_config>
	printf("CAM: Init (%ums)\r\n", getTiempoMS());
 8003650:	f7ff fd84 	bl	800315c <getTiempoMS>
 8003654:	4601      	mov	r1, r0
 8003656:	488c      	ldr	r0, [pc, #560]	; (8003888 <main+0x658>)
 8003658:	f000 fcb4 	bl	8003fc4 <iprintf>
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t) frame_buffer,
 800365c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003660:	4a8a      	ldr	r2, [pc, #552]	; (800388c <main+0x65c>)
 8003662:	2100      	movs	r1, #0
 8003664:	4881      	ldr	r0, [pc, #516]	; (800386c <main+0x63c>)
 8003666:	f7fd f909 	bl	800087c <HAL_DCMI_Start_DMA>
    uint16_t* rectangulos = (uint16_t*) malloc(4); //rectangulo con x1,y1,x2,y2
 800366a:	2004      	movs	r0, #4
 800366c:	f000 fbe6 	bl	8003e3c <malloc>
 8003670:	2300      	movs	r3, #0
 8003672:	4680      	mov	r8, r0
	for(uint8_t i=0; i < 20; i++) estados[i]=0;
 8003674:	461a      	mov	r2, r3
 8003676:	54e2      	strb	r2, [r4, r3]
 8003678:	3301      	adds	r3, #1
 800367a:	2b14      	cmp	r3, #20
 800367c:	d1fb      	bne.n	8003676 <main+0x446>
 800367e:	2500      	movs	r5, #0
 8003680:	2601      	movs	r6, #1
		if(flagFrame){
 8003682:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80038a4 <main+0x674>
 8003686:	462f      	mov	r7, r5
			flagEnviando = 0;
 8003688:	f8df a228 	ldr.w	sl, [pc, #552]	; 80038b4 <main+0x684>
		if(flagFrame){
 800368c:	f899 3000 	ldrb.w	r3, [r9]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d06a      	beq.n	800376a <main+0x53a>
			HAL_DCMI_Suspend(&hdcmi);
 8003694:	4875      	ldr	r0, [pc, #468]	; (800386c <main+0x63c>)
 8003696:	f7fd f94f 	bl	8000938 <HAL_DCMI_Suspend>
				uint16_t pixel = frame_buffer[pos];
 800369a:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 800388c <main+0x65c>
			for(uint32_t pos=0;pos < (IMG_COLUMNS * IMG_ROWS);pos++){
 800369e:	2200      	movs	r2, #0
				img1[pos] = (b+g+r) / 3;
 80036a0:	487b      	ldr	r0, [pc, #492]	; (8003890 <main+0x660>)
 80036a2:	f04f 0e03 	mov.w	lr, #3
				uint16_t pixel = frame_buffer[pos];
 80036a6:	f83b 1012 	ldrh.w	r1, [fp, r2, lsl #1]
				img1[pos] = (b+g+r) / 3;
 80036aa:	f3c1 1c44 	ubfx	ip, r1, #5, #5
 80036ae:	f001 031f 	and.w	r3, r1, #31
 80036b2:	f3c1 2184 	ubfx	r1, r1, #10, #5
 80036b6:	4463      	add	r3, ip
 80036b8:	440b      	add	r3, r1
 80036ba:	fb93 f3fe 	sdiv	r3, r3, lr
 80036be:	5413      	strb	r3, [r2, r0]
			for(uint32_t pos=0;pos < (IMG_COLUMNS * IMG_ROWS);pos++){
 80036c0:	3201      	adds	r2, #1
 80036c2:	f5b2 3f96 	cmp.w	r2, #76800	; 0x12c00
 80036c6:	d1ee      	bne.n	80036a6 <main+0x476>
			if(primero){
 80036c8:	b11e      	cbz	r6, 80036d2 <main+0x4a2>
				copy(img1, img2);
 80036ca:	4972      	ldr	r1, [pc, #456]	; (8003894 <main+0x664>)
 80036cc:	4870      	ldr	r0, [pc, #448]	; (8003890 <main+0x660>)
 80036ce:	f7ff fc04 	bl	8002eda <copy>
			diferencia(img1, img2, 10);
 80036d2:	220a      	movs	r2, #10
 80036d4:	496f      	ldr	r1, [pc, #444]	; (8003894 <main+0x664>)
 80036d6:	486e      	ldr	r0, [pc, #440]	; (8003890 <main+0x660>)
 80036d8:	f7ff fbe8 	bl	8002eac <diferencia>
			int cont_blancos = conteo(img2);
 80036dc:	486d      	ldr	r0, [pc, #436]	; (8003894 <main+0x664>)
 80036de:	f7ff fc09 	bl	8002ef4 <conteo>
			if(cont_blancos > cteMovimiento){
 80036e2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80036e6:	dd37      	ble.n	8003758 <main+0x528>
				printf("Con movimiento!\r\n");
 80036e8:	486b      	ldr	r0, [pc, #428]	; (8003898 <main+0x668>)
 80036ea:	f000 fcdf 	bl	80040ac <puts>
				binarizar(img2, 10);
 80036ee:	210a      	movs	r1, #10
 80036f0:	4868      	ldr	r0, [pc, #416]	; (8003894 <main+0x664>)
 80036f2:	f7ff fc0d 	bl	8002f10 <binarizar>
				erosion(img2);
 80036f6:	4867      	ldr	r0, [pc, #412]	; (8003894 <main+0x664>)
 80036f8:	f7ff fc1a 	bl	8002f30 <erosion>
				erosion(img2);
 80036fc:	4865      	ldr	r0, [pc, #404]	; (8003894 <main+0x664>)
 80036fe:	f7ff fc17 	bl	8002f30 <erosion>
				erosion(img2);
 8003702:	4864      	ldr	r0, [pc, #400]	; (8003894 <main+0x664>)
 8003704:	f7ff fc14 	bl	8002f30 <erosion>
				erosion(img2);
 8003708:	4862      	ldr	r0, [pc, #392]	; (8003894 <main+0x664>)
 800370a:	f7ff fc11 	bl	8002f30 <erosion>
				erosion(img2);
 800370e:	4861      	ldr	r0, [pc, #388]	; (8003894 <main+0x664>)
 8003710:	f7ff fc0e 	bl	8002f30 <erosion>
				bound_rectangulo(img2, 255, rectangulos);
 8003714:	4642      	mov	r2, r8
 8003716:	21ff      	movs	r1, #255	; 0xff
 8003718:	485e      	ldr	r0, [pc, #376]	; (8003894 <main+0x664>)
 800371a:	f7ff fc47 	bl	8002fac <bound_rectangulo>
				if((x1 < linea1) && (x2 > linea1)){
 800371e:	f8b8 3000 	ldrh.w	r3, [r8]
 8003722:	2bbf      	cmp	r3, #191	; 0xbf
 8003724:	f300 80c8 	bgt.w	80038b8 <main+0x688>
 8003728:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800372c:	f1bb 0fc0 	cmp.w	fp, #192	; 0xc0
 8003730:	dd37      	ble.n	80037a2 <main+0x572>
					printf("LINEA UP\r\n");
 8003732:	485a      	ldr	r0, [pc, #360]	; (800389c <main+0x66c>)
					estado |= (1 << 0);
 8003734:	2601      	movs	r6, #1
 8003736:	9300      	str	r3, [sp, #0]
					printf("LINEA UP\r\n");
 8003738:	f000 fcb8 	bl	80040ac <puts>
 800373c:	9b00      	ldr	r3, [sp, #0]
				if((x1 < linea2) && (x2 > linea2)){
 800373e:	2b7f      	cmp	r3, #127	; 0x7f
 8003740:	dc31      	bgt.n	80037a6 <main+0x576>
 8003742:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8003746:	dd2e      	ble.n	80037a6 <main+0x576>
					estado |= (1 << 1);
 8003748:	f046 0602 	orr.w	r6, r6, #2
					printf("LINEA DW\r\n");
 800374c:	4854      	ldr	r0, [pc, #336]	; (80038a0 <main+0x670>)
 800374e:	f000 fcad 	bl	80040ac <puts>
				if(estado != estado_ant){
 8003752:	42b7      	cmp	r7, r6
 8003754:	f040 8081 	bne.w	800385a <main+0x62a>
			copy(img1, img2);
 8003758:	494e      	ldr	r1, [pc, #312]	; (8003894 <main+0x664>)
			flagFrame = 0;
 800375a:	2600      	movs	r6, #0
			copy(img1, img2);
 800375c:	484c      	ldr	r0, [pc, #304]	; (8003890 <main+0x660>)
 800375e:	f7ff fbbc 	bl	8002eda <copy>
			flagFrame = 0;
 8003762:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <main+0x674>)
			flagEnviando = 0;
 8003764:	f88a 6000 	strb.w	r6, [sl]
			flagFrame = 0;
 8003768:	701e      	strb	r6, [r3, #0]
		if (!flagEnviando
 800376a:	f89a b000 	ldrb.w	fp, [sl]
 800376e:	f1bb 0f00 	cmp.w	fp, #0
 8003772:	d18b      	bne.n	800368c <main+0x45c>
				&& HAL_DCMI_GetState(&hdcmi) == HAL_DCMI_STATE_SUSPENDED) {
 8003774:	483d      	ldr	r0, [pc, #244]	; (800386c <main+0x63c>)
 8003776:	f7fd f98d 	bl	8000a94 <HAL_DCMI_GetState>
 800377a:	2805      	cmp	r0, #5
 800377c:	d186      	bne.n	800368c <main+0x45c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800377e:	465a      	mov	r2, fp
 8003780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003784:	483c      	ldr	r0, [pc, #240]	; (8003878 <main+0x648>)
 8003786:	f7fd fe0b 	bl	80013a0 <HAL_GPIO_WritePin>
			HAL_DCMI_Resume(&hdcmi);
 800378a:	4838      	ldr	r0, [pc, #224]	; (800386c <main+0x63c>)
 800378c:	f7fd f90a 	bl	80009a4 <HAL_DCMI_Resume>
 8003790:	e77c      	b.n	800368c <main+0x45c>
		printf("CAM: Error al Inicializar.\r\n");
 8003792:	4628      	mov	r0, r5
 8003794:	f000 fc8a 	bl	80040ac <puts>
		HAL_Delay(300);
 8003798:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800379c:	f7fc ff6a 	bl	8000674 <HAL_Delay>
 80037a0:	e74f      	b.n	8003642 <main+0x412>
				estado = 0;
 80037a2:	2600      	movs	r6, #0
 80037a4:	e7cb      	b.n	800373e <main+0x50e>
				if(estado != estado_ant){
 80037a6:	42be      	cmp	r6, r7
 80037a8:	d0d6      	beq.n	8003758 <main+0x528>
					estados[ind_estado] = estado;
 80037aa:	ab1a      	add	r3, sp, #104	; 0x68
 80037ac:	442b      	add	r3, r5
 80037ae:	f803 6c1c 	strb.w	r6, [r3, #-28]
					if(estado == 0 && ind_estado > 0){
 80037b2:	2e00      	cmp	r6, #0
 80037b4:	d14d      	bne.n	8003852 <main+0x622>
 80037b6:	2d00      	cmp	r5, #0
 80037b8:	d04a      	beq.n	8003850 <main+0x620>
								if(estados[0]==1)
 80037ba:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 80037be:	4622      	mov	r2, r4
 80037c0:	f10d 065f 	add.w	r6, sp, #95	; 0x5f
								if(estados[0]==1 || estados[0]==3)
 80037c4:	2300      	movs	r3, #0
								if(estados[0]==2 || estados[0]==3)
 80037c6:	1e88      	subs	r0, r1, #2
								if(estados[0]==1 || estados[0]==3)
 80037c8:	f001 07fd 	and.w	r7, r1, #253	; 0xfd
								if(estados[0]==2 || estados[0]==3)
 80037cc:	b2c0      	uxtb	r0, r0
							if(estados[i-1]==2 && estados[i]==0){
 80037ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80037d2:	2d02      	cmp	r5, #2
 80037d4:	d11d      	bne.n	8003812 <main+0x5e2>
 80037d6:	7815      	ldrb	r5, [r2, #0]
 80037d8:	b915      	cbnz	r5, 80037e0 <main+0x5b0>
									direccion = 1;
 80037da:	2f01      	cmp	r7, #1
 80037dc:	bf08      	it	eq
 80037de:	2301      	moveq	r3, #1
						for(uint8_t i=1; i < 20; i++){
 80037e0:	4296      	cmp	r6, r2
 80037e2:	d1f4      	bne.n	80037ce <main+0x59e>
						if(direccion == 1){
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d12a      	bne.n	800383e <main+0x60e>
							printf("ENTRANDO!\r\n");
 80037e8:	482f      	ldr	r0, [pc, #188]	; (80038a8 <main+0x678>)
 80037ea:	f000 fc5f 	bl	80040ac <puts>
							numero++;
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <main+0x67c>)
 80037f0:	7813      	ldrb	r3, [r2, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	b2db      	uxtb	r3, r3
							if (numero > 99)
 80037f6:	2b63      	cmp	r3, #99	; 0x63
							numero++;
 80037f8:	7013      	strb	r3, [r2, #0]
							if (numero > 99)
 80037fa:	d901      	bls.n	8003800 <main+0x5d0>
								numero = 99;
 80037fc:	2363      	movs	r3, #99	; 0x63
							numero--;
 80037fe:	7013      	strb	r3, [r2, #0]
									direccion = 2;
 8003800:	2300      	movs	r3, #0
						for(uint8_t i=0; i < 20; i++) estados[i]=0;
 8003802:	461a      	mov	r2, r3
 8003804:	54e2      	strb	r2, [r4, r3]
 8003806:	3301      	adds	r3, #1
 8003808:	2b14      	cmp	r3, #20
 800380a:	d1fb      	bne.n	8003804 <main+0x5d4>
						ind_estado = 0;
 800380c:	2500      	movs	r5, #0
 800380e:	462f      	mov	r7, r5
 8003810:	e7a2      	b.n	8003758 <main+0x528>
							else if(estados[i-1]==1 && estados[i]==0){
 8003812:	2d01      	cmp	r5, #1
 8003814:	d106      	bne.n	8003824 <main+0x5f4>
 8003816:	7815      	ldrb	r5, [r2, #0]
 8003818:	2d00      	cmp	r5, #0
 800381a:	d1e1      	bne.n	80037e0 <main+0x5b0>
									direccion = 2;
 800381c:	2801      	cmp	r0, #1
 800381e:	bf98      	it	ls
 8003820:	2302      	movls	r3, #2
 8003822:	e7dd      	b.n	80037e0 <main+0x5b0>
							else if(estados[i-1]==3 && estados[i]==0){
 8003824:	2d03      	cmp	r5, #3
 8003826:	d1db      	bne.n	80037e0 <main+0x5b0>
 8003828:	7815      	ldrb	r5, [r2, #0]
 800382a:	2d00      	cmp	r5, #0
 800382c:	d1d8      	bne.n	80037e0 <main+0x5b0>
								if(estados[0]==1)
 800382e:	2901      	cmp	r1, #1
 8003830:	d003      	beq.n	800383a <main+0x60a>
									direccion = 2;
 8003832:	2902      	cmp	r1, #2
 8003834:	bf08      	it	eq
 8003836:	2302      	moveq	r3, #2
 8003838:	e7d2      	b.n	80037e0 <main+0x5b0>
									direccion = 1;
 800383a:	460b      	mov	r3, r1
 800383c:	e7d0      	b.n	80037e0 <main+0x5b0>
						else if(direccion == 2){
 800383e:	2b02      	cmp	r3, #2
 8003840:	d1de      	bne.n	8003800 <main+0x5d0>
							printf("SALIENDO!\r\n");
 8003842:	481b      	ldr	r0, [pc, #108]	; (80038b0 <main+0x680>)
 8003844:	f000 fc32 	bl	80040ac <puts>
							numero--;
 8003848:	4a18      	ldr	r2, [pc, #96]	; (80038ac <main+0x67c>)
 800384a:	7813      	ldrb	r3, [r2, #0]
 800384c:	3b01      	subs	r3, #1
 800384e:	e7d6      	b.n	80037fe <main+0x5ce>
 8003850:	462e      	mov	r6, r5
						ind_estado++;
 8003852:	3501      	adds	r5, #1
 8003854:	4637      	mov	r7, r6
 8003856:	b2ed      	uxtb	r5, r5
 8003858:	e77e      	b.n	8003758 <main+0x528>
					estados[ind_estado] = estado;
 800385a:	ab1a      	add	r3, sp, #104	; 0x68
 800385c:	442b      	add	r3, r5
 800385e:	f803 6c1c 	strb.w	r6, [r3, #-28]
 8003862:	e7f6      	b.n	8003852 <main+0x622>
 8003864:	20012cb0 	.word	0x20012cb0
 8003868:	40004800 	.word	0x40004800
 800386c:	20025a1c 	.word	0x20025a1c
 8003870:	50050000 	.word	0x50050000
 8003874:	40005400 	.word	0x40005400
 8003878:	40020400 	.word	0x40020400
 800387c:	08004d55 	.word	0x08004d55
 8003880:	2000009c 	.word	0x2000009c
 8003884:	08004d67 	.word	0x08004d67
 8003888:	08004d83 	.word	0x08004d83
 800388c:	2003866c 	.word	0x2003866c
 8003890:	20012ddc 	.word	0x20012ddc
 8003894:	200000b0 	.word	0x200000b0
 8003898:	08004d96 	.word	0x08004d96
 800389c:	08004da7 	.word	0x08004da7
 80038a0:	08004db1 	.word	0x08004db1
 80038a4:	2000009a 	.word	0x2000009a
 80038a8:	08004dbb 	.word	0x08004dbb
 80038ac:	2000009b 	.word	0x2000009b
 80038b0:	08004dc6 	.word	0x08004dc6
 80038b4:	20000099 	.word	0x20000099
				if(estado != estado_ant){
 80038b8:	2f00      	cmp	r7, #0
 80038ba:	f43f af4d 	beq.w	8003758 <main+0x528>
					estados[ind_estado] = estado;
 80038be:	ab1a      	add	r3, sp, #104	; 0x68
 80038c0:	2200      	movs	r2, #0
 80038c2:	442b      	add	r3, r5
 80038c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80038c8:	e775      	b.n	80037b6 <main+0x586>
 80038ca:	bf00      	nop

080038cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038cc:	4770      	bx	lr

080038ce <wrOV7670Reg>:
#include "dwt_delay.h"
#include "main.h"
#include <stdio.h>


unsigned char wrOV7670Reg(unsigned char regID, unsigned char regDat) {
 80038ce:	b538      	push	{r3, r4, r5, lr}
 80038d0:	4605      	mov	r5, r0
 80038d2:	460c      	mov	r4, r1
	startSCCB();
 80038d4:	f7ff fa20 	bl	8002d18 <startSCCB>
	if (0 == SCCBwriteByte(0x42)) {
 80038d8:	2042      	movs	r0, #66	; 0x42
 80038da:	f7ff fa6d 	bl	8002db8 <SCCBwriteByte>
 80038de:	b918      	cbnz	r0, 80038e8 <wrOV7670Reg+0x1a>
		stopSCCB();
 80038e0:	f7ff fa46 	bl	8002d70 <stopSCCB>
		return 0;
 80038e4:	2000      	movs	r0, #0
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
	}
	DWT_Delay(50);
 80038e8:	2032      	movs	r0, #50	; 0x32
 80038ea:	f7ff facb 	bl	8002e84 <DWT_Delay>
	if (0 == SCCBwriteByte(regID)) {
 80038ee:	4628      	mov	r0, r5
 80038f0:	f7ff fa62 	bl	8002db8 <SCCBwriteByte>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d0f3      	beq.n	80038e0 <wrOV7670Reg+0x12>
		stopSCCB();
		return 0;
	}
	DWT_Delay(50);
 80038f8:	2032      	movs	r0, #50	; 0x32
 80038fa:	f7ff fac3 	bl	8002e84 <DWT_Delay>
	if (0 == SCCBwriteByte(regDat)) {
 80038fe:	4620      	mov	r0, r4
 8003900:	f7ff fa5a 	bl	8002db8 <SCCBwriteByte>
 8003904:	2800      	cmp	r0, #0
 8003906:	d0eb      	beq.n	80038e0 <wrOV7670Reg+0x12>
		stopSCCB();
		return 0;
	}
	stopSCCB();
 8003908:	f7ff fa32 	bl	8002d70 <stopSCCB>

	return 1;
 800390c:	2001      	movs	r0, #1
}
 800390e:	bd38      	pop	{r3, r4, r5, pc}

08003910 <OV7670_init>:

}



unsigned char OV7670_init(void) {
 8003910:	b508      	push	{r3, lr}
	// Quitar PowerDown
	HAL_GPIO_WritePin(CAM_PWD_GPIO_Port, CAM_PWD_Pin, GPIO_PIN_RESET);
 8003912:	2200      	movs	r2, #0
 8003914:	2108      	movs	r1, #8
 8003916:	4807      	ldr	r0, [pc, #28]	; (8003934 <OV7670_init+0x24>)
 8003918:	f7fd fd42 	bl	80013a0 <HAL_GPIO_WritePin>
	// Quitar Reset
	HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 800391c:	2201      	movs	r2, #1
 800391e:	4806      	ldr	r0, [pc, #24]	; (8003938 <OV7670_init+0x28>)
 8003920:	4611      	mov	r1, r2
 8003922:	f7fd fd3d 	bl	80013a0 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8003926:	2032      	movs	r0, #50	; 0x32
 8003928:	f7fc fea4 	bl	8000674 <HAL_Delay>

	SCCB_GPIO_Config(); // io init..
 800392c:	f7ff f9b6 	bl	8002c9c <SCCB_GPIO_Config>
	set_OV7670reg();

	OV7670_config_window(272, 12, 320, 240); // set 240*320
	*/
	return 0x01; //ok
}
 8003930:	2001      	movs	r0, #1
 8003932:	bd08      	pop	{r3, pc}
 8003934:	40020000 	.word	0x40020000
 8003938:	40020800 	.word	0x40020800

0800393c <OV7670_config>:
		{ 0xb1, 0x0c }, //
		{ 0xb2, 0x0e }, //
		{ 0xb3, 0x82 }, //
		{ 0x4b, 0x01 }, };

void OV7670_config(void) {
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	2400      	movs	r4, #0
	uint8_t data, i = 0;
	uint8_t err;

	// Configure camera registers
	for (i = 0; i < 127; i++) {
		data = OV7670_reg[i][1];
 8003940:	4d0a      	ldr	r5, [pc, #40]	; (800396c <OV7670_config+0x30>)
 8003942:	eb05 0344 	add.w	r3, r5, r4, lsl #1
		err = wrOV7670Reg(OV7670_reg[i][0], data);
 8003946:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
 800394a:	7859      	ldrb	r1, [r3, #1]
 800394c:	f7ff ffbf 	bl	80038ce <wrOV7670Reg>

		if (err == 0) {
 8003950:	b920      	cbnz	r0, 800395c <OV7670_config+0x20>
			printf("Failed to update register\n");
 8003952:	4807      	ldr	r0, [pc, #28]	; (8003970 <OV7670_config+0x34>)

		if(i==0){
			HAL_Delay(50);
		}
	}
}
 8003954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printf("Failed to update register\n");
 8003958:	f000 bba8 	b.w	80040ac <puts>
		if(i==0){
 800395c:	b914      	cbnz	r4, 8003964 <OV7670_config+0x28>
			HAL_Delay(50);
 800395e:	2032      	movs	r0, #50	; 0x32
 8003960:	f7fc fe88 	bl	8000674 <HAL_Delay>
 8003964:	3401      	adds	r4, #1
	for (i = 0; i < 127; i++) {
 8003966:	2c7f      	cmp	r4, #127	; 0x7f
 8003968:	d1eb      	bne.n	8003942 <OV7670_config+0x6>
}
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	08004deb 	.word	0x08004deb
 8003970:	08004dd1 	.word	0x08004dd1

08003974 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_MspInit+0x2c>)
{
 8003976:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8003978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800397e:	641a      	str	r2, [r3, #64]	; 0x40
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003986:	9200      	str	r2, [sp, #0]
 8003988:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800399c:	b002      	add	sp, #8
 800399e:	4770      	bx	lr
 80039a0:	40023800 	.word	0x40023800

080039a4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80039a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a6:	b08d      	sub	sp, #52	; 0x34
 80039a8:	4607      	mov	r7, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039aa:	2214      	movs	r2, #20
 80039ac:	2100      	movs	r1, #0
 80039ae:	a807      	add	r0, sp, #28
 80039b0:	f000 fa54 	bl	8003e5c <memset>
  if(hdcmi->Instance==DCMI)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <HAL_DCMI_MspInit+0x150>)
 80039b8:	429a      	cmp	r2, r3
 80039ba:	f040 8099 	bne.w	8003af0 <HAL_DCMI_MspInit+0x14c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80039be:	4b4e      	ldr	r3, [pc, #312]	; (8003af8 <HAL_DCMI_MspInit+0x154>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80039c0:	240d      	movs	r4, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c2:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039c4:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 80039c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ca:	484c      	ldr	r0, [pc, #304]	; (8003afc <HAL_DCMI_MspInit+0x158>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	635a      	str	r2, [r3, #52]	; 0x34
 80039d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d4:	f002 0201 	and.w	r2, r2, #1
 80039d8:	9201      	str	r2, [sp, #4]
 80039da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039de:	f042 0210 	orr.w	r2, r2, #16
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
 80039e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e6:	f002 0210 	and.w	r2, r2, #16
 80039ea:	9202      	str	r2, [sp, #8]
 80039ec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
 80039f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f8:	f002 0201 	and.w	r2, r2, #1
 80039fc:	9203      	str	r2, [sp, #12]
 80039fe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a02:	f042 0204 	orr.w	r2, r2, #4
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
 8003a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0a:	f002 0204 	and.w	r2, r2, #4
 8003a0e:	9204      	str	r2, [sp, #16]
 8003a10:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
 8003a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1c:	f002 0208 	and.w	r2, r2, #8
 8003a20:	9205      	str	r2, [sp, #20]
 8003a22:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	9306      	str	r3, [sp, #24]
 8003a36:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003a38:	2370      	movs	r3, #112	; 0x70
 8003a3a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a3c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a3e:	f7fd fbbf 	bl	80011c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003a42:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a44:	a907      	add	r1, sp, #28
 8003a46:	482e      	ldr	r0, [pc, #184]	; (8003b00 <HAL_DCMI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003a48:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a4a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a50:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a52:	f7fd fbb5 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003a56:	f44f 7370 	mov.w	r3, #960	; 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a5a:	a907      	add	r1, sp, #28
 8003a5c:	4829      	ldr	r0, [pc, #164]	; (8003b04 <HAL_DCMI_MspInit+0x160>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003a5e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a60:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a66:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a68:	f7fd fbaa 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a6c:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6e:	a907      	add	r1, sp, #28
 8003a70:	4825      	ldr	r0, [pc, #148]	; (8003b08 <HAL_DCMI_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a72:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a74:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a7c:	f7fd fba0 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a80:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a84:	4821      	ldr	r0, [pc, #132]	; (8003b0c <HAL_DCMI_MspInit+0x168>)
 8003a86:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a88:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a8a:	9307      	str	r3, [sp, #28]

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8003a8c:	4c20      	ldr	r4, [pc, #128]	; (8003b10 <HAL_DCMI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a94:	f7fd fb94 	bl	80011c0 <HAL_GPIO_Init>
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8003a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_DCMI_MspInit+0x170>)
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8003a9e:	4620      	mov	r0, r4
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa0:	60a5      	str	r5, [r4, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa2:	60e5      	str	r5, [r4, #12]
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8003aa4:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003aa6:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8003aa8:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8003aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab0:	6123      	str	r3, [r4, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab6:	6163      	str	r3, [r4, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ab8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003abc:	61a3      	str	r3, [r4, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8003abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac2:	61e3      	str	r3, [r4, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac8:	6223      	str	r3, [r4, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003aca:	2304      	movs	r3, #4
 8003acc:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8003ad2:	f7fc fff9 	bl	8000ac8 <HAL_DMA_Init>
 8003ad6:	b108      	cbz	r0, 8003adc <HAL_DCMI_MspInit+0x138>
    {
      Error_Handler();
 8003ad8:	f7ff fef8 	bl	80038cc <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8003adc:	204e      	movs	r0, #78	; 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8003ade:	64bc      	str	r4, [r7, #72]	; 0x48
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2105      	movs	r1, #5
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8003ae4:	63a7      	str	r7, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8003ae6:	f7fc fde9 	bl	80006bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003aea:	204e      	movs	r0, #78	; 0x4e
 8003aec:	f7fc fe1e 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003af0:	b00d      	add	sp, #52	; 0x34
 8003af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af4:	50050000 	.word	0x50050000
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020c00 	.word	0x40020c00
 8003b0c:	40021800 	.word	0x40021800
 8003b10:	20012d7c 	.word	0x20012d7c
 8003b14:	40026428 	.word	0x40026428

08003b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1e:	2214      	movs	r2, #20
 8003b20:	2100      	movs	r1, #0
 8003b22:	a803      	add	r0, sp, #12
 8003b24:	f000 f99a 	bl	8003e5c <memset>
  if(hi2c->Instance==I2C1)
 8003b28:	6822      	ldr	r2, [r4, #0]
 8003b2a:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_I2C_MspInit+0x60>)
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d121      	bne.n	8003b74 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b30:	4c12      	ldr	r4, [pc, #72]	; (8003b7c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = CAM_SIOC_Pin|CAM_SIOD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b32:	a903      	add	r1, sp, #12
 8003b34:	4812      	ldr	r0, [pc, #72]	; (8003b80 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	6323      	str	r3, [r4, #48]	; 0x30
 8003b3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAM_SIOC_Pin|CAM_SIOD_Pin;
 8003b48:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003b4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b4e:	2312      	movs	r3, #18
 8003b50:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b52:	2301      	movs	r3, #1
 8003b54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b56:	2302      	movs	r3, #2
 8003b58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5e:	f7fd fb2f 	bl	80011c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b68:	6423      	str	r3, [r4, #64]	; 0x40
 8003b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b74:	b008      	add	sp, #32
 8003b76:	bd10      	pop	{r4, pc}
 8003b78:	40005400 	.word	0x40005400
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40020400 	.word	0x40020400

08003b84 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8003b84:	6803      	ldr	r3, [r0, #0]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8003b8a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8003b8c:	d115      	bne.n	8003bba <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b8e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8003b92:	201c      	movs	r0, #28
 8003b94:	210f      	movs	r1, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8003b9e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8003baa:	f7fc fd87 	bl	80006bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bae:	201c      	movs	r0, #28
 8003bb0:	f7fc fdbc 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003bb4:	b003      	add	sp, #12
 8003bb6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_TIM_Base_MspInit+0x54>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d1f9      	bne.n	8003bb4 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_TIM_Base_MspInit+0x58>)
 8003bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc4:	f042 0202 	orr.w	r2, r2, #2
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	9b01      	ldr	r3, [sp, #4]
}
 8003bd4:	e7ee      	b.n	8003bb4 <HAL_TIM_Base_MspInit+0x30>
 8003bd6:	bf00      	nop
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40023800 	.word	0x40023800

08003be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003be0:	b510      	push	{r4, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be6:	2214      	movs	r2, #20
 8003be8:	2100      	movs	r1, #0
 8003bea:	a801      	add	r0, sp, #4
 8003bec:	f000 f936 	bl	8003e5c <memset>
  if(htim->Instance==TIM3)
 8003bf0:	6822      	ldr	r2, [r4, #0]
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_TIM_MspPostInit+0x44>)
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d113      	bne.n	8003c20 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf8:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfc:	a901      	add	r1, sp, #4
 8003bfe:	480a      	ldr	r0, [pc, #40]	; (8003c28 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c02:	f042 0202 	orr.w	r2, r2, #2
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c12:	2310      	movs	r3, #16
 8003c14:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c16:	2302      	movs	r3, #2
 8003c18:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c1a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1c:	f7fd fad0 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c20:	b006      	add	sp, #24
 8003c22:	bd10      	pop	{r4, pc}
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40020400 	.word	0x40020400

08003c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c32:	2214      	movs	r2, #20
 8003c34:	2100      	movs	r1, #0
 8003c36:	a803      	add	r0, sp, #12
 8003c38:	f000 f910 	bl	8003e5c <memset>
  if(huart->Instance==USART3)
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <HAL_UART_MspInit+0x64>)
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d122      	bne.n	8003c8a <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c44:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c48:	a903      	add	r1, sp, #12
 8003c4a:	4812      	ldr	r0, [pc, #72]	; (8003c94 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
 8003c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c56:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003c5a:	9201      	str	r2, [sp, #4]
 8003c5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c60:	f042 0208 	orr.w	r2, r2, #8
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	9302      	str	r3, [sp, #8]
 8003c6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003c70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c76:	2302      	movs	r3, #2
 8003c78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c82:	2307      	movs	r3, #7
 8003c84:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c86:	f7fd fa9b 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c8a:	b008      	add	sp, #32
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	40004800 	.word	0x40004800
 8003c94:	40020c00 	.word	0x40020c00

08003c98 <NMI_Handler>:
 8003c98:	4770      	bx	lr

08003c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c9a:	e7fe      	b.n	8003c9a <HardFault_Handler>

08003c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c9c:	e7fe      	b.n	8003c9c <MemManage_Handler>

08003c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c9e:	e7fe      	b.n	8003c9e <BusFault_Handler>

08003ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ca0:	e7fe      	b.n	8003ca0 <UsageFault_Handler>

08003ca2 <SVC_Handler>:
 8003ca2:	4770      	bx	lr

08003ca4 <DebugMon_Handler>:
 8003ca4:	4770      	bx	lr

08003ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ca6:	4770      	bx	lr

08003ca8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ca8:	f7fc bcd2 	b.w	8000650 <HAL_IncTick>

08003cac <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cac:	4801      	ldr	r0, [pc, #4]	; (8003cb4 <TIM2_IRQHandler+0x8>)
 8003cae:	f7fe ba7c 	b.w	80021aa <HAL_TIM_IRQHandler>
 8003cb2:	bf00      	nop
 8003cb4:	2005de6c 	.word	0x2005de6c

08003cb8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003cb8:	4801      	ldr	r0, [pc, #4]	; (8003cc0 <DMA2_Stream1_IRQHandler+0x8>)
 8003cba:	f7fc bfd3 	b.w	8000c64 <HAL_DMA_IRQHandler>
 8003cbe:	bf00      	nop
 8003cc0:	20012d7c 	.word	0x20012d7c

08003cc4 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003cc4:	4801      	ldr	r0, [pc, #4]	; (8003ccc <DCMI_IRQHandler+0x8>)
 8003cc6:	f7fc be9b 	b.w	8000a00 <HAL_DCMI_IRQHandler>
 8003cca:	bf00      	nop
 8003ccc:	20025a1c 	.word	0x20025a1c

08003cd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	460e      	mov	r6, r1
 8003cd4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	1ba3      	subs	r3, r4, r6
 8003cda:	429d      	cmp	r5, r3
 8003cdc:	dc01      	bgt.n	8003ce2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003cde:	4628      	mov	r0, r5
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003ce2:	f3af 8000 	nop.w
 8003ce6:	f804 0b01 	strb.w	r0, [r4], #1
 8003cea:	e7f5      	b.n	8003cd8 <_read+0x8>

08003cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	460e      	mov	r6, r1
 8003cf0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	1ba3      	subs	r3, r4, r6
 8003cf6:	429d      	cmp	r5, r3
 8003cf8:	dc01      	bgt.n	8003cfe <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003cfe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003d02:	f7ff f97b 	bl	8002ffc <__io_putchar>
 8003d06:	e7f5      	b.n	8003cf4 <_write+0x8>

08003d08 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <_sbrk+0x28>)
{
 8003d0a:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003d0c:	6819      	ldr	r1, [r3, #0]
 8003d0e:	b909      	cbnz	r1, 8003d14 <_sbrk+0xc>
		heap_end = &end;
 8003d10:	4908      	ldr	r1, [pc, #32]	; (8003d34 <_sbrk+0x2c>)
 8003d12:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003d14:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003d16:	4669      	mov	r1, sp
 8003d18:	4402      	add	r2, r0
 8003d1a:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003d1c:	bf83      	ittte	hi
 8003d1e:	220c      	movhi	r2, #12
 8003d20:	4b05      	ldrhi	r3, [pc, #20]	; (8003d38 <_sbrk+0x30>)
		return (caddr_t) -1;
 8003d22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;
 8003d26:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 8003d28:	bf88      	it	hi
 8003d2a:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	200000a0 	.word	0x200000a0
 8003d34:	2005ded0 	.word	0x2005ded0
 8003d38:	2005decc 	.word	0x2005decc

08003d3c <_close>:

int _close(int file)
{
	return -1;
}
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d40:	4770      	bx	lr

08003d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003d46:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003d48:	604b      	str	r3, [r1, #4]
}
 8003d4a:	4770      	bx	lr

08003d4c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	4770      	bx	lr

08003d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003d50:	2000      	movs	r0, #0
 8003d52:	4770      	bx	lr

08003d54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d54:	490f      	ldr	r1, [pc, #60]	; (8003d94 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d56:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d58:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <SystemInit+0x44>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003d6e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003d76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d7c:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <SystemInit+0x48>)
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d86:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d88:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d8e:	608b      	str	r3, [r1, #8]
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	e000ed00 	.word	0xe000ed00
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	24003010 	.word	0x24003010

08003da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003da6:	e003      	b.n	8003db0 <LoopCopyDataInit>

08003da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dae:	3104      	adds	r1, #4

08003db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003db0:	480b      	ldr	r0, [pc, #44]	; (8003de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003db8:	d3f6      	bcc.n	8003da8 <CopyDataInit>
  ldr  r2, =_sbss
 8003dba:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003dbc:	e002      	b.n	8003dc4 <LoopFillZerobss>

08003dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003dc0:	f842 3b04 	str.w	r3, [r2], #4

08003dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dc8:	d3f9      	bcc.n	8003dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dca:	f7ff ffc3 	bl	8003d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dce:	f000 f811 	bl	8003df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dd2:	f7ff fa2d 	bl	8003230 <main>
  bx  lr    
 8003dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dd8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003ddc:	08004fac 	.word	0x08004fac
  ldr  r0, =_sdata
 8003de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003de4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003de8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003dec:	2005ded0 	.word	0x2005ded0

08003df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003df0:	e7fe      	b.n	8003df0 <ADC_IRQHandler>
	...

08003df4 <__libc_init_array>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	4e0d      	ldr	r6, [pc, #52]	; (8003e2c <__libc_init_array+0x38>)
 8003df8:	4c0d      	ldr	r4, [pc, #52]	; (8003e30 <__libc_init_array+0x3c>)
 8003dfa:	1ba4      	subs	r4, r4, r6
 8003dfc:	10a4      	asrs	r4, r4, #2
 8003dfe:	2500      	movs	r5, #0
 8003e00:	42a5      	cmp	r5, r4
 8003e02:	d109      	bne.n	8003e18 <__libc_init_array+0x24>
 8003e04:	4e0b      	ldr	r6, [pc, #44]	; (8003e34 <__libc_init_array+0x40>)
 8003e06:	4c0c      	ldr	r4, [pc, #48]	; (8003e38 <__libc_init_array+0x44>)
 8003e08:	f000 ff8c 	bl	8004d24 <_init>
 8003e0c:	1ba4      	subs	r4, r4, r6
 8003e0e:	10a4      	asrs	r4, r4, #2
 8003e10:	2500      	movs	r5, #0
 8003e12:	42a5      	cmp	r5, r4
 8003e14:	d105      	bne.n	8003e22 <__libc_init_array+0x2e>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e1c:	4798      	blx	r3
 8003e1e:	3501      	adds	r5, #1
 8003e20:	e7ee      	b.n	8003e00 <__libc_init_array+0xc>
 8003e22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e26:	4798      	blx	r3
 8003e28:	3501      	adds	r5, #1
 8003e2a:	e7f2      	b.n	8003e12 <__libc_init_array+0x1e>
 8003e2c:	08004fa4 	.word	0x08004fa4
 8003e30:	08004fa4 	.word	0x08004fa4
 8003e34:	08004fa4 	.word	0x08004fa4
 8003e38:	08004fa8 	.word	0x08004fa8

08003e3c <malloc>:
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <malloc+0xc>)
 8003e3e:	4601      	mov	r1, r0
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f000 b861 	b.w	8003f08 <_malloc_r>
 8003e46:	bf00      	nop
 8003e48:	20000018 	.word	0x20000018

08003e4c <free>:
 8003e4c:	4b02      	ldr	r3, [pc, #8]	; (8003e58 <free+0xc>)
 8003e4e:	4601      	mov	r1, r0
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	f000 b80b 	b.w	8003e6c <_free_r>
 8003e56:	bf00      	nop
 8003e58:	20000018 	.word	0x20000018

08003e5c <memset>:
 8003e5c:	4402      	add	r2, r0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d100      	bne.n	8003e66 <memset+0xa>
 8003e64:	4770      	bx	lr
 8003e66:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6a:	e7f9      	b.n	8003e60 <memset+0x4>

08003e6c <_free_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4605      	mov	r5, r0
 8003e70:	2900      	cmp	r1, #0
 8003e72:	d045      	beq.n	8003f00 <_free_r+0x94>
 8003e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e78:	1f0c      	subs	r4, r1, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bfb8      	it	lt
 8003e7e:	18e4      	addlt	r4, r4, r3
 8003e80:	f000 fbcc 	bl	800461c <__malloc_lock>
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <_free_r+0x98>)
 8003e86:	6813      	ldr	r3, [r2, #0]
 8003e88:	4610      	mov	r0, r2
 8003e8a:	b933      	cbnz	r3, 8003e9a <_free_r+0x2e>
 8003e8c:	6063      	str	r3, [r4, #4]
 8003e8e:	6014      	str	r4, [r2, #0]
 8003e90:	4628      	mov	r0, r5
 8003e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e96:	f000 bbc2 	b.w	800461e <__malloc_unlock>
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	d90c      	bls.n	8003eb8 <_free_r+0x4c>
 8003e9e:	6821      	ldr	r1, [r4, #0]
 8003ea0:	1862      	adds	r2, r4, r1
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	bf04      	itt	eq
 8003ea6:	681a      	ldreq	r2, [r3, #0]
 8003ea8:	685b      	ldreq	r3, [r3, #4]
 8003eaa:	6063      	str	r3, [r4, #4]
 8003eac:	bf04      	itt	eq
 8003eae:	1852      	addeq	r2, r2, r1
 8003eb0:	6022      	streq	r2, [r4, #0]
 8003eb2:	6004      	str	r4, [r0, #0]
 8003eb4:	e7ec      	b.n	8003e90 <_free_r+0x24>
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	b10a      	cbz	r2, 8003ec0 <_free_r+0x54>
 8003ebc:	42a2      	cmp	r2, r4
 8003ebe:	d9fa      	bls.n	8003eb6 <_free_r+0x4a>
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	1858      	adds	r0, r3, r1
 8003ec4:	42a0      	cmp	r0, r4
 8003ec6:	d10b      	bne.n	8003ee0 <_free_r+0x74>
 8003ec8:	6820      	ldr	r0, [r4, #0]
 8003eca:	4401      	add	r1, r0
 8003ecc:	1858      	adds	r0, r3, r1
 8003ece:	4282      	cmp	r2, r0
 8003ed0:	6019      	str	r1, [r3, #0]
 8003ed2:	d1dd      	bne.n	8003e90 <_free_r+0x24>
 8003ed4:	6810      	ldr	r0, [r2, #0]
 8003ed6:	6852      	ldr	r2, [r2, #4]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	4401      	add	r1, r0
 8003edc:	6019      	str	r1, [r3, #0]
 8003ede:	e7d7      	b.n	8003e90 <_free_r+0x24>
 8003ee0:	d902      	bls.n	8003ee8 <_free_r+0x7c>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	602b      	str	r3, [r5, #0]
 8003ee6:	e7d3      	b.n	8003e90 <_free_r+0x24>
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	1821      	adds	r1, r4, r0
 8003eec:	428a      	cmp	r2, r1
 8003eee:	bf04      	itt	eq
 8003ef0:	6811      	ldreq	r1, [r2, #0]
 8003ef2:	6852      	ldreq	r2, [r2, #4]
 8003ef4:	6062      	str	r2, [r4, #4]
 8003ef6:	bf04      	itt	eq
 8003ef8:	1809      	addeq	r1, r1, r0
 8003efa:	6021      	streq	r1, [r4, #0]
 8003efc:	605c      	str	r4, [r3, #4]
 8003efe:	e7c7      	b.n	8003e90 <_free_r+0x24>
 8003f00:	bd38      	pop	{r3, r4, r5, pc}
 8003f02:	bf00      	nop
 8003f04:	200000a4 	.word	0x200000a4

08003f08 <_malloc_r>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	1ccd      	adds	r5, r1, #3
 8003f0c:	f025 0503 	bic.w	r5, r5, #3
 8003f10:	3508      	adds	r5, #8
 8003f12:	2d0c      	cmp	r5, #12
 8003f14:	bf38      	it	cc
 8003f16:	250c      	movcc	r5, #12
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	db01      	blt.n	8003f22 <_malloc_r+0x1a>
 8003f1e:	42a9      	cmp	r1, r5
 8003f20:	d903      	bls.n	8003f2a <_malloc_r+0x22>
 8003f22:	230c      	movs	r3, #12
 8003f24:	6033      	str	r3, [r6, #0]
 8003f26:	2000      	movs	r0, #0
 8003f28:	bd70      	pop	{r4, r5, r6, pc}
 8003f2a:	f000 fb77 	bl	800461c <__malloc_lock>
 8003f2e:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <_malloc_r+0xb4>)
 8003f30:	6814      	ldr	r4, [r2, #0]
 8003f32:	4621      	mov	r1, r4
 8003f34:	b991      	cbnz	r1, 8003f5c <_malloc_r+0x54>
 8003f36:	4c22      	ldr	r4, [pc, #136]	; (8003fc0 <_malloc_r+0xb8>)
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	b91b      	cbnz	r3, 8003f44 <_malloc_r+0x3c>
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f000 f8bd 	bl	80040bc <_sbrk_r>
 8003f42:	6020      	str	r0, [r4, #0]
 8003f44:	4629      	mov	r1, r5
 8003f46:	4630      	mov	r0, r6
 8003f48:	f000 f8b8 	bl	80040bc <_sbrk_r>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d126      	bne.n	8003f9e <_malloc_r+0x96>
 8003f50:	230c      	movs	r3, #12
 8003f52:	6033      	str	r3, [r6, #0]
 8003f54:	4630      	mov	r0, r6
 8003f56:	f000 fb62 	bl	800461e <__malloc_unlock>
 8003f5a:	e7e4      	b.n	8003f26 <_malloc_r+0x1e>
 8003f5c:	680b      	ldr	r3, [r1, #0]
 8003f5e:	1b5b      	subs	r3, r3, r5
 8003f60:	d41a      	bmi.n	8003f98 <_malloc_r+0x90>
 8003f62:	2b0b      	cmp	r3, #11
 8003f64:	d90f      	bls.n	8003f86 <_malloc_r+0x7e>
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	50cd      	str	r5, [r1, r3]
 8003f6a:	18cc      	adds	r4, r1, r3
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f000 fb56 	bl	800461e <__malloc_unlock>
 8003f72:	f104 000b 	add.w	r0, r4, #11
 8003f76:	1d23      	adds	r3, r4, #4
 8003f78:	f020 0007 	bic.w	r0, r0, #7
 8003f7c:	1ac3      	subs	r3, r0, r3
 8003f7e:	d01b      	beq.n	8003fb8 <_malloc_r+0xb0>
 8003f80:	425a      	negs	r2, r3
 8003f82:	50e2      	str	r2, [r4, r3]
 8003f84:	bd70      	pop	{r4, r5, r6, pc}
 8003f86:	428c      	cmp	r4, r1
 8003f88:	bf0d      	iteet	eq
 8003f8a:	6863      	ldreq	r3, [r4, #4]
 8003f8c:	684b      	ldrne	r3, [r1, #4]
 8003f8e:	6063      	strne	r3, [r4, #4]
 8003f90:	6013      	streq	r3, [r2, #0]
 8003f92:	bf18      	it	ne
 8003f94:	460c      	movne	r4, r1
 8003f96:	e7e9      	b.n	8003f6c <_malloc_r+0x64>
 8003f98:	460c      	mov	r4, r1
 8003f9a:	6849      	ldr	r1, [r1, #4]
 8003f9c:	e7ca      	b.n	8003f34 <_malloc_r+0x2c>
 8003f9e:	1cc4      	adds	r4, r0, #3
 8003fa0:	f024 0403 	bic.w	r4, r4, #3
 8003fa4:	42a0      	cmp	r0, r4
 8003fa6:	d005      	beq.n	8003fb4 <_malloc_r+0xac>
 8003fa8:	1a21      	subs	r1, r4, r0
 8003faa:	4630      	mov	r0, r6
 8003fac:	f000 f886 	bl	80040bc <_sbrk_r>
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d0cd      	beq.n	8003f50 <_malloc_r+0x48>
 8003fb4:	6025      	str	r5, [r4, #0]
 8003fb6:	e7d9      	b.n	8003f6c <_malloc_r+0x64>
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	bf00      	nop
 8003fbc:	200000a4 	.word	0x200000a4
 8003fc0:	200000a8 	.word	0x200000a8

08003fc4 <iprintf>:
 8003fc4:	b40f      	push	{r0, r1, r2, r3}
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <iprintf+0x2c>)
 8003fc8:	b513      	push	{r0, r1, r4, lr}
 8003fca:	681c      	ldr	r4, [r3, #0]
 8003fcc:	b124      	cbz	r4, 8003fd8 <iprintf+0x14>
 8003fce:	69a3      	ldr	r3, [r4, #24]
 8003fd0:	b913      	cbnz	r3, 8003fd8 <iprintf+0x14>
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 fa34 	bl	8004440 <__sinit>
 8003fd8:	ab05      	add	r3, sp, #20
 8003fda:	9a04      	ldr	r2, [sp, #16]
 8003fdc:	68a1      	ldr	r1, [r4, #8]
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f000 fb47 	bl	8004674 <_vfiprintf_r>
 8003fe6:	b002      	add	sp, #8
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fec:	b004      	add	sp, #16
 8003fee:	4770      	bx	lr
 8003ff0:	20000018 	.word	0x20000018

08003ff4 <_puts_r>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	460e      	mov	r6, r1
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	b118      	cbz	r0, 8004004 <_puts_r+0x10>
 8003ffc:	6983      	ldr	r3, [r0, #24]
 8003ffe:	b90b      	cbnz	r3, 8004004 <_puts_r+0x10>
 8004000:	f000 fa1e 	bl	8004440 <__sinit>
 8004004:	69ab      	ldr	r3, [r5, #24]
 8004006:	68ac      	ldr	r4, [r5, #8]
 8004008:	b913      	cbnz	r3, 8004010 <_puts_r+0x1c>
 800400a:	4628      	mov	r0, r5
 800400c:	f000 fa18 	bl	8004440 <__sinit>
 8004010:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <_puts_r+0xac>)
 8004012:	429c      	cmp	r4, r3
 8004014:	d117      	bne.n	8004046 <_puts_r+0x52>
 8004016:	686c      	ldr	r4, [r5, #4]
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	071b      	lsls	r3, r3, #28
 800401c:	d51d      	bpl.n	800405a <_puts_r+0x66>
 800401e:	6923      	ldr	r3, [r4, #16]
 8004020:	b1db      	cbz	r3, 800405a <_puts_r+0x66>
 8004022:	3e01      	subs	r6, #1
 8004024:	68a3      	ldr	r3, [r4, #8]
 8004026:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800402a:	3b01      	subs	r3, #1
 800402c:	60a3      	str	r3, [r4, #8]
 800402e:	b9e9      	cbnz	r1, 800406c <_puts_r+0x78>
 8004030:	2b00      	cmp	r3, #0
 8004032:	da2e      	bge.n	8004092 <_puts_r+0x9e>
 8004034:	4622      	mov	r2, r4
 8004036:	210a      	movs	r1, #10
 8004038:	4628      	mov	r0, r5
 800403a:	f000 f84f 	bl	80040dc <__swbuf_r>
 800403e:	3001      	adds	r0, #1
 8004040:	d011      	beq.n	8004066 <_puts_r+0x72>
 8004042:	200a      	movs	r0, #10
 8004044:	bd70      	pop	{r4, r5, r6, pc}
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <_puts_r+0xb0>)
 8004048:	429c      	cmp	r4, r3
 800404a:	d101      	bne.n	8004050 <_puts_r+0x5c>
 800404c:	68ac      	ldr	r4, [r5, #8]
 800404e:	e7e3      	b.n	8004018 <_puts_r+0x24>
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <_puts_r+0xb4>)
 8004052:	429c      	cmp	r4, r3
 8004054:	bf08      	it	eq
 8004056:	68ec      	ldreq	r4, [r5, #12]
 8004058:	e7de      	b.n	8004018 <_puts_r+0x24>
 800405a:	4621      	mov	r1, r4
 800405c:	4628      	mov	r0, r5
 800405e:	f000 f88f 	bl	8004180 <__swsetup_r>
 8004062:	2800      	cmp	r0, #0
 8004064:	d0dd      	beq.n	8004022 <_puts_r+0x2e>
 8004066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	2b00      	cmp	r3, #0
 800406e:	da04      	bge.n	800407a <_puts_r+0x86>
 8004070:	69a2      	ldr	r2, [r4, #24]
 8004072:	4293      	cmp	r3, r2
 8004074:	db06      	blt.n	8004084 <_puts_r+0x90>
 8004076:	290a      	cmp	r1, #10
 8004078:	d004      	beq.n	8004084 <_puts_r+0x90>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	6022      	str	r2, [r4, #0]
 8004080:	7019      	strb	r1, [r3, #0]
 8004082:	e7cf      	b.n	8004024 <_puts_r+0x30>
 8004084:	4622      	mov	r2, r4
 8004086:	4628      	mov	r0, r5
 8004088:	f000 f828 	bl	80040dc <__swbuf_r>
 800408c:	3001      	adds	r0, #1
 800408e:	d1c9      	bne.n	8004024 <_puts_r+0x30>
 8004090:	e7e9      	b.n	8004066 <_puts_r+0x72>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	200a      	movs	r0, #10
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	6022      	str	r2, [r4, #0]
 800409a:	7018      	strb	r0, [r3, #0]
 800409c:	bd70      	pop	{r4, r5, r6, pc}
 800409e:	bf00      	nop
 80040a0:	08004f24 	.word	0x08004f24
 80040a4:	08004f44 	.word	0x08004f44
 80040a8:	08004f04 	.word	0x08004f04

080040ac <puts>:
 80040ac:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <puts+0xc>)
 80040ae:	4601      	mov	r1, r0
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	f7ff bf9f 	b.w	8003ff4 <_puts_r>
 80040b6:	bf00      	nop
 80040b8:	20000018 	.word	0x20000018

080040bc <_sbrk_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4c06      	ldr	r4, [pc, #24]	; (80040d8 <_sbrk_r+0x1c>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4605      	mov	r5, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	6023      	str	r3, [r4, #0]
 80040c8:	f7ff fe1e 	bl	8003d08 <_sbrk>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_sbrk_r+0x1a>
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_sbrk_r+0x1a>
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	2005decc 	.word	0x2005decc

080040dc <__swbuf_r>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	460e      	mov	r6, r1
 80040e0:	4614      	mov	r4, r2
 80040e2:	4605      	mov	r5, r0
 80040e4:	b118      	cbz	r0, 80040ee <__swbuf_r+0x12>
 80040e6:	6983      	ldr	r3, [r0, #24]
 80040e8:	b90b      	cbnz	r3, 80040ee <__swbuf_r+0x12>
 80040ea:	f000 f9a9 	bl	8004440 <__sinit>
 80040ee:	4b21      	ldr	r3, [pc, #132]	; (8004174 <__swbuf_r+0x98>)
 80040f0:	429c      	cmp	r4, r3
 80040f2:	d12a      	bne.n	800414a <__swbuf_r+0x6e>
 80040f4:	686c      	ldr	r4, [r5, #4]
 80040f6:	69a3      	ldr	r3, [r4, #24]
 80040f8:	60a3      	str	r3, [r4, #8]
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	071a      	lsls	r2, r3, #28
 80040fe:	d52e      	bpl.n	800415e <__swbuf_r+0x82>
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	b363      	cbz	r3, 800415e <__swbuf_r+0x82>
 8004104:	6923      	ldr	r3, [r4, #16]
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	1ac0      	subs	r0, r0, r3
 800410a:	6963      	ldr	r3, [r4, #20]
 800410c:	b2f6      	uxtb	r6, r6
 800410e:	4298      	cmp	r0, r3
 8004110:	4637      	mov	r7, r6
 8004112:	db04      	blt.n	800411e <__swbuf_r+0x42>
 8004114:	4621      	mov	r1, r4
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f928 	bl	800436c <_fflush_r>
 800411c:	bb28      	cbnz	r0, 800416a <__swbuf_r+0x8e>
 800411e:	68a3      	ldr	r3, [r4, #8]
 8004120:	3b01      	subs	r3, #1
 8004122:	60a3      	str	r3, [r4, #8]
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	6022      	str	r2, [r4, #0]
 800412a:	701e      	strb	r6, [r3, #0]
 800412c:	6963      	ldr	r3, [r4, #20]
 800412e:	3001      	adds	r0, #1
 8004130:	4298      	cmp	r0, r3
 8004132:	d004      	beq.n	800413e <__swbuf_r+0x62>
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	07db      	lsls	r3, r3, #31
 8004138:	d519      	bpl.n	800416e <__swbuf_r+0x92>
 800413a:	2e0a      	cmp	r6, #10
 800413c:	d117      	bne.n	800416e <__swbuf_r+0x92>
 800413e:	4621      	mov	r1, r4
 8004140:	4628      	mov	r0, r5
 8004142:	f000 f913 	bl	800436c <_fflush_r>
 8004146:	b190      	cbz	r0, 800416e <__swbuf_r+0x92>
 8004148:	e00f      	b.n	800416a <__swbuf_r+0x8e>
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <__swbuf_r+0x9c>)
 800414c:	429c      	cmp	r4, r3
 800414e:	d101      	bne.n	8004154 <__swbuf_r+0x78>
 8004150:	68ac      	ldr	r4, [r5, #8]
 8004152:	e7d0      	b.n	80040f6 <__swbuf_r+0x1a>
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <__swbuf_r+0xa0>)
 8004156:	429c      	cmp	r4, r3
 8004158:	bf08      	it	eq
 800415a:	68ec      	ldreq	r4, [r5, #12]
 800415c:	e7cb      	b.n	80040f6 <__swbuf_r+0x1a>
 800415e:	4621      	mov	r1, r4
 8004160:	4628      	mov	r0, r5
 8004162:	f000 f80d 	bl	8004180 <__swsetup_r>
 8004166:	2800      	cmp	r0, #0
 8004168:	d0cc      	beq.n	8004104 <__swbuf_r+0x28>
 800416a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800416e:	4638      	mov	r0, r7
 8004170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004172:	bf00      	nop
 8004174:	08004f24 	.word	0x08004f24
 8004178:	08004f44 	.word	0x08004f44
 800417c:	08004f04 	.word	0x08004f04

08004180 <__swsetup_r>:
 8004180:	4b32      	ldr	r3, [pc, #200]	; (800424c <__swsetup_r+0xcc>)
 8004182:	b570      	push	{r4, r5, r6, lr}
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	4606      	mov	r6, r0
 8004188:	460c      	mov	r4, r1
 800418a:	b125      	cbz	r5, 8004196 <__swsetup_r+0x16>
 800418c:	69ab      	ldr	r3, [r5, #24]
 800418e:	b913      	cbnz	r3, 8004196 <__swsetup_r+0x16>
 8004190:	4628      	mov	r0, r5
 8004192:	f000 f955 	bl	8004440 <__sinit>
 8004196:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <__swsetup_r+0xd0>)
 8004198:	429c      	cmp	r4, r3
 800419a:	d10f      	bne.n	80041bc <__swsetup_r+0x3c>
 800419c:	686c      	ldr	r4, [r5, #4]
 800419e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	0715      	lsls	r5, r2, #28
 80041a6:	d42c      	bmi.n	8004202 <__swsetup_r+0x82>
 80041a8:	06d0      	lsls	r0, r2, #27
 80041aa:	d411      	bmi.n	80041d0 <__swsetup_r+0x50>
 80041ac:	2209      	movs	r2, #9
 80041ae:	6032      	str	r2, [r6, #0]
 80041b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b4:	81a3      	strh	r3, [r4, #12]
 80041b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <__swsetup_r+0xd4>)
 80041be:	429c      	cmp	r4, r3
 80041c0:	d101      	bne.n	80041c6 <__swsetup_r+0x46>
 80041c2:	68ac      	ldr	r4, [r5, #8]
 80041c4:	e7eb      	b.n	800419e <__swsetup_r+0x1e>
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <__swsetup_r+0xd8>)
 80041c8:	429c      	cmp	r4, r3
 80041ca:	bf08      	it	eq
 80041cc:	68ec      	ldreq	r4, [r5, #12]
 80041ce:	e7e6      	b.n	800419e <__swsetup_r+0x1e>
 80041d0:	0751      	lsls	r1, r2, #29
 80041d2:	d512      	bpl.n	80041fa <__swsetup_r+0x7a>
 80041d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041d6:	b141      	cbz	r1, 80041ea <__swsetup_r+0x6a>
 80041d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041dc:	4299      	cmp	r1, r3
 80041de:	d002      	beq.n	80041e6 <__swsetup_r+0x66>
 80041e0:	4630      	mov	r0, r6
 80041e2:	f7ff fe43 	bl	8003e6c <_free_r>
 80041e6:	2300      	movs	r3, #0
 80041e8:	6363      	str	r3, [r4, #52]	; 0x34
 80041ea:	89a3      	ldrh	r3, [r4, #12]
 80041ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	2300      	movs	r3, #0
 80041f4:	6063      	str	r3, [r4, #4]
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0308 	orr.w	r3, r3, #8
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	b94b      	cbnz	r3, 800421a <__swsetup_r+0x9a>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800420c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004210:	d003      	beq.n	800421a <__swsetup_r+0x9a>
 8004212:	4621      	mov	r1, r4
 8004214:	4630      	mov	r0, r6
 8004216:	f000 f9c1 	bl	800459c <__smakebuf_r>
 800421a:	89a2      	ldrh	r2, [r4, #12]
 800421c:	f012 0301 	ands.w	r3, r2, #1
 8004220:	d00c      	beq.n	800423c <__swsetup_r+0xbc>
 8004222:	2300      	movs	r3, #0
 8004224:	60a3      	str	r3, [r4, #8]
 8004226:	6963      	ldr	r3, [r4, #20]
 8004228:	425b      	negs	r3, r3
 800422a:	61a3      	str	r3, [r4, #24]
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	b953      	cbnz	r3, 8004246 <__swsetup_r+0xc6>
 8004230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004234:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004238:	d1ba      	bne.n	80041b0 <__swsetup_r+0x30>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	0792      	lsls	r2, r2, #30
 800423e:	bf58      	it	pl
 8004240:	6963      	ldrpl	r3, [r4, #20]
 8004242:	60a3      	str	r3, [r4, #8]
 8004244:	e7f2      	b.n	800422c <__swsetup_r+0xac>
 8004246:	2000      	movs	r0, #0
 8004248:	e7f7      	b.n	800423a <__swsetup_r+0xba>
 800424a:	bf00      	nop
 800424c:	20000018 	.word	0x20000018
 8004250:	08004f24 	.word	0x08004f24
 8004254:	08004f44 	.word	0x08004f44
 8004258:	08004f04 	.word	0x08004f04

0800425c <__sflush_r>:
 800425c:	898a      	ldrh	r2, [r1, #12]
 800425e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004262:	4605      	mov	r5, r0
 8004264:	0710      	lsls	r0, r2, #28
 8004266:	460c      	mov	r4, r1
 8004268:	d45a      	bmi.n	8004320 <__sflush_r+0xc4>
 800426a:	684b      	ldr	r3, [r1, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	dc05      	bgt.n	800427c <__sflush_r+0x20>
 8004270:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	dc02      	bgt.n	800427c <__sflush_r+0x20>
 8004276:	2000      	movs	r0, #0
 8004278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800427c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800427e:	2e00      	cmp	r6, #0
 8004280:	d0f9      	beq.n	8004276 <__sflush_r+0x1a>
 8004282:	2300      	movs	r3, #0
 8004284:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004288:	682f      	ldr	r7, [r5, #0]
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	d033      	beq.n	80042f6 <__sflush_r+0x9a>
 800428e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	075a      	lsls	r2, r3, #29
 8004294:	d505      	bpl.n	80042a2 <__sflush_r+0x46>
 8004296:	6863      	ldr	r3, [r4, #4]
 8004298:	1ac0      	subs	r0, r0, r3
 800429a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800429c:	b10b      	cbz	r3, 80042a2 <__sflush_r+0x46>
 800429e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a0:	1ac0      	subs	r0, r0, r3
 80042a2:	2300      	movs	r3, #0
 80042a4:	4602      	mov	r2, r0
 80042a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042a8:	6a21      	ldr	r1, [r4, #32]
 80042aa:	4628      	mov	r0, r5
 80042ac:	47b0      	blx	r6
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	d106      	bne.n	80042c2 <__sflush_r+0x66>
 80042b4:	6829      	ldr	r1, [r5, #0]
 80042b6:	291d      	cmp	r1, #29
 80042b8:	d84b      	bhi.n	8004352 <__sflush_r+0xf6>
 80042ba:	4a2b      	ldr	r2, [pc, #172]	; (8004368 <__sflush_r+0x10c>)
 80042bc:	40ca      	lsrs	r2, r1
 80042be:	07d6      	lsls	r6, r2, #31
 80042c0:	d547      	bpl.n	8004352 <__sflush_r+0xf6>
 80042c2:	2200      	movs	r2, #0
 80042c4:	6062      	str	r2, [r4, #4]
 80042c6:	04d9      	lsls	r1, r3, #19
 80042c8:	6922      	ldr	r2, [r4, #16]
 80042ca:	6022      	str	r2, [r4, #0]
 80042cc:	d504      	bpl.n	80042d8 <__sflush_r+0x7c>
 80042ce:	1c42      	adds	r2, r0, #1
 80042d0:	d101      	bne.n	80042d6 <__sflush_r+0x7a>
 80042d2:	682b      	ldr	r3, [r5, #0]
 80042d4:	b903      	cbnz	r3, 80042d8 <__sflush_r+0x7c>
 80042d6:	6560      	str	r0, [r4, #84]	; 0x54
 80042d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042da:	602f      	str	r7, [r5, #0]
 80042dc:	2900      	cmp	r1, #0
 80042de:	d0ca      	beq.n	8004276 <__sflush_r+0x1a>
 80042e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042e4:	4299      	cmp	r1, r3
 80042e6:	d002      	beq.n	80042ee <__sflush_r+0x92>
 80042e8:	4628      	mov	r0, r5
 80042ea:	f7ff fdbf 	bl	8003e6c <_free_r>
 80042ee:	2000      	movs	r0, #0
 80042f0:	6360      	str	r0, [r4, #52]	; 0x34
 80042f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f6:	6a21      	ldr	r1, [r4, #32]
 80042f8:	2301      	movs	r3, #1
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b0      	blx	r6
 80042fe:	1c41      	adds	r1, r0, #1
 8004300:	d1c6      	bne.n	8004290 <__sflush_r+0x34>
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0c3      	beq.n	8004290 <__sflush_r+0x34>
 8004308:	2b1d      	cmp	r3, #29
 800430a:	d001      	beq.n	8004310 <__sflush_r+0xb4>
 800430c:	2b16      	cmp	r3, #22
 800430e:	d101      	bne.n	8004314 <__sflush_r+0xb8>
 8004310:	602f      	str	r7, [r5, #0]
 8004312:	e7b0      	b.n	8004276 <__sflush_r+0x1a>
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431a:	81a3      	strh	r3, [r4, #12]
 800431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004320:	690f      	ldr	r7, [r1, #16]
 8004322:	2f00      	cmp	r7, #0
 8004324:	d0a7      	beq.n	8004276 <__sflush_r+0x1a>
 8004326:	0793      	lsls	r3, r2, #30
 8004328:	680e      	ldr	r6, [r1, #0]
 800432a:	bf08      	it	eq
 800432c:	694b      	ldreq	r3, [r1, #20]
 800432e:	600f      	str	r7, [r1, #0]
 8004330:	bf18      	it	ne
 8004332:	2300      	movne	r3, #0
 8004334:	eba6 0807 	sub.w	r8, r6, r7
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	f1b8 0f00 	cmp.w	r8, #0
 800433e:	dd9a      	ble.n	8004276 <__sflush_r+0x1a>
 8004340:	4643      	mov	r3, r8
 8004342:	463a      	mov	r2, r7
 8004344:	6a21      	ldr	r1, [r4, #32]
 8004346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004348:	4628      	mov	r0, r5
 800434a:	47b0      	blx	r6
 800434c:	2800      	cmp	r0, #0
 800434e:	dc07      	bgt.n	8004360 <__sflush_r+0x104>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004360:	4407      	add	r7, r0
 8004362:	eba8 0800 	sub.w	r8, r8, r0
 8004366:	e7e8      	b.n	800433a <__sflush_r+0xde>
 8004368:	20400001 	.word	0x20400001

0800436c <_fflush_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	4605      	mov	r5, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b1db      	cbz	r3, 80043ae <_fflush_r+0x42>
 8004376:	b118      	cbz	r0, 8004380 <_fflush_r+0x14>
 8004378:	6983      	ldr	r3, [r0, #24]
 800437a:	b90b      	cbnz	r3, 8004380 <_fflush_r+0x14>
 800437c:	f000 f860 	bl	8004440 <__sinit>
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <_fflush_r+0x48>)
 8004382:	429c      	cmp	r4, r3
 8004384:	d109      	bne.n	800439a <_fflush_r+0x2e>
 8004386:	686c      	ldr	r4, [r5, #4]
 8004388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800438c:	b17b      	cbz	r3, 80043ae <_fflush_r+0x42>
 800438e:	4621      	mov	r1, r4
 8004390:	4628      	mov	r0, r5
 8004392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004396:	f7ff bf61 	b.w	800425c <__sflush_r>
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <_fflush_r+0x4c>)
 800439c:	429c      	cmp	r4, r3
 800439e:	d101      	bne.n	80043a4 <_fflush_r+0x38>
 80043a0:	68ac      	ldr	r4, [r5, #8]
 80043a2:	e7f1      	b.n	8004388 <_fflush_r+0x1c>
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <_fflush_r+0x50>)
 80043a6:	429c      	cmp	r4, r3
 80043a8:	bf08      	it	eq
 80043aa:	68ec      	ldreq	r4, [r5, #12]
 80043ac:	e7ec      	b.n	8004388 <_fflush_r+0x1c>
 80043ae:	2000      	movs	r0, #0
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
 80043b2:	bf00      	nop
 80043b4:	08004f24 	.word	0x08004f24
 80043b8:	08004f44 	.word	0x08004f44
 80043bc:	08004f04 	.word	0x08004f04

080043c0 <_cleanup_r>:
 80043c0:	4901      	ldr	r1, [pc, #4]	; (80043c8 <_cleanup_r+0x8>)
 80043c2:	f000 b8a9 	b.w	8004518 <_fwalk_reent>
 80043c6:	bf00      	nop
 80043c8:	0800436d 	.word	0x0800436d

080043cc <std.isra.0>:
 80043cc:	2300      	movs	r3, #0
 80043ce:	b510      	push	{r4, lr}
 80043d0:	4604      	mov	r4, r0
 80043d2:	6003      	str	r3, [r0, #0]
 80043d4:	6043      	str	r3, [r0, #4]
 80043d6:	6083      	str	r3, [r0, #8]
 80043d8:	8181      	strh	r1, [r0, #12]
 80043da:	6643      	str	r3, [r0, #100]	; 0x64
 80043dc:	81c2      	strh	r2, [r0, #14]
 80043de:	6103      	str	r3, [r0, #16]
 80043e0:	6143      	str	r3, [r0, #20]
 80043e2:	6183      	str	r3, [r0, #24]
 80043e4:	4619      	mov	r1, r3
 80043e6:	2208      	movs	r2, #8
 80043e8:	305c      	adds	r0, #92	; 0x5c
 80043ea:	f7ff fd37 	bl	8003e5c <memset>
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <std.isra.0+0x38>)
 80043f0:	6263      	str	r3, [r4, #36]	; 0x24
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <std.isra.0+0x3c>)
 80043f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <std.isra.0+0x40>)
 80043f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <std.isra.0+0x44>)
 80043fc:	6224      	str	r4, [r4, #32]
 80043fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004400:	bd10      	pop	{r4, pc}
 8004402:	bf00      	nop
 8004404:	08004bcd 	.word	0x08004bcd
 8004408:	08004bef 	.word	0x08004bef
 800440c:	08004c27 	.word	0x08004c27
 8004410:	08004c4b 	.word	0x08004c4b

08004414 <__sfmoreglue>:
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	1e4a      	subs	r2, r1, #1
 8004418:	2568      	movs	r5, #104	; 0x68
 800441a:	4355      	muls	r5, r2
 800441c:	460e      	mov	r6, r1
 800441e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004422:	f7ff fd71 	bl	8003f08 <_malloc_r>
 8004426:	4604      	mov	r4, r0
 8004428:	b140      	cbz	r0, 800443c <__sfmoreglue+0x28>
 800442a:	2100      	movs	r1, #0
 800442c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004430:	300c      	adds	r0, #12
 8004432:	60a0      	str	r0, [r4, #8]
 8004434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004438:	f7ff fd10 	bl	8003e5c <memset>
 800443c:	4620      	mov	r0, r4
 800443e:	bd70      	pop	{r4, r5, r6, pc}

08004440 <__sinit>:
 8004440:	6983      	ldr	r3, [r0, #24]
 8004442:	b510      	push	{r4, lr}
 8004444:	4604      	mov	r4, r0
 8004446:	bb33      	cbnz	r3, 8004496 <__sinit+0x56>
 8004448:	6483      	str	r3, [r0, #72]	; 0x48
 800444a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800444c:	6503      	str	r3, [r0, #80]	; 0x50
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <__sinit+0x58>)
 8004450:	4a12      	ldr	r2, [pc, #72]	; (800449c <__sinit+0x5c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6282      	str	r2, [r0, #40]	; 0x28
 8004456:	4298      	cmp	r0, r3
 8004458:	bf04      	itt	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	6183      	streq	r3, [r0, #24]
 800445e:	f000 f81f 	bl	80044a0 <__sfp>
 8004462:	6060      	str	r0, [r4, #4]
 8004464:	4620      	mov	r0, r4
 8004466:	f000 f81b 	bl	80044a0 <__sfp>
 800446a:	60a0      	str	r0, [r4, #8]
 800446c:	4620      	mov	r0, r4
 800446e:	f000 f817 	bl	80044a0 <__sfp>
 8004472:	2200      	movs	r2, #0
 8004474:	60e0      	str	r0, [r4, #12]
 8004476:	2104      	movs	r1, #4
 8004478:	6860      	ldr	r0, [r4, #4]
 800447a:	f7ff ffa7 	bl	80043cc <std.isra.0>
 800447e:	2201      	movs	r2, #1
 8004480:	2109      	movs	r1, #9
 8004482:	68a0      	ldr	r0, [r4, #8]
 8004484:	f7ff ffa2 	bl	80043cc <std.isra.0>
 8004488:	2202      	movs	r2, #2
 800448a:	2112      	movs	r1, #18
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	f7ff ff9d 	bl	80043cc <std.isra.0>
 8004492:	2301      	movs	r3, #1
 8004494:	61a3      	str	r3, [r4, #24]
 8004496:	bd10      	pop	{r4, pc}
 8004498:	08004f64 	.word	0x08004f64
 800449c:	080043c1 	.word	0x080043c1

080044a0 <__sfp>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <__sfp+0x74>)
 80044a4:	681e      	ldr	r6, [r3, #0]
 80044a6:	69b3      	ldr	r3, [r6, #24]
 80044a8:	4607      	mov	r7, r0
 80044aa:	b913      	cbnz	r3, 80044b2 <__sfp+0x12>
 80044ac:	4630      	mov	r0, r6
 80044ae:	f7ff ffc7 	bl	8004440 <__sinit>
 80044b2:	3648      	adds	r6, #72	; 0x48
 80044b4:	68b4      	ldr	r4, [r6, #8]
 80044b6:	6873      	ldr	r3, [r6, #4]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	d503      	bpl.n	80044c4 <__sfp+0x24>
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	b133      	cbz	r3, 80044ce <__sfp+0x2e>
 80044c0:	6836      	ldr	r6, [r6, #0]
 80044c2:	e7f7      	b.n	80044b4 <__sfp+0x14>
 80044c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044c8:	b16d      	cbz	r5, 80044e6 <__sfp+0x46>
 80044ca:	3468      	adds	r4, #104	; 0x68
 80044cc:	e7f4      	b.n	80044b8 <__sfp+0x18>
 80044ce:	2104      	movs	r1, #4
 80044d0:	4638      	mov	r0, r7
 80044d2:	f7ff ff9f 	bl	8004414 <__sfmoreglue>
 80044d6:	6030      	str	r0, [r6, #0]
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1f1      	bne.n	80044c0 <__sfp+0x20>
 80044dc:	230c      	movs	r3, #12
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4604      	mov	r4, r0
 80044e2:	4620      	mov	r0, r4
 80044e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ea:	81e3      	strh	r3, [r4, #14]
 80044ec:	2301      	movs	r3, #1
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	6665      	str	r5, [r4, #100]	; 0x64
 80044f2:	6025      	str	r5, [r4, #0]
 80044f4:	60a5      	str	r5, [r4, #8]
 80044f6:	6065      	str	r5, [r4, #4]
 80044f8:	6125      	str	r5, [r4, #16]
 80044fa:	6165      	str	r5, [r4, #20]
 80044fc:	61a5      	str	r5, [r4, #24]
 80044fe:	2208      	movs	r2, #8
 8004500:	4629      	mov	r1, r5
 8004502:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004506:	f7ff fca9 	bl	8003e5c <memset>
 800450a:	6365      	str	r5, [r4, #52]	; 0x34
 800450c:	63a5      	str	r5, [r4, #56]	; 0x38
 800450e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004510:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004512:	e7e6      	b.n	80044e2 <__sfp+0x42>
 8004514:	08004f64 	.word	0x08004f64

08004518 <_fwalk_reent>:
 8004518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800451c:	4680      	mov	r8, r0
 800451e:	4689      	mov	r9, r1
 8004520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004524:	2600      	movs	r6, #0
 8004526:	b914      	cbnz	r4, 800452e <_fwalk_reent+0x16>
 8004528:	4630      	mov	r0, r6
 800452a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800452e:	68a5      	ldr	r5, [r4, #8]
 8004530:	6867      	ldr	r7, [r4, #4]
 8004532:	3f01      	subs	r7, #1
 8004534:	d501      	bpl.n	800453a <_fwalk_reent+0x22>
 8004536:	6824      	ldr	r4, [r4, #0]
 8004538:	e7f5      	b.n	8004526 <_fwalk_reent+0xe>
 800453a:	89ab      	ldrh	r3, [r5, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d907      	bls.n	8004550 <_fwalk_reent+0x38>
 8004540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004544:	3301      	adds	r3, #1
 8004546:	d003      	beq.n	8004550 <_fwalk_reent+0x38>
 8004548:	4629      	mov	r1, r5
 800454a:	4640      	mov	r0, r8
 800454c:	47c8      	blx	r9
 800454e:	4306      	orrs	r6, r0
 8004550:	3568      	adds	r5, #104	; 0x68
 8004552:	e7ee      	b.n	8004532 <_fwalk_reent+0x1a>

08004554 <__swhatbuf_r>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	460e      	mov	r6, r1
 8004558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455c:	2900      	cmp	r1, #0
 800455e:	b090      	sub	sp, #64	; 0x40
 8004560:	4614      	mov	r4, r2
 8004562:	461d      	mov	r5, r3
 8004564:	da07      	bge.n	8004576 <__swhatbuf_r+0x22>
 8004566:	2300      	movs	r3, #0
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	89b3      	ldrh	r3, [r6, #12]
 800456c:	061a      	lsls	r2, r3, #24
 800456e:	d410      	bmi.n	8004592 <__swhatbuf_r+0x3e>
 8004570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004574:	e00e      	b.n	8004594 <__swhatbuf_r+0x40>
 8004576:	aa01      	add	r2, sp, #4
 8004578:	f000 fb8e 	bl	8004c98 <_fstat_r>
 800457c:	2800      	cmp	r0, #0
 800457e:	dbf2      	blt.n	8004566 <__swhatbuf_r+0x12>
 8004580:	9a02      	ldr	r2, [sp, #8]
 8004582:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004586:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800458a:	425a      	negs	r2, r3
 800458c:	415a      	adcs	r2, r3
 800458e:	602a      	str	r2, [r5, #0]
 8004590:	e7ee      	b.n	8004570 <__swhatbuf_r+0x1c>
 8004592:	2340      	movs	r3, #64	; 0x40
 8004594:	2000      	movs	r0, #0
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	b010      	add	sp, #64	; 0x40
 800459a:	bd70      	pop	{r4, r5, r6, pc}

0800459c <__smakebuf_r>:
 800459c:	898b      	ldrh	r3, [r1, #12]
 800459e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045a0:	079d      	lsls	r5, r3, #30
 80045a2:	4606      	mov	r6, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	d507      	bpl.n	80045b8 <__smakebuf_r+0x1c>
 80045a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	2301      	movs	r3, #1
 80045b2:	6163      	str	r3, [r4, #20]
 80045b4:	b002      	add	sp, #8
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	ab01      	add	r3, sp, #4
 80045ba:	466a      	mov	r2, sp
 80045bc:	f7ff ffca 	bl	8004554 <__swhatbuf_r>
 80045c0:	9900      	ldr	r1, [sp, #0]
 80045c2:	4605      	mov	r5, r0
 80045c4:	4630      	mov	r0, r6
 80045c6:	f7ff fc9f 	bl	8003f08 <_malloc_r>
 80045ca:	b948      	cbnz	r0, 80045e0 <__smakebuf_r+0x44>
 80045cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d0:	059a      	lsls	r2, r3, #22
 80045d2:	d4ef      	bmi.n	80045b4 <__smakebuf_r+0x18>
 80045d4:	f023 0303 	bic.w	r3, r3, #3
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	e7e3      	b.n	80045a8 <__smakebuf_r+0xc>
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <__smakebuf_r+0x7c>)
 80045e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	6020      	str	r0, [r4, #0]
 80045e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	9b00      	ldr	r3, [sp, #0]
 80045f0:	6163      	str	r3, [r4, #20]
 80045f2:	9b01      	ldr	r3, [sp, #4]
 80045f4:	6120      	str	r0, [r4, #16]
 80045f6:	b15b      	cbz	r3, 8004610 <__smakebuf_r+0x74>
 80045f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 fb5d 	bl	8004cbc <_isatty_r>
 8004602:	b128      	cbz	r0, 8004610 <__smakebuf_r+0x74>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	431d      	orrs	r5, r3
 8004614:	81a5      	strh	r5, [r4, #12]
 8004616:	e7cd      	b.n	80045b4 <__smakebuf_r+0x18>
 8004618:	080043c1 	.word	0x080043c1

0800461c <__malloc_lock>:
 800461c:	4770      	bx	lr

0800461e <__malloc_unlock>:
 800461e:	4770      	bx	lr

08004620 <__sfputc_r>:
 8004620:	6893      	ldr	r3, [r2, #8]
 8004622:	3b01      	subs	r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	b410      	push	{r4}
 8004628:	6093      	str	r3, [r2, #8]
 800462a:	da09      	bge.n	8004640 <__sfputc_r+0x20>
 800462c:	6994      	ldr	r4, [r2, #24]
 800462e:	42a3      	cmp	r3, r4
 8004630:	db02      	blt.n	8004638 <__sfputc_r+0x18>
 8004632:	b2cb      	uxtb	r3, r1
 8004634:	2b0a      	cmp	r3, #10
 8004636:	d103      	bne.n	8004640 <__sfputc_r+0x20>
 8004638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800463c:	f7ff bd4e 	b.w	80040dc <__swbuf_r>
 8004640:	6813      	ldr	r3, [r2, #0]
 8004642:	1c58      	adds	r0, r3, #1
 8004644:	6010      	str	r0, [r2, #0]
 8004646:	7019      	strb	r1, [r3, #0]
 8004648:	b2c8      	uxtb	r0, r1
 800464a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800464e:	4770      	bx	lr

08004650 <__sfputs_r>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	4606      	mov	r6, r0
 8004654:	460f      	mov	r7, r1
 8004656:	4614      	mov	r4, r2
 8004658:	18d5      	adds	r5, r2, r3
 800465a:	42ac      	cmp	r4, r5
 800465c:	d101      	bne.n	8004662 <__sfputs_r+0x12>
 800465e:	2000      	movs	r0, #0
 8004660:	e007      	b.n	8004672 <__sfputs_r+0x22>
 8004662:	463a      	mov	r2, r7
 8004664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004668:	4630      	mov	r0, r6
 800466a:	f7ff ffd9 	bl	8004620 <__sfputc_r>
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	d1f3      	bne.n	800465a <__sfputs_r+0xa>
 8004672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004674 <_vfiprintf_r>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	b09d      	sub	sp, #116	; 0x74
 800467a:	460c      	mov	r4, r1
 800467c:	4617      	mov	r7, r2
 800467e:	9303      	str	r3, [sp, #12]
 8004680:	4606      	mov	r6, r0
 8004682:	b118      	cbz	r0, 800468c <_vfiprintf_r+0x18>
 8004684:	6983      	ldr	r3, [r0, #24]
 8004686:	b90b      	cbnz	r3, 800468c <_vfiprintf_r+0x18>
 8004688:	f7ff feda 	bl	8004440 <__sinit>
 800468c:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <_vfiprintf_r+0x20c>)
 800468e:	429c      	cmp	r4, r3
 8004690:	d157      	bne.n	8004742 <_vfiprintf_r+0xce>
 8004692:	6874      	ldr	r4, [r6, #4]
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	0718      	lsls	r0, r3, #28
 8004698:	d55d      	bpl.n	8004756 <_vfiprintf_r+0xe2>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05a      	beq.n	8004756 <_vfiprintf_r+0xe2>
 80046a0:	2300      	movs	r3, #0
 80046a2:	9309      	str	r3, [sp, #36]	; 0x24
 80046a4:	2320      	movs	r3, #32
 80046a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046aa:	2330      	movs	r3, #48	; 0x30
 80046ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046b0:	f04f 0b01 	mov.w	fp, #1
 80046b4:	46b8      	mov	r8, r7
 80046b6:	4645      	mov	r5, r8
 80046b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d155      	bne.n	800476c <_vfiprintf_r+0xf8>
 80046c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80046c4:	d00b      	beq.n	80046de <_vfiprintf_r+0x6a>
 80046c6:	4653      	mov	r3, sl
 80046c8:	463a      	mov	r2, r7
 80046ca:	4621      	mov	r1, r4
 80046cc:	4630      	mov	r0, r6
 80046ce:	f7ff ffbf 	bl	8004650 <__sfputs_r>
 80046d2:	3001      	adds	r0, #1
 80046d4:	f000 80c4 	beq.w	8004860 <_vfiprintf_r+0x1ec>
 80046d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046da:	4453      	add	r3, sl
 80046dc:	9309      	str	r3, [sp, #36]	; 0x24
 80046de:	f898 3000 	ldrb.w	r3, [r8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80bc 	beq.w	8004860 <_vfiprintf_r+0x1ec>
 80046e8:	2300      	movs	r3, #0
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ee:	9304      	str	r3, [sp, #16]
 80046f0:	9307      	str	r3, [sp, #28]
 80046f2:	9205      	str	r2, [sp, #20]
 80046f4:	9306      	str	r3, [sp, #24]
 80046f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046fa:	931a      	str	r3, [sp, #104]	; 0x68
 80046fc:	2205      	movs	r2, #5
 80046fe:	7829      	ldrb	r1, [r5, #0]
 8004700:	4860      	ldr	r0, [pc, #384]	; (8004884 <_vfiprintf_r+0x210>)
 8004702:	f7fb fd9d 	bl	8000240 <memchr>
 8004706:	f105 0801 	add.w	r8, r5, #1
 800470a:	9b04      	ldr	r3, [sp, #16]
 800470c:	2800      	cmp	r0, #0
 800470e:	d131      	bne.n	8004774 <_vfiprintf_r+0x100>
 8004710:	06d9      	lsls	r1, r3, #27
 8004712:	bf44      	itt	mi
 8004714:	2220      	movmi	r2, #32
 8004716:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800471a:	071a      	lsls	r2, r3, #28
 800471c:	bf44      	itt	mi
 800471e:	222b      	movmi	r2, #43	; 0x2b
 8004720:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004724:	782a      	ldrb	r2, [r5, #0]
 8004726:	2a2a      	cmp	r2, #42	; 0x2a
 8004728:	d02c      	beq.n	8004784 <_vfiprintf_r+0x110>
 800472a:	9a07      	ldr	r2, [sp, #28]
 800472c:	2100      	movs	r1, #0
 800472e:	200a      	movs	r0, #10
 8004730:	46a8      	mov	r8, r5
 8004732:	3501      	adds	r5, #1
 8004734:	f898 3000 	ldrb.w	r3, [r8]
 8004738:	3b30      	subs	r3, #48	; 0x30
 800473a:	2b09      	cmp	r3, #9
 800473c:	d96d      	bls.n	800481a <_vfiprintf_r+0x1a6>
 800473e:	b371      	cbz	r1, 800479e <_vfiprintf_r+0x12a>
 8004740:	e026      	b.n	8004790 <_vfiprintf_r+0x11c>
 8004742:	4b51      	ldr	r3, [pc, #324]	; (8004888 <_vfiprintf_r+0x214>)
 8004744:	429c      	cmp	r4, r3
 8004746:	d101      	bne.n	800474c <_vfiprintf_r+0xd8>
 8004748:	68b4      	ldr	r4, [r6, #8]
 800474a:	e7a3      	b.n	8004694 <_vfiprintf_r+0x20>
 800474c:	4b4f      	ldr	r3, [pc, #316]	; (800488c <_vfiprintf_r+0x218>)
 800474e:	429c      	cmp	r4, r3
 8004750:	bf08      	it	eq
 8004752:	68f4      	ldreq	r4, [r6, #12]
 8004754:	e79e      	b.n	8004694 <_vfiprintf_r+0x20>
 8004756:	4621      	mov	r1, r4
 8004758:	4630      	mov	r0, r6
 800475a:	f7ff fd11 	bl	8004180 <__swsetup_r>
 800475e:	2800      	cmp	r0, #0
 8004760:	d09e      	beq.n	80046a0 <_vfiprintf_r+0x2c>
 8004762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004766:	b01d      	add	sp, #116	; 0x74
 8004768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476c:	2b25      	cmp	r3, #37	; 0x25
 800476e:	d0a7      	beq.n	80046c0 <_vfiprintf_r+0x4c>
 8004770:	46a8      	mov	r8, r5
 8004772:	e7a0      	b.n	80046b6 <_vfiprintf_r+0x42>
 8004774:	4a43      	ldr	r2, [pc, #268]	; (8004884 <_vfiprintf_r+0x210>)
 8004776:	1a80      	subs	r0, r0, r2
 8004778:	fa0b f000 	lsl.w	r0, fp, r0
 800477c:	4318      	orrs	r0, r3
 800477e:	9004      	str	r0, [sp, #16]
 8004780:	4645      	mov	r5, r8
 8004782:	e7bb      	b.n	80046fc <_vfiprintf_r+0x88>
 8004784:	9a03      	ldr	r2, [sp, #12]
 8004786:	1d11      	adds	r1, r2, #4
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	9103      	str	r1, [sp, #12]
 800478c:	2a00      	cmp	r2, #0
 800478e:	db01      	blt.n	8004794 <_vfiprintf_r+0x120>
 8004790:	9207      	str	r2, [sp, #28]
 8004792:	e004      	b.n	800479e <_vfiprintf_r+0x12a>
 8004794:	4252      	negs	r2, r2
 8004796:	f043 0302 	orr.w	r3, r3, #2
 800479a:	9207      	str	r2, [sp, #28]
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	f898 3000 	ldrb.w	r3, [r8]
 80047a2:	2b2e      	cmp	r3, #46	; 0x2e
 80047a4:	d110      	bne.n	80047c8 <_vfiprintf_r+0x154>
 80047a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80047aa:	2b2a      	cmp	r3, #42	; 0x2a
 80047ac:	f108 0101 	add.w	r1, r8, #1
 80047b0:	d137      	bne.n	8004822 <_vfiprintf_r+0x1ae>
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	1d1a      	adds	r2, r3, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	9203      	str	r2, [sp, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfb8      	it	lt
 80047be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047c2:	f108 0802 	add.w	r8, r8, #2
 80047c6:	9305      	str	r3, [sp, #20]
 80047c8:	4d31      	ldr	r5, [pc, #196]	; (8004890 <_vfiprintf_r+0x21c>)
 80047ca:	f898 1000 	ldrb.w	r1, [r8]
 80047ce:	2203      	movs	r2, #3
 80047d0:	4628      	mov	r0, r5
 80047d2:	f7fb fd35 	bl	8000240 <memchr>
 80047d6:	b140      	cbz	r0, 80047ea <_vfiprintf_r+0x176>
 80047d8:	2340      	movs	r3, #64	; 0x40
 80047da:	1b40      	subs	r0, r0, r5
 80047dc:	fa03 f000 	lsl.w	r0, r3, r0
 80047e0:	9b04      	ldr	r3, [sp, #16]
 80047e2:	4303      	orrs	r3, r0
 80047e4:	9304      	str	r3, [sp, #16]
 80047e6:	f108 0801 	add.w	r8, r8, #1
 80047ea:	f898 1000 	ldrb.w	r1, [r8]
 80047ee:	4829      	ldr	r0, [pc, #164]	; (8004894 <_vfiprintf_r+0x220>)
 80047f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047f4:	2206      	movs	r2, #6
 80047f6:	f108 0701 	add.w	r7, r8, #1
 80047fa:	f7fb fd21 	bl	8000240 <memchr>
 80047fe:	2800      	cmp	r0, #0
 8004800:	d034      	beq.n	800486c <_vfiprintf_r+0x1f8>
 8004802:	4b25      	ldr	r3, [pc, #148]	; (8004898 <_vfiprintf_r+0x224>)
 8004804:	bb03      	cbnz	r3, 8004848 <_vfiprintf_r+0x1d4>
 8004806:	9b03      	ldr	r3, [sp, #12]
 8004808:	3307      	adds	r3, #7
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	3308      	adds	r3, #8
 8004810:	9303      	str	r3, [sp, #12]
 8004812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004814:	444b      	add	r3, r9
 8004816:	9309      	str	r3, [sp, #36]	; 0x24
 8004818:	e74c      	b.n	80046b4 <_vfiprintf_r+0x40>
 800481a:	fb00 3202 	mla	r2, r0, r2, r3
 800481e:	2101      	movs	r1, #1
 8004820:	e786      	b.n	8004730 <_vfiprintf_r+0xbc>
 8004822:	2300      	movs	r3, #0
 8004824:	9305      	str	r3, [sp, #20]
 8004826:	4618      	mov	r0, r3
 8004828:	250a      	movs	r5, #10
 800482a:	4688      	mov	r8, r1
 800482c:	3101      	adds	r1, #1
 800482e:	f898 2000 	ldrb.w	r2, [r8]
 8004832:	3a30      	subs	r2, #48	; 0x30
 8004834:	2a09      	cmp	r2, #9
 8004836:	d903      	bls.n	8004840 <_vfiprintf_r+0x1cc>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0c5      	beq.n	80047c8 <_vfiprintf_r+0x154>
 800483c:	9005      	str	r0, [sp, #20]
 800483e:	e7c3      	b.n	80047c8 <_vfiprintf_r+0x154>
 8004840:	fb05 2000 	mla	r0, r5, r0, r2
 8004844:	2301      	movs	r3, #1
 8004846:	e7f0      	b.n	800482a <_vfiprintf_r+0x1b6>
 8004848:	ab03      	add	r3, sp, #12
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4622      	mov	r2, r4
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <_vfiprintf_r+0x228>)
 8004850:	a904      	add	r1, sp, #16
 8004852:	4630      	mov	r0, r6
 8004854:	f3af 8000 	nop.w
 8004858:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800485c:	4681      	mov	r9, r0
 800485e:	d1d8      	bne.n	8004812 <_vfiprintf_r+0x19e>
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	065b      	lsls	r3, r3, #25
 8004864:	f53f af7d 	bmi.w	8004762 <_vfiprintf_r+0xee>
 8004868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800486a:	e77c      	b.n	8004766 <_vfiprintf_r+0xf2>
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	4622      	mov	r2, r4
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <_vfiprintf_r+0x228>)
 8004874:	a904      	add	r1, sp, #16
 8004876:	4630      	mov	r0, r6
 8004878:	f000 f888 	bl	800498c <_printf_i>
 800487c:	e7ec      	b.n	8004858 <_vfiprintf_r+0x1e4>
 800487e:	bf00      	nop
 8004880:	08004f24 	.word	0x08004f24
 8004884:	08004f68 	.word	0x08004f68
 8004888:	08004f44 	.word	0x08004f44
 800488c:	08004f04 	.word	0x08004f04
 8004890:	08004f6e 	.word	0x08004f6e
 8004894:	08004f72 	.word	0x08004f72
 8004898:	00000000 	.word	0x00000000
 800489c:	08004651 	.word	0x08004651

080048a0 <_printf_common>:
 80048a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a4:	4691      	mov	r9, r2
 80048a6:	461f      	mov	r7, r3
 80048a8:	688a      	ldr	r2, [r1, #8]
 80048aa:	690b      	ldr	r3, [r1, #16]
 80048ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048b0:	4293      	cmp	r3, r2
 80048b2:	bfb8      	it	lt
 80048b4:	4613      	movlt	r3, r2
 80048b6:	f8c9 3000 	str.w	r3, [r9]
 80048ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048be:	4606      	mov	r6, r0
 80048c0:	460c      	mov	r4, r1
 80048c2:	b112      	cbz	r2, 80048ca <_printf_common+0x2a>
 80048c4:	3301      	adds	r3, #1
 80048c6:	f8c9 3000 	str.w	r3, [r9]
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	0699      	lsls	r1, r3, #26
 80048ce:	bf42      	ittt	mi
 80048d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048d4:	3302      	addmi	r3, #2
 80048d6:	f8c9 3000 	strmi.w	r3, [r9]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	f015 0506 	ands.w	r5, r5, #6
 80048e0:	d107      	bne.n	80048f2 <_printf_common+0x52>
 80048e2:	f104 0a19 	add.w	sl, r4, #25
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	f8d9 2000 	ldr.w	r2, [r9]
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	429d      	cmp	r5, r3
 80048f0:	db29      	blt.n	8004946 <_printf_common+0xa6>
 80048f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	3300      	adds	r3, #0
 80048fa:	bf18      	it	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	0692      	lsls	r2, r2, #26
 8004900:	d42e      	bmi.n	8004960 <_printf_common+0xc0>
 8004902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004906:	4639      	mov	r1, r7
 8004908:	4630      	mov	r0, r6
 800490a:	47c0      	blx	r8
 800490c:	3001      	adds	r0, #1
 800490e:	d021      	beq.n	8004954 <_printf_common+0xb4>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	68e5      	ldr	r5, [r4, #12]
 8004914:	f8d9 2000 	ldr.w	r2, [r9]
 8004918:	f003 0306 	and.w	r3, r3, #6
 800491c:	2b04      	cmp	r3, #4
 800491e:	bf08      	it	eq
 8004920:	1aad      	subeq	r5, r5, r2
 8004922:	68a3      	ldr	r3, [r4, #8]
 8004924:	6922      	ldr	r2, [r4, #16]
 8004926:	bf0c      	ite	eq
 8004928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800492c:	2500      	movne	r5, #0
 800492e:	4293      	cmp	r3, r2
 8004930:	bfc4      	itt	gt
 8004932:	1a9b      	subgt	r3, r3, r2
 8004934:	18ed      	addgt	r5, r5, r3
 8004936:	f04f 0900 	mov.w	r9, #0
 800493a:	341a      	adds	r4, #26
 800493c:	454d      	cmp	r5, r9
 800493e:	d11b      	bne.n	8004978 <_printf_common+0xd8>
 8004940:	2000      	movs	r0, #0
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	2301      	movs	r3, #1
 8004948:	4652      	mov	r2, sl
 800494a:	4639      	mov	r1, r7
 800494c:	4630      	mov	r0, r6
 800494e:	47c0      	blx	r8
 8004950:	3001      	adds	r0, #1
 8004952:	d103      	bne.n	800495c <_printf_common+0xbc>
 8004954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495c:	3501      	adds	r5, #1
 800495e:	e7c2      	b.n	80048e6 <_printf_common+0x46>
 8004960:	18e1      	adds	r1, r4, r3
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	2030      	movs	r0, #48	; 0x30
 8004966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800496a:	4422      	add	r2, r4
 800496c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004974:	3302      	adds	r3, #2
 8004976:	e7c4      	b.n	8004902 <_printf_common+0x62>
 8004978:	2301      	movs	r3, #1
 800497a:	4622      	mov	r2, r4
 800497c:	4639      	mov	r1, r7
 800497e:	4630      	mov	r0, r6
 8004980:	47c0      	blx	r8
 8004982:	3001      	adds	r0, #1
 8004984:	d0e6      	beq.n	8004954 <_printf_common+0xb4>
 8004986:	f109 0901 	add.w	r9, r9, #1
 800498a:	e7d7      	b.n	800493c <_printf_common+0x9c>

0800498c <_printf_i>:
 800498c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004990:	4617      	mov	r7, r2
 8004992:	7e0a      	ldrb	r2, [r1, #24]
 8004994:	b085      	sub	sp, #20
 8004996:	2a6e      	cmp	r2, #110	; 0x6e
 8004998:	4698      	mov	r8, r3
 800499a:	4606      	mov	r6, r0
 800499c:	460c      	mov	r4, r1
 800499e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049a0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80049a4:	f000 80bc 	beq.w	8004b20 <_printf_i+0x194>
 80049a8:	d81a      	bhi.n	80049e0 <_printf_i+0x54>
 80049aa:	2a63      	cmp	r2, #99	; 0x63
 80049ac:	d02e      	beq.n	8004a0c <_printf_i+0x80>
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x3a>
 80049b0:	2a00      	cmp	r2, #0
 80049b2:	f000 80c8 	beq.w	8004b46 <_printf_i+0x1ba>
 80049b6:	2a58      	cmp	r2, #88	; 0x58
 80049b8:	f000 808a 	beq.w	8004ad0 <_printf_i+0x144>
 80049bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80049c4:	e02a      	b.n	8004a1c <_printf_i+0x90>
 80049c6:	2a64      	cmp	r2, #100	; 0x64
 80049c8:	d001      	beq.n	80049ce <_printf_i+0x42>
 80049ca:	2a69      	cmp	r2, #105	; 0x69
 80049cc:	d1f6      	bne.n	80049bc <_printf_i+0x30>
 80049ce:	6821      	ldr	r1, [r4, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80049d6:	d023      	beq.n	8004a20 <_printf_i+0x94>
 80049d8:	1d11      	adds	r1, r2, #4
 80049da:	6019      	str	r1, [r3, #0]
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	e027      	b.n	8004a30 <_printf_i+0xa4>
 80049e0:	2a73      	cmp	r2, #115	; 0x73
 80049e2:	f000 80b4 	beq.w	8004b4e <_printf_i+0x1c2>
 80049e6:	d808      	bhi.n	80049fa <_printf_i+0x6e>
 80049e8:	2a6f      	cmp	r2, #111	; 0x6f
 80049ea:	d02a      	beq.n	8004a42 <_printf_i+0xb6>
 80049ec:	2a70      	cmp	r2, #112	; 0x70
 80049ee:	d1e5      	bne.n	80049bc <_printf_i+0x30>
 80049f0:	680a      	ldr	r2, [r1, #0]
 80049f2:	f042 0220 	orr.w	r2, r2, #32
 80049f6:	600a      	str	r2, [r1, #0]
 80049f8:	e003      	b.n	8004a02 <_printf_i+0x76>
 80049fa:	2a75      	cmp	r2, #117	; 0x75
 80049fc:	d021      	beq.n	8004a42 <_printf_i+0xb6>
 80049fe:	2a78      	cmp	r2, #120	; 0x78
 8004a00:	d1dc      	bne.n	80049bc <_printf_i+0x30>
 8004a02:	2278      	movs	r2, #120	; 0x78
 8004a04:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004a08:	496e      	ldr	r1, [pc, #440]	; (8004bc4 <_printf_i+0x238>)
 8004a0a:	e064      	b.n	8004ad6 <_printf_i+0x14a>
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004a12:	1d11      	adds	r1, r2, #4
 8004a14:	6019      	str	r1, [r3, #0]
 8004a16:	6813      	ldr	r3, [r2, #0]
 8004a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0a3      	b.n	8004b68 <_printf_i+0x1dc>
 8004a20:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004a24:	f102 0104 	add.w	r1, r2, #4
 8004a28:	6019      	str	r1, [r3, #0]
 8004a2a:	d0d7      	beq.n	80049dc <_printf_i+0x50>
 8004a2c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	da03      	bge.n	8004a3c <_printf_i+0xb0>
 8004a34:	222d      	movs	r2, #45	; 0x2d
 8004a36:	425b      	negs	r3, r3
 8004a38:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a3c:	4962      	ldr	r1, [pc, #392]	; (8004bc8 <_printf_i+0x23c>)
 8004a3e:	220a      	movs	r2, #10
 8004a40:	e017      	b.n	8004a72 <_printf_i+0xe6>
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004a4a:	d003      	beq.n	8004a54 <_printf_i+0xc8>
 8004a4c:	1d08      	adds	r0, r1, #4
 8004a4e:	6018      	str	r0, [r3, #0]
 8004a50:	680b      	ldr	r3, [r1, #0]
 8004a52:	e006      	b.n	8004a62 <_printf_i+0xd6>
 8004a54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a58:	f101 0004 	add.w	r0, r1, #4
 8004a5c:	6018      	str	r0, [r3, #0]
 8004a5e:	d0f7      	beq.n	8004a50 <_printf_i+0xc4>
 8004a60:	880b      	ldrh	r3, [r1, #0]
 8004a62:	4959      	ldr	r1, [pc, #356]	; (8004bc8 <_printf_i+0x23c>)
 8004a64:	2a6f      	cmp	r2, #111	; 0x6f
 8004a66:	bf14      	ite	ne
 8004a68:	220a      	movne	r2, #10
 8004a6a:	2208      	moveq	r2, #8
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004a72:	6865      	ldr	r5, [r4, #4]
 8004a74:	60a5      	str	r5, [r4, #8]
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	f2c0 809c 	blt.w	8004bb4 <_printf_i+0x228>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	f020 0004 	bic.w	r0, r0, #4
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d13f      	bne.n	8004b08 <_printf_i+0x17c>
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	f040 8095 	bne.w	8004bb8 <_printf_i+0x22c>
 8004a8e:	4675      	mov	r5, lr
 8004a90:	2a08      	cmp	r2, #8
 8004a92:	d10b      	bne.n	8004aac <_printf_i+0x120>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	07da      	lsls	r2, r3, #31
 8004a98:	d508      	bpl.n	8004aac <_printf_i+0x120>
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	6862      	ldr	r2, [r4, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	bfde      	ittt	le
 8004aa2:	2330      	movle	r3, #48	; 0x30
 8004aa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004aac:	ebae 0305 	sub.w	r3, lr, r5
 8004ab0:	6123      	str	r3, [r4, #16]
 8004ab2:	f8cd 8000 	str.w	r8, [sp]
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	aa03      	add	r2, sp, #12
 8004aba:	4621      	mov	r1, r4
 8004abc:	4630      	mov	r0, r6
 8004abe:	f7ff feef 	bl	80048a0 <_printf_common>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d155      	bne.n	8004b72 <_printf_i+0x1e6>
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aca:	b005      	add	sp, #20
 8004acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ad0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004ad4:	493c      	ldr	r1, [pc, #240]	; (8004bc8 <_printf_i+0x23c>)
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ade:	f100 0504 	add.w	r5, r0, #4
 8004ae2:	601d      	str	r5, [r3, #0]
 8004ae4:	d001      	beq.n	8004aea <_printf_i+0x15e>
 8004ae6:	6803      	ldr	r3, [r0, #0]
 8004ae8:	e002      	b.n	8004af0 <_printf_i+0x164>
 8004aea:	0655      	lsls	r5, r2, #25
 8004aec:	d5fb      	bpl.n	8004ae6 <_printf_i+0x15a>
 8004aee:	8803      	ldrh	r3, [r0, #0]
 8004af0:	07d0      	lsls	r0, r2, #31
 8004af2:	bf44      	itt	mi
 8004af4:	f042 0220 	orrmi.w	r2, r2, #32
 8004af8:	6022      	strmi	r2, [r4, #0]
 8004afa:	b91b      	cbnz	r3, 8004b04 <_printf_i+0x178>
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	f022 0220 	bic.w	r2, r2, #32
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	2210      	movs	r2, #16
 8004b06:	e7b1      	b.n	8004a6c <_printf_i+0xe0>
 8004b08:	4675      	mov	r5, lr
 8004b0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b0e:	fb02 3310 	mls	r3, r2, r0, r3
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d1f5      	bne.n	8004b0a <_printf_i+0x17e>
 8004b1e:	e7b7      	b.n	8004a90 <_printf_i+0x104>
 8004b20:	6808      	ldr	r0, [r1, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	6949      	ldr	r1, [r1, #20]
 8004b26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004b2a:	d004      	beq.n	8004b36 <_printf_i+0x1aa>
 8004b2c:	1d10      	adds	r0, r2, #4
 8004b2e:	6018      	str	r0, [r3, #0]
 8004b30:	6813      	ldr	r3, [r2, #0]
 8004b32:	6019      	str	r1, [r3, #0]
 8004b34:	e007      	b.n	8004b46 <_printf_i+0x1ba>
 8004b36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b3a:	f102 0004 	add.w	r0, r2, #4
 8004b3e:	6018      	str	r0, [r3, #0]
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	d0f6      	beq.n	8004b32 <_printf_i+0x1a6>
 8004b44:	8019      	strh	r1, [r3, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	4675      	mov	r5, lr
 8004b4c:	e7b1      	b.n	8004ab2 <_printf_i+0x126>
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	1d11      	adds	r1, r2, #4
 8004b52:	6019      	str	r1, [r3, #0]
 8004b54:	6815      	ldr	r5, [r2, #0]
 8004b56:	6862      	ldr	r2, [r4, #4]
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f7fb fb70 	bl	8000240 <memchr>
 8004b60:	b108      	cbz	r0, 8004b66 <_printf_i+0x1da>
 8004b62:	1b40      	subs	r0, r0, r5
 8004b64:	6060      	str	r0, [r4, #4]
 8004b66:	6863      	ldr	r3, [r4, #4]
 8004b68:	6123      	str	r3, [r4, #16]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b70:	e79f      	b.n	8004ab2 <_printf_i+0x126>
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	462a      	mov	r2, r5
 8004b76:	4639      	mov	r1, r7
 8004b78:	4630      	mov	r0, r6
 8004b7a:	47c0      	blx	r8
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d0a2      	beq.n	8004ac6 <_printf_i+0x13a>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	079b      	lsls	r3, r3, #30
 8004b84:	d507      	bpl.n	8004b96 <_printf_i+0x20a>
 8004b86:	2500      	movs	r5, #0
 8004b88:	f104 0919 	add.w	r9, r4, #25
 8004b8c:	68e3      	ldr	r3, [r4, #12]
 8004b8e:	9a03      	ldr	r2, [sp, #12]
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	429d      	cmp	r5, r3
 8004b94:	db05      	blt.n	8004ba2 <_printf_i+0x216>
 8004b96:	68e0      	ldr	r0, [r4, #12]
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	4298      	cmp	r0, r3
 8004b9c:	bfb8      	it	lt
 8004b9e:	4618      	movlt	r0, r3
 8004ba0:	e793      	b.n	8004aca <_printf_i+0x13e>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	464a      	mov	r2, r9
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	4630      	mov	r0, r6
 8004baa:	47c0      	blx	r8
 8004bac:	3001      	adds	r0, #1
 8004bae:	d08a      	beq.n	8004ac6 <_printf_i+0x13a>
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7eb      	b.n	8004b8c <_printf_i+0x200>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1a7      	bne.n	8004b08 <_printf_i+0x17c>
 8004bb8:	780b      	ldrb	r3, [r1, #0]
 8004bba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc2:	e765      	b.n	8004a90 <_printf_i+0x104>
 8004bc4:	08004f8a 	.word	0x08004f8a
 8004bc8:	08004f79 	.word	0x08004f79

08004bcc <__sread>:
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	460c      	mov	r4, r1
 8004bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd4:	f000 f894 	bl	8004d00 <_read_r>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	bfab      	itete	ge
 8004bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bde:	89a3      	ldrhlt	r3, [r4, #12]
 8004be0:	181b      	addge	r3, r3, r0
 8004be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004be6:	bfac      	ite	ge
 8004be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bea:	81a3      	strhlt	r3, [r4, #12]
 8004bec:	bd10      	pop	{r4, pc}

08004bee <__swrite>:
 8004bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf2:	461f      	mov	r7, r3
 8004bf4:	898b      	ldrh	r3, [r1, #12]
 8004bf6:	05db      	lsls	r3, r3, #23
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	d505      	bpl.n	8004c0c <__swrite+0x1e>
 8004c00:	2302      	movs	r3, #2
 8004c02:	2200      	movs	r2, #0
 8004c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c08:	f000 f868 	bl	8004cdc <_lseek_r>
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	4632      	mov	r2, r6
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c22:	f000 b817 	b.w	8004c54 <_write_r>

08004c26 <__sseek>:
 8004c26:	b510      	push	{r4, lr}
 8004c28:	460c      	mov	r4, r1
 8004c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2e:	f000 f855 	bl	8004cdc <_lseek_r>
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	bf15      	itete	ne
 8004c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c42:	81a3      	strheq	r3, [r4, #12]
 8004c44:	bf18      	it	ne
 8004c46:	81a3      	strhne	r3, [r4, #12]
 8004c48:	bd10      	pop	{r4, pc}

08004c4a <__sclose>:
 8004c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4e:	f000 b813 	b.w	8004c78 <_close_r>
	...

08004c54 <_write_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4c07      	ldr	r4, [pc, #28]	; (8004c74 <_write_r+0x20>)
 8004c58:	4605      	mov	r5, r0
 8004c5a:	4608      	mov	r0, r1
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	6022      	str	r2, [r4, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f7ff f842 	bl	8003cec <_write>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_write_r+0x1e>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_write_r+0x1e>
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	2005decc 	.word	0x2005decc

08004c78 <_close_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4c06      	ldr	r4, [pc, #24]	; (8004c94 <_close_r+0x1c>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	f7ff f85a 	bl	8003d3c <_close>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_close_r+0x1a>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_close_r+0x1a>
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	2005decc 	.word	0x2005decc

08004c98 <_fstat_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4c07      	ldr	r4, [pc, #28]	; (8004cb8 <_fstat_r+0x20>)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	f7ff f84c 	bl	8003d42 <_fstat>
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	d102      	bne.n	8004cb4 <_fstat_r+0x1c>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	b103      	cbz	r3, 8004cb4 <_fstat_r+0x1c>
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2005decc 	.word	0x2005decc

08004cbc <_isatty_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4c06      	ldr	r4, [pc, #24]	; (8004cd8 <_isatty_r+0x1c>)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	f7ff f840 	bl	8003d4c <_isatty>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_isatty_r+0x1a>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_isatty_r+0x1a>
 8004cd4:	602b      	str	r3, [r5, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	2005decc 	.word	0x2005decc

08004cdc <_lseek_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4c07      	ldr	r4, [pc, #28]	; (8004cfc <_lseek_r+0x20>)
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	4608      	mov	r0, r1
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	6022      	str	r2, [r4, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f7ff f830 	bl	8003d50 <_lseek>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d102      	bne.n	8004cfa <_lseek_r+0x1e>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	b103      	cbz	r3, 8004cfa <_lseek_r+0x1e>
 8004cf8:	602b      	str	r3, [r5, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	2005decc 	.word	0x2005decc

08004d00 <_read_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4c07      	ldr	r4, [pc, #28]	; (8004d20 <_read_r+0x20>)
 8004d04:	4605      	mov	r5, r0
 8004d06:	4608      	mov	r0, r1
 8004d08:	4611      	mov	r1, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	6022      	str	r2, [r4, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fe ffde 	bl	8003cd0 <_read>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_read_r+0x1e>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_read_r+0x1e>
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	2005decc 	.word	0x2005decc

08004d24 <_init>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr

08004d30 <_fini>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr
