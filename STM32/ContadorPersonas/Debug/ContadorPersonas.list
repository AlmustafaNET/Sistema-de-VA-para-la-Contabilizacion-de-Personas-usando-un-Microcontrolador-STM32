
ContadorPersonas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c488  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f38  0800c688  0800c688  0001c688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e5c0  0800e5c0  0001e5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e5c8  0800e5c8  0001e5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e5cc  0800e5cc  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  0800e5d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003eed4  20000084  0800e654  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2003ef58  0800e654  0002ef58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004327b  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007fb2  00000000  00000000  0006332d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000182ef  00000000  00000000  0006b2df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000018d0  00000000  00000000  000835d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002528  00000000  00000000  00084ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000121dc  00000000  00000000  000873c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009566  00000000  00000000  000995a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000a2b0a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000055a4  00000000  00000000  000a2b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c670 	.word	0x0800c670

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	0800c670 	.word	0x0800c670

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b97a 	b.w	800061c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	468c      	mov	ip, r1
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	9e08      	ldr	r6, [sp, #32]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d151      	bne.n	80003f4 <__udivmoddi4+0xb4>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d96d      	bls.n	8000432 <__udivmoddi4+0xf2>
 8000356:	fab2 fe82 	clz	lr, r2
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d00b      	beq.n	8000378 <__udivmoddi4+0x38>
 8000360:	f1ce 0c20 	rsb	ip, lr, #32
 8000364:	fa01 f50e 	lsl.w	r5, r1, lr
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	ea4c 0c05 	orr.w	ip, ip, r5
 8000374:	fa00 f40e 	lsl.w	r4, r0, lr
 8000378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	fbbc f8fa 	udiv	r8, ip, sl
 8000382:	fa1f f987 	uxth.w	r9, r7
 8000386:	fb0a cc18 	mls	ip, sl, r8, ip
 800038a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800038e:	fb08 f309 	mul.w	r3, r8, r9
 8000392:	42ab      	cmp	r3, r5
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x6c>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800039c:	f080 8123 	bcs.w	80005e6 <__udivmoddi4+0x2a6>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f240 8120 	bls.w	80005e6 <__udivmoddi4+0x2a6>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb00 f909 	mul.w	r9, r0, r9
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x98>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ca:	f080 810a 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8107 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 0409 	sub.w	r4, r4, r9
 80003dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e0:	2100      	movs	r1, #0
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d061      	beq.n	80004aa <__udivmoddi4+0x16a>
 80003e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ea:	2300      	movs	r3, #0
 80003ec:	6034      	str	r4, [r6, #0]
 80003ee:	6073      	str	r3, [r6, #4]
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0xc8>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d054      	beq.n	80004a6 <__udivmoddi4+0x166>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	f040 808e 	bne.w	800052e <__udivmoddi4+0x1ee>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xdc>
 8000416:	4282      	cmp	r2, r0
 8000418:	f200 80fa 	bhi.w	8000610 <__udivmoddi4+0x2d0>
 800041c:	1a84      	subs	r4, r0, r2
 800041e:	eb65 0503 	sbc.w	r5, r5, r3
 8000422:	2001      	movs	r0, #1
 8000424:	46ac      	mov	ip, r5
 8000426:	2e00      	cmp	r6, #0
 8000428:	d03f      	beq.n	80004aa <__udivmoddi4+0x16a>
 800042a:	e886 1010 	stmia.w	r6, {r4, ip}
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	b912      	cbnz	r2, 800043a <__udivmoddi4+0xfa>
 8000434:	2701      	movs	r7, #1
 8000436:	fbb7 f7f2 	udiv	r7, r7, r2
 800043a:	fab7 fe87 	clz	lr, r7
 800043e:	f1be 0f00 	cmp.w	lr, #0
 8000442:	d134      	bne.n	80004ae <__udivmoddi4+0x16e>
 8000444:	1beb      	subs	r3, r5, r7
 8000446:	0c3a      	lsrs	r2, r7, #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	2101      	movs	r1, #1
 800044e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000452:	0c25      	lsrs	r5, r4, #16
 8000454:	fb02 3318 	mls	r3, r2, r8, r3
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	fb0c f308 	mul.w	r3, ip, r8
 8000460:	42ab      	cmp	r3, r5
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x134>
 8000464:	19ed      	adds	r5, r5, r7
 8000466:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x132>
 800046c:	42ab      	cmp	r3, r5
 800046e:	f200 80d1 	bhi.w	8000614 <__udivmoddi4+0x2d4>
 8000472:	4680      	mov	r8, r0
 8000474:	1aed      	subs	r5, r5, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb5 f0f2 	udiv	r0, r5, r2
 800047c:	fb02 5510 	mls	r5, r2, r0, r5
 8000480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000484:	fb0c fc00 	mul.w	ip, ip, r0
 8000488:	45a4      	cmp	ip, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x15c>
 800048c:	19e4      	adds	r4, r4, r7
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x15a>
 8000494:	45a4      	cmp	ip, r4
 8000496:	f200 80b8 	bhi.w	800060a <__udivmoddi4+0x2ca>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a4:	e79d      	b.n	80003e2 <__udivmoddi4+0xa2>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1ce 0420 	rsb	r4, lr, #32
 80004b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ba:	fa20 f804 	lsr.w	r8, r0, r4
 80004be:	0c3a      	lsrs	r2, r7, #16
 80004c0:	fa25 f404 	lsr.w	r4, r5, r4
 80004c4:	ea48 0803 	orr.w	r8, r8, r3
 80004c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004d0:	fb02 4411 	mls	r4, r2, r1, r4
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004dc:	fb01 f30c 	mul.w	r3, r1, ip
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x1bc>
 80004e8:	19ed      	adds	r5, r5, r7
 80004ea:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004ee:	f080 808a 	bcs.w	8000606 <__udivmoddi4+0x2c6>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	f240 8087 	bls.w	8000606 <__udivmoddi4+0x2c6>
 80004f8:	3902      	subs	r1, #2
 80004fa:	443d      	add	r5, r7
 80004fc:	1aeb      	subs	r3, r5, r3
 80004fe:	fa1f f588 	uxth.w	r5, r8
 8000502:	fbb3 f0f2 	udiv	r0, r3, r2
 8000506:	fb02 3310 	mls	r3, r2, r0, r3
 800050a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800050e:	fb00 f30c 	mul.w	r3, r0, ip
 8000512:	42ab      	cmp	r3, r5
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x1e6>
 8000516:	19ed      	adds	r5, r5, r7
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051c:	d26f      	bcs.n	80005fe <__udivmoddi4+0x2be>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d96d      	bls.n	80005fe <__udivmoddi4+0x2be>
 8000522:	3802      	subs	r0, #2
 8000524:	443d      	add	r5, r7
 8000526:	1aeb      	subs	r3, r5, r3
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	e78f      	b.n	800044e <__udivmoddi4+0x10e>
 800052e:	f1c1 0720 	rsb	r7, r1, #32
 8000532:	fa22 f807 	lsr.w	r8, r2, r7
 8000536:	408b      	lsls	r3, r1
 8000538:	fa05 f401 	lsl.w	r4, r5, r1
 800053c:	ea48 0303 	orr.w	r3, r8, r3
 8000540:	fa20 fe07 	lsr.w	lr, r0, r7
 8000544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000548:	40fd      	lsrs	r5, r7
 800054a:	ea4e 0e04 	orr.w	lr, lr, r4
 800054e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000552:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000556:	fb0c 5519 	mls	r5, ip, r9, r5
 800055a:	fa1f f883 	uxth.w	r8, r3
 800055e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000562:	fb09 f408 	mul.w	r4, r9, r8
 8000566:	42ac      	cmp	r4, r5
 8000568:	fa02 f201 	lsl.w	r2, r2, r1
 800056c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x244>
 8000572:	18ed      	adds	r5, r5, r3
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000578:	d243      	bcs.n	8000602 <__udivmoddi4+0x2c2>
 800057a:	42ac      	cmp	r4, r5
 800057c:	d941      	bls.n	8000602 <__udivmoddi4+0x2c2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	441d      	add	r5, r3
 8000584:	1b2d      	subs	r5, r5, r4
 8000586:	fa1f fe8e 	uxth.w	lr, lr
 800058a:	fbb5 f0fc 	udiv	r0, r5, ip
 800058e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45a0      	cmp	r8, r4
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x26e>
 800059e:	18e4      	adds	r4, r4, r3
 80005a0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80005a4:	d229      	bcs.n	80005fa <__udivmoddi4+0x2ba>
 80005a6:	45a0      	cmp	r8, r4
 80005a8:	d927      	bls.n	80005fa <__udivmoddi4+0x2ba>
 80005aa:	3802      	subs	r0, #2
 80005ac:	441c      	add	r4, r3
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba4 0408 	sub.w	r4, r4, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	464d      	mov	r5, r9
 80005c0:	d315      	bcc.n	80005ee <__udivmoddi4+0x2ae>
 80005c2:	d012      	beq.n	80005ea <__udivmoddi4+0x2aa>
 80005c4:	b156      	cbz	r6, 80005dc <__udivmoddi4+0x29c>
 80005c6:	ebba 030e 	subs.w	r3, sl, lr
 80005ca:	eb64 0405 	sbc.w	r4, r4, r5
 80005ce:	fa04 f707 	lsl.w	r7, r4, r7
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	431f      	orrs	r7, r3
 80005d6:	40cc      	lsrs	r4, r1
 80005d8:	6037      	str	r7, [r6, #0]
 80005da:	6074      	str	r4, [r6, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4618      	mov	r0, r3
 80005e4:	e6f8      	b.n	80003d8 <__udivmoddi4+0x98>
 80005e6:	4690      	mov	r8, r2
 80005e8:	e6e0      	b.n	80003ac <__udivmoddi4+0x6c>
 80005ea:	45c2      	cmp	sl, r8
 80005ec:	d2ea      	bcs.n	80005c4 <__udivmoddi4+0x284>
 80005ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f2:	eb69 0503 	sbc.w	r5, r9, r3
 80005f6:	3801      	subs	r0, #1
 80005f8:	e7e4      	b.n	80005c4 <__udivmoddi4+0x284>
 80005fa:	4628      	mov	r0, r5
 80005fc:	e7d7      	b.n	80005ae <__udivmoddi4+0x26e>
 80005fe:	4640      	mov	r0, r8
 8000600:	e791      	b.n	8000526 <__udivmoddi4+0x1e6>
 8000602:	4681      	mov	r9, r0
 8000604:	e7be      	b.n	8000584 <__udivmoddi4+0x244>
 8000606:	4601      	mov	r1, r0
 8000608:	e778      	b.n	80004fc <__udivmoddi4+0x1bc>
 800060a:	3802      	subs	r0, #2
 800060c:	443c      	add	r4, r7
 800060e:	e745      	b.n	800049c <__udivmoddi4+0x15c>
 8000610:	4608      	mov	r0, r1
 8000612:	e708      	b.n	8000426 <__udivmoddi4+0xe6>
 8000614:	f1a8 0802 	sub.w	r8, r8, #2
 8000618:	443d      	add	r5, r7
 800061a:	e72b      	b.n	8000474 <__udivmoddi4+0x134>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_InitTick+0x3c>)
{
 8000624:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <HAL_InitTick+0x40>)
 8000628:	7818      	ldrb	r0, [r3, #0]
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000632:	6810      	ldr	r0, [r2, #0]
 8000634:	fbb0 f0f3 	udiv	r0, r0, r3
 8000638:	f000 f89e 	bl	8000778 <HAL_SYSTICK_Config>
 800063c:	4604      	mov	r4, r0
 800063e:	b958      	cbnz	r0, 8000658 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000640:	2d0f      	cmp	r5, #15
 8000642:	d809      	bhi.n	8000658 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000644:	4602      	mov	r2, r0
 8000646:	4629      	mov	r1, r5
 8000648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800064c:	f000 f84e 	bl	80006ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_InitTick+0x44>)
 8000652:	4620      	mov	r0, r4
 8000654:	601d      	str	r5, [r3, #0]
 8000656:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000658:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800065a:	bd38      	pop	{r3, r4, r5, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	2000001c 	.word	0x2000001c
 8000664:	20000004 	.word	0x20000004

08000668 <HAL_Init>:
{
 8000668:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066a:	2003      	movs	r0, #3
 800066c:	f000 f82c 	bl	80006c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ffd5 	bl	8000620 <HAL_InitTick>
  HAL_MspInit();
 8000676:	f00a fc19 	bl	800aeac <HAL_MspInit>
}
 800067a:	2000      	movs	r0, #0
 800067c:	bd08      	pop	{r3, pc}
	...

08000680 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <HAL_IncTick+0x10>)
 8000682:	4b04      	ldr	r3, [pc, #16]	; (8000694 <HAL_IncTick+0x14>)
 8000684:	6811      	ldr	r1, [r2, #0]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	440b      	add	r3, r1
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2000023c 	.word	0x2000023c
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000698:	4b01      	ldr	r3, [pc, #4]	; (80006a0 <HAL_GetTick+0x8>)
 800069a:	6818      	ldr	r0, [r3, #0]
}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	2000023c 	.word	0x2000023c

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b538      	push	{r3, r4, r5, lr}
 80006a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006a8:	f7ff fff6 	bl	8000698 <HAL_GetTick>
 80006ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006b0:	bf1e      	ittt	ne
 80006b2:	4b04      	ldrne	r3, [pc, #16]	; (80006c4 <HAL_Delay+0x20>)
 80006b4:	781b      	ldrbne	r3, [r3, #0]
 80006b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006b8:	f7ff ffee 	bl	8000698 <HAL_GetTick>
 80006bc:	1b40      	subs	r0, r0, r5
 80006be:	4284      	cmp	r4, r0
 80006c0:	d8fa      	bhi.n	80006b8 <HAL_Delay+0x14>
  {
  }
}
 80006c2:	bd38      	pop	{r3, r4, r5, pc}
 80006c4:	20000000 	.word	0x20000000

080006c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ca:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006d6:	041b      	lsls	r3, r3, #16
 80006d8:	0c1b      	lsrs	r3, r3, #16
 80006da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006e4:	60d3      	str	r3, [r2, #12]
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	68dc      	ldr	r4, [r3, #12]
 80006f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	bf28      	it	cs
 8000700:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000708:	bf8c      	ite	hi
 800070a:	3c03      	subhi	r4, #3
 800070c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000712:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000718:	ea01 0103 	and.w	r1, r1, r3
 800071c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	fa05 f404 	lsl.w	r4, r5, r4
 8000724:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000728:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	ea42 0201 	orr.w	r2, r2, r1
 8000730:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000734:	db07      	blt.n	8000746 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000740:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000744:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	f000 000f 	and.w	r0, r0, #15
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_NVIC_SetPriority+0x6c>)
 800074e:	541a      	strb	r2, [r3, r0]
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	e000ed14 	.word	0xe000ed14

0800075c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800075c:	2800      	cmp	r0, #0
 800075e:	db08      	blt.n	8000772 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000760:	0942      	lsrs	r2, r0, #5
 8000762:	2301      	movs	r3, #1
 8000764:	f000 001f 	and.w	r0, r0, #31
 8000768:	fa03 f000 	lsl.w	r0, r3, r0
 800076c:	4b01      	ldr	r3, [pc, #4]	; (8000774 <HAL_NVIC_EnableIRQ+0x18>)
 800076e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100

08000778 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	3801      	subs	r0, #1
 800077a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800077e:	d20a      	bcs.n	8000796 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	21f0      	movs	r1, #240	; 0xf0
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80007a4:	b510      	push	{r4, lr}
  uint32_t tmp = 0;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80007a6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if(hdcmi->XferCount != 0)
 80007a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80007ac:	b1c3      	cbz	r3, 80007e0 <DCMI_DMAXferCplt+0x3c>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80007ae:	6803      	ldr	r3, [r0, #0]
 80007b0:	6819      	ldr	r1, [r3, #0]
    if(((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 80007b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007b4:	f012 0201 	ands.w	r2, r2, #1
 80007b8:	d10b      	bne.n	80007d2 <DCMI_DMAXferCplt+0x2e>
 80007ba:	0309      	lsls	r1, r1, #12
 80007bc:	d509      	bpl.n	80007d2 <DCMI_DMAXferCplt+0x2e>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80007be:	68db      	ldr	r3, [r3, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY0);
 80007c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY1);
 80007c2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80007c6:	f000 fd0b 	bl	80011e0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80007ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007cc:	3b01      	subs	r3, #1
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
  {
    tmp = hdcmi->pBuffPtr;
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4*hdcmi->XferSize));
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80007ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80007d0:	e00c      	b.n	80007ec <DCMI_DMAXferCplt+0x48>
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	0312      	lsls	r2, r2, #12
 80007d6:	d409      	bmi.n	80007ec <DCMI_DMAXferCplt+0x48>
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80007d8:	691b      	ldr	r3, [r3, #16]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8*hdcmi->XferSize)), MEMORY1);
 80007da:	2201      	movs	r2, #1
 80007dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80007de:	e7f0      	b.n	80007c2 <DCMI_DMAXferCplt+0x1e>
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 80007e0:	6803      	ldr	r3, [r0, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	0311      	lsls	r1, r2, #12
 80007e6:	d511      	bpl.n	800080c <DCMI_DMAXferCplt+0x68>
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80007e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007ea:	60da      	str	r2, [r3, #12]
  }

  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80007ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d10a      	bne.n	800080a <DCMI_DMAXferCplt+0x66>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	68da      	ldr	r2, [r3, #12]
 80007f8:	f042 0201 	orr.w	r2, r2, #1
 80007fc:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	079b      	lsls	r3, r3, #30
 8000802:	d502      	bpl.n	800080a <DCMI_DMAXferCplt+0x66>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8000804:	2301      	movs	r3, #1
 8000806:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800080a:	bd10      	pop	{r4, pc}
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	0312      	lsls	r2, r2, #12
 8000810:	d4ec      	bmi.n	80007ec <DCMI_DMAXferCplt+0x48>
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4*hdcmi->XferSize));
 8000812:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000814:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000816:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800081a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800081c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800081e:	e7d6      	b.n	80007ce <DCMI_DMAXferCplt+0x2a>

08000820 <HAL_DCMI_Init>:
{     
 8000820:	b538      	push	{r3, r4, r5, lr}
  if(hdcmi == NULL)
 8000822:	4604      	mov	r4, r0
 8000824:	2800      	cmp	r0, #0
 8000826:	d03d      	beq.n	80008a4 <HAL_DCMI_Init+0x84>
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000828:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800082c:	b90b      	cbnz	r3, 8000832 <HAL_DCMI_Init+0x12>
    HAL_DCMI_MspInit(hdcmi);
 800082e:	f00a fb55 	bl	800aedc <HAL_DCMI_MspInit>
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000832:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000834:	2302      	movs	r3, #2
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000836:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000838:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_DCMI_Init+0x88>)
 800083e:	6811      	ldr	r1, [r2, #0]
 8000840:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000842:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000844:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000846:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000848:	6963      	ldr	r3, [r4, #20]
 800084a:	6810      	ldr	r0, [r2, #0]
 800084c:	ea43 0301 	orr.w	r3, r3, r1
 8000850:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000854:	6925      	ldr	r5, [r4, #16]
 8000856:	ea43 0305 	orr.w	r3, r3, r5
 800085a:	68a5      	ldr	r5, [r4, #8]
 800085c:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000860:	69a5      	ldr	r5, [r4, #24]
 8000862:	ea43 0305 	orr.w	r3, r3, r5
 8000866:	6a25      	ldr	r5, [r4, #32]
 8000868:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800086c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800086e:	ea43 0305 	orr.w	r3, r3, r5
 8000872:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000874:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000878:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800087a:	ea43 0305 	orr.w	r3, r3, r5
 800087e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000880:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000884:	ea43 0300 	orr.w	r3, r3, r0
 8000888:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800088a:	d101      	bne.n	8000890 <HAL_DCMI_Init+0x70>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800088c:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800088e:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000890:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000892:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000894:	f043 031e 	orr.w	r3, r3, #30
 8000898:	60d3      	str	r3, [r2, #12]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800089a:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800089c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800089e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80008a2:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 80008a4:	2001      	movs	r0, #1
}
 80008a6:	bd38      	pop	{r3, r4, r5, pc}
 80008a8:	ffe0f007 	.word	0xffe0f007

080008ac <HAL_DCMI_Start_DMA>:
{  
 80008ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80008ae:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 80008b0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
{  
 80008b4:	4616      	mov	r6, r2
  __HAL_LOCK(hdcmi);
 80008b6:	2801      	cmp	r0, #1
 80008b8:	f04f 0002 	mov.w	r0, #2
 80008bc:	d02d      	beq.n	800091a <HAL_DCMI_Start_DMA+0x6e>
  __HAL_DCMI_ENABLE(hdcmi);
 80008be:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hdcmi);
 80008c0:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80008c4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  if(Length <= 0xFFFF)
 80008c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  __HAL_DCMI_ENABLE(hdcmi);
 80008cc:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hdcmi);
 80008ce:	f884 e034 	strb.w	lr, [r4, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 80008d2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008d6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8000964 <HAL_DCMI_Start_DMA+0xb8>
  __HAL_DCMI_ENABLE(hdcmi);
 80008da:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80008dc:	6828      	ldr	r0, [r5, #0]
 80008de:	f020 0002 	bic.w	r0, r0, #2
 80008e2:	6028      	str	r0, [r5, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80008e4:	6828      	ldr	r0, [r5, #0]
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80008ec:	6029      	str	r1, [r5, #0]
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80008ee:	491c      	ldr	r1, [pc, #112]	; (8000960 <HAL_DCMI_Start_DMA+0xb4>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80008f0:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80008f4:	64c1      	str	r1, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80008f6:	f04f 0100 	mov.w	r1, #0
 80008fa:	6501      	str	r1, [r0, #80]	; 0x50
  hdcmi->XferCount = 0;
 80008fc:	63a1      	str	r1, [r4, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80008fe:	6421      	str	r1, [r4, #64]	; 0x40
  if(Length <= 0xFFFF)
 8000900:	d20d      	bcs.n	800091e <HAL_DCMI_Start_DMA+0x72>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8000902:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8000906:	f000 f975 	bl	8000bf4 <HAL_DMA_Start_IT>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800090a:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdcmi);
 800090c:	2000      	movs	r0, #0
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800090e:	6813      	ldr	r3, [r2, #0]
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 8000916:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 800091a:	b003      	add	sp, #12
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt; 
 800091e:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
    hdcmi->XferCount = 1;
 8000922:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
    hdcmi->pBuffPtr = pData;
 8000926:	6462      	str	r2, [r4, #68]	; 0x44
    hdcmi->XferSize = Length;
 8000928:	63e3      	str	r3, [r4, #60]	; 0x3c
    while(hdcmi->XferSize > 0xFFFF)
 800092a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800092c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000930:	d20f      	bcs.n	8000952 <HAL_DCMI_Start_DMA+0xa6>
    hdcmi->XferCount = (hdcmi->XferCount - 2);
 8000932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8000934:	f105 0128 	add.w	r1, r5, #40	; 0x28
    hdcmi->XferCount = (hdcmi->XferCount - 2);
 8000938:	3b02      	subs	r3, #2
 800093a:	63a3      	str	r3, [r4, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800093c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800093e:	6423      	str	r3, [r4, #64]	; 0x40
    SecondMemAddress = (uint32_t)(pData + (4*hdcmi->XferSize));
 8000940:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8000942:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000944:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8000948:	9200      	str	r2, [sp, #0]
 800094a:	4632      	mov	r2, r6
 800094c:	f000 fa5c 	bl	8000e08 <HAL_DMAEx_MultiBufferStart_IT>
 8000950:	e7db      	b.n	800090a <HAL_DCMI_Start_DMA+0x5e>
      hdcmi->XferSize = (hdcmi->XferSize/2);
 8000952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount*2;
 8000958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	63a3      	str	r3, [r4, #56]	; 0x38
 800095e:	e7e4      	b.n	800092a <HAL_DCMI_Start_DMA+0x7e>
 8000960:	08000a0b 	.word	0x08000a0b
 8000964:	080007a5 	.word	0x080007a5

08000968 <HAL_DCMI_Suspend>:
  __HAL_LOCK(hdcmi);
 8000968:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800096c:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800096e:	2a01      	cmp	r2, #1
 8000970:	d02c      	beq.n	80009cc <HAL_DCMI_Suspend+0x64>
 8000972:	2101      	movs	r1, #1
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 8000974:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <HAL_DCMI_Suspend+0x68>)
  __HAL_LOCK(hdcmi);
 8000976:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 800097a:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 800097e:	6812      	ldr	r2, [r2, #0]
  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 8000980:	2902      	cmp	r1, #2
 8000982:	d004      	beq.n	800098e <HAL_DCMI_Suspend+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8000984:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return status;
 800098c:	4770      	bx	lr
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock /8/1000);
 800098e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000992:	fbb2 f1f1 	udiv	r1, r2, r1
 8000996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099a:	434a      	muls	r2, r1
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800099c:	2105      	movs	r1, #5
 800099e:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80009a2:	6801      	ldr	r1, [r0, #0]
 80009a4:	6808      	ldr	r0, [r1, #0]
 80009a6:	f020 0001 	bic.w	r0, r0, #1
 80009aa:	6008      	str	r0, [r1, #0]
      if (count-- == 0)
 80009ac:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80009b0:	d208      	bcs.n	80009c4 <HAL_DCMI_Suspend+0x5c>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80009b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        status = HAL_TIMEOUT;
 80009b4:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80009b6:	f042 0220 	orr.w	r2, r2, #32
 80009ba:	64da      	str	r2, [r3, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 80009bc:	2201      	movs	r2, #1
 80009be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 80009c2:	e7e0      	b.n	8000986 <HAL_DCMI_Suspend+0x1e>
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 80009c4:	6808      	ldr	r0, [r1, #0]
 80009c6:	07c0      	lsls	r0, r0, #31
 80009c8:	d4f0      	bmi.n	80009ac <HAL_DCMI_Suspend+0x44>
 80009ca:	e7db      	b.n	8000984 <HAL_DCMI_Suspend+0x1c>
  __HAL_LOCK(hdcmi);
 80009cc:	2002      	movs	r0, #2
}
 80009ce:	4770      	bx	lr
 80009d0:	2000001c 	.word	0x2000001c

080009d4 <HAL_DCMI_Resume>:
  __HAL_LOCK(hdcmi);
 80009d4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d013      	beq.n	8000a04 <HAL_DCMI_Resume+0x30>
 80009dc:	2301      	movs	r3, #1
 80009de:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 80009e2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009e6:	2b05      	cmp	r3, #5
 80009e8:	d107      	bne.n	80009fa <HAL_DCMI_Resume+0x26>
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 80009ea:	2302      	movs	r3, #2
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80009ec:	6802      	ldr	r2, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 80009ee:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hdcmi);
 80009fa:	2300      	movs	r3, #0
 80009fc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  return HAL_OK;
 8000a00:	4618      	mov	r0, r3
 8000a02:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 8000a04:	2002      	movs	r0, #2
}
 8000a06:	4770      	bx	lr

08000a08 <HAL_DCMI_ErrorCallback>:
 8000a08:	4770      	bx	lr

08000a0a <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8000a0c:	b508      	push	{r3, lr}
 
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8000a0e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d006      	beq.n	8000a24 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8000a16:	2301      	movs	r3, #1
 8000a18:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8000a1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a22:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
    HAL_DCMI_ErrorCallback(hdcmi);
 8000a24:	f7ff fff0 	bl	8000a08 <HAL_DCMI_ErrorCallback>
 8000a28:	bd08      	pop	{r3, pc}

08000a2a <HAL_DCMI_LineEventCallback>:
 8000a2a:	4770      	bx	lr

08000a2c <HAL_DCMI_VsyncEventCallback>:
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_DCMI_IRQHandler>:
{  
 8000a30:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8000a32:	6803      	ldr	r3, [r0, #0]
{  
 8000a34:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8000a36:	691d      	ldr	r5, [r3, #16]
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8000a38:	0769      	lsls	r1, r5, #29
 8000a3a:	d50c      	bpl.n	8000a56 <HAL_DCMI_IRQHandler+0x26>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8000a40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	64c3      	str	r3, [r0, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000a48:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_DCMI_IRQHandler+0x90>)
 8000a4e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8000a50:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle); 
 8000a52:	f000 f90c 	bl	8000c6e <HAL_DMA_Abort_IT>
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8000a56:	07aa      	lsls	r2, r5, #30
 8000a58:	d50e      	bpl.n	8000a78 <HAL_DCMI_IRQHandler+0x48>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a5e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000a60:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000a62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_DCMI_IRQHandler+0x90>)
 8000a72:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000a74:	f000 f8fb 	bl	8000c6e <HAL_DMA_Abort_IT>
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8000a78:	06eb      	lsls	r3, r5, #27
 8000a7a:	d505      	bpl.n	8000a88 <HAL_DCMI_IRQHandler+0x58>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 8000a80:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000a82:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 8000a84:	f7ff ffd1 	bl	8000a2a <HAL_DCMI_LineEventCallback>
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8000a88:	0728      	lsls	r0, r5, #28
 8000a8a:	d505      	bpl.n	8000a98 <HAL_DCMI_IRQHandler+0x68>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000a90:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000a92:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000a94:	f7ff ffca 	bl	8000a2c <HAL_DCMI_VsyncEventCallback>
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)   
 8000a98:	07e9      	lsls	r1, r5, #31
 8000a9a:	d510      	bpl.n	8000abe <HAL_DCMI_IRQHandler+0x8e>
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	0792      	lsls	r2, r2, #30
 8000aa2:	d503      	bpl.n	8000aac <HAL_DCMI_IRQHandler+0x7c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	f022 021e 	bic.w	r2, r2, #30
 8000aaa:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000aac:	68da      	ldr	r2, [r3, #12]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000aae:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000ab0:	f022 0201 	bic.w	r2, r2, #1
 8000ab4:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	615a      	str	r2, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000aba:	f009 fd9d 	bl	800a5f8 <HAL_DCMI_FrameEventCallback>
 8000abe:	bd38      	pop	{r3, r4, r5, pc}
 8000ac0:	08000a0b 	.word	0x08000a0b

08000ac4 <HAL_DCMI_GetState>:
  return hdcmi->State;
 8000ac4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8000ac8:	4770      	bx	lr
	...

08000acc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000acc:	6803      	ldr	r3, [r0, #0]
 8000ace:	2118      	movs	r1, #24
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ad6:	3a10      	subs	r2, #16
 8000ad8:	f023 0303 	bic.w	r3, r3, #3
 8000adc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ae0:	4904      	ldr	r1, [pc, #16]	; (8000af4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000ae2:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ae4:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ae6:	bf88      	it	hi
 8000ae8:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000aea:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000aec:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000aee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	0800c688 	.word	0x0800c688

08000af8 <HAL_DMA_Init>:
{
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff fdcc 	bl	8000698 <HAL_GetTick>
 8000b00:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d071      	beq.n	8000bea <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000b06:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8000b08:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000b0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000b14:	6813      	ldr	r3, [r2, #0]
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b1c:	6821      	ldr	r1, [r4, #0]
 8000b1e:	680b      	ldr	r3, [r1, #0]
 8000b20:	07d8      	lsls	r0, r3, #31
 8000b22:	d43c      	bmi.n	8000b9e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000b24:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b26:	4d32      	ldr	r5, [pc, #200]	; (8000bf0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b28:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b2a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b2c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2e:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b30:	4313      	orrs	r3, r2
 8000b32:	68e2      	ldr	r2, [r4, #12]
 8000b34:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b36:	6922      	ldr	r2, [r4, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	6962      	ldr	r2, [r4, #20]
 8000b3c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b3e:	69e2      	ldr	r2, [r4, #28]
 8000b40:	4303      	orrs	r3, r0
 8000b42:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b44:	6a22      	ldr	r2, [r4, #32]
 8000b46:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b4a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b4c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b50:	bf01      	itttt	eq
 8000b52:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000b54:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000b56:	4335      	orreq	r5, r6
 8000b58:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b5a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000b5c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b5e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b60:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000b64:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b68:	d10b      	bne.n	8000b82 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000b6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b6c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000b6e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000b70:	b13d      	cbz	r5, 8000b82 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000b72:	b9f8      	cbnz	r0, 8000bb4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000b74:	2a01      	cmp	r2, #1
 8000b76:	d02d      	beq.n	8000bd4 <HAL_DMA_Init+0xdc>
 8000b78:	d301      	bcc.n	8000b7e <HAL_DMA_Init+0x86>
 8000b7a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000b7c:	d101      	bne.n	8000b82 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b7e:	01ea      	lsls	r2, r5, #7
 8000b80:	d42b      	bmi.n	8000bda <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000b82:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b84:	4620      	mov	r0, r4
 8000b86:	f7ff ffa1 	bl	8000acc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b8c:	233f      	movs	r3, #63	; 0x3f
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b92:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000b94:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b96:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b9e:	f7ff fd7b 	bl	8000698 <HAL_GetTick>
 8000ba2:	1b40      	subs	r0, r0, r5
 8000ba4:	2805      	cmp	r0, #5
 8000ba6:	d9b9      	bls.n	8000b1c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ba8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000baa:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bac:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000bae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000bb4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000bb8:	d113      	bne.n	8000be2 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000bba:	2a03      	cmp	r2, #3
 8000bbc:	d8e1      	bhi.n	8000b82 <HAL_DMA_Init+0x8a>
 8000bbe:	a001      	add	r0, pc, #4	; (adr r0, 8000bc4 <HAL_DMA_Init+0xcc>)
 8000bc0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000bc4:	08000bdb 	.word	0x08000bdb
 8000bc8:	08000b7f 	.word	0x08000b7f
 8000bcc:	08000bdb 	.word	0x08000bdb
 8000bd0:	08000bd5 	.word	0x08000bd5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bd4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000bd8:	d1d3      	bne.n	8000b82 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bda:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000bdc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bde:	6563      	str	r3, [r4, #84]	; 0x54
 8000be0:	e7e5      	b.n	8000bae <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000be2:	2a02      	cmp	r2, #2
 8000be4:	d9f9      	bls.n	8000bda <HAL_DMA_Init+0xe2>
 8000be6:	2a03      	cmp	r2, #3
 8000be8:	e7c8      	b.n	8000b7c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000bea:	2001      	movs	r0, #1
 8000bec:	bd70      	pop	{r4, r5, r6, pc}
 8000bee:	bf00      	nop
 8000bf0:	e010803f 	.word	0xe010803f

08000bf4 <HAL_DMA_Start_IT>:
{
 8000bf4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000bf6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000bfa:	2c01      	cmp	r4, #1
 8000bfc:	d035      	beq.n	8000c6a <HAL_DMA_Start_IT+0x76>
 8000bfe:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c00:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000c02:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000c04:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c08:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000c0c:	2c01      	cmp	r4, #1
 8000c0e:	f04f 0402 	mov.w	r4, #2
 8000c12:	d128      	bne.n	8000c66 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c14:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c18:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c1a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c1c:	6825      	ldr	r5, [r4, #0]
 8000c1e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000c22:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000c24:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c26:	6883      	ldr	r3, [r0, #8]
 8000c28:	2b40      	cmp	r3, #64	; 0x40
 8000c2a:	d119      	bne.n	8000c60 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000c2c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000c2e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c30:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000c32:	233f      	movs	r3, #63	; 0x3f
 8000c34:	4093      	lsls	r3, r2
 8000c36:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	f043 0316 	orr.w	r3, r3, #22
 8000c3e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000c40:	6963      	ldr	r3, [r4, #20]
 8000c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c46:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c4a:	b11b      	cbz	r3, 8000c54 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c54:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c56:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6023      	str	r3, [r4, #0]
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000c60:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c62:	60e2      	str	r2, [r4, #12]
 8000c64:	e7e4      	b.n	8000c30 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000c66:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000c6a:	2002      	movs	r0, #2
}
 8000c6c:	bd70      	pop	{r4, r5, r6, pc}

08000c6e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c6e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d003      	beq.n	8000c7e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000c7e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c80:	2305      	movs	r3, #5
 8000c82:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000c86:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000c88:	6813      	ldr	r3, [r2, #0]
 8000c8a:	f023 0301 	bic.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000c94:	2300      	movs	r3, #0
{
 8000c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000c98:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c9a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000c9c:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <HAL_DMA_IRQHandler+0x170>)
{
 8000c9e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ca0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000ca2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ca4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000ca6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	4216      	tst	r6, r2
 8000cac:	d00c      	beq.n	8000cc8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000cae:	6801      	ldr	r1, [r0, #0]
 8000cb0:	6808      	ldr	r0, [r1, #0]
 8000cb2:	0740      	lsls	r0, r0, #29
 8000cb4:	d508      	bpl.n	8000cc8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000cb6:	6808      	ldr	r0, [r1, #0]
 8000cb8:	f020 0004 	bic.w	r0, r0, #4
 8000cbc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000cbe:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000cc0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cc2:	f042 0201 	orr.w	r2, r2, #1
 8000cc6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	4216      	tst	r6, r2
 8000cce:	d008      	beq.n	8000ce2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000cd0:	6821      	ldr	r1, [r4, #0]
 8000cd2:	6949      	ldr	r1, [r1, #20]
 8000cd4:	0609      	lsls	r1, r1, #24
 8000cd6:	d504      	bpl.n	8000ce2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000cd8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000cda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cdc:	f042 0202 	orr.w	r2, r2, #2
 8000ce0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	4216      	tst	r6, r2
 8000ce8:	d008      	beq.n	8000cfc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000cea:	6821      	ldr	r1, [r4, #0]
 8000cec:	6809      	ldr	r1, [r1, #0]
 8000cee:	0788      	lsls	r0, r1, #30
 8000cf0:	d504      	bpl.n	8000cfc <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000cf2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000cf4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cf6:	f042 0204 	orr.w	r2, r2, #4
 8000cfa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000cfc:	2210      	movs	r2, #16
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	4216      	tst	r6, r2
 8000d02:	d010      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	6819      	ldr	r1, [r3, #0]
 8000d08:	0709      	lsls	r1, r1, #28
 8000d0a:	d50c      	bpl.n	8000d26 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d0c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	0350      	lsls	r0, r2, #13
 8000d12:	d535      	bpl.n	8000d80 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	0319      	lsls	r1, r3, #12
 8000d18:	d401      	bmi.n	8000d1e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d1c:	e000      	b.n	8000d20 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000d20:	b10b      	cbz	r3, 8000d26 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000d22:	4620      	mov	r0, r4
 8000d24:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d26:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d28:	2220      	movs	r2, #32
 8000d2a:	408a      	lsls	r2, r1
 8000d2c:	4216      	tst	r6, r2
 8000d2e:	d038      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	06c6      	lsls	r6, r0, #27
 8000d36:	d534      	bpl.n	8000da2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d38:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d3a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d3e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d40:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d42:	d125      	bne.n	8000d90 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d44:	f022 0216 	bic.w	r2, r2, #22
 8000d48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d50:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d54:	b90a      	cbnz	r2, 8000d5a <HAL_DMA_IRQHandler+0xc6>
 8000d56:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d58:	b11a      	cbz	r2, 8000d62 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	f022 0208 	bic.w	r2, r2, #8
 8000d60:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d62:	233f      	movs	r3, #63	; 0x3f
 8000d64:	408b      	lsls	r3, r1
 8000d66:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000d74:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000d76:	b10b      	cbz	r3, 8000d7c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4798      	blx	r3
}
 8000d7c:	b003      	add	sp, #12
 8000d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	05d2      	lsls	r2, r2, #23
 8000d84:	d4c9      	bmi.n	8000d1a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	f022 0208 	bic.w	r2, r2, #8
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	e7c4      	b.n	8000d1a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d90:	0350      	lsls	r0, r2, #13
 8000d92:	d528      	bpl.n	8000de6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	0319      	lsls	r1, r3, #12
 8000d98:	d432      	bmi.n	8000e00 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000d9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000d9c:	b10b      	cbz	r3, 8000da2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000d9e:	4620      	mov	r0, r4
 8000da0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000da2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e9      	beq.n	8000d7c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000da8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000daa:	07da      	lsls	r2, r3, #31
 8000dac:	d519      	bpl.n	8000de2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dae:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000db0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000db2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000db6:	6813      	ldr	r3, [r2, #0]
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000dbe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000dc2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000dc6:	9b01      	ldr	r3, [sp, #4]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	d302      	bcc.n	8000dd6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dd0:	6813      	ldr	r3, [r2, #0]
 8000dd2:	07db      	lsls	r3, r3, #31
 8000dd4:	d4f7      	bmi.n	8000dc6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000de2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000de4:	e7c7      	b.n	8000d76 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000dec:	d108      	bne.n	8000e00 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	f021 0110 	bic.w	r1, r1, #16
 8000df4:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000df6:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000df8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000dfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000e00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e02:	e7cb      	b.n	8000d9c <HAL_DMA_IRQHandler+0x108>
 8000e04:	2000001c 	.word	0x2000001c

08000e08 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8000e08:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e0a:	6886      	ldr	r6, [r0, #8]
 8000e0c:	2e80      	cmp	r6, #128	; 0x80
 8000e0e:	d104      	bne.n	8000e1a <HAL_DMAEx_MultiBufferStart_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000e16:	2001      	movs	r0, #1
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e1a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000e1e:	2c01      	cmp	r4, #1
 8000e20:	f000 81d4 	beq.w	80011cc <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 8000e24:	2401      	movs	r4, #1
 8000e26:	2500      	movs	r5, #0
 8000e28:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e2c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000e30:	2c01      	cmp	r4, #1
 8000e32:	f04f 0402 	mov.w	r4, #2
 8000e36:	f040 81c7 	bne.w	80011c8 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e3a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e3e:	2e40      	cmp	r6, #64	; 0x40
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000e40:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e42:	6545      	str	r5, [r0, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8000e44:	6825      	ldr	r5, [r4, #0]
 8000e46:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 8000e4a:	6025      	str	r5, [r4, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8000e4c:	6123      	str	r3, [r4, #16]
  hdma->Instance->NDTR = DataLength;
 8000e4e:	9b04      	ldr	r3, [sp, #16]
 8000e50:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e52:	d13f      	bne.n	8000ed4 <HAL_DMAEx_MultiBufferStart_IT+0xcc>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e54:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e56:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e58:	4bb0      	ldr	r3, [pc, #704]	; (800111c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8000e5a:	429c      	cmp	r4, r3
 8000e5c:	d942      	bls.n	8000ee4 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
 8000e5e:	3318      	adds	r3, #24
 8000e60:	429c      	cmp	r4, r3
 8000e62:	d03a      	beq.n	8000eda <HAL_DMAEx_MultiBufferStart_IT+0xd2>
 8000e64:	4aae      	ldr	r2, [pc, #696]	; (8001120 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8000e66:	4294      	cmp	r4, r2
 8000e68:	d039      	beq.n	8000ede <HAL_DMAEx_MultiBufferStart_IT+0xd6>
 8000e6a:	3218      	adds	r2, #24
 8000e6c:	4294      	cmp	r4, r2
 8000e6e:	bf14      	ite	ne
 8000e70:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000e74:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000e78:	49aa      	ldr	r1, [pc, #680]	; (8001124 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e7a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e7c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e7e:	f040 80b3 	bne.w	8000fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1e0>
 8000e82:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e84:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e86:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e88:	f040 80e6 	bne.w	8001058 <HAL_DMAEx_MultiBufferStart_IT+0x250>
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	49a5      	ldr	r1, [pc, #660]	; (8001124 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e90:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000e92:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e94:	f040 8118 	bne.w	80010c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
 8000e98:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000e9a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000e9c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000e9e:	f040 815f 	bne.w	8001160 <HAL_DMAEx_MultiBufferStart_IT+0x358>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	4a9f      	ldr	r2, [pc, #636]	; (8001124 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8000ea6:	60d3      	str	r3, [r2, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	f043 0316 	orr.w	r3, r3, #22
 8000eae:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000eb0:	6963      	ldr	r3, [r4, #20]
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb6:	6163      	str	r3, [r4, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eb8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000eba:	b90b      	cbnz	r3, 8000ec0 <HAL_DMAEx_MultiBufferStart_IT+0xb8>
 8000ebc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000ebe:	b11b      	cbz	r3, 8000ec8 <HAL_DMAEx_MultiBufferStart_IT+0xc0>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma); 
 8000ec8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eca:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000ed4:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000ed6:	60e2      	str	r2, [r4, #12]
 8000ed8:	e7be      	b.n	8000e58 <HAL_DMAEx_MultiBufferStart_IT+0x50>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eda:	2220      	movs	r2, #32
 8000edc:	e7cc      	b.n	8000e78 <HAL_DMAEx_MultiBufferStart_IT+0x70>
 8000ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee2:	e7c9      	b.n	8000e78 <HAL_DMAEx_MultiBufferStart_IT+0x70>
 8000ee4:	4b90      	ldr	r3, [pc, #576]	; (8001128 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	d92a      	bls.n	8000f40 <HAL_DMAEx_MultiBufferStart_IT+0x138>
 8000eea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000eee:	429c      	cmp	r4, r3
 8000ef0:	d021      	beq.n	8000f36 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8000ef2:	4a8e      	ldr	r2, [pc, #568]	; (800112c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8000ef4:	4294      	cmp	r4, r2
 8000ef6:	d020      	beq.n	8000f3a <HAL_DMAEx_MultiBufferStart_IT+0x132>
 8000ef8:	3218      	adds	r2, #24
 8000efa:	4294      	cmp	r4, r2
 8000efc:	bf14      	ite	ne
 8000efe:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000f02:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000f06:	4987      	ldr	r1, [pc, #540]	; (8001124 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f08:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f0a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f0c:	d17a      	bne.n	8001004 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8000f0e:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f10:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f12:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f14:	f040 80ae 	bne.w	8001074 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4982      	ldr	r1, [pc, #520]	; (8001124 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f1c:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f1e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f20:	f040 80e0 	bne.w	80010e4 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
 8000f24:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f26:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f28:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f2a:	f040 8126 	bne.w	800117a <HAL_DMAEx_MultiBufferStart_IT+0x372>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4a7c      	ldr	r2, [pc, #496]	; (8001124 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8000f32:	6093      	str	r3, [r2, #8]
 8000f34:	e7b8      	b.n	8000ea8 <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f36:	2220      	movs	r2, #32
 8000f38:	e7e5      	b.n	8000f06 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8000f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f3e:	e7e2      	b.n	8000f06 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8000f40:	4b7b      	ldr	r3, [pc, #492]	; (8001130 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8000f42:	429c      	cmp	r4, r3
 8000f44:	d928      	bls.n	8000f98 <HAL_DMAEx_MultiBufferStart_IT+0x190>
 8000f46:	3318      	adds	r3, #24
 8000f48:	429c      	cmp	r4, r3
 8000f4a:	d020      	beq.n	8000f8e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8000f4c:	4a79      	ldr	r2, [pc, #484]	; (8001134 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8000f4e:	4294      	cmp	r4, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_DMAEx_MultiBufferStart_IT+0x18a>
 8000f52:	3218      	adds	r2, #24
 8000f54:	4294      	cmp	r4, r2
 8000f56:	bf14      	ite	ne
 8000f58:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000f5c:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000f60:	4975      	ldr	r1, [pc, #468]	; (8001138 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f62:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f64:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f66:	d15b      	bne.n	8001020 <HAL_DMAEx_MultiBufferStart_IT+0x218>
 8000f68:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f6a:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f6c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f6e:	f040 808f 	bne.w	8001090 <HAL_DMAEx_MultiBufferStart_IT+0x288>
 8000f72:	2208      	movs	r2, #8
 8000f74:	4970      	ldr	r1, [pc, #448]	; (8001138 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f76:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000f78:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f7a:	f040 80c1 	bne.w	8001100 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>
 8000f7e:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f80:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000f82:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000f84:	f040 8106 	bne.w	8001194 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4a6b      	ldr	r2, [pc, #428]	; (8001138 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8000f8c:	e78b      	b.n	8000ea6 <HAL_DMAEx_MultiBufferStart_IT+0x9e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f8e:	2220      	movs	r2, #32
 8000f90:	e7e6      	b.n	8000f60 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8000f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f96:	e7e3      	b.n	8000f60 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8000f98:	4b68      	ldr	r3, [pc, #416]	; (800113c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8000f9a:	429c      	cmp	r4, r3
 8000f9c:	d01f      	beq.n	8000fde <HAL_DMAEx_MultiBufferStart_IT+0x1d6>
 8000f9e:	4a68      	ldr	r2, [pc, #416]	; (8001140 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8000fa0:	4294      	cmp	r4, r2
 8000fa2:	d01e      	beq.n	8000fe2 <HAL_DMAEx_MultiBufferStart_IT+0x1da>
 8000fa4:	3218      	adds	r2, #24
 8000fa6:	4294      	cmp	r4, r2
 8000fa8:	bf14      	ite	ne
 8000faa:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8000fae:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000fb2:	4961      	ldr	r1, [pc, #388]	; (8001138 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fb4:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fb6:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fb8:	d140      	bne.n	800103c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8000fba:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000fbc:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fbe:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000fc0:	d174      	bne.n	80010ac <HAL_DMAEx_MultiBufferStart_IT+0x2a4>
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	495c      	ldr	r1, [pc, #368]	; (8001138 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fc6:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000fc8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fca:	f040 80bb 	bne.w	8001144 <HAL_DMAEx_MultiBufferStart_IT+0x33c>
 8000fce:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000fd0:	429c      	cmp	r4, r3
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8000fd2:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8000fd4:	f040 80eb 	bne.w	80011ae <HAL_DMAEx_MultiBufferStart_IT+0x3a6>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4a57      	ldr	r2, [pc, #348]	; (8001138 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8000fdc:	e7a9      	b.n	8000f32 <HAL_DMAEx_MultiBufferStart_IT+0x12a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fde:	2220      	movs	r2, #32
 8000fe0:	e7e7      	b.n	8000fb2 <HAL_DMAEx_MultiBufferStart_IT+0x1aa>
 8000fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fe6:	e7e4      	b.n	8000fb2 <HAL_DMAEx_MultiBufferStart_IT+0x1aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8000fea:	4294      	cmp	r4, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8000fee:	3218      	adds	r2, #24
 8000ff0:	4294      	cmp	r4, r2
 8000ff2:	bf14      	ite	ne
 8000ff4:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8000ff8:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000ffc:	e742      	b.n	8000e84 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
 8000ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001002:	e73f      	b.n	8000e84 <HAL_DMAEx_MultiBufferStart_IT+0x7c>
 8001004:	4a49      	ldr	r2, [pc, #292]	; (800112c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001006:	4294      	cmp	r4, r2
 8001008:	d007      	beq.n	800101a <HAL_DMAEx_MultiBufferStart_IT+0x212>
 800100a:	3218      	adds	r2, #24
 800100c:	4294      	cmp	r4, r2
 800100e:	bf14      	ite	ne
 8001010:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8001014:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001018:	e77a      	b.n	8000f10 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	e777      	b.n	8000f10 <HAL_DMAEx_MultiBufferStart_IT+0x108>
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001022:	4294      	cmp	r4, r2
 8001024:	d007      	beq.n	8001036 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
 8001026:	3218      	adds	r2, #24
 8001028:	4294      	cmp	r4, r2
 800102a:	bf14      	ite	ne
 800102c:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 8001030:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001034:	e799      	b.n	8000f6a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103a:	e796      	b.n	8000f6a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800103c:	4a40      	ldr	r2, [pc, #256]	; (8001140 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800103e:	4294      	cmp	r4, r2
 8001040:	d007      	beq.n	8001052 <HAL_DMAEx_MultiBufferStart_IT+0x24a>
 8001042:	3218      	adds	r2, #24
 8001044:	4294      	cmp	r4, r2
 8001046:	bf14      	ite	ne
 8001048:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 800104c:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8001050:	e7b4      	b.n	8000fbc <HAL_DMAEx_MultiBufferStart_IT+0x1b4>
 8001052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001056:	e7b1      	b.n	8000fbc <HAL_DMAEx_MultiBufferStart_IT+0x1b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001058:	4a31      	ldr	r2, [pc, #196]	; (8001120 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800105a:	4294      	cmp	r4, r2
 800105c:	d007      	beq.n	800106e <HAL_DMAEx_MultiBufferStart_IT+0x266>
 800105e:	3218      	adds	r2, #24
 8001060:	4294      	cmp	r4, r2
 8001062:	bf14      	ite	ne
 8001064:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001068:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 800106c:	e70f      	b.n	8000e8e <HAL_DMAEx_MultiBufferStart_IT+0x86>
 800106e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001072:	e70c      	b.n	8000e8e <HAL_DMAEx_MultiBufferStart_IT+0x86>
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001076:	4294      	cmp	r4, r2
 8001078:	d007      	beq.n	800108a <HAL_DMAEx_MultiBufferStart_IT+0x282>
 800107a:	3218      	adds	r2, #24
 800107c:	4294      	cmp	r4, r2
 800107e:	bf14      	ite	ne
 8001080:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 8001084:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 8001088:	e747      	b.n	8000f1a <HAL_DMAEx_MultiBufferStart_IT+0x112>
 800108a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108e:	e744      	b.n	8000f1a <HAL_DMAEx_MultiBufferStart_IT+0x112>
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001092:	4294      	cmp	r4, r2
 8001094:	d007      	beq.n	80010a6 <HAL_DMAEx_MultiBufferStart_IT+0x29e>
 8001096:	3218      	adds	r2, #24
 8001098:	4294      	cmp	r4, r2
 800109a:	bf14      	ite	ne
 800109c:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80010a0:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80010a4:	e766      	b.n	8000f74 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80010a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010aa:	e763      	b.n	8000f74 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80010ae:	4294      	cmp	r4, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 80010b2:	3218      	adds	r2, #24
 80010b4:	4294      	cmp	r4, r2
 80010b6:	bf14      	ite	ne
 80010b8:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80010bc:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
 80010c0:	e780      	b.n	8000fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	e77d      	b.n	8000fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80010c8:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80010ca:	4294      	cmp	r4, r2
 80010cc:	d007      	beq.n	80010de <HAL_DMAEx_MultiBufferStart_IT+0x2d6>
 80010ce:	3218      	adds	r2, #24
 80010d0:	4294      	cmp	r4, r2
 80010d2:	bf14      	ite	ne
 80010d4:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80010d8:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80010dc:	e6dd      	b.n	8000e9a <HAL_DMAEx_MultiBufferStart_IT+0x92>
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	e6da      	b.n	8000e9a <HAL_DMAEx_MultiBufferStart_IT+0x92>
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80010e6:	4294      	cmp	r4, r2
 80010e8:	d007      	beq.n	80010fa <HAL_DMAEx_MultiBufferStart_IT+0x2f2>
 80010ea:	3218      	adds	r2, #24
 80010ec:	4294      	cmp	r4, r2
 80010ee:	bf14      	ite	ne
 80010f0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 80010f4:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 80010f8:	e715      	b.n	8000f26 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 80010fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fe:	e712      	b.n	8000f26 <HAL_DMAEx_MultiBufferStart_IT+0x11e>
 8001100:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001102:	4294      	cmp	r4, r2
 8001104:	d007      	beq.n	8001116 <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 8001106:	3218      	adds	r2, #24
 8001108:	4294      	cmp	r4, r2
 800110a:	bf14      	ite	ne
 800110c:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8001110:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001114:	e734      	b.n	8000f80 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8001116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111a:	e731      	b.n	8000f80 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 800111c:	40026458 	.word	0x40026458
 8001120:	40026488 	.word	0x40026488
 8001124:	40026400 	.word	0x40026400
 8001128:	400260b8 	.word	0x400260b8
 800112c:	40026428 	.word	0x40026428
 8001130:	40026058 	.word	0x40026058
 8001134:	40026088 	.word	0x40026088
 8001138:	40026000 	.word	0x40026000
 800113c:	40026010 	.word	0x40026010
 8001140:	40026028 	.word	0x40026028
 8001144:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>)
 8001146:	4294      	cmp	r4, r2
 8001148:	d007      	beq.n	800115a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800114a:	3218      	adds	r2, #24
 800114c:	4294      	cmp	r4, r2
 800114e:	bf14      	ite	ne
 8001150:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
 8001154:	f44f 2280 	moveq.w	r2, #262144	; 0x40000
 8001158:	e73a      	b.n	8000fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1c8>
 800115a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115e:	e737      	b.n	8000fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1c8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>)
 8001162:	429c      	cmp	r4, r3
 8001164:	d007      	beq.n	8001176 <HAL_DMAEx_MultiBufferStart_IT+0x36e>
 8001166:	3318      	adds	r3, #24
 8001168:	429c      	cmp	r4, r3
 800116a:	bf14      	ite	ne
 800116c:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 8001170:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8001174:	e696      	b.n	8000ea4 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 8001176:	2340      	movs	r3, #64	; 0x40
 8001178:	e694      	b.n	8000ea4 <HAL_DMAEx_MultiBufferStart_IT+0x9c>
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>)
 800117c:	429c      	cmp	r4, r3
 800117e:	d007      	beq.n	8001190 <HAL_DMAEx_MultiBufferStart_IT+0x388>
 8001180:	3318      	adds	r3, #24
 8001182:	429c      	cmp	r4, r3
 8001184:	bf14      	ite	ne
 8001186:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 800118a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800118e:	e6cf      	b.n	8000f30 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	e6cd      	b.n	8000f30 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_DMAEx_MultiBufferStart_IT+0x3d4>)
 8001196:	429c      	cmp	r4, r3
 8001198:	d007      	beq.n	80011aa <HAL_DMAEx_MultiBufferStart_IT+0x3a2>
 800119a:	3318      	adds	r3, #24
 800119c:	429c      	cmp	r4, r3
 800119e:	bf14      	ite	ne
 80011a0:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80011a4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80011a8:	e6ef      	b.n	8000f8a <HAL_DMAEx_MultiBufferStart_IT+0x182>
 80011aa:	2340      	movs	r3, #64	; 0x40
 80011ac:	e6ed      	b.n	8000f8a <HAL_DMAEx_MultiBufferStart_IT+0x182>
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>)
 80011b0:	429c      	cmp	r4, r3
 80011b2:	d007      	beq.n	80011c4 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 80011b4:	3318      	adds	r3, #24
 80011b6:	429c      	cmp	r4, r3
 80011b8:	bf14      	ite	ne
 80011ba:	f44f 0380 	movne.w	r3, #4194304	; 0x400000
 80011be:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80011c2:	e70a      	b.n	8000fda <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	e708      	b.n	8000fda <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
    __HAL_UNLOCK(hdma);	  
 80011c8:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80011cc:	2002      	movs	r0, #2
}
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
 80011d0:	40026028 	.word	0x40026028
 80011d4:	40026488 	.word	0x40026488
 80011d8:	40026428 	.word	0x40026428
 80011dc:	40026088 	.word	0x40026088

080011e0 <HAL_DMAEx_ChangeMemory>:
{
 80011e0:	6803      	ldr	r3, [r0, #0]
  if(memory == MEMORY0)
 80011e2:	b912      	cbnz	r2, 80011ea <HAL_DMAEx_ChangeMemory+0xa>
    hdma->Instance->M0AR = Address;
 80011e4:	60d9      	str	r1, [r3, #12]
}
 80011e6:	2000      	movs	r0, #0
 80011e8:	4770      	bx	lr
    hdma->Instance->M1AR = Address;
 80011ea:	6119      	str	r1, [r3, #16]
 80011ec:	e7fb      	b.n	80011e6 <HAL_DMAEx_ChangeMemory+0x6>

080011ee <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80011ee:	2300      	movs	r3, #0
{
 80011f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80011f2:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80011f6:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80011f8:	6803      	ldr	r3, [r0, #0]
{
 80011fa:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011fc:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80011fe:	591a      	ldr	r2, [r3, r4]
 8001200:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001204:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8001206:	591b      	ldr	r3, [r3, r4]
 8001208:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800120a:	f7ff fa4b 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800120e:	682b      	ldr	r3, [r5, #0]
 8001210:	9a01      	ldr	r2, [sp, #4]
 8001212:	511a      	str	r2, [r3, r4]
}
 8001214:	b003      	add	sp, #12
 8001216:	bd30      	pop	{r4, r5, pc}

08001218 <ETH_MACDMAConfig>:
{
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800121c:	b129      	cbz	r1, 800122a <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800121e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001222:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8001224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001228:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800122a:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 800122c:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800122e:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8001230:	68e0      	ldr	r0, [r4, #12]
 8001232:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8001234:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001236:	bf08      	it	eq
 8001238:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 800123c:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001240:	482e      	ldr	r0, [pc, #184]	; (80012fc <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001242:	bf18      	it	ne
 8001244:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001246:	4028      	ands	r0, r5
 8001248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124c:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800124e:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001250:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001252:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8001254:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001256:	f7ff fa25 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800125a:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800125c:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800125e:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8001260:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001262:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8001264:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001266:	f7ff fa1d 	bl	80006a4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800126a:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800126c:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800126e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001270:	2500      	movs	r5, #0
 8001272:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001274:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8001276:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001278:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800127c:	0412      	lsls	r2, r2, #16
 800127e:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001284:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8001286:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001288:	f7ff fa0c 	bl	80006a4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800128c:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800128e:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8001290:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001292:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8001294:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001296:	f7ff fa05 	bl	80006a4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800129a:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800129c:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80012a0:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80012a2:	f241 0518 	movw	r5, #4120	; 0x1018
 80012a6:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80012a8:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80012aa:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80012ae:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80012b2:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80012b4:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012b6:	f7ff f9f5 	bl	80006a4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80012ba:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80012bc:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 80012c0:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80012c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c6:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80012c8:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80012ca:	f7ff f9eb 	bl	80006a4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80012ce:	6822      	ldr	r2, [r4, #0]
 80012d0:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80012d4:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80012d6:	69a3      	ldr	r3, [r4, #24]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d107      	bne.n	80012ec <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80012dc:	f241 011c 	movw	r1, #4124	; 0x101c
 80012e0:	5853      	ldr	r3, [r2, r1]
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ea:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012ec:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80012ee:	4a06      	ldr	r2, [pc, #24]	; (8001308 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80012f0:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80012f2:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80012f4:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <ETH_MACDMAConfig+0xf4>)
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	bd70      	pop	{r4, r5, r6, pc}
 80012fc:	ff20810f 	.word	0xff20810f
 8001300:	f8de3f23 	.word	0xf8de3f23
 8001304:	02c12080 	.word	0x02c12080
 8001308:	40028040 	.word	0x40028040
 800130c:	40028044 	.word	0x40028044

08001310 <HAL_ETH_DMATxDescListInit>:
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8001312:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001316:	2c01      	cmp	r4, #1
 8001318:	f04f 0402 	mov.w	r4, #2
 800131c:	d033      	beq.n	8001386 <HAL_ETH_DMATxDescListInit+0x76>
 800131e:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8001320:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001324:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8001328:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 800132c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001330:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8001334:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 8001336:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  heth->TxDesc = DMATxDescTab;
 800133a:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 800133c:	429d      	cmp	r5, r3
 800133e:	d10b      	bne.n	8001358 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001340:	6802      	ldr	r2, [r0, #0]
 8001342:	f241 0310 	movw	r3, #4112	; 0x1010
 8001346:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001348:	2301      	movs	r3, #1
 800134a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800134e:	2300      	movs	r3, #0
 8001350:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001354:	4618      	mov	r0, r3
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001358:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800135c:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001360:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001364:	69c6      	ldr	r6, [r0, #28]
 8001366:	b92e      	cbnz	r6, 8001374 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001368:	f854 6c20 	ldr.w	r6, [r4, #-32]
 800136c:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8001370:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001374:	4565      	cmp	r5, ip
 8001376:	bf2c      	ite	cs
 8001378:	460e      	movcs	r6, r1
 800137a:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 800137c:	3501      	adds	r5, #1
 800137e:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001380:	f844 6c34 	str.w	r6, [r4, #-52]
 8001384:	e7da      	b.n	800133c <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8001386:	4620      	mov	r0, r4
}
 8001388:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800138a <HAL_ETH_DMARxDescListInit>:
{
 800138a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 800138e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001392:	2c01      	cmp	r4, #1
 8001394:	f04f 0402 	mov.w	r4, #2
 8001398:	d030      	beq.n	80013fc <HAL_ETH_DMARxDescListInit+0x72>
 800139a:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800139c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80013a0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80013a4:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80013a8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80013ac:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80013b0:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80013b2:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80013b6:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  heth->RxDesc = DMARxDescTab; 
 80013ba:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80013bc:	429d      	cmp	r5, r3
 80013be:	d10c      	bne.n	80013da <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80013c0:	6802      	ldr	r2, [r0, #0]
 80013c2:	f241 030c 	movw	r3, #4108	; 0x100c
 80013c6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80013ce:	2300      	movs	r3, #0
 80013d0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80013d4:	4618      	mov	r0, r3
 80013d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80013da:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80013de:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80013e2:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80013e6:	4565      	cmp	r5, ip
 80013e8:	bf2c      	ite	cs
 80013ea:	4688      	movcs	r8, r1
 80013ec:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80013ee:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 80013f2:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80013f4:	f844 8c14 	str.w	r8, [r4, #-20]
 80013f8:	3420      	adds	r4, #32
 80013fa:	e7df      	b.n	80013bc <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 80013fc:	4620      	mov	r0, r4
}
 80013fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001404 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8001404:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001408:	2b01      	cmp	r3, #1
 800140a:	f04f 0302 	mov.w	r3, #2
{
 800140e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8001410:	d066      	beq.n	80014e0 <HAL_ETH_TransmitFrame+0xdc>
 8001412:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8001414:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8001418:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 800141c:	b929      	cbnz	r1, 800142a <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800141e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001422:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8001426:	4610      	mov	r0, r2
 8001428:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800142a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800142c:	681c      	ldr	r4, [r3, #0]
 800142e:	2c00      	cmp	r4, #0
 8001430:	da06      	bge.n	8001440 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001432:	2312      	movs	r3, #18
 8001434:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001438:	2300      	movs	r3, #0
 800143a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800143e:	e7f2      	b.n	8001426 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001440:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8001444:	42a1      	cmp	r1, r4
 8001446:	d92c      	bls.n	80014a2 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001448:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800144c:	fb04 1412 	mls	r4, r4, r2, r1
 8001450:	b32c      	cbz	r4, 800149e <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8001452:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001454:	4c23      	ldr	r4, [pc, #140]	; (80014e4 <HAL_ETH_TransmitFrame+0xe0>)
 8001456:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800145a:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 800145e:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001460:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001464:	2400      	movs	r4, #0
 8001466:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800146a:	681d      	ldr	r5, [r3, #0]
 800146c:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8001470:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8001472:	b91c      	cbnz	r4, 800147c <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001474:	681d      	ldr	r5, [r3, #0]
 8001476:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800147a:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 800147c:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800147e:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8001480:	d104      	bne.n	800148c <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001482:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001484:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001486:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800148a:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800148c:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 800148e:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001490:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8001494:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001496:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001498:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800149a:	d1e6      	bne.n	800146a <HAL_ETH_TransmitFrame+0x66>
 800149c:	e00d      	b.n	80014ba <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 800149e:	2a01      	cmp	r2, #1
 80014a0:	d1d8      	bne.n	8001454 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80014a2:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80014a4:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80014a8:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80014ac:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80014ae:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014b6:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80014bc:	f241 0214 	movw	r2, #4116	; 0x1014
 80014c0:	6803      	ldr	r3, [r0, #0]
 80014c2:	5899      	ldr	r1, [r3, r2]
 80014c4:	0749      	lsls	r1, r1, #29
 80014c6:	d505      	bpl.n	80014d4 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80014c8:	2104      	movs	r1, #4
 80014ca:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80014cc:	2100      	movs	r1, #0
 80014ce:	f241 0204 	movw	r2, #4100	; 0x1004
 80014d2:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80014da:	2300      	movs	r3, #0
 80014dc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80014e0:	4618      	mov	r0, r3
}
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	fffffa0c 	.word	0xfffffa0c

080014e8 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 80014e8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	f04f 0302 	mov.w	r3, #2
{
 80014f2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 80014f4:	d023      	beq.n	800153e <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 80014f6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80014fa:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80014fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 80014fe:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2a00      	cmp	r2, #0
 8001506:	db27      	blt.n	8001558 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68d9      	ldr	r1, [r3, #12]
 800150c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001510:	d017      	beq.n	8001542 <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8001512:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001514:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8001516:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1)
 8001518:	42a2      	cmp	r2, r4
      (heth->RxFrameInfos).SegCount++;
 800151a:	6382      	str	r2, [r0, #56]	; 0x38
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800151c:	bf08      	it	eq
 800151e:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8001526:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8001528:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800152a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800152c:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800152e:	6281      	str	r1, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001530:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8001532:	2301      	movs	r3, #1
 8001534:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001538:	2300      	movs	r3, #0
 800153a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001542:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001544:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001546:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8001548:	bf55      	itete	pl
 800154a:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800154c:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 800154e:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001550:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001552:	bf4c      	ite	mi
 8001554:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8001556:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8001558:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800155a:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 800155c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001560:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8001564:	e7eb      	b.n	800153e <HAL_ETH_GetReceivedFrame+0x56>

08001566 <HAL_ETH_ReadPHYRegister>:
{
 8001566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001568:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 800156c:	4605      	mov	r5, r0
 800156e:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001570:	2b82      	cmp	r3, #130	; 0x82
 8001572:	d030      	beq.n	80015d6 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8001574:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001576:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001578:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800157a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800157e:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001580:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001584:	f003 011c 	and.w	r1, r3, #28
 8001588:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800158a:	8a04      	ldrh	r4, [r0, #16]
 800158c:	02e4      	lsls	r4, r4, #11
 800158e:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001590:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001592:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8001596:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8001598:	f7ff f87e 	bl	8000698 <HAL_GetTick>
 800159c:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800159e:	f014 0001 	ands.w	r0, r4, #1
 80015a2:	d107      	bne.n	80015b4 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80015a4:	682b      	ldr	r3, [r5, #0]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80015ac:	2301      	movs	r3, #1
 80015ae:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80015b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80015b4:	f7ff f870 	bl	8000698 <HAL_GetTick>
 80015b8:	1bc0      	subs	r0, r0, r7
 80015ba:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80015be:	d307      	bcc.n	80015d0 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 80015c0:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80015c2:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80015c4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80015c8:	2300      	movs	r3, #0
 80015ca:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80015ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	691c      	ldr	r4, [r3, #16]
 80015d4:	e7e3      	b.n	800159e <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80015d6:	2002      	movs	r0, #2
}
 80015d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015da <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80015da:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80015de:	2b42      	cmp	r3, #66	; 0x42
{
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80015e4:	d02e      	beq.n	8001644 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80015e6:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015e8:	018c      	lsls	r4, r1, #6
 80015ea:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80015ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015f0:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 80015f4:	6803      	ldr	r3, [r0, #0]
 80015f6:	f044 0403 	orr.w	r4, r4, #3
 80015fa:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80015fc:	f000 001c 	and.w	r0, r0, #28
 8001600:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001602:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001604:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001606:	02e4      	lsls	r4, r4, #11
 8001608:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800160a:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 800160c:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800160e:	f7ff f843 	bl	8000698 <HAL_GetTick>
 8001612:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001614:	f014 0001 	ands.w	r0, r4, #1
 8001618:	d103      	bne.n	8001622 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 800161a:	2301      	movs	r3, #1
 800161c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8001620:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001622:	f7ff f839 	bl	8000698 <HAL_GetTick>
 8001626:	1b80      	subs	r0, r0, r6
 8001628:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800162c:	d307      	bcc.n	800163e <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 800162e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8001630:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8001632:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001636:	2300      	movs	r3, #0
 8001638:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800163c:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 800163e:	682b      	ldr	r3, [r5, #0]
 8001640:	691c      	ldr	r4, [r3, #16]
 8001642:	e7e7      	b.n	8001614 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8001644:	2002      	movs	r0, #2
}
 8001646:	bd70      	pop	{r4, r5, r6, pc}

08001648 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8001648:	2300      	movs	r3, #0
{
 800164a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 800164c:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 800164e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8001650:	2800      	cmp	r0, #0
 8001652:	f000 80dc 	beq.w	800180e <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8001656:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800165a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800165e:	b91b      	cbnz	r3, 8001668 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8001660:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8001664:	f008 fd38 	bl	800a0d8 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <HAL_ETH_Init+0x1cc>)
 800166a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800166c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001670:	645a      	str	r2, [r3, #68]	; 0x44
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800167c:	4b66      	ldr	r3, [pc, #408]	; (8001818 <HAL_ETH_Init+0x1d0>)
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001684:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	6a21      	ldr	r1, [r4, #32]
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800169c:	f7fe fffc 	bl	8000698 <HAL_GetTick>
 80016a0:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	07d0      	lsls	r0, r2, #31
 80016ac:	d41d      	bmi.n	80016ea <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 80016ae:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80016b0:	f000 fd2a 	bl	8002108 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_ETH_Init+0x1d4>)
 80016b6:	4a5a      	ldr	r2, [pc, #360]	; (8001820 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80016b8:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 80016bc:	4403      	add	r3, r0
 80016be:	4293      	cmp	r3, r2
 80016c0:	d822      	bhi.n	8001708 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80016c2:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80016c6:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80016c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016cc:	2100      	movs	r1, #0
 80016ce:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80016d0:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80016d2:	f7ff ff82 	bl	80015da <HAL_ETH_WritePHYRegister>
 80016d6:	4605      	mov	r5, r0
 80016d8:	b368      	cbz	r0, 8001736 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 80016da:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80016dc:	2101      	movs	r1, #1
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff fd9a 	bl	8001218 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80016e4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80016e8:	e00b      	b.n	8001702 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80016ea:	f7fe ffd5 	bl	8000698 <HAL_GetTick>
 80016ee:	1b40      	subs	r0, r0, r5
 80016f0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80016f4:	d9d5      	bls.n	80016a2 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80016f6:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80016f8:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80016fa:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80016fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8001702:	4628      	mov	r0, r5
 8001704:	b003      	add	sp, #12
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_ETH_Init+0x1dc>)
 800170a:	4a47      	ldr	r2, [pc, #284]	; (8001828 <HAL_ETH_Init+0x1e0>)
 800170c:	4403      	add	r3, r0
 800170e:	4293      	cmp	r3, r2
 8001710:	d802      	bhi.n	8001718 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001712:	f045 050c 	orr.w	r5, r5, #12
 8001716:	e7d6      	b.n	80016c6 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001718:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_ETH_Init+0x1e4>)
 800171a:	4a45      	ldr	r2, [pc, #276]	; (8001830 <HAL_ETH_Init+0x1e8>)
 800171c:	4403      	add	r3, r0
 800171e:	4293      	cmp	r3, r2
 8001720:	d9d1      	bls.n	80016c6 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <HAL_ETH_Init+0x1ec>)
 8001724:	4a44      	ldr	r2, [pc, #272]	; (8001838 <HAL_ETH_Init+0x1f0>)
 8001726:	4403      	add	r3, r0
 8001728:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800172a:	bf94      	ite	ls
 800172c:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001730:	f045 0510 	orrhi.w	r5, r5, #16
 8001734:	e7c7      	b.n	80016c6 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8001736:	20ff      	movs	r0, #255	; 0xff
 8001738:	f7fe ffb4 	bl	80006a4 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800173c:	6863      	ldr	r3, [r4, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d053      	beq.n	80017ea <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8001742:	f7fe ffa9 	bl	8000698 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001746:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800174a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800174c:	466a      	mov	r2, sp
 800174e:	2101      	movs	r1, #1
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff ff08 	bl	8001566 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001756:	f7fe ff9f 	bl	8000698 <HAL_GetTick>
 800175a:	1b80      	subs	r0, r0, r6
 800175c:	42b8      	cmp	r0, r7
 800175e:	d90b      	bls.n	8001778 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8001760:	2101      	movs	r1, #1
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff fd58 	bl	8001218 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8001768:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 800176a:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800176c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8001770:	2300      	movs	r3, #0
 8001772:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001776:	e7c4      	b.n	8001702 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001778:	9b00      	ldr	r3, [sp, #0]
 800177a:	0759      	lsls	r1, r3, #29
 800177c:	d5e6      	bpl.n	800174c <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800177e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001782:	2100      	movs	r1, #0
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff ff28 	bl	80015da <HAL_ETH_WritePHYRegister>
 800178a:	2800      	cmp	r0, #0
 800178c:	d1a5      	bne.n	80016da <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 800178e:	f7fe ff83 	bl	8000698 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001792:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001796:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001798:	466a      	mov	r2, sp
 800179a:	2101      	movs	r1, #1
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff fee2 	bl	8001566 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80017a2:	f7fe ff79 	bl	8000698 <HAL_GetTick>
 80017a6:	1b80      	subs	r0, r0, r6
 80017a8:	42b8      	cmp	r0, r7
 80017aa:	d8d9      	bhi.n	8001760 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80017ac:	9b00      	ldr	r3, [sp, #0]
 80017ae:	069a      	lsls	r2, r3, #26
 80017b0:	d5f2      	bpl.n	8001798 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80017b2:	466a      	mov	r2, sp
 80017b4:	211f      	movs	r1, #31
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fed5 	bl	8001566 <HAL_ETH_ReadPHYRegister>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d18c      	bne.n	80016da <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017c0:	9b00      	ldr	r3, [sp, #0]
 80017c2:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017c6:	bf18      	it	ne
 80017c8:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80017cc:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 80017ce:	bf4c      	ite	mi
 80017d0:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 80017d2:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80017d6:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 80017d8:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 80017da:	2100      	movs	r1, #0
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff fd1b 	bl	8001218 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80017e8:	e78b      	b.n	8001702 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80017ea:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017ec:	4629      	mov	r1, r5
 80017ee:	68e2      	ldr	r2, [r4, #12]
 80017f0:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80017f2:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017f4:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f7ff feee 	bl	80015da <HAL_ETH_WritePHYRegister>
 80017fe:	2800      	cmp	r0, #0
 8001800:	f47f af6b 	bne.w	80016da <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8001804:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001808:	f7fe ff4c 	bl	80006a4 <HAL_Delay>
 800180c:	e7e5      	b.n	80017da <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 800180e:	2501      	movs	r5, #1
 8001810:	e777      	b.n	8001702 <HAL_ETH_Init+0xba>
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	feced300 	.word	0xfeced300
 8001820:	00e4e1bf 	.word	0x00e4e1bf
 8001824:	fde9f140 	.word	0xfde9f140
 8001828:	017d783f 	.word	0x017d783f
 800182c:	fc6c7900 	.word	0xfc6c7900
 8001830:	026259ff 	.word	0x026259ff
 8001834:	fa0a1f00 	.word	0xfa0a1f00
 8001838:	02faf07f 	.word	0x02faf07f

0800183c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800183c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001840:	2b01      	cmp	r3, #1
{  
 8001842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001844:	4605      	mov	r5, r0
 8001846:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 800184a:	d033      	beq.n	80018b4 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 800184c:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800184e:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8001850:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8001854:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8001856:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001858:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800185a:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 800185c:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001860:	f042 0208 	orr.w	r2, r2, #8
 8001864:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800186a:	f7fe ff1b 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800186e:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001870:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8001876:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f042 0204 	orr.w	r2, r2, #4
 800187e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001884:	f7fe ff0e 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001888:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 800188a:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800188c:	9a00      	ldr	r2, [sp, #0]
 800188e:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8001890:	f7ff fcad 	bl	80011ee <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001894:	682a      	ldr	r2, [r5, #0]
 8001896:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 800189a:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800189c:	58d1      	ldr	r1, [r2, r3]
 800189e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80018a2:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80018a4:	58d1      	ldr	r1, [r2, r3]
 80018a6:	f041 0102 	orr.w	r1, r1, #2
 80018aa:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80018ac:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80018b0:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 80018b4:	b002      	add	sp, #8
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018bc:	680b      	ldr	r3, [r1, #0]
{
 80018be:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a84 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c8:	4a6c      	ldr	r2, [pc, #432]	; (8001a7c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018ca:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001a88 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80018ce:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80018d4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80018dc:	45b6      	cmp	lr, r6
 80018de:	f040 80b3 	bne.w	8001a48 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e2:	684c      	ldr	r4, [r1, #4]
 80018e4:	f024 0710 	bic.w	r7, r4, #16
 80018e8:	2f02      	cmp	r7, #2
 80018ea:	d116      	bne.n	800191a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80018ec:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018f0:	f003 0b07 	and.w	fp, r3, #7
 80018f4:	f04f 0c0f 	mov.w	ip, #15
 80018f8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80018fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001900:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001904:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001908:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800190c:	690d      	ldr	r5, [r1, #16]
 800190e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001912:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001916:	f8ca 5020 	str.w	r5, [sl, #32]
 800191a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800191e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001920:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001924:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001928:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800192e:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001932:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001934:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001936:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800193a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800193e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001942:	d811      	bhi.n	8001968 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001944:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001946:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800194a:	68cf      	ldr	r7, [r1, #12]
 800194c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001950:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001954:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001956:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001958:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800195c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001960:	409f      	lsls	r7, r3
 8001962:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001966:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001968:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800196a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800196c:	688f      	ldr	r7, [r1, #8]
 800196e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001972:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001974:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001976:	00e5      	lsls	r5, r4, #3
 8001978:	d566      	bpl.n	8001a48 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800197e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001982:	f003 0e03 	and.w	lr, r3, #3
 8001986:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800198e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001992:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 800199a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800199e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80019a2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80019a6:	9503      	str	r5, [sp, #12]
 80019a8:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019aa:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80019ae:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019b2:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019b6:	4d32      	ldr	r5, [pc, #200]	; (8001a80 <HAL_GPIO_Init+0x1c8>)
 80019b8:	42a8      	cmp	r0, r5
 80019ba:	d04c      	beq.n	8001a56 <HAL_GPIO_Init+0x19e>
 80019bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019c0:	42a8      	cmp	r0, r5
 80019c2:	d04a      	beq.n	8001a5a <HAL_GPIO_Init+0x1a2>
 80019c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019c8:	42a8      	cmp	r0, r5
 80019ca:	d048      	beq.n	8001a5e <HAL_GPIO_Init+0x1a6>
 80019cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019d0:	42a8      	cmp	r0, r5
 80019d2:	d046      	beq.n	8001a62 <HAL_GPIO_Init+0x1aa>
 80019d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019d8:	42a8      	cmp	r0, r5
 80019da:	d044      	beq.n	8001a66 <HAL_GPIO_Init+0x1ae>
 80019dc:	4548      	cmp	r0, r9
 80019de:	d044      	beq.n	8001a6a <HAL_GPIO_Init+0x1b2>
 80019e0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80019e4:	42a8      	cmp	r0, r5
 80019e6:	d042      	beq.n	8001a6e <HAL_GPIO_Init+0x1b6>
 80019e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ec:	42a8      	cmp	r0, r5
 80019ee:	d040      	beq.n	8001a72 <HAL_GPIO_Init+0x1ba>
 80019f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019f4:	42a8      	cmp	r0, r5
 80019f6:	d03e      	beq.n	8001a76 <HAL_GPIO_Init+0x1be>
 80019f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019fc:	42a8      	cmp	r0, r5
 80019fe:	bf14      	ite	ne
 8001a00:	250a      	movne	r5, #10
 8001a02:	2509      	moveq	r5, #9
 8001a04:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a08:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a0c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a10:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8001a16:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	bf0c      	ite	eq
 8001a1a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a1c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001a22:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001a24:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	bf0c      	ite	eq
 8001a28:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a2a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001a30:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001a32:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	bf0c      	ite	eq
 8001a36:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a38:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001a3c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001a3e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	bf54      	ite	pl
 8001a42:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001a44:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001a46:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a48:	3301      	adds	r3, #1
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	f47f af3f 	bne.w	80018ce <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001a50:	b005      	add	sp, #20
 8001a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a56:	2500      	movs	r5, #0
 8001a58:	e7d4      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a5a:	2501      	movs	r5, #1
 8001a5c:	e7d2      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a5e:	2502      	movs	r5, #2
 8001a60:	e7d0      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a62:	2503      	movs	r5, #3
 8001a64:	e7ce      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a66:	2504      	movs	r5, #4
 8001a68:	e7cc      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a6a:	2505      	movs	r5, #5
 8001a6c:	e7ca      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a6e:	2506      	movs	r5, #6
 8001a70:	e7c8      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a72:	2507      	movs	r5, #7
 8001a74:	e7c6      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a76:	2508      	movs	r5, #8
 8001a78:	e7c4      	b.n	8001a04 <HAL_GPIO_Init+0x14c>
 8001a7a:	bf00      	nop
 8001a7c:	40013c00 	.word	0x40013c00
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40021400 	.word	0x40021400

08001a8c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a8c:	6903      	ldr	r3, [r0, #16]
 8001a8e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001a90:	bf14      	ite	ne
 8001a92:	2001      	movne	r0, #1
 8001a94:	2000      	moveq	r0, #0
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	b10a      	cbz	r2, 8001a9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a9a:	6181      	str	r1, [r0, #24]
 8001a9c:	4770      	bx	lr
 8001a9e:	0409      	lsls	r1, r1, #16
 8001aa0:	e7fb      	b.n	8001a9a <HAL_GPIO_WritePin+0x2>

08001aa2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001aa2:	6943      	ldr	r3, [r0, #20]
 8001aa4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001aa8:	bf08      	it	eq
 8001aaa:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aac:	6181      	str	r1, [r0, #24]
 8001aae:	4770      	bx	lr

08001ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d04a      	beq.n	8001b4e <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001abc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ac0:	b91b      	cbnz	r3, 8001aca <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ac2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ac6:	f009 fac3 	bl	800b050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aca:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001acc:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ace:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad2:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ade:	6862      	ldr	r2, [r4, #4]
 8001ae0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001af0:	d124      	bne.n	8001b3c <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001af8:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afa:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001afc:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001afe:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b06:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b10:	6922      	ldr	r2, [r4, #16]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	69a1      	ldr	r1, [r4, #24]
 8001b16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b1a:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b1c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b1e:	69e2      	ldr	r2, [r4, #28]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b34:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b36:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001b3a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b40:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b42:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b44:	d1d8      	bne.n	8001af8 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	e7d4      	b.n	8001af8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
}
 8001b50:	bd10      	pop	{r4, pc}

08001b52 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b52:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	2a20      	cmp	r2, #32
{
 8001b5a:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5c:	d11d      	bne.n	8001b9a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d019      	beq.n	8001b9a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b66:	2324      	movs	r3, #36	; 0x24
 8001b68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b6c:	6803      	ldr	r3, [r0, #0]
 8001b6e:	681c      	ldr	r4, [r3, #0]
 8001b70:	f024 0401 	bic.w	r4, r4, #1
 8001b74:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b76:	681c      	ldr	r4, [r3, #0]
 8001b78:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001b7c:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b7e:	681c      	ldr	r4, [r3, #0]
 8001b80:	4321      	orrs	r1, r4
 8001b82:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	f041 0101 	orr.w	r1, r1, #1
 8001b8a:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001b92:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001b9a:	2002      	movs	r0, #2
  }
}
 8001b9c:	bd10      	pop	{r4, pc}

08001b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b9e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001ba4:	b2e4      	uxtb	r4, r4
 8001ba6:	2c20      	cmp	r4, #32
 8001ba8:	d11c      	bne.n	8001be4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001baa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d018      	beq.n	8001be4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb2:	2324      	movs	r3, #36	; 0x24
 8001bb4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bb8:	6803      	ldr	r3, [r0, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bc2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bc4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bc8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bcc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001bdc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2002      	movs	r0, #2
  }
}
 8001be6:	bd10      	pop	{r4, pc}

08001be8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bee:	4c19      	ldr	r4, [pc, #100]	; (8001c54 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c06:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c08:	f7fe fd46 	bl	8000698 <HAL_GetTick>
 8001c0c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	03da      	lsls	r2, r3, #15
 8001c12:	d50c      	bpl.n	8001c2e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c1c:	f7fe fd3c 	bl	8000698 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c20:	4c0c      	ldr	r4, [pc, #48]	; (8001c54 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8001c22:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	039b      	lsls	r3, r3, #14
 8001c28:	d50a      	bpl.n	8001c40 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	e006      	b.n	8001c3c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c2e:	f7fe fd33 	bl	8000698 <HAL_GetTick>
 8001c32:	1b40      	subs	r0, r0, r5
 8001c34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c38:	d9e9      	bls.n	8001c0e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001c3a:	2003      	movs	r0, #3
}
 8001c3c:	b003      	add	sp, #12
 8001c3e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c40:	f7fe fd2a 	bl	8000698 <HAL_GetTick>
 8001c44:	1b40      	subs	r0, r0, r5
 8001c46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c4a:	d9eb      	bls.n	8001c24 <HAL_PWREx_EnableOverDrive+0x3c>
 8001c4c:	e7f5      	b.n	8001c3a <HAL_PWREx_EnableOverDrive+0x52>
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	b918      	cbnz	r0, 8001c68 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001c60:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001c62:	b002      	add	sp, #8
 8001c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c68:	6803      	ldr	r3, [r0, #0]
 8001c6a:	07d8      	lsls	r0, r3, #31
 8001c6c:	d410      	bmi.n	8001c90 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	0799      	lsls	r1, r3, #30
 8001c72:	d45e      	bmi.n	8001d32 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	0719      	lsls	r1, r3, #28
 8001c78:	f100 80a3 	bmi.w	8001dc2 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	075a      	lsls	r2, r3, #29
 8001c80:	f100 80c4 	bmi.w	8001e0c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c84:	69a2      	ldr	r2, [r4, #24]
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	f040 812e 	bne.w	8001ee8 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e7e8      	b.n	8001c62 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c90:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	f002 020c 	and.w	r2, r2, #12
 8001c98:	2a04      	cmp	r2, #4
 8001c9a:	d007      	beq.n	8001cac <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	f002 020c 	and.w	r2, r2, #12
 8001ca2:	2a08      	cmp	r2, #8
 8001ca4:	d10a      	bne.n	8001cbc <HAL_RCC_OscConfig+0x64>
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	025a      	lsls	r2, r3, #9
 8001caa:	d507      	bpl.n	8001cbc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	4b8c      	ldr	r3, [pc, #560]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	039b      	lsls	r3, r3, #14
 8001cb2:	d5dc      	bpl.n	8001c6e <HAL_RCC_OscConfig+0x16>
 8001cb4:	6863      	ldr	r3, [r4, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1d9      	bne.n	8001c6e <HAL_RCC_OscConfig+0x16>
 8001cba:	e7d1      	b.n	8001c60 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	4d88      	ldr	r5, [pc, #544]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d111      	bne.n	8001cea <HAL_RCC_OscConfig+0x92>
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cce:	f7fe fce3 	bl	8000698 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4d83      	ldr	r5, [pc, #524]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001cd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	682b      	ldr	r3, [r5, #0]
 8001cd8:	039f      	lsls	r7, r3, #14
 8001cda:	d4c8      	bmi.n	8001c6e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7fe fcdc 	bl	8000698 <HAL_GetTick>
 8001ce0:	1b80      	subs	r0, r0, r6
 8001ce2:	2864      	cmp	r0, #100	; 0x64
 8001ce4:	d9f7      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	e7bb      	b.n	8001c62 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	b99b      	cbnz	r3, 8001d14 <HAL_RCC_OscConfig+0xbc>
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	602b      	str	r3, [r5, #0]
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fccc 	bl	8000698 <HAL_GetTick>
 8001d00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	0398      	lsls	r0, r3, #14
 8001d06:	d5b2      	bpl.n	8001c6e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7fe fcc6 	bl	8000698 <HAL_GetTick>
 8001d0c:	1b80      	subs	r0, r0, r6
 8001d0e:	2864      	cmp	r0, #100	; 0x64
 8001d10:	d9f7      	bls.n	8001d02 <HAL_RCC_OscConfig+0xaa>
 8001d12:	e7e8      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	d103      	bne.n	8001d24 <HAL_RCC_OscConfig+0xcc>
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	602b      	str	r3, [r5, #0]
 8001d22:	e7d0      	b.n	8001cc6 <HAL_RCC_OscConfig+0x6e>
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d28:	602b      	str	r3, [r5, #0]
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d30:	e7cc      	b.n	8001ccc <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d32:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	f012 0f0c 	tst.w	r2, #12
 8001d3a:	d007      	beq.n	8001d4c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	f002 020c 	and.w	r2, r2, #12
 8001d42:	2a08      	cmp	r2, #8
 8001d44:	d111      	bne.n	8001d6a <HAL_RCC_OscConfig+0x112>
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0259      	lsls	r1, r3, #9
 8001d4a:	d40e      	bmi.n	8001d6a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4c:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	0792      	lsls	r2, r2, #30
 8001d52:	d502      	bpl.n	8001d5a <HAL_RCC_OscConfig+0x102>
 8001d54:	68e2      	ldr	r2, [r4, #12]
 8001d56:	2a01      	cmp	r2, #1
 8001d58:	d182      	bne.n	8001c60 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	6921      	ldr	r1, [r4, #16]
 8001d5e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001d62:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001d66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d68:	e784      	b.n	8001c74 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d6a:	68e3      	ldr	r3, [r4, #12]
 8001d6c:	4d5c      	ldr	r5, [pc, #368]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	b1bb      	cbz	r3, 8001da0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d78:	f7fe fc8e 	bl	8000698 <HAL_GetTick>
 8001d7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	079f      	lsls	r7, r3, #30
 8001d82:	d507      	bpl.n	8001d94 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	6922      	ldr	r2, [r4, #16]
 8001d88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d90:	602b      	str	r3, [r5, #0]
 8001d92:	e76f      	b.n	8001c74 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d94:	f7fe fc80 	bl	8000698 <HAL_GetTick>
 8001d98:	1b80      	subs	r0, r0, r6
 8001d9a:	2802      	cmp	r0, #2
 8001d9c:	d9ef      	bls.n	8001d7e <HAL_RCC_OscConfig+0x126>
 8001d9e:	e7a2      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001da0:	682b      	ldr	r3, [r5, #0]
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001da8:	f7fe fc76 	bl	8000698 <HAL_GetTick>
 8001dac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	682b      	ldr	r3, [r5, #0]
 8001db0:	0798      	lsls	r0, r3, #30
 8001db2:	f57f af5f 	bpl.w	8001c74 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db6:	f7fe fc6f 	bl	8000698 <HAL_GetTick>
 8001dba:	1b80      	subs	r0, r0, r6
 8001dbc:	2802      	cmp	r0, #2
 8001dbe:	d9f6      	bls.n	8001dae <HAL_RCC_OscConfig+0x156>
 8001dc0:	e791      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dc2:	6963      	ldr	r3, [r4, #20]
 8001dc4:	4d46      	ldr	r5, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001dc6:	b183      	cbz	r3, 8001dea <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001dc8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001dd0:	f7fe fc62 	bl	8000698 <HAL_GetTick>
 8001dd4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001dd8:	079b      	lsls	r3, r3, #30
 8001dda:	f53f af4f 	bmi.w	8001c7c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7fe fc5b 	bl	8000698 <HAL_GetTick>
 8001de2:	1b80      	subs	r0, r0, r6
 8001de4:	2802      	cmp	r0, #2
 8001de6:	d9f6      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x17e>
 8001de8:	e77d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001dea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001df2:	f7fe fc51 	bl	8000698 <HAL_GetTick>
 8001df6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001dfa:	079f      	lsls	r7, r3, #30
 8001dfc:	f57f af3e 	bpl.w	8001c7c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e00:	f7fe fc4a 	bl	8000698 <HAL_GetTick>
 8001e04:	1b80      	subs	r0, r0, r6
 8001e06:	2802      	cmp	r0, #2
 8001e08:	d9f6      	bls.n	8001df8 <HAL_RCC_OscConfig+0x1a0>
 8001e0a:	e76c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e10:	00d0      	lsls	r0, r2, #3
 8001e12:	d427      	bmi.n	8001e64 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001e16:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e28:	4d2e      	ldr	r5, [pc, #184]	; (8001ee4 <HAL_RCC_OscConfig+0x28c>)
 8001e2a:	682b      	ldr	r3, [r5, #0]
 8001e2c:	05d9      	lsls	r1, r3, #23
 8001e2e:	d51b      	bpl.n	8001e68 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	68a3      	ldr	r3, [r4, #8]
 8001e32:	4d2b      	ldr	r5, [pc, #172]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d127      	bne.n	8001e88 <HAL_RCC_OscConfig+0x230>
 8001e38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e44:	f7fe fc28 	bl	8000698 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	4f25      	ldr	r7, [pc, #148]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001e4a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e4e:	079b      	lsls	r3, r3, #30
 8001e50:	d53f      	bpl.n	8001ed2 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8001e52:	2e00      	cmp	r6, #0
 8001e54:	f43f af16 	beq.w	8001c84 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <HAL_RCC_OscConfig+0x288>)
 8001e5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	e70f      	b.n	8001c84 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001e64:	2600      	movs	r6, #0
 8001e66:	e7df      	b.n	8001e28 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001e70:	f7fe fc12 	bl	8000698 <HAL_GetTick>
 8001e74:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	682b      	ldr	r3, [r5, #0]
 8001e78:	05da      	lsls	r2, r3, #23
 8001e7a:	d4d9      	bmi.n	8001e30 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e7c:	f7fe fc0c 	bl	8000698 <HAL_GetTick>
 8001e80:	1bc0      	subs	r0, r0, r7
 8001e82:	2864      	cmp	r0, #100	; 0x64
 8001e84:	d9f7      	bls.n	8001e76 <HAL_RCC_OscConfig+0x21e>
 8001e86:	e72e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e88:	b9ab      	cbnz	r3, 8001eb6 <HAL_RCC_OscConfig+0x25e>
 8001e8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	672b      	str	r3, [r5, #112]	; 0x70
 8001e96:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fbfb 	bl	8000698 <HAL_GetTick>
 8001ea2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ea6:	0798      	lsls	r0, r3, #30
 8001ea8:	d5d3      	bpl.n	8001e52 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7fe fbf5 	bl	8000698 <HAL_GetTick>
 8001eae:	1bc0      	subs	r0, r0, r7
 8001eb0:	4540      	cmp	r0, r8
 8001eb2:	d9f7      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x24c>
 8001eb4:	e717      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001eba:	d103      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x26c>
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	672b      	str	r3, [r5, #112]	; 0x70
 8001ec2:	e7b9      	b.n	8001e38 <HAL_RCC_OscConfig+0x1e0>
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	672b      	str	r3, [r5, #112]	; 0x70
 8001eca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	e7b5      	b.n	8001e3e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe fbe1 	bl	8000698 <HAL_GetTick>
 8001ed6:	eba0 0008 	sub.w	r0, r0, r8
 8001eda:	42a8      	cmp	r0, r5
 8001edc:	d9b6      	bls.n	8001e4c <HAL_RCC_OscConfig+0x1f4>
 8001ede:	e702      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4d24      	ldr	r5, [pc, #144]	; (8001f7c <HAL_RCC_OscConfig+0x324>)
 8001eea:	68ab      	ldr	r3, [r5, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	f43f aeb5 	beq.w	8001c60 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001efe:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f00:	d12f      	bne.n	8001f62 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8001f02:	f7fe fbc9 	bl	8000698 <HAL_GetTick>
 8001f06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f08:	682b      	ldr	r3, [r5, #0]
 8001f0a:	0199      	lsls	r1, r3, #6
 8001f0c:	d423      	bmi.n	8001f56 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0e:	6a22      	ldr	r2, [r4, #32]
 8001f10:	69e3      	ldr	r3, [r4, #28]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f22:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001f26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f28:	4c14      	ldr	r4, [pc, #80]	; (8001f7c <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2a:	0852      	lsrs	r2, r2, #1
 8001f2c:	3a01      	subs	r2, #1
 8001f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f32:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f34:	682b      	ldr	r3, [r5, #0]
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fbac 	bl	8000698 <HAL_GetTick>
 8001f40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	019a      	lsls	r2, r3, #6
 8001f46:	f53f aea1 	bmi.w	8001c8c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe fba5 	bl	8000698 <HAL_GetTick>
 8001f4e:	1b40      	subs	r0, r0, r5
 8001f50:	2802      	cmp	r0, #2
 8001f52:	d9f6      	bls.n	8001f42 <HAL_RCC_OscConfig+0x2ea>
 8001f54:	e6c7      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f56:	f7fe fb9f 	bl	8000698 <HAL_GetTick>
 8001f5a:	1b80      	subs	r0, r0, r6
 8001f5c:	2802      	cmp	r0, #2
 8001f5e:	d9d3      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2b0>
 8001f60:	e6c1      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001f62:	f7fe fb99 	bl	8000698 <HAL_GetTick>
 8001f66:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	019b      	lsls	r3, r3, #6
 8001f6c:	f57f ae8e 	bpl.w	8001c8c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fb92 	bl	8000698 <HAL_GetTick>
 8001f74:	1b00      	subs	r0, r0, r4
 8001f76:	2802      	cmp	r0, #2
 8001f78:	d9f6      	bls.n	8001f68 <HAL_RCC_OscConfig+0x310>
 8001f7a:	e6b4      	b.n	8001ce6 <HAL_RCC_OscConfig+0x8e>
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f80:	4910      	ldr	r1, [pc, #64]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8001f82:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f84:	688b      	ldr	r3, [r1, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d118      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f8e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f90:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f92:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001f9c:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x48>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001fa2:	bf18      	it	ne
 8001fa4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa6:	fba1 0100 	umull	r0, r1, r1, r0
 8001faa:	f7fe f9b1 	bl	8000310 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x44>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001fba:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fbe:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001fc0:	4801      	ldr	r0, [pc, #4]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001fc2:	bd08      	pop	{r3, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400

08001fcc <HAL_RCC_ClockConfig>:
{
 8001fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	b910      	cbnz	r0, 8001fdc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4a46      	ldr	r2, [pc, #280]	; (80020f8 <HAL_RCC_ClockConfig+0x12c>)
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	428b      	cmp	r3, r1
 8001fe6:	d328      	bcc.n	800203a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe8:	6821      	ldr	r1, [r4, #0]
 8001fea:	078f      	lsls	r7, r1, #30
 8001fec:	d430      	bmi.n	8002050 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	07c8      	lsls	r0, r1, #31
 8001ff0:	d443      	bmi.n	800207a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff2:	4a41      	ldr	r2, [pc, #260]	; (80020f8 <HAL_RCC_ClockConfig+0x12c>)
 8001ff4:	6813      	ldr	r3, [r2, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	d367      	bcc.n	80020ce <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	0751      	lsls	r1, r2, #29
 8002002:	d470      	bmi.n	80020e6 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	0713      	lsls	r3, r2, #28
 8002006:	d507      	bpl.n	8002018 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002008:	4a3c      	ldr	r2, [pc, #240]	; (80020fc <HAL_RCC_ClockConfig+0x130>)
 800200a:	6921      	ldr	r1, [r4, #16]
 800200c:	6893      	ldr	r3, [r2, #8]
 800200e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002012:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002016:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002018:	f7ff ffb2 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_RCC_ClockConfig+0x130>)
 800201e:	4a38      	ldr	r2, [pc, #224]	; (8002100 <HAL_RCC_ClockConfig+0x134>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	40d8      	lsrs	r0, r3
 800202a:	4b36      	ldr	r3, [pc, #216]	; (8002104 <HAL_RCC_ClockConfig+0x138>)
 800202c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800202e:	2000      	movs	r0, #0
 8002030:	f7fe faf6 	bl	8000620 <HAL_InitTick>
  return HAL_OK;
 8002034:	2000      	movs	r0, #0
 8002036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	6813      	ldr	r3, [r2, #0]
 800203c:	f023 030f 	bic.w	r3, r3, #15
 8002040:	430b      	orrs	r3, r1
 8002042:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002044:	6813      	ldr	r3, [r2, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4299      	cmp	r1, r3
 800204c:	d1c3      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xa>
 800204e:	e7cb      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	f011 0f04 	tst.w	r1, #4
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_RCC_ClockConfig+0x130>)
 8002056:	d003      	beq.n	8002060 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800205e:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002060:	070e      	lsls	r6, r1, #28
 8002062:	d503      	bpl.n	800206c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800206a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	68a0      	ldr	r0, [r4, #8]
 8002070:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002074:	4302      	orrs	r2, r0
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e7b9      	b.n	8001fee <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	6861      	ldr	r1, [r4, #4]
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_RCC_ClockConfig+0x130>)
 800207e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002080:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002082:	d11c      	bne.n	80020be <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002084:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	d0a5      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002090:	4e1a      	ldr	r6, [pc, #104]	; (80020fc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	f022 0203 	bic.w	r2, r2, #3
 8002096:	430a      	orrs	r2, r1
 8002098:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800209a:	f7fe fafd 	bl	8000698 <HAL_GetTick>
 800209e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a0:	68b3      	ldr	r3, [r6, #8]
 80020a2:	6862      	ldr	r2, [r4, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020ac:	d0a1      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ae:	f7fe faf3 	bl	8000698 <HAL_GetTick>
 80020b2:	1bc0      	subs	r0, r0, r7
 80020b4:	4540      	cmp	r0, r8
 80020b6:	d9f3      	bls.n	80020a0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80020b8:	2003      	movs	r0, #3
}
 80020ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020be:	2902      	cmp	r1, #2
 80020c0:	d102      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80020c6:	e7df      	b.n	8002088 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	f012 0f02 	tst.w	r2, #2
 80020cc:	e7dc      	b.n	8002088 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	f023 030f 	bic.w	r3, r3, #15
 80020d4:	432b      	orrs	r3, r5
 80020d6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	429d      	cmp	r5, r3
 80020e0:	f47f af79 	bne.w	8001fd6 <HAL_RCC_ClockConfig+0xa>
 80020e4:	e78b      	b.n	8001ffe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e6:	4905      	ldr	r1, [pc, #20]	; (80020fc <HAL_RCC_ClockConfig+0x130>)
 80020e8:	68e0      	ldr	r0, [r4, #12]
 80020ea:	688b      	ldr	r3, [r1, #8]
 80020ec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80020f0:	4303      	orrs	r3, r0
 80020f2:	608b      	str	r3, [r1, #8]
 80020f4:	e786      	b.n	8002004 <HAL_RCC_ClockConfig+0x38>
 80020f6:	bf00      	nop
 80020f8:	40023c00 	.word	0x40023c00
 80020fc:	40023800 	.word	0x40023800
 8002100:	0800e50d 	.word	0x0800e50d
 8002104:	2000001c 	.word	0x2000001c

08002108 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002108:	4b01      	ldr	r3, [pc, #4]	; (8002110 <HAL_RCC_GetHCLKFreq+0x8>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000001c 	.word	0x2000001c

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	4a03      	ldr	r2, [pc, #12]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002122:	6810      	ldr	r0, [r2, #0]
}
 8002124:	40d8      	lsrs	r0, r3
 8002126:	4770      	bx	lr
 8002128:	40023800 	.word	0x40023800
 800212c:	0800e51d 	.word	0x0800e51d
 8002130:	2000001c 	.word	0x2000001c

08002134 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	4a03      	ldr	r2, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002142:	6810      	ldr	r0, [r2, #0]
}
 8002144:	40d8      	lsrs	r0, r3
 8002146:	4770      	bx	lr
 8002148:	40023800 	.word	0x40023800
 800214c:	0800e51d 	.word	0x0800e51d
 8002150:	2000001c 	.word	0x2000001c

08002154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002158:	6802      	ldr	r2, [r0, #0]
{
 800215a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800215c:	f012 0601 	ands.w	r6, r2, #1
 8002160:	d00b      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002162:	4bba      	ldr	r3, [pc, #744]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800216a:	6099      	str	r1, [r3, #8]
 800216c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002172:	fab6 f686 	clz	r6, r6
 8002176:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002178:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800217a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800217e:	d012      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002180:	49b2      	ldr	r1, [pc, #712]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002182:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002184:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002188:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800218c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8002190:	bf08      	it	eq
 8002192:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002194:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002198:	bf16      	itet	ne
 800219a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800219e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021a0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021a6:	02d7      	lsls	r7, r2, #11
 80021a8:	d510      	bpl.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021aa:	48a8      	ldr	r0, [pc, #672]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80021ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80021ae:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021b2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021ba:	ea43 0301 	orr.w	r3, r3, r1
 80021be:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021c2:	f000 81a9 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80021c6:	2900      	cmp	r1, #0
 80021c8:	bf08      	it	eq
 80021ca:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80021cc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80021d0:	bf18      	it	ne
 80021d2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021d4:	0690      	lsls	r0, r2, #26
 80021d6:	d531      	bpl.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	4b9c      	ldr	r3, [pc, #624]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021da:	4f9d      	ldr	r7, [pc, #628]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f6:	f7fe fa4f 	bl	8000698 <HAL_GetTick>
 80021fa:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	05d9      	lsls	r1, r3, #23
 8002200:	f140 818c 	bpl.w	800251c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002204:	4f91      	ldr	r7, [pc, #580]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002206:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002208:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800220c:	f040 8191 	bne.w	8002532 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002210:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002212:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002216:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800221a:	4a8c      	ldr	r2, [pc, #560]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800221c:	f040 81af 	bne.w	800257e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002220:	6891      	ldr	r1, [r2, #8]
 8002222:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002226:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800222a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800222e:	4301      	orrs	r1, r0
 8002230:	6091      	str	r1, [r2, #8]
 8002232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002236:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002238:	430b      	orrs	r3, r1
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	06df      	lsls	r7, r3, #27
 8002240:	d50c      	bpl.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002242:	4a82      	ldr	r2, [pc, #520]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002244:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002248:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800224c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002250:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002254:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002256:	4301      	orrs	r1, r0
 8002258:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225c:	0458      	lsls	r0, r3, #17
 800225e:	d508      	bpl.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002260:	497a      	ldr	r1, [pc, #488]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002262:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002264:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002268:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800226c:	4302      	orrs	r2, r0
 800226e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002272:	0419      	lsls	r1, r3, #16
 8002274:	d508      	bpl.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002276:	4975      	ldr	r1, [pc, #468]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002278:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800227a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800227e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002282:	4302      	orrs	r2, r0
 8002284:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002288:	03da      	lsls	r2, r3, #15
 800228a:	d508      	bpl.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800228c:	496f      	ldr	r1, [pc, #444]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800228e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002290:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002294:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002298:	4302      	orrs	r2, r0
 800229a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800229e:	039f      	lsls	r7, r3, #14
 80022a0:	d508      	bpl.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022a2:	496a      	ldr	r1, [pc, #424]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80022a4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80022a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022aa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80022ae:	4302      	orrs	r2, r0
 80022b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b4:	0658      	lsls	r0, r3, #25
 80022b6:	d508      	bpl.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b8:	4964      	ldr	r1, [pc, #400]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80022ba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80022bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022c0:	f022 0203 	bic.w	r2, r2, #3
 80022c4:	4302      	orrs	r2, r0
 80022c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ca:	0619      	lsls	r1, r3, #24
 80022cc:	d508      	bpl.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ce:	495f      	ldr	r1, [pc, #380]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80022d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80022d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022d6:	f022 020c 	bic.w	r2, r2, #12
 80022da:	4302      	orrs	r2, r0
 80022dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e0:	05da      	lsls	r2, r3, #23
 80022e2:	d508      	bpl.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022e4:	4959      	ldr	r1, [pc, #356]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80022e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80022e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022ec:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022f0:	4302      	orrs	r2, r0
 80022f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022f6:	059f      	lsls	r7, r3, #22
 80022f8:	d508      	bpl.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022fa:	4954      	ldr	r1, [pc, #336]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80022fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80022fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002302:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002306:	4302      	orrs	r2, r0
 8002308:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800230c:	0558      	lsls	r0, r3, #21
 800230e:	d508      	bpl.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002310:	494e      	ldr	r1, [pc, #312]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002312:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002314:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002318:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800231c:	4302      	orrs	r2, r0
 800231e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002322:	0519      	lsls	r1, r3, #20
 8002324:	d508      	bpl.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002326:	4949      	ldr	r1, [pc, #292]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800232a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800232e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002332:	4302      	orrs	r2, r0
 8002334:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002338:	04da      	lsls	r2, r3, #19
 800233a:	d508      	bpl.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800233c:	4943      	ldr	r1, [pc, #268]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800233e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002340:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002344:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002348:	4302      	orrs	r2, r0
 800234a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800234e:	049f      	lsls	r7, r3, #18
 8002350:	d508      	bpl.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002352:	493e      	ldr	r1, [pc, #248]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002354:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002356:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800235a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800235e:	4302      	orrs	r2, r0
 8002360:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002364:	0258      	lsls	r0, r3, #9
 8002366:	d508      	bpl.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002368:	4938      	ldr	r1, [pc, #224]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800236a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800236c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002370:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002374:	4302      	orrs	r2, r0
 8002376:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800237a:	0299      	lsls	r1, r3, #10
 800237c:	d50c      	bpl.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800237e:	4833      	ldr	r0, [pc, #204]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002380:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002382:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002386:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800238a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800238e:	bf08      	it	eq
 8002390:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002392:	430a      	orrs	r2, r1
 8002394:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002398:	f013 0f08 	tst.w	r3, #8
 800239c:	bf18      	it	ne
 800239e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023a0:	035a      	lsls	r2, r3, #13
 80023a2:	d508      	bpl.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023a4:	4929      	ldr	r1, [pc, #164]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80023a6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80023a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80023ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023b0:	4302      	orrs	r2, r0
 80023b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023b6:	021f      	lsls	r7, r3, #8
 80023b8:	d509      	bpl.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023ba:	4924      	ldr	r1, [pc, #144]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80023bc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80023c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80023c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80023c8:	4302      	orrs	r2, r0
 80023ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80023ce:	0158      	lsls	r0, r3, #5
 80023d0:	d509      	bpl.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80023d2:	491e      	ldr	r1, [pc, #120]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80023d4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80023d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80023dc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023e0:	4302      	orrs	r2, r0
 80023e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023e6:	0119      	lsls	r1, r3, #4
 80023e8:	d509      	bpl.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ea:	4918      	ldr	r1, [pc, #96]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80023ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80023f0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80023f4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80023f8:	4302      	orrs	r2, r0
 80023fa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023fe:	00da      	lsls	r2, r3, #3
 8002400:	d509      	bpl.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002402:	4912      	ldr	r1, [pc, #72]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002404:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002408:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800240c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002410:	4302      	orrs	r2, r0
 8002412:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002416:	2e01      	cmp	r6, #1
 8002418:	f000 80b5 	beq.w	8002586 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800241c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002420:	f000 80b1 	beq.w	8002586 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002424:	2d01      	cmp	r5, #1
 8002426:	d175      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002428:	4d08      	ldr	r5, [pc, #32]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800242a:	682b      	ldr	r3, [r5, #0]
 800242c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002430:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002432:	f7fe f931 	bl	8000698 <HAL_GetTick>
 8002436:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	009f      	lsls	r7, r3, #2
 800243c:	f100 8127 	bmi.w	800268e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002440:	6821      	ldr	r1, [r4, #0]
 8002442:	030e      	lsls	r6, r1, #12
 8002444:	d506      	bpl.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002446:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002448:	b143      	cbz	r3, 800245c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800244a:	e003      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000
 8002454:	02cd      	lsls	r5, r1, #11
 8002456:	d51d      	bpl.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800245a:	b9db      	cbnz	r3, 8002494 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800245c:	4a93      	ldr	r2, [pc, #588]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800245e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002462:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002466:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800246a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800246e:	4303      	orrs	r3, r0
 8002470:	6960      	ldr	r0, [r4, #20]
 8002472:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002476:	69a0      	ldr	r0, [r4, #24]
 8002478:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002480:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002484:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002486:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800248a:	3801      	subs	r0, #1
 800248c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002490:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002494:	0288      	lsls	r0, r1, #10
 8002496:	d515      	bpl.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8002498:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800249a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800249e:	d111      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024a0:	4a82      	ldr	r2, [pc, #520]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80024a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024a6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024aa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80024ae:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80024b2:	4303      	orrs	r3, r0
 80024b4:	6960      	ldr	r0, [r4, #20]
 80024b6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80024ba:	6a20      	ldr	r0, [r4, #32]
 80024bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024c4:	070a      	lsls	r2, r1, #28
 80024c6:	d519      	bpl.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024c8:	4978      	ldr	r1, [pc, #480]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80024ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024d2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80024d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024da:	4313      	orrs	r3, r2
 80024dc:	6962      	ldr	r2, [r4, #20]
 80024de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024e2:	69e2      	ldr	r2, [r4, #28]
 80024e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024ec:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80024f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024fc:	4c6b      	ldr	r4, [pc, #428]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002506:	f7fe f8c7 	bl	8000698 <HAL_GetTick>
 800250a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	f140 80c4 	bpl.w	800269c <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002514:	2000      	movs	r0, #0
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8002518:	2601      	movs	r6, #1
 800251a:	e657      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251c:	f7fe f8bc 	bl	8000698 <HAL_GetTick>
 8002520:	eba0 0008 	sub.w	r0, r0, r8
 8002524:	2864      	cmp	r0, #100	; 0x64
 8002526:	f67f ae69 	bls.w	80021fc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800252a:	2003      	movs	r0, #3
}
 800252c:	b003      	add	sp, #12
 800252e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002532:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002534:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002538:	4293      	cmp	r3, r2
 800253a:	f43f ae69 	beq.w	8002210 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800253e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002540:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002546:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800254a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800254c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800254e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002552:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002554:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002558:	07da      	lsls	r2, r3, #31
 800255a:	f57f ae59 	bpl.w	8002210 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800255e:	f7fe f89b 	bl	8000698 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002566:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800256a:	079b      	lsls	r3, r3, #30
 800256c:	f53f ae50 	bmi.w	8002210 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe f892 	bl	8000698 <HAL_GetTick>
 8002574:	eba0 0008 	sub.w	r0, r0, r8
 8002578:	4548      	cmp	r0, r9
 800257a:	d9f5      	bls.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800257c:	e7d5      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800257e:	6891      	ldr	r1, [r2, #8]
 8002580:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002584:	e654      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8002586:	4e49      	ldr	r6, [pc, #292]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002588:	6833      	ldr	r3, [r6, #0]
 800258a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800258e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002590:	f7fe f882 	bl	8000698 <HAL_GetTick>
 8002594:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002596:	6833      	ldr	r3, [r6, #0]
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	d472      	bmi.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	07d7      	lsls	r7, r2, #31
 80025a0:	d512      	bpl.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80025a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025a4:	b983      	cbnz	r3, 80025c8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025a6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025aa:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80025b6:	430b      	orrs	r3, r1
 80025b8:	6861      	ldr	r1, [r4, #4]
 80025ba:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80025be:	68a1      	ldr	r1, [r4, #8]
 80025c0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80025c4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025c8:	0316      	lsls	r6, r2, #12
 80025ca:	d503      	bpl.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80025cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d2:	d005      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80025d4:	02d0      	lsls	r0, r2, #11
 80025d6:	d51e      	bpl.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025de:	d11a      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025e0:	4932      	ldr	r1, [pc, #200]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80025e2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025e6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025ee:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80025f2:	4303      	orrs	r3, r0
 80025f4:	6860      	ldr	r0, [r4, #4]
 80025f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80025fa:	68e0      	ldr	r0, [r4, #12]
 80025fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002600:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002604:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800260a:	f020 001f 	bic.w	r0, r0, #31
 800260e:	3b01      	subs	r3, #1
 8002610:	4303      	orrs	r3, r0
 8002612:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002616:	01d1      	lsls	r1, r2, #7
 8002618:	d511      	bpl.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800261a:	4924      	ldr	r1, [pc, #144]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800261c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002620:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002624:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002628:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800262c:	4303      	orrs	r3, r0
 800262e:	6860      	ldr	r0, [r4, #4]
 8002630:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002634:	6920      	ldr	r0, [r4, #16]
 8002636:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800263a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800263e:	0192      	lsls	r2, r2, #6
 8002640:	d50d      	bpl.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002642:	6923      	ldr	r3, [r4, #16]
 8002644:	6862      	ldr	r2, [r4, #4]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800264c:	68e2      	ldr	r2, [r4, #12]
 800264e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002652:	68a2      	ldr	r2, [r4, #8]
 8002654:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800265a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800265e:	4e13      	ldr	r6, [pc, #76]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002660:	6833      	ldr	r3, [r6, #0]
 8002662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002666:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002668:	f7fe f816 	bl	8000698 <HAL_GetTick>
 800266c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800266e:	6833      	ldr	r3, [r6, #0]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	f53f aed7 	bmi.w	8002424 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002676:	f7fe f80f 	bl	8000698 <HAL_GetTick>
 800267a:	1bc0      	subs	r0, r0, r7
 800267c:	2864      	cmp	r0, #100	; 0x64
 800267e:	d9f6      	bls.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002680:	e753      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002682:	f7fe f809 	bl	8000698 <HAL_GetTick>
 8002686:	1bc0      	subs	r0, r0, r7
 8002688:	2864      	cmp	r0, #100	; 0x64
 800268a:	d984      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800268c:	e74d      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800268e:	f7fe f803 	bl	8000698 <HAL_GetTick>
 8002692:	1b80      	subs	r0, r0, r6
 8002694:	2864      	cmp	r0, #100	; 0x64
 8002696:	f67f aecf 	bls.w	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800269a:	e746      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800269c:	f7fd fffc 	bl	8000698 <HAL_GetTick>
 80026a0:	1b40      	subs	r0, r0, r5
 80026a2:	2864      	cmp	r0, #100	; 0x64
 80026a4:	f67f af32 	bls.w	800250c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80026a8:	e73f      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b0:	6a03      	ldr	r3, [r0, #32]
 80026b2:	f023 0301 	bic.w	r3, r3, #1
{
 80026b6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026be:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80026c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026c6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80026ca:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80026ce:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026d0:	688d      	ldr	r5, [r1, #8]
 80026d2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026d4:	4d0e      	ldr	r5, [pc, #56]	; (8002710 <TIM_OC1_SetConfig+0x60>)
 80026d6:	42a8      	cmp	r0, r5
 80026d8:	d002      	beq.n	80026e0 <TIM_OC1_SetConfig+0x30>
 80026da:	4e0e      	ldr	r6, [pc, #56]	; (8002714 <TIM_OC1_SetConfig+0x64>)
 80026dc:	42b0      	cmp	r0, r6
 80026de:	d111      	bne.n	8002704 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026e0:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026e4:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e6:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 80026e8:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ec:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f0:	d002      	beq.n	80026f8 <TIM_OC1_SetConfig+0x48>
 80026f2:	4d08      	ldr	r5, [pc, #32]	; (8002714 <TIM_OC1_SetConfig+0x64>)
 80026f4:	42a8      	cmp	r0, r5
 80026f6:	d105      	bne.n	8002704 <TIM_OC1_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026f8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80026fe:	698e      	ldr	r6, [r1, #24]
 8002700:	4335      	orrs	r5, r6
 8002702:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002704:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002706:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002708:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800270a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270c:	6203      	str	r3, [r0, #32]
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	40010000 	.word	0x40010000
 8002714:	40010400 	.word	0x40010400

08002718 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002718:	6a03      	ldr	r3, [r0, #32]
 800271a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800271e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002720:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002722:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002724:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002726:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800272c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800272e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002732:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002736:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002738:	688d      	ldr	r5, [r1, #8]
 800273a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800273e:	4d11      	ldr	r5, [pc, #68]	; (8002784 <TIM_OC3_SetConfig+0x6c>)
 8002740:	42a8      	cmp	r0, r5
 8002742:	d003      	beq.n	800274c <TIM_OC3_SetConfig+0x34>
 8002744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002748:	42a8      	cmp	r0, r5
 800274a:	d114      	bne.n	8002776 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800274c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800274e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002752:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	4d0b      	ldr	r5, [pc, #44]	; (8002784 <TIM_OC3_SetConfig+0x6c>)
 8002758:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800275a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800275e:	d003      	beq.n	8002768 <TIM_OC3_SetConfig+0x50>
 8002760:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002764:	42a8      	cmp	r0, r5
 8002766:	d106      	bne.n	8002776 <TIM_OC3_SetConfig+0x5e>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002768:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800276a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800276e:	698e      	ldr	r6, [r1, #24]
 8002770:	4335      	orrs	r5, r6
 8002772:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002776:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002778:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800277a:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800277c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277e:	6203      	str	r3, [r0, #32]
 8002780:	bd70      	pop	{r4, r5, r6, pc}
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000

08002788 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002788:	6a03      	ldr	r3, [r0, #32]
 800278a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800278e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002790:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002792:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002794:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002796:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800279c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800279e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027aa:	688d      	ldr	r5, [r1, #8]
 80027ac:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b0:	4d08      	ldr	r5, [pc, #32]	; (80027d4 <TIM_OC4_SetConfig+0x4c>)
 80027b2:	42a8      	cmp	r0, r5
 80027b4:	d003      	beq.n	80027be <TIM_OC4_SetConfig+0x36>
 80027b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027ba:	42a8      	cmp	r0, r5
 80027bc:	d104      	bne.n	80027c8 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027be:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027c2:	694d      	ldr	r5, [r1, #20]
 80027c4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ca:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027cc:	684b      	ldr	r3, [r1, #4]
 80027ce:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d0:	6202      	str	r2, [r0, #32]
 80027d2:	bd30      	pop	{r4, r5, pc}
 80027d4:	40010000 	.word	0x40010000

080027d8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80027d8:	6a03      	ldr	r3, [r0, #32]
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80027de:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80027e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027e6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80027e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80027ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80027f6:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80027f8:	688d      	ldr	r5, [r1, #8]
 80027fa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fe:	4d09      	ldr	r5, [pc, #36]	; (8002824 <TIM_OC5_SetConfig+0x4c>)
 8002800:	42a8      	cmp	r0, r5
 8002802:	d003      	beq.n	800280c <TIM_OC5_SetConfig+0x34>
 8002804:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002808:	42a8      	cmp	r0, r5
 800280a:	d104      	bne.n	8002816 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800280c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002810:	694d      	ldr	r5, [r1, #20]
 8002812:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002816:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002818:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800281a:	684b      	ldr	r3, [r1, #4]
 800281c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281e:	6202      	str	r2, [r0, #32]
 8002820:	bd30      	pop	{r4, r5, pc}
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000

08002828 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002828:	6a03      	ldr	r3, [r0, #32]
 800282a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800282e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002830:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002832:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002834:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002836:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002838:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800283c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800283e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002846:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800284a:	688d      	ldr	r5, [r1, #8]
 800284c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002850:	4d08      	ldr	r5, [pc, #32]	; (8002874 <TIM_OC6_SetConfig+0x4c>)
 8002852:	42a8      	cmp	r0, r5
 8002854:	d003      	beq.n	800285e <TIM_OC6_SetConfig+0x36>
 8002856:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800285a:	42a8      	cmp	r0, r5
 800285c:	d104      	bne.n	8002868 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800285e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002862:	694d      	ldr	r5, [r1, #20]
 8002864:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002868:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800286a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800286c:	684b      	ldr	r3, [r1, #4]
 800286e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002870:	6202      	str	r2, [r0, #32]
 8002872:	bd30      	pop	{r4, r5, pc}
 8002874:	40010000 	.word	0x40010000

08002878 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <HAL_TIM_Base_Start_IT+0x28>)
 8002884:	6899      	ldr	r1, [r3, #8]
 8002886:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	2a06      	cmp	r2, #6
 800288a:	d006      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x22>
 800288c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002890:	d003      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
}
 800289a:	2000      	movs	r0, #0
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	00010007 	.word	0x00010007

080028a4 <HAL_TIM_PWM_MspInit>:
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_OC_DelayElapsedCallback>:
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIM_IC_CaptureCallback>:
 80028a8:	4770      	bx	lr

080028aa <HAL_TIM_PWM_PulseFinishedCallback>:
 80028aa:	4770      	bx	lr

080028ac <HAL_TIM_TriggerCallback>:
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028ae:	6803      	ldr	r3, [r0, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	0791      	lsls	r1, r2, #30
{
 80028b4:	b510      	push	{r4, lr}
 80028b6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b8:	d50f      	bpl.n	80028da <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	0792      	lsls	r2, r2, #30
 80028be:	d50c      	bpl.n	80028da <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028c0:	f06f 0202 	mvn.w	r2, #2
 80028c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c6:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ca:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028cc:	0799      	lsls	r1, r3, #30
 80028ce:	f000 8085 	beq.w	80029dc <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	f7ff ffe9 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	2300      	movs	r3, #0
 80028d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	0752      	lsls	r2, r2, #29
 80028e0:	d510      	bpl.n	8002904 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	0750      	lsls	r0, r2, #29
 80028e6:	d50d      	bpl.n	8002904 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028e8:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80028ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f0:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80028fa:	d075      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80028fc:	f7ff ffd4 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002900:	2300      	movs	r3, #0
 8002902:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	0711      	lsls	r1, r2, #28
 800290a:	d50f      	bpl.n	800292c <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	0712      	lsls	r2, r2, #28
 8002910:	d50c      	bpl.n	800292c <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002912:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002920:	079b      	lsls	r3, r3, #30
 8002922:	d067      	beq.n	80029f4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002924:	f7ff ffc0 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002928:	2300      	movs	r3, #0
 800292a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	06d0      	lsls	r0, r2, #27
 8002932:	d510      	bpl.n	8002956 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	06d1      	lsls	r1, r2, #27
 8002938:	d50d      	bpl.n	8002956 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800293a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002942:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002944:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002946:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002948:	f413 7f40 	tst.w	r3, #768	; 0x300
 800294c:	d058      	beq.n	8002a00 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	f7ff ffab 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	2300      	movs	r3, #0
 8002954:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	07d2      	lsls	r2, r2, #31
 800295c:	d508      	bpl.n	8002970 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	07d0      	lsls	r0, r2, #31
 8002962:	d505      	bpl.n	8002970 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002964:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002968:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800296a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800296c:	f007 fe52 	bl	800a614 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	0611      	lsls	r1, r2, #24
 8002976:	d508      	bpl.n	800298a <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	0612      	lsls	r2, r2, #24
 800297c:	d505      	bpl.n	800298a <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800297e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002982:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002984:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002986:	f000 fa9a 	bl	8002ebe <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	05d0      	lsls	r0, r2, #23
 8002990:	d508      	bpl.n	80029a4 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	0611      	lsls	r1, r2, #24
 8002996:	d505      	bpl.n	80029a4 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002998:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800299c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800299e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80029a0:	f000 fa8e 	bl	8002ec0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	0652      	lsls	r2, r2, #25
 80029aa:	d508      	bpl.n	80029be <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	0650      	lsls	r0, r2, #25
 80029b0:	d505      	bpl.n	80029be <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80029b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80029ba:	f7ff ff77 	bl	80028ac <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	0691      	lsls	r1, r2, #26
 80029c4:	d522      	bpl.n	8002a0c <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	0692      	lsls	r2, r2, #26
 80029ca:	d51f      	bpl.n	8002a0c <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029cc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80029d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029d2:	611a      	str	r2, [r3, #16]
}
 80029d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80029d8:	f000 ba70 	b.w	8002ebc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029dc:	f7ff ff63 	bl	80028a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7ff ff62 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
 80029e6:	e776      	b.n	80028d6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e8:	f7ff ff5d 	bl	80028a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7ff ff5c 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
 80029f2:	e785      	b.n	8002900 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f4:	f7ff ff57 	bl	80028a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7ff ff56 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
 80029fe:	e793      	b.n	8002928 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a00:	f7ff ff51 	bl	80028a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff ff50 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
 8002a0a:	e7a2      	b.n	8002952 <HAL_TIM_IRQHandler+0xa4>
 8002a0c:	bd10      	pop	{r4, pc}
	...

08002a10 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	4a30      	ldr	r2, [pc, #192]	; (8002ad4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002a12:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a14:	4290      	cmp	r0, r2
 8002a16:	d012      	beq.n	8002a3e <TIM_Base_SetConfig+0x2e>
 8002a18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a1c:	d00f      	beq.n	8002a3e <TIM_Base_SetConfig+0x2e>
 8002a1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a22:	4290      	cmp	r0, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0x2e>
 8002a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a2a:	4290      	cmp	r0, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0x2e>
 8002a2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a32:	4290      	cmp	r0, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0x2e>
 8002a36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a3a:	4290      	cmp	r0, r2
 8002a3c:	d119      	bne.n	8002a72 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8002a3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a44:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a46:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <TIM_Base_SetConfig+0xc4>)
 8002a48:	4290      	cmp	r0, r2
 8002a4a:	d029      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a50:	d026      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a56:	4290      	cmp	r0, r2
 8002a58:	d022      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a5e:	4290      	cmp	r0, r2
 8002a60:	d01e      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a66:	4290      	cmp	r0, r2
 8002a68:	d01a      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a6e:	4290      	cmp	r0, r2
 8002a70:	d016      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a72:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <TIM_Base_SetConfig+0xc8>)
 8002a74:	4290      	cmp	r0, r2
 8002a76:	d013      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a7c:	4290      	cmp	r0, r2
 8002a7e:	d00f      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a84:	4290      	cmp	r0, r2
 8002a86:	d00b      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a88:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002a8c:	4290      	cmp	r0, r2
 8002a8e:	d007      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a94:	4290      	cmp	r0, r2
 8002a96:	d003      	beq.n	8002aa0 <TIM_Base_SetConfig+0x90>
 8002a98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a9c:	4290      	cmp	r0, r2
 8002a9e:	d103      	bne.n	8002aa8 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aa4:	68ca      	ldr	r2, [r1, #12]
 8002aa6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa8:	694a      	ldr	r2, [r1, #20]
 8002aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ab0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab2:	688b      	ldr	r3, [r1, #8]
 8002ab4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ab6:	680b      	ldr	r3, [r1, #0]
 8002ab8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <TIM_Base_SetConfig+0xc4>)
 8002abc:	4298      	cmp	r0, r3
 8002abe:	d003      	beq.n	8002ac8 <TIM_Base_SetConfig+0xb8>
 8002ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ac4:	4298      	cmp	r0, r3
 8002ac6:	d101      	bne.n	8002acc <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac8:	690b      	ldr	r3, [r1, #16]
 8002aca:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002acc:	2301      	movs	r3, #1
 8002ace:	6143      	str	r3, [r0, #20]
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40014000 	.word	0x40014000

08002adc <HAL_TIM_Base_Init>:
{
 8002adc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002ade:	4604      	mov	r4, r0
 8002ae0:	b1a0      	cbz	r0, 8002b0c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ae6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002aea:	b91b      	cbnz	r3, 8002af4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002aec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002af0:	f008 fae4 	bl	800b0bc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af6:	6820      	ldr	r0, [r4, #0]
 8002af8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002afa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afe:	f7ff ff87 	bl	8002a10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	2301      	movs	r3, #1
  return HAL_OK;
 8002b04:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002b06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002b0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b0c:	2001      	movs	r0, #1
}
 8002b0e:	bd10      	pop	{r4, pc}

08002b10 <HAL_TIM_PWM_Init>:
{
 8002b10:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002b12:	4604      	mov	r4, r0
 8002b14:	b1a0      	cbz	r0, 8002b40 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b1e:	b91b      	cbnz	r3, 8002b28 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002b20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002b24:	f7ff febe 	bl	80028a4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b32:	f7ff ff6d 	bl	8002a10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002b36:	2301      	movs	r3, #1
  return HAL_OK;
 8002b38:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002b3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002b3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b40:	2001      	movs	r0, #1
}
 8002b42:	bd10      	pop	{r4, pc}

08002b44 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b44:	6a03      	ldr	r3, [r0, #32]
 8002b46:	f023 0310 	bic.w	r3, r3, #16
{
 8002b4a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b4e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002b50:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b52:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002b54:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b5a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002b5e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b62:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b66:	688d      	ldr	r5, [r1, #8]
 8002b68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b6c:	4d10      	ldr	r5, [pc, #64]	; (8002bb0 <TIM_OC2_SetConfig+0x6c>)
 8002b6e:	42a8      	cmp	r0, r5
 8002b70:	d003      	beq.n	8002b7a <TIM_OC2_SetConfig+0x36>
 8002b72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b76:	42a8      	cmp	r0, r5
 8002b78:	d114      	bne.n	8002ba4 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b7a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	4d0a      	ldr	r5, [pc, #40]	; (8002bb0 <TIM_OC2_SetConfig+0x6c>)
 8002b86:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8c:	d003      	beq.n	8002b96 <TIM_OC2_SetConfig+0x52>
 8002b8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b92:	42a8      	cmp	r0, r5
 8002b94:	d106      	bne.n	8002ba4 <TIM_OC2_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b96:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b9c:	698e      	ldr	r6, [r1, #24]
 8002b9e:	4335      	orrs	r5, r6
 8002ba0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002ba4:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002ba6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002ba8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002baa:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002bac:	6203      	str	r3, [r0, #32]
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	40010000 	.word	0x40010000

08002bb4 <HAL_TIM_PWM_ConfigChannel>:
{
 8002bb4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002bb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002bba:	4604      	mov	r4, r0
 8002bbc:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d010      	beq.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x30>
 8002bc2:	2301      	movs	r3, #1
  switch (Channel)
 8002bc4:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002bca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002bce:	d043      	beq.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8002bd0:	d809      	bhi.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002bd2:	b1fa      	cbz	r2, 8002c14 <HAL_TIM_PWM_ConfigChannel+0x60>
 8002bd4:	2a04      	cmp	r2, #4
 8002bd6:	d02e      	beq.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002bda:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002be0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002be4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002be6:	2a10      	cmp	r2, #16
 8002be8:	d047      	beq.n	8002c7a <HAL_TIM_PWM_ConfigChannel+0xc6>
 8002bea:	2a14      	cmp	r2, #20
 8002bec:	d056      	beq.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0xe8>
 8002bee:	2a0c      	cmp	r2, #12
 8002bf0:	d1f2      	bne.n	8002bd8 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	f7ff fdc8 	bl	8002788 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bf8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bfa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c12:	e030      	b.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	f7ff fd4b 	bl	80026b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c1a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c1c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	f042 0208 	orr.w	r2, r2, #8
 8002c24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c26:	699a      	ldr	r2, [r3, #24]
 8002c28:	f022 0204 	bic.w	r2, r2, #4
 8002c2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c32:	619a      	str	r2, [r3, #24]
      break;
 8002c34:	e7d0      	b.n	8002bd8 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c36:	6820      	ldr	r0, [r4, #0]
 8002c38:	f7ff ff84 	bl	8002b44 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c3c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c3e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c56:	e7ec      	b.n	8002c32 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c58:	6820      	ldr	r0, [r4, #0]
 8002c5a:	f7ff fd5d 	bl	8002718 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c5e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c60:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	f042 0208 	orr.w	r2, r2, #8
 8002c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	f022 0204 	bic.w	r2, r2, #4
 8002c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c76:	61da      	str	r2, [r3, #28]
      break;
 8002c78:	e7ae      	b.n	8002bd8 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	f7ff fdac 	bl	80027d8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c80:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c82:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c86:	f042 0208 	orr.w	r2, r2, #8
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c8e:	f022 0204 	bic.w	r2, r2, #4
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c96:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c9a:	e79d      	b.n	8002bd8 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c9c:	6820      	ldr	r0, [r4, #0]
 8002c9e:	f7ff fdc3 	bl	8002828 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ca2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ca4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ca6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002cae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cbc:	e7ec      	b.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0xe4>

08002cbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cbe:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc0:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8002cc2:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ccc:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cce:	6083      	str	r3, [r0, #8]
 8002cd0:	bd10      	pop	{r4, pc}
	...

08002cd4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002cd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002cd8:	2b01      	cmp	r3, #1
{
 8002cda:	b570      	push	{r4, r5, r6, lr}
 8002cdc:	4604      	mov	r4, r0
 8002cde:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002ce2:	d017      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002ce8:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8002cea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002cec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002cf0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_TIM_ConfigClockSource+0x124>)
 8002cf4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002cf6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002cf8:	680b      	ldr	r3, [r1, #0]
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d065      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0xf6>
 8002cfe:	d815      	bhi.n	8002d2c <HAL_TIM_ConfigClockSource+0x58>
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d00c      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x4a>
 8002d04:	d807      	bhi.n	8002d16 <HAL_TIM_ConfigClockSource+0x42>
 8002d06:	b153      	cbz	r3, 8002d1e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002d08:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002d0a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d10:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	d001      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x4a>
 8002d1a:	2b30      	cmp	r3, #48	; 0x30
 8002d1c:	d1f4      	bne.n	8002d08 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8002d1e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d20:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	e01a      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8002d2c:	2b60      	cmp	r3, #96	; 0x60
 8002d2e:	d034      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0xc6>
 8002d30:	d819      	bhi.n	8002d66 <HAL_TIM_ConfigClockSource+0x92>
 8002d32:	2b50      	cmp	r3, #80	; 0x50
 8002d34:	d1e8      	bne.n	8002d08 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	684a      	ldr	r2, [r1, #4]
 8002d38:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002d3a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8002d46:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d48:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d50:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002d54:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d56:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002d58:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d5e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002d62:	6083      	str	r3, [r0, #8]
 8002d64:	e7d0      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8002d66:	2b70      	cmp	r3, #112	; 0x70
 8002d68:	d00c      	beq.n	8002d84 <HAL_TIM_ConfigClockSource+0xb0>
 8002d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6e:	d1cb      	bne.n	8002d08 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8002d70:	68cb      	ldr	r3, [r1, #12]
 8002d72:	684a      	ldr	r2, [r1, #4]
 8002d74:	6889      	ldr	r1, [r1, #8]
 8002d76:	f7ff ffa2 	bl	8002cbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d7a:	6822      	ldr	r2, [r4, #0]
 8002d7c:	6893      	ldr	r3, [r2, #8]
 8002d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d82:	e008      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8002d84:	68cb      	ldr	r3, [r1, #12]
 8002d86:	684a      	ldr	r2, [r1, #4]
 8002d88:	6889      	ldr	r1, [r1, #8]
 8002d8a:	f7ff ff98 	bl	8002cbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d96:	6093      	str	r3, [r2, #8]
      break;
 8002d98:	e7b6      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9a:	684d      	ldr	r5, [r1, #4]
 8002d9c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9e:	6a01      	ldr	r1, [r0, #32]
 8002da0:	f021 0110 	bic.w	r1, r1, #16
 8002da4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002da8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002daa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002db2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8002db6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002dba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dbc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002dbe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002dc8:	e7cb      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dca:	684a      	ldr	r2, [r1, #4]
 8002dcc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002dce:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd6:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8002dda:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ddc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dde:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002de8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dea:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002dec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002df2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002df6:	e7b4      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x8e>
 8002df8:	fffe0088 	.word	0xfffe0088

08002dfc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dfc:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e00:	6a03      	ldr	r3, [r0, #32]
{
 8002e02:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e04:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e06:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e08:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002e0a:	ea23 0304 	bic.w	r3, r3, r4
 8002e0e:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e10:	6a03      	ldr	r3, [r0, #32]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	6202      	str	r2, [r0, #32]
 8002e16:	bd10      	pop	{r4, pc}

08002e18 <HAL_TIM_PWM_Start>:
{
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	6800      	ldr	r0, [r0, #0]
 8002e20:	f7ff ffec 	bl	8002dfc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <HAL_TIM_PWM_Start+0x44>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d011      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x38>
 8002e2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00d      	beq.n	8002e50 <HAL_TIM_PWM_Start+0x38>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_TIM_PWM_Start+0x48>)
 8002e38:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	2a06      	cmp	r2, #6
 8002e3c:	d006      	beq.n	8002e4c <HAL_TIM_PWM_Start+0x34>
 8002e3e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002e42:	d003      	beq.n	8002e4c <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
}
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8002e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
 8002e58:	e7ec      	b.n	8002e34 <HAL_TIM_PWM_Start+0x1c>
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	00010007 	.word	0x00010007

08002e64 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f04f 0302 	mov.w	r3, #2
{
 8002e6e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002e70:	d01f      	beq.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e72:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e74:	4d10      	ldr	r5, [pc, #64]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002e76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e7a:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002e7c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002e7e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e80:	d003      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002e82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e86:	42aa      	cmp	r2, r5
 8002e88:	d103      	bne.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e8e:	684d      	ldr	r5, [r1, #4]
 8002e90:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e92:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e98:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e9a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e9e:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ea0:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea2:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8002ea6:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eac:	2300      	movs	r3, #0
 8002eae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002eb2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002eb4:	bd30      	pop	{r4, r5, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40010000 	.word	0x40010000

08002ebc <HAL_TIMEx_CommutCallback>:
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIMEx_BreakCallback>:
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ec0:	4770      	bx	lr
	...

08002ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec4:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec6:	69c2      	ldr	r2, [r0, #28]
{
 8002ec8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eca:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ecc:	6881      	ldr	r1, [r0, #8]
 8002ece:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ed2:	4301      	orrs	r1, r0
 8002ed4:	6960      	ldr	r0, [r4, #20]
 8002ed6:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed8:	4890      	ldr	r0, [pc, #576]	; (800311c <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eda:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002edc:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8002ede:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ee0:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ee4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002eec:	4301      	orrs	r1, r0
 8002eee:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ef0:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef2:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002ef4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef6:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8002efa:	4301      	orrs	r1, r0
 8002efc:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efe:	4988      	ldr	r1, [pc, #544]	; (8003120 <UART_SetConfig+0x25c>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d117      	bne.n	8002f34 <UART_SetConfig+0x70>
 8002f04:	4b87      	ldr	r3, [pc, #540]	; (8003124 <UART_SetConfig+0x260>)
 8002f06:	4988      	ldr	r1, [pc, #544]	; (8003128 <UART_SetConfig+0x264>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f10:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	d129      	bne.n	8002f6c <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	f200 809d 	bhi.w	8003058 <UART_SetConfig+0x194>
 8002f1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f22:	008c      	.short	0x008c
 8002f24:	00ee00e8 	.word	0x00ee00e8
 8002f28:	00fa009b 	.word	0x00fa009b
 8002f2c:	009b009b 	.word	0x009b009b
 8002f30:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f34:	497d      	ldr	r1, [pc, #500]	; (800312c <UART_SetConfig+0x268>)
 8002f36:	428b      	cmp	r3, r1
 8002f38:	d106      	bne.n	8002f48 <UART_SetConfig+0x84>
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	; (8003124 <UART_SetConfig+0x260>)
 8002f3c:	497c      	ldr	r1, [pc, #496]	; (8003130 <UART_SetConfig+0x26c>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	e7e3      	b.n	8002f10 <UART_SetConfig+0x4c>
 8002f48:	497a      	ldr	r1, [pc, #488]	; (8003134 <UART_SetConfig+0x270>)
 8002f4a:	428b      	cmp	r3, r1
 8002f4c:	d11d      	bne.n	8002f8a <UART_SetConfig+0xc6>
 8002f4e:	4b75      	ldr	r3, [pc, #468]	; (8003124 <UART_SetConfig+0x260>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	f000 80d9 	beq.w	8003110 <UART_SetConfig+0x24c>
 8002f5e:	d80e      	bhi.n	8002f7e <UART_SetConfig+0xba>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d067      	beq.n	8003034 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002f68:	d076      	beq.n	8003058 <UART_SetConfig+0x194>
 8002f6a:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d873      	bhi.n	8003058 <UART_SetConfig+0x194>
 8002f70:	e8df f003 	tbb	[pc, r3]
 8002f74:	72a29f99 	.word	0x72a29f99
 8002f78:	727272b4 	.word	0x727272b4
 8002f7c:	b7          	.byte	0xb7
 8002f7d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	f000 80ba 	beq.w	80030f8 <UART_SetConfig+0x234>
 8002f84:	2b30      	cmp	r3, #48	; 0x30
 8002f86:	d03f      	beq.n	8003008 <UART_SetConfig+0x144>
 8002f88:	e7ec      	b.n	8002f64 <UART_SetConfig+0xa0>
 8002f8a:	496b      	ldr	r1, [pc, #428]	; (8003138 <UART_SetConfig+0x274>)
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d10d      	bne.n	8002fac <UART_SetConfig+0xe8>
 8002f90:	4b64      	ldr	r3, [pc, #400]	; (8003124 <UART_SetConfig+0x260>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	f000 80b8 	beq.w	8003110 <UART_SetConfig+0x24c>
 8002fa0:	d9de      	bls.n	8002f60 <UART_SetConfig+0x9c>
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	f000 80a8 	beq.w	80030f8 <UART_SetConfig+0x234>
 8002fa8:	2bc0      	cmp	r3, #192	; 0xc0
 8002faa:	e7ec      	b.n	8002f86 <UART_SetConfig+0xc2>
 8002fac:	4963      	ldr	r1, [pc, #396]	; (800313c <UART_SetConfig+0x278>)
 8002fae:	428b      	cmp	r3, r1
 8002fb0:	d110      	bne.n	8002fd4 <UART_SetConfig+0x110>
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <UART_SetConfig+0x260>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc0:	f000 80a6 	beq.w	8003110 <UART_SetConfig+0x24c>
 8002fc4:	d9cc      	bls.n	8002f60 <UART_SetConfig+0x9c>
 8002fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fca:	f000 8095 	beq.w	80030f8 <UART_SetConfig+0x234>
 8002fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd2:	e7d8      	b.n	8002f86 <UART_SetConfig+0xc2>
 8002fd4:	495a      	ldr	r1, [pc, #360]	; (8003140 <UART_SetConfig+0x27c>)
 8002fd6:	428b      	cmp	r3, r1
 8002fd8:	d11e      	bne.n	8003018 <UART_SetConfig+0x154>
 8002fda:	4b52      	ldr	r3, [pc, #328]	; (8003124 <UART_SetConfig+0x260>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	f000 8092 	beq.w	8003110 <UART_SetConfig+0x24c>
 8002fec:	d806      	bhi.n	8002ffc <UART_SetConfig+0x138>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d07c      	beq.n	80030ec <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ff6:	d12f      	bne.n	8003058 <UART_SetConfig+0x194>
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	e78d      	b.n	8002f18 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003000:	d07a      	beq.n	80030f8 <UART_SetConfig+0x234>
 8003002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003006:	d1f4      	bne.n	8002ff2 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003008:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800300c:	d169      	bne.n	80030e2 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800300e:	6863      	ldr	r3, [r4, #4]
 8003010:	0858      	lsrs	r0, r3, #1
 8003012:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003016:	e078      	b.n	800310a <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003018:	494a      	ldr	r1, [pc, #296]	; (8003144 <UART_SetConfig+0x280>)
 800301a:	428b      	cmp	r3, r1
 800301c:	d124      	bne.n	8003068 <UART_SetConfig+0x1a4>
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <UART_SetConfig+0x260>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302c:	d070      	beq.n	8003110 <UART_SetConfig+0x24c>
 800302e:	d815      	bhi.n	800305c <UART_SetConfig+0x198>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1de      	bne.n	8002ff2 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003034:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003038:	d135      	bne.n	80030a6 <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800303a:	f7ff f86b 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800303e:	6862      	ldr	r2, [r4, #4]
 8003040:	0853      	lsrs	r3, r2, #1
 8003042:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003046:	fbb0 f0f2 	udiv	r0, r0, r2
 800304a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003050:	f1a0 0210 	sub.w	r2, r0, #16
 8003054:	429a      	cmp	r2, r3
 8003056:	d91a      	bls.n	800308e <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8003058:	2001      	movs	r0, #1
 800305a:	e020      	b.n	800309e <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800305c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003060:	d04a      	beq.n	80030f8 <UART_SetConfig+0x234>
 8003062:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003066:	e7ce      	b.n	8003006 <UART_SetConfig+0x142>
 8003068:	4937      	ldr	r1, [pc, #220]	; (8003148 <UART_SetConfig+0x284>)
 800306a:	428b      	cmp	r3, r1
 800306c:	d1f4      	bne.n	8003058 <UART_SetConfig+0x194>
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <UART_SetConfig+0x260>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800307c:	d048      	beq.n	8003110 <UART_SetConfig+0x24c>
 800307e:	f67f af6f 	bls.w	8002f60 <UART_SetConfig+0x9c>
 8003082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003086:	d037      	beq.n	80030f8 <UART_SetConfig+0x234>
 8003088:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800308c:	e77b      	b.n	8002f86 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800308e:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003092:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	4318      	orrs	r0, r3
 800309a:	60d0      	str	r0, [r2, #12]
 800309c:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80030a2:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80030a4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030a6:	f7ff f835 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030aa:	6863      	ldr	r3, [r4, #4]
 80030ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80030b0:	e008      	b.n	80030c4 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030b2:	f7ff f83f 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 80030b6:	e7f8      	b.n	80030aa <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030b8:	6863      	ldr	r3, [r4, #4]
 80030ba:	0858      	lsrs	r0, r3, #1
 80030bc:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 80030c0:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80030c8:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ca:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80030ce:	f1a0 0210 	sub.w	r2, r0, #16
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d8c0      	bhi.n	8003058 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	60d8      	str	r0, [r3, #12]
 80030da:	e7df      	b.n	800309c <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030dc:	f7fe ff50 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 80030e0:	e7e3      	b.n	80030aa <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030e2:	6863      	ldr	r3, [r4, #4]
 80030e4:	0858      	lsrs	r0, r3, #1
 80030e6:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80030ea:	e7eb      	b.n	80030c4 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80030f0:	d1df      	bne.n	80030b2 <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030f2:	f7ff f81f 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 80030f6:	e7a2      	b.n	800303e <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80030fc:	d1dc      	bne.n	80030b8 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80030fe:	6863      	ldr	r3, [r4, #4]
 8003100:	0858      	lsrs	r0, r3, #1
 8003102:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8003106:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800310a:	fbb0 f0f3 	udiv	r0, r0, r3
 800310e:	e79c      	b.n	800304a <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003110:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003114:	d1e2      	bne.n	80030dc <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003116:	f7fe ff33 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 800311a:	e790      	b.n	800303e <UART_SetConfig+0x17a>
 800311c:	efff69f3 	.word	0xefff69f3
 8003120:	40011000 	.word	0x40011000
 8003124:	40023800 	.word	0x40023800
 8003128:	0800c690 	.word	0x0800c690
 800312c:	40004400 	.word	0x40004400
 8003130:	0800c694 	.word	0x0800c694
 8003134:	40004800 	.word	0x40004800
 8003138:	40004c00 	.word	0x40004c00
 800313c:	40005000 	.word	0x40005000
 8003140:	40011400 	.word	0x40011400
 8003144:	40007800 	.word	0x40007800
 8003148:	40007c00 	.word	0x40007c00

0800314c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800314c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800314e:	07da      	lsls	r2, r3, #31
{
 8003150:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003152:	d506      	bpl.n	8003162 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003154:	6801      	ldr	r1, [r0, #0]
 8003156:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003158:	684a      	ldr	r2, [r1, #4]
 800315a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800315e:	4322      	orrs	r2, r4
 8003160:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003162:	079c      	lsls	r4, r3, #30
 8003164:	d506      	bpl.n	8003174 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003166:	6801      	ldr	r1, [r0, #0]
 8003168:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800316a:	684a      	ldr	r2, [r1, #4]
 800316c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003170:	4322      	orrs	r2, r4
 8003172:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003174:	0759      	lsls	r1, r3, #29
 8003176:	d506      	bpl.n	8003186 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003178:	6801      	ldr	r1, [r0, #0]
 800317a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800317c:	684a      	ldr	r2, [r1, #4]
 800317e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003182:	4322      	orrs	r2, r4
 8003184:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003186:	071a      	lsls	r2, r3, #28
 8003188:	d506      	bpl.n	8003198 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800318a:	6801      	ldr	r1, [r0, #0]
 800318c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800318e:	684a      	ldr	r2, [r1, #4]
 8003190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003194:	4322      	orrs	r2, r4
 8003196:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003198:	06dc      	lsls	r4, r3, #27
 800319a:	d506      	bpl.n	80031aa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800319c:	6801      	ldr	r1, [r0, #0]
 800319e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80031a0:	688a      	ldr	r2, [r1, #8]
 80031a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031a6:	4322      	orrs	r2, r4
 80031a8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031aa:	0699      	lsls	r1, r3, #26
 80031ac:	d506      	bpl.n	80031bc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ae:	6801      	ldr	r1, [r0, #0]
 80031b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80031b2:	688a      	ldr	r2, [r1, #8]
 80031b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b8:	4322      	orrs	r2, r4
 80031ba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031bc:	065a      	lsls	r2, r3, #25
 80031be:	d510      	bpl.n	80031e2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031c0:	6801      	ldr	r1, [r0, #0]
 80031c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80031c4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031c6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80031ce:	ea42 0204 	orr.w	r2, r2, r4
 80031d2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d4:	d105      	bne.n	80031e2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031d6:	684a      	ldr	r2, [r1, #4]
 80031d8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80031da:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80031de:	4322      	orrs	r2, r4
 80031e0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031e2:	061b      	lsls	r3, r3, #24
 80031e4:	d506      	bpl.n	80031f4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031e6:	6802      	ldr	r2, [r0, #0]
 80031e8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80031ea:	6853      	ldr	r3, [r2, #4]
 80031ec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6053      	str	r3, [r2, #4]
 80031f4:	bd10      	pop	{r4, pc}

080031f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031fa:	9d06      	ldr	r5, [sp, #24]
 80031fc:	4604      	mov	r4, r0
 80031fe:	460f      	mov	r7, r1
 8003200:	4616      	mov	r6, r2
 8003202:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003204:	6821      	ldr	r1, [r4, #0]
 8003206:	69ca      	ldr	r2, [r1, #28]
 8003208:	ea37 0302 	bics.w	r3, r7, r2
 800320c:	bf0c      	ite	eq
 800320e:	2201      	moveq	r2, #1
 8003210:	2200      	movne	r2, #0
 8003212:	42b2      	cmp	r2, r6
 8003214:	d002      	beq.n	800321c <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003216:	2000      	movs	r0, #0
}
 8003218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800321c:	1c6b      	adds	r3, r5, #1
 800321e:	d0f2      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003220:	f7fd fa3a 	bl	8000698 <HAL_GetTick>
 8003224:	eba0 0008 	sub.w	r0, r0, r8
 8003228:	4285      	cmp	r5, r0
 800322a:	d301      	bcc.n	8003230 <UART_WaitOnFlagUntilTimeout+0x3a>
 800322c:	2d00      	cmp	r5, #0
 800322e:	d1e9      	bne.n	8003204 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003230:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003232:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800323a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003244:	2320      	movs	r3, #32
 8003246:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003248:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800324a:	2300      	movs	r3, #0
 800324c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003254 <HAL_UART_Transmit>:
{
 8003254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003258:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800325a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800325c:	4604      	mov	r4, r0
 800325e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003260:	2b20      	cmp	r3, #32
{
 8003262:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003264:	d14b      	bne.n	80032fe <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8003266:	2900      	cmp	r1, #0
 8003268:	d047      	beq.n	80032fa <HAL_UART_Transmit+0xa6>
 800326a:	2a00      	cmp	r2, #0
 800326c:	d045      	beq.n	80032fa <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800326e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003272:	2b01      	cmp	r3, #1
 8003274:	d043      	beq.n	80032fe <HAL_UART_Transmit+0xaa>
 8003276:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003278:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800327a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003282:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8003284:	f7fd fa08 	bl	8000698 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800328a:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800328c:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003294:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003298:	d103      	bne.n	80032a2 <HAL_UART_Transmit+0x4e>
 800329a:	6923      	ldr	r3, [r4, #16]
 800329c:	b90b      	cbnz	r3, 80032a2 <HAL_UART_Transmit+0x4e>
 800329e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80032a0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80032a2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	463b      	mov	r3, r7
 80032a8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80032ac:	b292      	uxth	r2, r2
 80032ae:	b94a      	cbnz	r2, 80032c4 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff ff9f 	bl	80031f6 <UART_WaitOnFlagUntilTimeout>
 80032b8:	b950      	cbnz	r0, 80032d0 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 80032ba:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80032bc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80032c0:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 80032c2:	e006      	b.n	80032d2 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c4:	2200      	movs	r2, #0
 80032c6:	2180      	movs	r1, #128	; 0x80
 80032c8:	4620      	mov	r0, r4
 80032ca:	f7ff ff94 	bl	80031f6 <UART_WaitOnFlagUntilTimeout>
 80032ce:	b118      	cbz	r0, 80032d8 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80032d0:	2003      	movs	r0, #3
}
 80032d2:	b003      	add	sp, #12
 80032d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032d8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80032da:	b95e      	cbnz	r6, 80032f4 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032dc:	f835 3b02 	ldrh.w	r3, [r5], #2
 80032e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80032e6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80032f2:	e7d6      	b.n	80032a2 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032f4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80032f8:	e7f4      	b.n	80032e4 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80032fa:	2001      	movs	r0, #1
 80032fc:	e7e9      	b.n	80032d2 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 80032fe:	2002      	movs	r0, #2
 8003300:	e7e7      	b.n	80032d2 <HAL_UART_Transmit+0x7e>

08003302 <UART_CheckIdleState>:
{
 8003302:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	2500      	movs	r5, #0
{
 8003306:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003308:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800330a:	f7fd f9c5 	bl	8000698 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800330e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003310:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	0712      	lsls	r2, r2, #28
 8003316:	d407      	bmi.n	8003328 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8003318:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800331a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800331c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800331e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003322:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8003324:	b003      	add	sp, #12
 8003326:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003328:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800332c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003330:	4620      	mov	r0, r4
 8003332:	9200      	str	r2, [sp, #0]
 8003334:	462a      	mov	r2, r5
 8003336:	f7ff ff5e 	bl	80031f6 <UART_WaitOnFlagUntilTimeout>
 800333a:	2800      	cmp	r0, #0
 800333c:	d0ec      	beq.n	8003318 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800333e:	2003      	movs	r0, #3
 8003340:	e7f0      	b.n	8003324 <UART_CheckIdleState+0x22>

08003342 <HAL_UART_Init>:
{
 8003342:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003344:	4604      	mov	r4, r0
 8003346:	b340      	cbz	r0, 800339a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003348:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800334a:	b91b      	cbnz	r3, 8003354 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800334c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003350:	f007 ff08 	bl	800b164 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003354:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003356:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003358:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800335a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800335c:	6813      	ldr	r3, [r2, #0]
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003364:	f7ff fdae 	bl	8002ec4 <UART_SetConfig>
 8003368:	2801      	cmp	r0, #1
 800336a:	d016      	beq.n	800339a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800336c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800336e:	b113      	cbz	r3, 8003376 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff feeb 	bl	800314c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003376:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003378:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003380:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003388:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
}
 8003390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8003394:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003396:	f7ff bfb4 	b.w	8003302 <UART_CheckIdleState>
}
 800339a:	2001      	movs	r0, #1
 800339c:	bd10      	pop	{r4, pc}

0800339e <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800339e:	ba40      	rev16	r0, r0
}
 80033a0:	b280      	uxth	r0, r0
 80033a2:	4770      	bx	lr

080033a4 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 80033a4:	ba00      	rev	r0, r0
 80033a6:	4770      	bx	lr

080033a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80033a8:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80033aa:	f002 fa99 	bl	80058e0 <mem_init>
  memp_init();
 80033ae:	f002 fcad 	bl	8005d0c <memp_init>
  pbuf_init();
  netif_init();
 80033b2:	f002 fcf8 	bl	8005da6 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80033b6:	f006 fadb 	bl	8009970 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80033ba:	f003 f971 	bl	80066a0 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80033be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80033c2:	f006 ba6d 	b.w	80098a0 <sys_timeouts_init>

080033c6 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 80033c6:	7a43      	ldrb	r3, [r0, #9]
 80033c8:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 80033ca:	bf1f      	itttt	ne
 80033cc:	2300      	movne	r3, #0
    dhcp->state = new_state;
 80033ce:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 80033d0:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 80033d2:	82c3      	strhne	r3, [r0, #22]
 80033d4:	4770      	bx	lr
	...

080033d8 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 80033d8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80033da:	8a83      	ldrh	r3, [r0, #20]
{
 80033dc:	4604      	mov	r4, r0
 80033de:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80033e0:	3302      	adds	r3, #2
 80033e2:	2b44      	cmp	r3, #68	; 0x44
 80033e4:	d906      	bls.n	80033f4 <dhcp_option_short+0x1c>
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <dhcp_option_short+0x38>)
 80033e8:	f240 5282 	movw	r2, #1410	; 0x582
 80033ec:	4909      	ldr	r1, [pc, #36]	; (8003414 <dhcp_option_short+0x3c>)
 80033ee:	480a      	ldr	r0, [pc, #40]	; (8003418 <dhcp_option_short+0x40>)
 80033f0:	f008 f896 	bl	800b520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80033f4:	8aa3      	ldrh	r3, [r4, #20]
 80033f6:	0a28      	lsrs	r0, r5, #8
 80033f8:	6922      	ldr	r2, [r4, #16]
 80033fa:	18d1      	adds	r1, r2, r3
 80033fc:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8003400:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8003402:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8003404:	82a1      	strh	r1, [r4, #20]
 8003406:	fa12 f383 	uxtah	r3, r2, r3
 800340a:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 800340e:	bd38      	pop	{r3, r4, r5, pc}
 8003410:	0800c911 	.word	0x0800c911
 8003414:	0800c946 	.word	0x0800c946
 8003418:	0800c987 	.word	0x0800c987

0800341c <dhcp_option>:
{
 800341c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800341e:	8a83      	ldrh	r3, [r0, #20]
{
 8003420:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8003422:	3202      	adds	r2, #2
{
 8003424:	4604      	mov	r4, r0
 8003426:	460e      	mov	r6, r1
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8003428:	4413      	add	r3, r2
 800342a:	2b44      	cmp	r3, #68	; 0x44
 800342c:	d906      	bls.n	800343c <dhcp_option+0x20>
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <dhcp_option+0x3c>)
 8003430:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8003434:	4909      	ldr	r1, [pc, #36]	; (800345c <dhcp_option+0x40>)
 8003436:	480a      	ldr	r0, [pc, #40]	; (8003460 <dhcp_option+0x44>)
 8003438:	f008 f872 	bl	800b520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800343c:	8aa3      	ldrh	r3, [r4, #20]
 800343e:	6922      	ldr	r2, [r4, #16]
 8003440:	18d1      	adds	r1, r2, r3
 8003442:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8003446:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8003448:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800344a:	82a1      	strh	r1, [r4, #20]
 800344c:	fa12 f383 	uxtah	r3, r2, r3
 8003450:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 8003454:	bd70      	pop	{r4, r5, r6, pc}
 8003456:	bf00      	nop
 8003458:	0800c911 	.word	0x0800c911
 800345c:	0800c84e 	.word	0x0800c84e
 8003460:	0800c987 	.word	0x0800c987

08003464 <dhcp_option_byte>:
{
 8003464:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8003466:	8a83      	ldrh	r3, [r0, #20]
{
 8003468:	4604      	mov	r4, r0
 800346a:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800346c:	2b43      	cmp	r3, #67	; 0x43
 800346e:	d906      	bls.n	800347e <dhcp_option_byte+0x1a>
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <dhcp_option_byte+0x2c>)
 8003472:	f240 527b 	movw	r2, #1403	; 0x57b
 8003476:	4907      	ldr	r1, [pc, #28]	; (8003494 <dhcp_option_byte+0x30>)
 8003478:	4807      	ldr	r0, [pc, #28]	; (8003498 <dhcp_option_byte+0x34>)
 800347a:	f008 f851 	bl	800b520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800347e:	8aa2      	ldrh	r2, [r4, #20]
 8003480:	6923      	ldr	r3, [r4, #16]
 8003482:	1c51      	adds	r1, r2, #1
 8003484:	4413      	add	r3, r2
 8003486:	82a1      	strh	r1, [r4, #20]
 8003488:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 800348c:	bd38      	pop	{r3, r4, r5, pc}
 800348e:	bf00      	nop
 8003490:	0800c911 	.word	0x0800c911
 8003494:	0800c896 	.word	0x0800c896
 8003498:	0800c987 	.word	0x0800c987

0800349c <dhcp_option_long>:
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800349c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800349e:	8a83      	ldrh	r3, [r0, #20]
{
 80034a0:	4605      	mov	r5, r0
 80034a2:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80034a4:	3304      	adds	r3, #4
 80034a6:	2b44      	cmp	r3, #68	; 0x44
 80034a8:	d906      	bls.n	80034b8 <dhcp_option_long+0x1c>
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <dhcp_option_long+0x50>)
 80034ac:	f240 528a 	movw	r2, #1418	; 0x58a
 80034b0:	490f      	ldr	r1, [pc, #60]	; (80034f0 <dhcp_option_long+0x54>)
 80034b2:	4810      	ldr	r0, [pc, #64]	; (80034f4 <dhcp_option_long+0x58>)
 80034b4:	f008 f834 	bl	800b520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80034b8:	8aab      	ldrh	r3, [r5, #20]
 80034ba:	0e20      	lsrs	r0, r4, #24
 80034bc:	692a      	ldr	r2, [r5, #16]
 80034be:	18d1      	adds	r1, r2, r3
 80034c0:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 80034c4:	1c59      	adds	r1, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80034c6:	0c20      	lsrs	r0, r4, #16
 80034c8:	fa12 f181 	uxtah	r1, r2, r1
 80034cc:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 80034d0:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80034d2:	0a20      	lsrs	r0, r4, #8
 80034d4:	fa12 f181 	uxtah	r1, r2, r1
 80034d8:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80034dc:	1d19      	adds	r1, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80034de:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80034e0:	82a9      	strh	r1, [r5, #20]
 80034e2:	fa12 f383 	uxtah	r3, r2, r3
 80034e6:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	0800c911 	.word	0x0800c911
 80034f0:	0800c8d1 	.word	0x0800c8d1
 80034f4:	0800c987 	.word	0x0800c987

080034f8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 80034f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fc:	460c      	mov	r4, r1
 80034fe:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8003500:	4680      	mov	r8, r0
 8003502:	b950      	cbnz	r0, 800351a <dhcp_create_msg+0x22>
 8003504:	4b62      	ldr	r3, [pc, #392]	; (8003690 <dhcp_create_msg+0x198>)
 8003506:	f240 721d 	movw	r2, #1821	; 0x71d
 800350a:	4962      	ldr	r1, [pc, #392]	; (8003694 <dhcp_create_msg+0x19c>)
 800350c:	4862      	ldr	r0, [pc, #392]	; (8003698 <dhcp_create_msg+0x1a0>)
 800350e:	f008 f807 	bl	800b520 <iprintf>
 8003512:	f06f 000f 	mvn.w	r0, #15
 8003516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800351a:	b951      	cbnz	r1, 8003532 <dhcp_create_msg+0x3a>
 800351c:	4b5c      	ldr	r3, [pc, #368]	; (8003690 <dhcp_create_msg+0x198>)
 800351e:	f240 721e 	movw	r2, #1822	; 0x71e
 8003522:	495e      	ldr	r1, [pc, #376]	; (800369c <dhcp_create_msg+0x1a4>)
 8003524:	485c      	ldr	r0, [pc, #368]	; (8003698 <dhcp_create_msg+0x1a0>)
 8003526:	f007 fffb 	bl	800b520 <iprintf>
 800352a:	f06f 0005 	mvn.w	r0, #5
 800352e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8003532:	68cb      	ldr	r3, [r1, #12]
 8003534:	b133      	cbz	r3, 8003544 <dhcp_create_msg+0x4c>
 8003536:	4b56      	ldr	r3, [pc, #344]	; (8003690 <dhcp_create_msg+0x198>)
 8003538:	f240 721f 	movw	r2, #1823	; 0x71f
 800353c:	4958      	ldr	r1, [pc, #352]	; (80036a0 <dhcp_create_msg+0x1a8>)
 800353e:	4856      	ldr	r0, [pc, #344]	; (8003698 <dhcp_create_msg+0x1a0>)
 8003540:	f007 ffee 	bl	800b520 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	b133      	cbz	r3, 8003556 <dhcp_create_msg+0x5e>
 8003548:	4b51      	ldr	r3, [pc, #324]	; (8003690 <dhcp_create_msg+0x198>)
 800354a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800354e:	4955      	ldr	r1, [pc, #340]	; (80036a4 <dhcp_create_msg+0x1ac>)
 8003550:	4851      	ldr	r0, [pc, #324]	; (8003698 <dhcp_create_msg+0x1a0>)
 8003552:	f007 ffe5 	bl	800b520 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8003556:	2200      	movs	r2, #0
 8003558:	f44f 719a 	mov.w	r1, #308	; 0x134
 800355c:	4610      	mov	r0, r2
 800355e:	f002 fdc5 	bl	80060ec <pbuf_alloc>
 8003562:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 8003564:	2800      	cmp	r0, #0
 8003566:	f000 808f 	beq.w	8003688 <dhcp_create_msg+0x190>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800356a:	8943      	ldrh	r3, [r0, #10]
 800356c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8003570:	d206      	bcs.n	8003580 <dhcp_create_msg+0x88>
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <dhcp_create_msg+0x198>)
 8003574:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8003578:	494b      	ldr	r1, [pc, #300]	; (80036a8 <dhcp_create_msg+0x1b0>)
 800357a:	4847      	ldr	r0, [pc, #284]	; (8003698 <dhcp_create_msg+0x1a0>)
 800357c:	f007 ffd0 	bl	800b520 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8003580:	2e03      	cmp	r6, #3
 8003582:	d102      	bne.n	800358a <dhcp_create_msg+0x92>
 8003584:	7a63      	ldrb	r3, [r4, #9]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d107      	bne.n	800359a <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800358a:	7aa3      	ldrb	r3, [r4, #10]
 800358c:	4d47      	ldr	r5, [pc, #284]	; (80036ac <dhcp_create_msg+0x1b4>)
 800358e:	b913      	cbnz	r3, 8003596 <dhcp_create_msg+0x9e>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8003590:	f008 f842 	bl	800b618 <rand>
 8003594:	6028      	str	r0, [r5, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	6023      	str	r3, [r4, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800359a:	68e3      	ldr	r3, [r4, #12]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
 800359c:	2500      	movs	r5, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800359e:	685f      	ldr	r7, [r3, #4]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80035a0:	2301      	movs	r3, #1
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80035a2:	6127      	str	r7, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80035a4:	703b      	strb	r3, [r7, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 80035a6:	707b      	strb	r3, [r7, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 80035a8:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
  dhcp->msg_out->hops = 0;
 80035ac:	70fd      	strb	r5, [r7, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 80035ae:	70bb      	strb	r3, [r7, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	f7ff fef7 	bl	80033a4 <lwip_htonl>
  dhcp->msg_out->secs = 0;
 80035b6:	6923      	ldr	r3, [r4, #16]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80035b8:	2e04      	cmp	r6, #4
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80035ba:	6078      	str	r0, [r7, #4]
  dhcp->msg_out->secs = 0;
 80035bc:	721d      	strb	r5, [r3, #8]
 80035be:	725d      	strb	r5, [r3, #9]
  dhcp->msg_out->flags = 0;
 80035c0:	729d      	strb	r5, [r3, #10]
 80035c2:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80035c4:	731d      	strb	r5, [r3, #12]
 80035c6:	735d      	strb	r5, [r3, #13]
 80035c8:	739d      	strb	r5, [r3, #14]
 80035ca:	73dd      	strb	r5, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80035cc:	d008      	beq.n	80035e0 <dhcp_create_msg+0xe8>
 80035ce:	1ff2      	subs	r2, r6, #7
 80035d0:	2a01      	cmp	r2, #1
 80035d2:	d905      	bls.n	80035e0 <dhcp_create_msg+0xe8>
 80035d4:	2e03      	cmp	r6, #3
 80035d6:	d106      	bne.n	80035e6 <dhcp_create_msg+0xee>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 80035d8:	7a62      	ldrb	r2, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80035da:	3a04      	subs	r2, #4
 80035dc:	2a01      	cmp	r2, #1
 80035de:	d802      	bhi.n	80035e6 <dhcp_create_msg+0xee>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 80035e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80035e4:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 80035e6:	2200      	movs	r2, #0
 80035e8:	f103 001c 	add.w	r0, r3, #28
 80035ec:	741a      	strb	r2, [r3, #16]
 80035ee:	745a      	strb	r2, [r3, #17]
 80035f0:	749a      	strb	r2, [r3, #18]
 80035f2:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 80035f4:	751a      	strb	r2, [r3, #20]
 80035f6:	755a      	strb	r2, [r3, #21]
 80035f8:	759a      	strb	r2, [r3, #22]
 80035fa:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80035fc:	761a      	strb	r2, [r3, #24]
 80035fe:	765a      	strb	r2, [r3, #25]
 8003600:	769a      	strb	r2, [r3, #26]
 8003602:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8003604:	f898 5028 	ldrb.w	r5, [r8, #40]	; 0x28
 8003608:	b291      	uxth	r1, r2
 800360a:	428d      	cmp	r5, r1
 800360c:	d93a      	bls.n	8003684 <dhcp_create_msg+0x18c>
 800360e:	2905      	cmp	r1, #5
 8003610:	d838      	bhi.n	8003684 <dhcp_create_msg+0x18c>
 8003612:	eb08 0102 	add.w	r1, r8, r2
 8003616:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 800361a:	3201      	adds	r2, #1
 800361c:	f800 1b01 	strb.w	r1, [r0], #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8003620:	2a10      	cmp	r2, #16
 8003622:	d1f1      	bne.n	8003608 <dhcp_create_msg+0x110>
 8003624:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003628:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 800362c:	2000      	movs	r0, #0
 800362e:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8003632:	428a      	cmp	r2, r1
 8003634:	d1fb      	bne.n	800362e <dhcp_create_msg+0x136>
 8003636:	f103 00ec 	add.w	r0, r3, #236	; 0xec
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 800363a:	2100      	movs	r1, #0
 800363c:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8003640:	4282      	cmp	r2, r0
 8003642:	d1fb      	bne.n	800363c <dhcp_create_msg+0x144>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8003644:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8003648:	2263      	movs	r2, #99	; 0x63
 800364a:	33f0      	adds	r3, #240	; 0xf0
 800364c:	f803 0c03 	strb.w	r0, [r3, #-3]
 8003650:	2053      	movs	r0, #83	; 0x53
 8003652:	f803 2c04 	strb.w	r2, [r3, #-4]
 8003656:	f803 2c01 	strb.w	r2, [r3, #-1]
  dhcp->options_out_len = 0;
 800365a:	2200      	movs	r2, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800365c:	f803 0c02 	strb.w	r0, [r3, #-2]
  dhcp->options_out_len = 0;
 8003660:	82a1      	strh	r1, [r4, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8003662:	f803 2b01 	strb.w	r2, [r3], #1
 8003666:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8003668:	2a44      	cmp	r2, #68	; 0x44
 800366a:	d1fa      	bne.n	8003662 <dhcp_create_msg+0x16a>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800366c:	2201      	movs	r2, #1
 800366e:	4620      	mov	r0, r4
 8003670:	2135      	movs	r1, #53	; 0x35
 8003672:	f7ff fed3 	bl	800341c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8003676:	4620      	mov	r0, r4
 8003678:	4631      	mov	r1, r6
 800367a:	f7ff fef3 	bl	8003464 <dhcp_option_byte>
  return ERR_OK;
 800367e:	2000      	movs	r0, #0
 8003680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8003684:	2100      	movs	r1, #0
 8003686:	e7c8      	b.n	800361a <dhcp_create_msg+0x122>
    return ERR_MEM;
 8003688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003690:	0800c911 	.word	0x0800c911
 8003694:	0800c6d2 	.word	0x0800c6d2
 8003698:	0800c987 	.word	0x0800c987
 800369c:	0800c6f1 	.word	0x0800c6f1
 80036a0:	0800c70f 	.word	0x0800c70f
 80036a4:	0800c734 	.word	0x0800c734
 80036a8:	0800c75b 	.word	0x0800c75b
 80036ac:	200000a8 	.word	0x200000a8

080036b0 <dhcp_check>:
{
 80036b0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80036b2:	6a04      	ldr	r4, [r0, #32]
{
 80036b4:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80036b6:	2108      	movs	r1, #8
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff fe84 	bl	80033c6 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80036be:	2200      	movs	r2, #0
 80036c0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80036c4:	4628      	mov	r0, r5
 80036c6:	f001 f9ad 	bl	8004a24 <etharp_query>
  if (dhcp->tries < 255) {
 80036ca:	7aa3      	ldrb	r3, [r4, #10]
 80036cc:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80036ce:	bf1c      	itt	ne
 80036d0:	3301      	addne	r3, #1
 80036d2:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80036d4:	2301      	movs	r3, #1
 80036d6:	82e3      	strh	r3, [r4, #22]
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080036dc <dhcp_bind>:
{
 80036dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80036de:	4605      	mov	r5, r0
 80036e0:	b940      	cbnz	r0, 80036f4 <dhcp_bind+0x18>
 80036e2:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <dhcp_bind+0xf0>)
 80036e4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80036e8:	4939      	ldr	r1, [pc, #228]	; (80037d0 <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80036ea:	483a      	ldr	r0, [pc, #232]	; (80037d4 <dhcp_bind+0xf8>)
 80036ec:	f007 ff18 	bl	800b520 <iprintf>
}
 80036f0:	b003      	add	sp, #12
 80036f2:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 80036f4:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80036f6:	b924      	cbnz	r4, 8003702 <dhcp_bind+0x26>
 80036f8:	4b34      	ldr	r3, [pc, #208]	; (80037cc <dhcp_bind+0xf0>)
 80036fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fe:	4936      	ldr	r1, [pc, #216]	; (80037d8 <dhcp_bind+0xfc>)
 8003700:	e7f3      	b.n	80036ea <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8003706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	d00b      	beq.n	8003724 <dhcp_bind+0x48>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800370c:	223c      	movs	r2, #60	; 0x3c
 800370e:	331e      	adds	r3, #30
 8003710:	fbb3 f3f2 	udiv	r3, r3, r2
 8003714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003718:	4293      	cmp	r3, r2
 800371a:	bf28      	it	cs
 800371c:	4613      	movcs	r3, r2
     if (dhcp->t0_timeout == 0) {
 800371e:	2b00      	cmp	r3, #0
 8003720:	d041      	beq.n	80037a6 <dhcp_bind+0xca>
       dhcp->t0_timeout = 1;
 8003722:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8003724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003726:	1c58      	adds	r0, r3, #1
 8003728:	d00d      	beq.n	8003746 <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800372a:	223c      	movs	r2, #60	; 0x3c
 800372c:	331e      	adds	r3, #30
 800372e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003736:	4293      	cmp	r3, r2
 8003738:	bf28      	it	cs
 800373a:	4613      	movcs	r3, r2
    if (dhcp->t1_timeout == 0) {
 800373c:	2b00      	cmp	r3, #0
 800373e:	d034      	beq.n	80037aa <dhcp_bind+0xce>
      dhcp->t1_timeout = 1;
 8003740:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8003742:	8b23      	ldrh	r3, [r4, #24]
 8003744:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8003746:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003748:	1c59      	adds	r1, r3, #1
 800374a:	d00c      	beq.n	8003766 <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800374c:	223c      	movs	r2, #60	; 0x3c
 800374e:	331e      	adds	r3, #30
 8003750:	fbb3 f3f2 	udiv	r3, r3, r2
 8003754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003758:	4293      	cmp	r3, r2
 800375a:	bf28      	it	cs
 800375c:	4613      	movcs	r3, r2
    if (dhcp->t2_timeout == 0) {
 800375e:	b333      	cbz	r3, 80037ae <dhcp_bind+0xd2>
      dhcp->t2_timeout = 1;
 8003760:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8003762:	8b63      	ldrh	r3, [r4, #26]
 8003764:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8003766:	8b63      	ldrh	r3, [r4, #26]
 8003768:	8b22      	ldrh	r2, [r4, #24]
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <dhcp_bind+0x98>
 800376e:	b10b      	cbz	r3, 8003774 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 8003774:	7ae3      	ldrb	r3, [r4, #11]
 8003776:	b1e3      	cbz	r3, 80037b2 <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8003778:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800377a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800377c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800377e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8003780:	b92b      	cbnz	r3, 800378e <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8003782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003784:	9a00      	ldr	r2, [sp, #0]
 8003786:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8003788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378c:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800378e:	4620      	mov	r0, r4
 8003790:	210a      	movs	r1, #10
 8003792:	f7ff fe18 	bl	80033c6 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8003796:	ab01      	add	r3, sp, #4
 8003798:	466a      	mov	r2, sp
 800379a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800379e:	4628      	mov	r0, r5
 80037a0:	f002 fb24 	bl	8005dec <netif_set_addr>
 80037a4:	e7a4      	b.n	80036f0 <dhcp_bind+0x14>
       dhcp->t0_timeout = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e7bb      	b.n	8003722 <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e7c8      	b.n	8003740 <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e7d6      	b.n	8003760 <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80037b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 80037b6:	061a      	lsls	r2, r3, #24
 80037b8:	d401      	bmi.n	80037be <dhcp_bind+0xe2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80037ba:	23ff      	movs	r3, #255	; 0xff
 80037bc:	e7dd      	b.n	800377a <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 80037be:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80037c0:	bf8c      	ite	hi
 80037c2:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80037c6:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80037ca:	e7d6      	b.n	800377a <dhcp_bind+0x9e>
 80037cc:	0800c911 	.word	0x0800c911
 80037d0:	0800c6a1 	.word	0x0800c6a1
 80037d4:	0800c987 	.word	0x0800c987
 80037d8:	0800c6ba 	.word	0x0800c6ba

080037dc <dhcp_inc_pcb_refcount>:
{
 80037dc:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 80037de:	4d15      	ldr	r5, [pc, #84]	; (8003834 <dhcp_inc_pcb_refcount+0x58>)
 80037e0:	782b      	ldrb	r3, [r5, #0]
 80037e2:	b9f3      	cbnz	r3, 8003822 <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80037e4:	4c14      	ldr	r4, [pc, #80]	; (8003838 <dhcp_inc_pcb_refcount+0x5c>)
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	b12b      	cbz	r3, 80037f6 <dhcp_inc_pcb_refcount+0x1a>
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <dhcp_inc_pcb_refcount+0x60>)
 80037ec:	22d9      	movs	r2, #217	; 0xd9
 80037ee:	4914      	ldr	r1, [pc, #80]	; (8003840 <dhcp_inc_pcb_refcount+0x64>)
 80037f0:	4814      	ldr	r0, [pc, #80]	; (8003844 <dhcp_inc_pcb_refcount+0x68>)
 80037f2:	f007 fe95 	bl	800b520 <iprintf>
    dhcp_pcb = udp_new();
 80037f6:	f006 fa6f 	bl	8009cd8 <udp_new>
 80037fa:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 80037fc:	b1b0      	cbz	r0, 800382c <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80037fe:	7a02      	ldrb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8003800:	4911      	ldr	r1, [pc, #68]	; (8003848 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8003802:	f042 0220 	orr.w	r2, r2, #32
 8003806:	7202      	strb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8003808:	2244      	movs	r2, #68	; 0x44
 800380a:	f006 f94b 	bl	8009aa4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800380e:	2243      	movs	r2, #67	; 0x43
 8003810:	490d      	ldr	r1, [pc, #52]	; (8003848 <dhcp_inc_pcb_refcount+0x6c>)
 8003812:	6820      	ldr	r0, [r4, #0]
 8003814:	f006 fa1c 	bl	8009c50 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8003818:	2200      	movs	r2, #0
 800381a:	490c      	ldr	r1, [pc, #48]	; (800384c <dhcp_inc_pcb_refcount+0x70>)
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	f006 fa3f 	bl	8009ca0 <udp_recv>
  dhcp_pcb_refcount++;
 8003822:	782b      	ldrb	r3, [r5, #0]
  return ERR_OK;
 8003824:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8003826:	3301      	adds	r3, #1
 8003828:	702b      	strb	r3, [r5, #0]
  return ERR_OK;
 800382a:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800382c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003830:	bd38      	pop	{r3, r4, r5, pc}
 8003832:	bf00      	nop
 8003834:	200000a4 	.word	0x200000a4
 8003838:	200000a0 	.word	0x200000a0
 800383c:	0800c911 	.word	0x0800c911
 8003840:	0800c829 	.word	0x0800c829
 8003844:	0800c987 	.word	0x0800c987
 8003848:	0800ce0c 	.word	0x0800ce0c
 800384c:	08003c4d 	.word	0x08003c4d

08003850 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8003850:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8003852:	4604      	mov	r4, r0
 8003854:	b940      	cbnz	r0, 8003868 <dhcp_option_trailer+0x18>
 8003856:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <dhcp_option_trailer+0x64>)
 8003858:	f240 7282 	movw	r2, #1922	; 0x782
 800385c:	4916      	ldr	r1, [pc, #88]	; (80038b8 <dhcp_option_trailer+0x68>)
 800385e:	4817      	ldr	r0, [pc, #92]	; (80038bc <dhcp_option_trailer+0x6c>)
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 8003860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8003864:	f007 be5c 	b.w	800b520 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8003868:	6903      	ldr	r3, [r0, #16]
 800386a:	b933      	cbnz	r3, 800387a <dhcp_option_trailer+0x2a>
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <dhcp_option_trailer+0x64>)
 800386e:	f240 7283 	movw	r2, #1923	; 0x783
 8003872:	4913      	ldr	r1, [pc, #76]	; (80038c0 <dhcp_option_trailer+0x70>)
 8003874:	4811      	ldr	r0, [pc, #68]	; (80038bc <dhcp_option_trailer+0x6c>)
 8003876:	f007 fe53 	bl	800b520 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800387a:	8aa3      	ldrh	r3, [r4, #20]
 800387c:	2b43      	cmp	r3, #67	; 0x43
 800387e:	d906      	bls.n	800388e <dhcp_option_trailer+0x3e>
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <dhcp_option_trailer+0x64>)
 8003882:	f240 7284 	movw	r2, #1924	; 0x784
 8003886:	490f      	ldr	r1, [pc, #60]	; (80038c4 <dhcp_option_trailer+0x74>)
 8003888:	480c      	ldr	r0, [pc, #48]	; (80038bc <dhcp_option_trailer+0x6c>)
 800388a:	f007 fe49 	bl	800b520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800388e:	8aa3      	ldrh	r3, [r4, #20]
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	1c59      	adds	r1, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	82a1      	strh	r1, [r4, #20]
 8003898:	21ff      	movs	r1, #255	; 0xff
 800389a:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800389e:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80038a0:	8aa3      	ldrh	r3, [r4, #20]
 80038a2:	2b43      	cmp	r3, #67	; 0x43
 80038a4:	d900      	bls.n	80038a8 <dhcp_option_trailer+0x58>
}
 80038a6:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80038a8:	1c58      	adds	r0, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	82a0      	strh	r0, [r4, #20]
 80038ae:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 80038b2:	e7f5      	b.n	80038a0 <dhcp_option_trailer+0x50>
 80038b4:	0800c911 	.word	0x0800c911
 80038b8:	0800c9af 	.word	0x0800c9af
 80038bc:	0800c987 	.word	0x0800c987
 80038c0:	0800c9d1 	.word	0x0800c9d1
 80038c4:	0800c9fd 	.word	0x0800c9fd

080038c8 <dhcp_handle_ack.isra.1>:
dhcp_handle_ack(struct netif *netif)
 80038c8:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80038ca:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80038cc:	4d17      	ldr	r5, [pc, #92]	; (800392c <dhcp_handle_ack.isra.1+0x64>)
dhcp_handle_ack(struct netif *netif)
 80038ce:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80038d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80038d2:	6303      	str	r3, [r0, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80038d4:	78eb      	ldrb	r3, [r5, #3]
 80038d6:	b113      	cbz	r3, 80038de <dhcp_handle_ack.isra.1+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <dhcp_handle_ack.isra.1+0x68>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80038de:	792b      	ldrb	r3, [r5, #4]
 80038e0:	b1db      	cbz	r3, 800391a <dhcp_handle_ack.isra.1+0x52>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80038e2:	4b13      	ldr	r3, [pc, #76]	; (8003930 <dhcp_handle_ack.isra.1+0x68>)
 80038e4:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80038e6:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80038e8:	796b      	ldrb	r3, [r5, #5]
 80038ea:	b1cb      	cbz	r3, 8003920 <dhcp_handle_ack.isra.1+0x58>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80038ec:	4b10      	ldr	r3, [pc, #64]	; (8003930 <dhcp_handle_ack.isra.1+0x68>)
 80038ee:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80038f0:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80038f2:	6863      	ldr	r3, [r4, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80038f8:	79ab      	ldrb	r3, [r5, #6]
 80038fa:	b12b      	cbz	r3, 8003908 <dhcp_handle_ack.isra.1+0x40>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <dhcp_handle_ack.isra.1+0x68>)
 80038fe:	6998      	ldr	r0, [r3, #24]
 8003900:	f7ff fd50 	bl	80033a4 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8003904:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8003906:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 0;
 8003908:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800390a:	79eb      	ldrb	r3, [r5, #7]
 800390c:	b123      	cbz	r3, 8003918 <dhcp_handle_ack.isra.1+0x50>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <dhcp_handle_ack.isra.1+0x68>)
 8003910:	69d8      	ldr	r0, [r3, #28]
 8003912:	f7ff fd47 	bl	80033a4 <lwip_htonl>
 8003916:	6320      	str	r0, [r4, #48]	; 0x30
 8003918:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800391a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	e7e2      	b.n	80038e6 <dhcp_handle_ack.isra.1+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8003920:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003922:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003926:	08db      	lsrs	r3, r3, #3
 8003928:	e7e2      	b.n	80038f0 <dhcp_handle_ack.isra.1+0x28>
 800392a:	bf00      	nop
 800392c:	20000258 	.word	0x20000258
 8003930:	20000260 	.word	0x20000260

08003934 <dhcp_delete_msg>:
{
 8003934:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8003936:	4604      	mov	r4, r0
 8003938:	b940      	cbnz	r0, 800394c <dhcp_delete_msg+0x18>
 800393a:	4b11      	ldr	r3, [pc, #68]	; (8003980 <dhcp_delete_msg+0x4c>)
 800393c:	f240 726d 	movw	r2, #1901	; 0x76d
 8003940:	4910      	ldr	r1, [pc, #64]	; (8003984 <dhcp_delete_msg+0x50>)
 8003942:	4811      	ldr	r0, [pc, #68]	; (8003988 <dhcp_delete_msg+0x54>)
}
 8003944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8003948:	f007 bdea 	b.w	800b520 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800394c:	68c3      	ldr	r3, [r0, #12]
 800394e:	b933      	cbnz	r3, 800395e <dhcp_delete_msg+0x2a>
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <dhcp_delete_msg+0x4c>)
 8003952:	f240 726e 	movw	r2, #1902	; 0x76e
 8003956:	490d      	ldr	r1, [pc, #52]	; (800398c <dhcp_delete_msg+0x58>)
 8003958:	480b      	ldr	r0, [pc, #44]	; (8003988 <dhcp_delete_msg+0x54>)
 800395a:	f007 fde1 	bl	800b520 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	b933      	cbnz	r3, 8003970 <dhcp_delete_msg+0x3c>
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <dhcp_delete_msg+0x4c>)
 8003964:	f240 726f 	movw	r2, #1903	; 0x76f
 8003968:	4909      	ldr	r1, [pc, #36]	; (8003990 <dhcp_delete_msg+0x5c>)
 800396a:	4807      	ldr	r0, [pc, #28]	; (8003988 <dhcp_delete_msg+0x54>)
 800396c:	f007 fdd8 	bl	800b520 <iprintf>
  if (dhcp->p_out != NULL) {
 8003970:	68e0      	ldr	r0, [r4, #12]
 8003972:	b108      	cbz	r0, 8003978 <dhcp_delete_msg+0x44>
    pbuf_free(dhcp->p_out);
 8003974:	f002 fb58 	bl	8006028 <pbuf_free>
  dhcp->p_out = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	60e3      	str	r3, [r4, #12]
  dhcp->msg_out = NULL;
 800397c:	6123      	str	r3, [r4, #16]
 800397e:	bd10      	pop	{r4, pc}
 8003980:	0800c911 	.word	0x0800c911
 8003984:	0800c7bf 	.word	0x0800c7bf
 8003988:	0800c987 	.word	0x0800c987
 800398c:	0800c7dd 	.word	0x0800c7dd
 8003990:	0800c802 	.word	0x0800c802

08003994 <dhcp_discover>:
{
 8003994:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8003996:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003998:	6a04      	ldr	r4, [r0, #32]
{
 800399a:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800399c:	2106      	movs	r1, #6
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800399e:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7ff fd10 	bl	80033c6 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 80039a6:	2201      	movs	r2, #1
 80039a8:	4621      	mov	r1, r4
 80039aa:	4630      	mov	r0, r6
 80039ac:	f7ff fda4 	bl	80034f8 <dhcp_create_msg>
  if (result == ERR_OK) {
 80039b0:	4605      	mov	r5, r0
 80039b2:	bb78      	cbnz	r0, 8003a14 <dhcp_discover+0x80>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80039b4:	2202      	movs	r2, #2
 80039b6:	2139      	movs	r1, #57	; 0x39
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7ff fd2f 	bl	800341c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80039be:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7ff fd09 	bl	80033d8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80039c6:	2203      	movs	r2, #3
 80039c8:	2137      	movs	r1, #55	; 0x37
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7ff fd26 	bl	800341c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80039d0:	2101      	movs	r1, #1
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7ff fd46 	bl	8003464 <dhcp_option_byte>
 80039d8:	2103      	movs	r1, #3
 80039da:	4620      	mov	r0, r4
 80039dc:	f7ff fd42 	bl	8003464 <dhcp_option_byte>
 80039e0:	211c      	movs	r1, #28
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7ff fd3e 	bl	8003464 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7ff ff31 	bl	8003850 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80039ee:	8aa1      	ldrh	r1, [r4, #20]
 80039f0:	68e0      	ldr	r0, [r4, #12]
 80039f2:	31f0      	adds	r1, #240	; 0xf0
 80039f4:	b289      	uxth	r1, r1
 80039f6:	f002 fc59 	bl	80062ac <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <dhcp_discover+0xb0>)
 80039fc:	4812      	ldr	r0, [pc, #72]	; (8003a48 <dhcp_discover+0xb4>)
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	2343      	movs	r3, #67	; 0x43
 8003a02:	9600      	str	r6, [sp, #0]
 8003a04:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <dhcp_discover+0xb8>)
 8003a06:	68e1      	ldr	r1, [r4, #12]
 8003a08:	6800      	ldr	r0, [r0, #0]
 8003a0a:	f006 f89f 	bl	8009b4c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff ff90 	bl	8003934 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8003a14:	7aa3      	ldrb	r3, [r4, #10]
}
 8003a16:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8003a18:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8003a1a:	bf1c      	itt	ne
 8003a1c:	3301      	addne	r3, #1
 8003a1e:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8003a20:	7aa2      	ldrb	r2, [r4, #10]
 8003a22:	2a05      	cmp	r2, #5
 8003a24:	bf96      	itet	ls
 8003a26:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8003a2a:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8003a2e:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8003a30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8003a38:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a3c:	82e3      	strh	r3, [r4, #22]
}
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	bf00      	nop
 8003a44:	0800ce0c 	.word	0x0800ce0c
 8003a48:	200000a0 	.word	0x200000a0
 8003a4c:	0800ce10 	.word	0x0800ce10

08003a50 <dhcp_select>:
{
 8003a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003a52:	6a04      	ldr	r4, [r0, #32]
{
 8003a54:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8003a56:	2101      	movs	r1, #1
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff fcb4 	bl	80033c6 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8003a5e:	2203      	movs	r2, #3
 8003a60:	4621      	mov	r1, r4
 8003a62:	4630      	mov	r0, r6
 8003a64:	f7ff fd48 	bl	80034f8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8003a68:	4605      	mov	r5, r0
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d147      	bne.n	8003afe <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8003a6e:	2202      	movs	r2, #2
 8003a70:	2139      	movs	r1, #57	; 0x39
 8003a72:	4620      	mov	r0, r4
 8003a74:	f7ff fcd2 	bl	800341c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8003a78:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7ff fcac 	bl	80033d8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8003a80:	2204      	movs	r2, #4
 8003a82:	2132      	movs	r1, #50	; 0x32
 8003a84:	4620      	mov	r0, r4
 8003a86:	f7ff fcc9 	bl	800341c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8003a8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003a8c:	f7ff fc8a 	bl	80033a4 <lwip_htonl>
 8003a90:	4601      	mov	r1, r0
 8003a92:	4620      	mov	r0, r4
 8003a94:	f7ff fd02 	bl	800349c <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8003a98:	2204      	movs	r2, #4
 8003a9a:	2136      	movs	r1, #54	; 0x36
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7ff fcbd 	bl	800341c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8003aa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003aa4:	f7ff fc7e 	bl	80033a4 <lwip_htonl>
 8003aa8:	4601      	mov	r1, r0
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff fcf6 	bl	800349c <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	2137      	movs	r1, #55	; 0x37
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff fcb1 	bl	800341c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8003aba:	2101      	movs	r1, #1
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7ff fcd1 	bl	8003464 <dhcp_option_byte>
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7ff fccd 	bl	8003464 <dhcp_option_byte>
 8003aca:	211c      	movs	r1, #28
 8003acc:	4620      	mov	r0, r4
 8003ace:	f7ff fcc9 	bl	8003464 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7ff febc 	bl	8003850 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8003ad8:	8aa1      	ldrh	r1, [r4, #20]
 8003ada:	68e0      	ldr	r0, [r4, #12]
 8003adc:	31f0      	adds	r1, #240	; 0xf0
 8003ade:	b289      	uxth	r1, r1
 8003ae0:	f002 fbe4 	bl	80062ac <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <dhcp_select+0xdc>)
 8003ae6:	4812      	ldr	r0, [pc, #72]	; (8003b30 <dhcp_select+0xe0>)
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	2343      	movs	r3, #67	; 0x43
 8003aec:	9600      	str	r6, [sp, #0]
 8003aee:	4a11      	ldr	r2, [pc, #68]	; (8003b34 <dhcp_select+0xe4>)
 8003af0:	68e1      	ldr	r1, [r4, #12]
 8003af2:	6800      	ldr	r0, [r0, #0]
 8003af4:	f006 f82a 	bl	8009b4c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7ff ff1b 	bl	8003934 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8003afe:	7aa3      	ldrb	r3, [r4, #10]
}
 8003b00:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8003b02:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8003b04:	bf1c      	itt	ne
 8003b06:	3301      	addne	r3, #1
 8003b08:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8003b0a:	7aa2      	ldrb	r2, [r4, #10]
 8003b0c:	2a05      	cmp	r2, #5
 8003b0e:	bf96      	itet	ls
 8003b10:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8003b14:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8003b18:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8003b1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b1e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8003b22:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b26:	82e3      	strh	r3, [r4, #22]
}
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	0800ce0c 	.word	0x0800ce0c
 8003b30:	200000a0 	.word	0x200000a0
 8003b34:	0800ce10 	.word	0x0800ce10

08003b38 <dhcp_reboot>:
{
 8003b38:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003b3a:	6a04      	ldr	r4, [r0, #32]
{
 8003b3c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8003b3e:	2103      	movs	r1, #3
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7ff fc40 	bl	80033c6 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8003b46:	2203      	movs	r2, #3
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f7ff fcd4 	bl	80034f8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8003b50:	4605      	mov	r5, r0
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d13a      	bne.n	8003bcc <dhcp_reboot+0x94>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8003b56:	2202      	movs	r2, #2
 8003b58:	2139      	movs	r1, #57	; 0x39
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff fc5e 	bl	800341c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8003b60:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003b64:	4620      	mov	r0, r4
 8003b66:	f7ff fc37 	bl	80033d8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	2132      	movs	r1, #50	; 0x32
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff fc54 	bl	800341c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8003b74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003b76:	f7ff fc15 	bl	80033a4 <lwip_htonl>
 8003b7a:	4601      	mov	r1, r0
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7ff fc8d 	bl	800349c <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8003b82:	2203      	movs	r2, #3
 8003b84:	2137      	movs	r1, #55	; 0x37
 8003b86:	4620      	mov	r0, r4
 8003b88:	f7ff fc48 	bl	800341c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f7ff fc68 	bl	8003464 <dhcp_option_byte>
 8003b94:	2103      	movs	r1, #3
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7ff fc64 	bl	8003464 <dhcp_option_byte>
 8003b9c:	211c      	movs	r1, #28
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f7ff fc60 	bl	8003464 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7ff fe53 	bl	8003850 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8003baa:	8aa1      	ldrh	r1, [r4, #20]
 8003bac:	68e0      	ldr	r0, [r4, #12]
 8003bae:	31f0      	adds	r1, #240	; 0xf0
 8003bb0:	b289      	uxth	r1, r1
 8003bb2:	f002 fb7b 	bl	80062ac <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8003bb6:	4813      	ldr	r0, [pc, #76]	; (8003c04 <dhcp_reboot+0xcc>)
 8003bb8:	9600      	str	r6, [sp, #0]
 8003bba:	2343      	movs	r3, #67	; 0x43
 8003bbc:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <dhcp_reboot+0xd0>)
 8003bbe:	68e1      	ldr	r1, [r4, #12]
 8003bc0:	6800      	ldr	r0, [r0, #0]
 8003bc2:	f006 f829 	bl	8009c18 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f7ff feb4 	bl	8003934 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8003bcc:	7aa3      	ldrb	r3, [r4, #10]
}
 8003bce:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8003bd0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8003bd2:	bf1c      	itt	ne
 8003bd4:	3301      	addne	r3, #1
 8003bd6:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8003bd8:	7aa3      	ldrb	r3, [r4, #10]
 8003bda:	2b09      	cmp	r3, #9
 8003bdc:	bf96      	itet	ls
 8003bde:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8003be2:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8003be6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8003bea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8003bee:	bf9c      	itt	ls
 8003bf0:	00db      	lslls	r3, r3, #3
 8003bf2:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8003bf4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8003bf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bfc:	82e3      	strh	r3, [r4, #22]
}
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
 8003c02:	bf00      	nop
 8003c04:	200000a0 	.word	0x200000a0
 8003c08:	0800ce10 	.word	0x0800ce10

08003c0c <dhcp_dec_pcb_refcount>:
{
 8003c0c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8003c0e:	4d0a      	ldr	r5, [pc, #40]	; (8003c38 <dhcp_dec_pcb_refcount+0x2c>)
 8003c10:	782b      	ldrb	r3, [r5, #0]
 8003c12:	b92b      	cbnz	r3, 8003c20 <dhcp_dec_pcb_refcount+0x14>
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <dhcp_dec_pcb_refcount+0x30>)
 8003c16:	22f3      	movs	r2, #243	; 0xf3
 8003c18:	4909      	ldr	r1, [pc, #36]	; (8003c40 <dhcp_dec_pcb_refcount+0x34>)
 8003c1a:	480a      	ldr	r0, [pc, #40]	; (8003c44 <dhcp_dec_pcb_refcount+0x38>)
 8003c1c:	f007 fc80 	bl	800b520 <iprintf>
  dhcp_pcb_refcount--;
 8003c20:	782c      	ldrb	r4, [r5, #0]
 8003c22:	3c01      	subs	r4, #1
 8003c24:	b2e4      	uxtb	r4, r4
 8003c26:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8003c28:	b924      	cbnz	r4, 8003c34 <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 8003c2a:	4d07      	ldr	r5, [pc, #28]	; (8003c48 <dhcp_dec_pcb_refcount+0x3c>)
 8003c2c:	6828      	ldr	r0, [r5, #0]
 8003c2e:	f006 f83b 	bl	8009ca8 <udp_remove>
    dhcp_pcb = NULL;
 8003c32:	602c      	str	r4, [r5, #0]
 8003c34:	bd38      	pop	{r3, r4, r5, pc}
 8003c36:	bf00      	nop
 8003c38:	200000a4 	.word	0x200000a4
 8003c3c:	0800c911 	.word	0x0800c911
 8003c40:	0800c79b 	.word	0x0800c79b
 8003c44:	0800c987 	.word	0x0800c987
 8003c48:	200000a0 	.word	0x200000a0

08003c4c <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8003c4c:	4bad      	ldr	r3, [pc, #692]	; (8003f04 <dhcp_recv+0x2b8>)
{
 8003c4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8003c52:	685d      	ldr	r5, [r3, #4]
{
 8003c54:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003c56:	f8d5 9020 	ldr.w	r9, [r5, #32]
{
 8003c5a:	9201      	str	r2, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8003c5c:	f1b9 0f00 	cmp.w	r9, #0
 8003c60:	d04d      	beq.n	8003cfe <dhcp_recv+0xb2>
 8003c62:	f899 3008 	ldrb.w	r3, [r9, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d046      	beq.n	8003cf8 <dhcp_recv+0xac>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8003c6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8003c6e:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8003c70:	b133      	cbz	r3, 8003c80 <dhcp_recv+0x34>
 8003c72:	4ba5      	ldr	r3, [pc, #660]	; (8003f08 <dhcp_recv+0x2bc>)
 8003c74:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8003c78:	49a4      	ldr	r1, [pc, #656]	; (8003f0c <dhcp_recv+0x2c0>)
 8003c7a:	48a5      	ldr	r0, [pc, #660]	; (8003f10 <dhcp_recv+0x2c4>)
 8003c7c:	f007 fc50 	bl	800b520 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8003c80:	9b01      	ldr	r3, [sp, #4]
 8003c82:	895b      	ldrh	r3, [r3, #10]
 8003c84:	2b2b      	cmp	r3, #43	; 0x2b
 8003c86:	d937      	bls.n	8003cf8 <dhcp_recv+0xac>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8003c88:	7823      	ldrb	r3, [r4, #0]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d134      	bne.n	8003cf8 <dhcp_recv+0xac>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8003c8e:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
 8003c92:	f105 0229 	add.w	r2, r5, #41	; 0x29
 8003c96:	f104 011c 	add.w	r1, r4, #28
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	b2de      	uxtb	r6, r3
 8003c9e:	42b0      	cmp	r0, r6
 8003ca0:	d901      	bls.n	8003ca6 <dhcp_recv+0x5a>
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d121      	bne.n	8003cea <dhcp_recv+0x9e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8003ca6:	6860      	ldr	r0, [r4, #4]
 8003ca8:	f7ff fb7c 	bl	80033a4 <lwip_htonl>
 8003cac:	f8d9 3000 	ldr.w	r3, [r9]
 8003cb0:	4298      	cmp	r0, r3
 8003cb2:	d121      	bne.n	8003cf8 <dhcp_recv+0xac>
  dhcp_clear_all_options(dhcp);
 8003cb4:	4b97      	ldr	r3, [pc, #604]	; (8003f14 <dhcp_recv+0x2c8>)
 8003cb6:	2200      	movs	r2, #0
  if (p->len < DHCP_SNAME_OFS) {
 8003cb8:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8003cba:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 8003cbc:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 8003cbe:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8003cc0:	292b      	cmp	r1, #43	; 0x2b
 8003cc2:	d919      	bls.n	8003cf8 <dhcp_recv+0xac>
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8003cc4:	9901      	ldr	r1, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 8003cc6:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
 8003cca:	9203      	str	r2, [sp, #12]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8003ccc:	6849      	ldr	r1, [r1, #4]
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8003cce:	9302      	str	r3, [sp, #8]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8003cd0:	f8c9 1004 	str.w	r1, [r9, #4]
  options_idx_max = p->tot_len;
 8003cd4:	9901      	ldr	r1, [sp, #4]
 8003cd6:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8003cda:	9e01      	ldr	r6, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8003cdc:	8973      	ldrh	r3, [r6, #10]
 8003cde:	455b      	cmp	r3, fp
 8003ce0:	d913      	bls.n	8003d0a <dhcp_recv+0xbe>
  options = (u8_t*)q->payload;
 8003ce2:	6873      	ldr	r3, [r6, #4]
 8003ce4:	465c      	mov	r4, fp
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	e0e6      	b.n	8003eb8 <dhcp_recv+0x26c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8003cea:	f812 7b01 	ldrb.w	r7, [r2], #1
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f811 6b01 	ldrb.w	r6, [r1], #1
 8003cf4:	42b7      	cmp	r7, r6
 8003cf6:	d0d1      	beq.n	8003c9c <dhcp_recv+0x50>
    dhcp->msg_in = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c9 3004 	str.w	r3, [r9, #4]
  pbuf_free(p);
 8003cfe:	9801      	ldr	r0, [sp, #4]
 8003d00:	f002 f992 	bl	8006028 <pbuf_free>
}
 8003d04:	b009      	add	sp, #36	; 0x24
 8003d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx -= q->len;
 8003d0a:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max -= q->len;
 8003d0e:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8003d12:	6836      	ldr	r6, [r6, #0]
    options_idx -= q->len;
 8003d14:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max -= q->len;
 8003d18:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8003d1c:	2e00      	cmp	r6, #0
 8003d1e:	d1dd      	bne.n	8003cdc <dhcp_recv+0x90>
 8003d20:	e7ea      	b.n	8003cf8 <dhcp_recv+0xac>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8003d22:	6833      	ldr	r3, [r6, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8172 	beq.w	800400e <dhcp_recv+0x3c2>
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	e0d6      	b.n	8003ede <dhcp_recv+0x292>
        offset--;
 8003d30:	3c01      	subs	r4, #1
        decode_len = len = 0;
 8003d32:	2700      	movs	r7, #0
    int decode_idx = -1;
 8003d34:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
        offset--;
 8003d38:	b2a4      	uxth	r4, r4
        decode_len = len = 0;
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	3402      	adds	r4, #2
    offset += len + 2;
 8003d3e:	fa13 f484 	uxtah	r4, r3, r4
 8003d42:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 8003d44:	b347      	cbz	r7, 8003d98 <dhcp_recv+0x14c>
      u32_t value = 0;
 8003d46:	2300      	movs	r3, #0
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8003d48:	f1b8 0f07 	cmp.w	r8, #7
      u32_t value = 0;
 8003d4c:	9307      	str	r3, [sp, #28]
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8003d4e:	d906      	bls.n	8003d5e <dhcp_recv+0x112>
 8003d50:	4b6d      	ldr	r3, [pc, #436]	; (8003f08 <dhcp_recv+0x2bc>)
 8003d52:	f240 6236 	movw	r2, #1590	; 0x636
 8003d56:	4970      	ldr	r1, [pc, #448]	; (8003f18 <dhcp_recv+0x2cc>)
 8003d58:	486d      	ldr	r0, [pc, #436]	; (8003f10 <dhcp_recv+0x2c4>)
 8003d5a:	f007 fbe1 	bl	800b520 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8003d5e:	9b02      	ldr	r3, [sp, #8]
 8003d60:	f813 3008 	ldrb.w	r3, [r3, r8]
 8003d64:	b9c3      	cbnz	r3, 8003d98 <dhcp_recv+0x14c>
 8003d66:	b2ba      	uxth	r2, r7
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8003d68:	9b05      	ldr	r3, [sp, #20]
 8003d6a:	a907      	add	r1, sp, #28
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	9205      	str	r2, [sp, #20]
 8003d70:	f002 fbf6 	bl	8006560 <pbuf_copy_partial>
 8003d74:	9b05      	ldr	r3, [sp, #20]
 8003d76:	4283      	cmp	r3, r0
 8003d78:	d1be      	bne.n	8003cf8 <dhcp_recv+0xac>
        } else if (decode_len == 4) {
 8003d7a:	2f04      	cmp	r7, #4
 8003d7c:	f040 8088 	bne.w	8003e90 <dhcp_recv+0x244>
          value = lwip_ntohl(value);
 8003d80:	9807      	ldr	r0, [sp, #28]
 8003d82:	f7ff fb0f 	bl	80033a4 <lwip_htonl>
 8003d86:	9007      	str	r0, [sp, #28]
        dhcp_got_option(dhcp, decode_idx);
 8003d88:	2301      	movs	r3, #1
 8003d8a:	9a02      	ldr	r2, [sp, #8]
 8003d8c:	f802 3008 	strb.w	r3, [r2, r8]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8003d90:	9b07      	ldr	r3, [sp, #28]
 8003d92:	4a62      	ldr	r2, [pc, #392]	; (8003f1c <dhcp_recv+0x2d0>)
 8003d94:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
    if (offset >= q->len) {
 8003d98:	8973      	ldrh	r3, [r6, #10]
 8003d9a:	42a3      	cmp	r3, r4
 8003d9c:	f200 808c 	bhi.w	8003eb8 <dhcp_recv+0x26c>
      offset -= q->len;
 8003da0:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 8003da2:	ebaa 0a03 	sub.w	sl, sl, r3
      offset -= q->len;
 8003da6:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 8003da8:	fa1f fa8a 	uxth.w	sl, sl
      if ((offset < offset_max) && offset_max) {
 8003dac:	4554      	cmp	r4, sl
 8003dae:	d37a      	bcc.n	8003ea6 <dhcp_recv+0x25a>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8003db0:	9b02      	ldr	r3, [sp, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f040 80bf 	bne.w	8003f38 <dhcp_recv+0x2ec>
  } else if (parse_sname_as_options) {
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 80c4 	bne.w	8003f4a <dhcp_recv+0x2fe>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8003dc2:	9b02      	ldr	r3, [sp, #8]
 8003dc4:	785b      	ldrb	r3, [r3, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d096      	beq.n	8003cf8 <dhcp_recv+0xac>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8003dca:	4a54      	ldr	r2, [pc, #336]	; (8003f1c <dhcp_recv+0x2d0>)
 8003dcc:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8003dce:	2b05      	cmp	r3, #5
 8003dd0:	f040 80d7 	bne.w	8003f82 <dhcp_recv+0x336>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8003dd4:	f899 3009 	ldrb.w	r3, [r9, #9]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 80c7 	bne.w	8003f6c <dhcp_recv+0x320>
      dhcp_handle_ack(netif);
 8003dde:	6a28      	ldr	r0, [r5, #32]
 8003de0:	f7ff fd72 	bl	80038c8 <dhcp_handle_ack.isra.1>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8003de4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
        dhcp_check(netif);
 8003de8:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8003dea:	071b      	lsls	r3, r3, #28
 8003dec:	f140 80c6 	bpl.w	8003f7c <dhcp_recv+0x330>
        dhcp_check(netif);
 8003df0:	f7ff fc5e 	bl	80036b0 <dhcp_check>
 8003df4:	e780      	b.n	8003cf8 <dhcp_recv+0xac>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d02f      	beq.n	8003e5a <dhcp_recv+0x20e>
 8003dfa:	4b43      	ldr	r3, [pc, #268]	; (8003f08 <dhcp_recv+0x2bc>)
 8003dfc:	f240 52f6 	movw	r2, #1526	; 0x5f6
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003e00:	4947      	ldr	r1, [pc, #284]	; (8003f20 <dhcp_recv+0x2d4>)
 8003e02:	e005      	b.n	8003e10 <dhcp_recv+0x1c4>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d82c      	bhi.n	8003e62 <dhcp_recv+0x216>
 8003e08:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <dhcp_recv+0x2bc>)
 8003e0a:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8003e0e:	4945      	ldr	r1, [pc, #276]	; (8003f24 <dhcp_recv+0x2d8>)
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8003e10:	483f      	ldr	r0, [pc, #252]	; (8003f10 <dhcp_recv+0x2c4>)
 8003e12:	f007 fb85 	bl	800b520 <iprintf>
 8003e16:	e76f      	b.n	8003cf8 <dhcp_recv+0xac>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d004      	beq.n	8003e26 <dhcp_recv+0x1da>
 8003e1c:	4b3a      	ldr	r3, [pc, #232]	; (8003f08 <dhcp_recv+0x2bc>)
 8003e1e:	f240 6217 	movw	r2, #1559	; 0x617
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8003e22:	4941      	ldr	r1, [pc, #260]	; (8003f28 <dhcp_recv+0x2dc>)
 8003e24:	e7f4      	b.n	8003e10 <dhcp_recv+0x1c4>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8003e26:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8003e2a:	d022      	beq.n	8003e72 <dhcp_recv+0x226>
 8003e2c:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <dhcp_recv+0x2bc>)
 8003e2e:	f240 6219 	movw	r2, #1561	; 0x619
 8003e32:	493e      	ldr	r1, [pc, #248]	; (8003f2c <dhcp_recv+0x2e0>)
 8003e34:	e7ec      	b.n	8003e10 <dhcp_recv+0x1c4>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d023      	beq.n	8003e82 <dhcp_recv+0x236>
 8003e3a:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <dhcp_recv+0x2bc>)
 8003e3c:	f240 621d 	movw	r2, #1565	; 0x61d
 8003e40:	e7ef      	b.n	8003e22 <dhcp_recv+0x1d6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d019      	beq.n	8003e7a <dhcp_recv+0x22e>
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <dhcp_recv+0x2bc>)
 8003e48:	f240 6221 	movw	r2, #1569	; 0x621
 8003e4c:	e7d8      	b.n	8003e00 <dhcp_recv+0x1b4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d017      	beq.n	8003e82 <dhcp_recv+0x236>
 8003e52:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <dhcp_recv+0x2bc>)
 8003e54:	f240 6225 	movw	r2, #1573	; 0x625
 8003e58:	e7d2      	b.n	8003e00 <dhcp_recv+0x1b4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003e5a:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8003e5c:	f04f 0806 	mov.w	r8, #6
 8003e60:	e76c      	b.n	8003d3c <dhcp_recv+0xf0>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8003e62:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 8003e66:	2704      	movs	r7, #4
 8003e68:	e768      	b.n	8003d3c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003e6a:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8003e6c:	f04f 0803 	mov.w	r8, #3
 8003e70:	e764      	b.n	8003d3c <dhcp_recv+0xf0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8003e72:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8003e74:	f04f 0800 	mov.w	r8, #0
 8003e78:	e760      	b.n	8003d3c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003e7a:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8003e7c:	f04f 0802 	mov.w	r8, #2
 8003e80:	e75c      	b.n	8003d3c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003e82:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8003e84:	4698      	mov	r8, r3
 8003e86:	e759      	b.n	8003d3c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003e88:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8003e8a:	f04f 0805 	mov.w	r8, #5
 8003e8e:	e755      	b.n	8003d3c <dhcp_recv+0xf0>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8003e90:	2f01      	cmp	r7, #1
 8003e92:	d004      	beq.n	8003e9e <dhcp_recv+0x252>
 8003e94:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <dhcp_recv+0x2bc>)
 8003e96:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8003e9a:	4925      	ldr	r1, [pc, #148]	; (8003f30 <dhcp_recv+0x2e4>)
 8003e9c:	e7b8      	b.n	8003e10 <dhcp_recv+0x1c4>
          value = ((u8_t*)&value)[0];
 8003e9e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003ea2:	9307      	str	r3, [sp, #28]
 8003ea4:	e770      	b.n	8003d88 <dhcp_recv+0x13c>
        q = q->next;
 8003ea6:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8003ea8:	b926      	cbnz	r6, 8003eb4 <dhcp_recv+0x268>
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <dhcp_recv+0x2bc>)
 8003eac:	f240 6254 	movw	r2, #1620	; 0x654
 8003eb0:	4920      	ldr	r1, [pc, #128]	; (8003f34 <dhcp_recv+0x2e8>)
 8003eb2:	e7ad      	b.n	8003e10 <dhcp_recv+0x1c4>
        options = (u8_t*)q->payload;
 8003eb4:	6873      	ldr	r3, [r6, #4]
 8003eb6:	9304      	str	r3, [sp, #16]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8003eb8:	4554      	cmp	r4, sl
 8003eba:	f4bf af79 	bcs.w	8003db0 <dhcp_recv+0x164>
 8003ebe:	9b04      	ldr	r3, [sp, #16]
 8003ec0:	5d1a      	ldrb	r2, [r3, r4]
 8003ec2:	2aff      	cmp	r2, #255	; 0xff
 8003ec4:	f43f af74 	beq.w	8003db0 <dhcp_recv+0x164>
    u16_t val_offset = offset + 2;
 8003ec8:	1ca3      	adds	r3, r4, #2
    if ((offset + 1) < q->len) {
 8003eca:	8971      	ldrh	r1, [r6, #10]
    u16_t val_offset = offset + 2;
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	9305      	str	r3, [sp, #20]
    if ((offset + 1) < q->len) {
 8003ed0:	1c63      	adds	r3, r4, #1
 8003ed2:	428b      	cmp	r3, r1
 8003ed4:	f6bf af25 	bge.w	8003d22 <dhcp_recv+0xd6>
      len = options[offset + 1];
 8003ed8:	9b04      	ldr	r3, [sp, #16]
 8003eda:	4423      	add	r3, r4
 8003edc:	785b      	ldrb	r3, [r3, #1]
    switch(op) {
 8003ede:	2a34      	cmp	r2, #52	; 0x34
 8003ee0:	d09a      	beq.n	8003e18 <dhcp_recv+0x1cc>
 8003ee2:	f200 8083 	bhi.w	8003fec <dhcp_recv+0x3a0>
 8003ee6:	2a01      	cmp	r2, #1
 8003ee8:	d085      	beq.n	8003df6 <dhcp_recv+0x1aa>
 8003eea:	f4ff af21 	bcc.w	8003d30 <dhcp_recv+0xe4>
 8003eee:	2a03      	cmp	r2, #3
 8003ef0:	d088      	beq.n	8003e04 <dhcp_recv+0x1b8>
 8003ef2:	2a33      	cmp	r2, #51	; 0x33
 8003ef4:	f040 809b 	bne.w	800402e <dhcp_recv+0x3e2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d0b6      	beq.n	8003e6a <dhcp_recv+0x21e>
 8003efc:	4b02      	ldr	r3, [pc, #8]	; (8003f08 <dhcp_recv+0x2bc>)
 8003efe:	f240 6209 	movw	r2, #1545	; 0x609
 8003f02:	e77d      	b.n	8003e00 <dhcp_recv+0x1b4>
 8003f04:	20000240 	.word	0x20000240
 8003f08:	0800c911 	.word	0x0800c911
 8003f0c:	0800ca3c 	.word	0x0800ca3c
 8003f10:	0800c987 	.word	0x0800c987
 8003f14:	20000258 	.word	0x20000258
 8003f18:	0800ca8a 	.word	0x0800ca8a
 8003f1c:	20000260 	.word	0x20000260
 8003f20:	0800ca4f 	.word	0x0800ca4f
 8003f24:	0800ca58 	.word	0x0800ca58
 8003f28:	0800ca6a 	.word	0x0800ca6a
 8003f2c:	0800ca73 	.word	0x0800ca73
 8003f30:	0800ca9b 	.word	0x0800ca9b
 8003f34:	0800caae 	.word	0x0800caae
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8003f38:	4b44      	ldr	r3, [pc, #272]	; (800404c <dhcp_recv+0x400>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8003f3e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8003f40:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d00d      	beq.n	8003f62 <dhcp_recv+0x316>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d106      	bne.n	8003f58 <dhcp_recv+0x30c>
    parse_sname_as_options = 0;
 8003f4a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8003f4c:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8003f50:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	e6c0      	b.n	8003cda <dhcp_recv+0x8e>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	f47f af2e 	bne.w	8003dba <dhcp_recv+0x16e>
      parse_sname_as_options = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8003f62:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8003f66:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8003f6a:	e6b6      	b.n	8003cda <dhcp_recv+0x8e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8003f6c:	3b03      	subs	r3, #3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	f63f aec2 	bhi.w	8003cf8 <dhcp_recv+0xac>
      dhcp_handle_ack(netif);
 8003f74:	6a28      	ldr	r0, [r5, #32]
 8003f76:	f7ff fca7 	bl	80038c8 <dhcp_handle_ack.isra.1>
      dhcp_bind(netif);
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f7ff fbae 	bl	80036dc <dhcp_bind>
 8003f80:	e6ba      	b.n	8003cf8 <dhcp_recv+0xac>
  else if ((msg_type == DHCP_NAK) &&
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d115      	bne.n	8003fb2 <dhcp_recv+0x366>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8003f86:	f899 3009 	ldrb.w	r3, [r9, #9]
  else if ((msg_type == DHCP_NAK) &&
 8003f8a:	1eda      	subs	r2, r3, #3
 8003f8c:	2a02      	cmp	r2, #2
 8003f8e:	d902      	bls.n	8003f96 <dhcp_recv+0x34a>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	f47f aeb1 	bne.w	8003cf8 <dhcp_recv+0xac>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8003f96:	6a28      	ldr	r0, [r5, #32]
 8003f98:	210c      	movs	r1, #12
 8003f9a:	f7ff fa14 	bl	80033c6 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8003f9e:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <dhcp_recv+0x404>)
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f001 ff21 	bl	8005dec <netif_set_addr>
  dhcp_discover(netif);
 8003faa:	4628      	mov	r0, r5
 8003fac:	f7ff fcf2 	bl	8003994 <dhcp_discover>
 8003fb0:	e6a2      	b.n	8003cf8 <dhcp_recv+0xac>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	f47f aea0 	bne.w	8003cf8 <dhcp_recv+0xac>
 8003fb8:	f899 3009 	ldrb.w	r3, [r9, #9]
 8003fbc:	2b06      	cmp	r3, #6
 8003fbe:	f47f ae9b 	bne.w	8003cf8 <dhcp_recv+0xac>
    dhcp->request_timeout = 0;
 8003fc2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003fc6:	6a2c      	ldr	r4, [r5, #32]
    dhcp->request_timeout = 0;
 8003fc8:	f8a9 3016 	strh.w	r3, [r9, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8003fcc:	9b02      	ldr	r3, [sp, #8]
 8003fce:	789b      	ldrb	r3, [r3, #2]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f43f ae91 	beq.w	8003cf8 <dhcp_recv+0xac>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8003fd6:	6890      	ldr	r0, [r2, #8]
 8003fd8:	f7ff f9e4 	bl	80033a4 <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8003fdc:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8003fde:	6260      	str	r0, [r4, #36]	; 0x24
    dhcp_select(netif);
 8003fe0:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 8003fe6:	f7ff fd33 	bl	8003a50 <dhcp_select>
 8003fea:	e685      	b.n	8003cf8 <dhcp_recv+0xac>
    switch(op) {
 8003fec:	2a36      	cmp	r2, #54	; 0x36
 8003fee:	f43f af28 	beq.w	8003e42 <dhcp_recv+0x1f6>
 8003ff2:	f4ff af20 	bcc.w	8003e36 <dhcp_recv+0x1ea>
 8003ff6:	2a3a      	cmp	r2, #58	; 0x3a
 8003ff8:	f43f af29 	beq.w	8003e4e <dhcp_recv+0x202>
 8003ffc:	2a3b      	cmp	r2, #59	; 0x3b
 8003ffe:	d116      	bne.n	800402e <dhcp_recv+0x3e2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004000:	2b04      	cmp	r3, #4
 8004002:	f43f af41 	beq.w	8003e88 <dhcp_recv+0x23c>
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <dhcp_recv+0x408>)
 8004008:	f240 6229 	movw	r2, #1577	; 0x629
 800400c:	e6f8      	b.n	8003e00 <dhcp_recv+0x1b4>
    switch(op) {
 800400e:	2a34      	cmp	r2, #52	; 0x34
 8004010:	f43f af04 	beq.w	8003e1c <dhcp_recv+0x1d0>
 8004014:	d80f      	bhi.n	8004036 <dhcp_recv+0x3ea>
 8004016:	2a01      	cmp	r2, #1
 8004018:	f43f aeef 	beq.w	8003dfa <dhcp_recv+0x1ae>
 800401c:	f4ff ae88 	bcc.w	8003d30 <dhcp_recv+0xe4>
 8004020:	2a03      	cmp	r2, #3
 8004022:	f43f aef1 	beq.w	8003e08 <dhcp_recv+0x1bc>
 8004026:	2a33      	cmp	r2, #51	; 0x33
 8004028:	f43f af68 	beq.w	8003efc <dhcp_recv+0x2b0>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800402c:	2300      	movs	r3, #0
    offset += len + 2;
 800402e:	9a05      	ldr	r2, [sp, #20]
 8004030:	441a      	add	r2, r3
 8004032:	b294      	uxth	r4, r2
 8004034:	e6b0      	b.n	8003d98 <dhcp_recv+0x14c>
    switch(op) {
 8004036:	2a36      	cmp	r2, #54	; 0x36
 8004038:	f43f af05 	beq.w	8003e46 <dhcp_recv+0x1fa>
 800403c:	f4ff aefd 	bcc.w	8003e3a <dhcp_recv+0x1ee>
 8004040:	2a3a      	cmp	r2, #58	; 0x3a
 8004042:	f43f af06 	beq.w	8003e52 <dhcp_recv+0x206>
 8004046:	2a3b      	cmp	r2, #59	; 0x3b
 8004048:	d0dd      	beq.n	8004006 <dhcp_recv+0x3ba>
 800404a:	e7ef      	b.n	800402c <dhcp_recv+0x3e0>
 800404c:	20000260 	.word	0x20000260
 8004050:	0800ce0c 	.word	0x0800ce0c
 8004054:	0800c911 	.word	0x0800c911

08004058 <dhcp_arp_reply>:
{
 8004058:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800405a:	4605      	mov	r5, r0
 800405c:	b948      	cbnz	r0, 8004072 <dhcp_arp_reply+0x1a>
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <dhcp_arp_reply+0x98>)
 8004060:	f240 327b 	movw	r2, #891	; 0x37b
 8004064:	4923      	ldr	r1, [pc, #140]	; (80040f4 <dhcp_arp_reply+0x9c>)
 8004066:	4824      	ldr	r0, [pc, #144]	; (80040f8 <dhcp_arp_reply+0xa0>)
}
 8004068:	b003      	add	sp, #12
 800406a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800406e:	f007 ba57 	b.w	800b520 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8004072:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8004074:	2c00      	cmp	r4, #0
 8004076:	d039      	beq.n	80040ec <dhcp_arp_reply+0x94>
 8004078:	7a63      	ldrb	r3, [r4, #9]
 800407a:	2b08      	cmp	r3, #8
 800407c:	d136      	bne.n	80040ec <dhcp_arp_reply+0x94>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800407e:	680a      	ldr	r2, [r1, #0]
 8004080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004082:	429a      	cmp	r2, r3
 8004084:	d132      	bne.n	80040ec <dhcp_arp_reply+0x94>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8004086:	210c      	movs	r1, #12
 8004088:	4620      	mov	r0, r4
 800408a:	f7ff f99c 	bl	80033c6 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800408e:	2204      	movs	r2, #4
 8004090:	4621      	mov	r1, r4
 8004092:	4628      	mov	r0, r5
 8004094:	f7ff fa30 	bl	80034f8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004098:	bb08      	cbnz	r0, 80040de <dhcp_arp_reply+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800409a:	2204      	movs	r2, #4
 800409c:	2132      	movs	r1, #50	; 0x32
 800409e:	4620      	mov	r0, r4
 80040a0:	f7ff f9bc 	bl	800341c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80040a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80040a6:	f7ff f97d 	bl	80033a4 <lwip_htonl>
 80040aa:	4601      	mov	r1, r0
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff f9f5 	bl	800349c <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7ff fbcc 	bl	8003850 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80040b8:	8aa1      	ldrh	r1, [r4, #20]
 80040ba:	68e0      	ldr	r0, [r4, #12]
 80040bc:	31f0      	adds	r1, #240	; 0xf0
 80040be:	b289      	uxth	r1, r1
 80040c0:	f002 f8f4 	bl	80062ac <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <dhcp_arp_reply+0xa4>)
 80040c6:	480e      	ldr	r0, [pc, #56]	; (8004100 <dhcp_arp_reply+0xa8>)
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	2343      	movs	r3, #67	; 0x43
 80040cc:	9500      	str	r5, [sp, #0]
 80040ce:	4a0d      	ldr	r2, [pc, #52]	; (8004104 <dhcp_arp_reply+0xac>)
 80040d0:	68e1      	ldr	r1, [r4, #12]
 80040d2:	6800      	ldr	r0, [r0, #0]
 80040d4:	f005 fd3a 	bl	8009b4c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff fc2b 	bl	8003934 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 80040de:	7aa3      	ldrb	r3, [r4, #10]
 80040e0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80040e2:	bf1c      	itt	ne
 80040e4:	3301      	addne	r3, #1
 80040e6:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80040e8:	2314      	movs	r3, #20
 80040ea:	82e3      	strh	r3, [r4, #22]
}
 80040ec:	b003      	add	sp, #12
 80040ee:	bd30      	pop	{r4, r5, pc}
 80040f0:	0800c911 	.word	0x0800c911
 80040f4:	0800c6ac 	.word	0x0800c6ac
 80040f8:	0800c987 	.word	0x0800c987
 80040fc:	0800ce0c 	.word	0x0800ce0c
 8004100:	200000a0 	.word	0x200000a0
 8004104:	0800ce10 	.word	0x0800ce10

08004108 <dhcp_renew>:
{
 8004108:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800410a:	6a04      	ldr	r4, [r0, #32]
{
 800410c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800410e:	2105      	movs	r1, #5
 8004110:	4620      	mov	r0, r4
 8004112:	f7ff f958 	bl	80033c6 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8004116:	2203      	movs	r2, #3
 8004118:	4621      	mov	r1, r4
 800411a:	4630      	mov	r0, r6
 800411c:	f7ff f9ec 	bl	80034f8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004120:	4605      	mov	r5, r0
 8004122:	bb70      	cbnz	r0, 8004182 <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004124:	2202      	movs	r2, #2
 8004126:	2139      	movs	r1, #57	; 0x39
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff f977 	bl	800341c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800412e:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8004130:	4620      	mov	r0, r4
 8004132:	f7ff f951 	bl	80033d8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004136:	2203      	movs	r2, #3
 8004138:	2137      	movs	r1, #55	; 0x37
 800413a:	4620      	mov	r0, r4
 800413c:	f7ff f96e 	bl	800341c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004140:	2101      	movs	r1, #1
 8004142:	4620      	mov	r0, r4
 8004144:	f7ff f98e 	bl	8003464 <dhcp_option_byte>
 8004148:	2103      	movs	r1, #3
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff f98a 	bl	8003464 <dhcp_option_byte>
 8004150:	211c      	movs	r1, #28
 8004152:	4620      	mov	r0, r4
 8004154:	f7ff f986 	bl	8003464 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004158:	4620      	mov	r0, r4
 800415a:	f7ff fb79 	bl	8003850 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800415e:	8aa1      	ldrh	r1, [r4, #20]
 8004160:	68e0      	ldr	r0, [r4, #12]
 8004162:	31f0      	adds	r1, #240	; 0xf0
 8004164:	b289      	uxth	r1, r1
 8004166:	f002 f8a1 	bl	80062ac <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800416a:	4813      	ldr	r0, [pc, #76]	; (80041b8 <dhcp_renew+0xb0>)
 800416c:	9600      	str	r6, [sp, #0]
 800416e:	2343      	movs	r3, #67	; 0x43
 8004170:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8004174:	68e1      	ldr	r1, [r4, #12]
 8004176:	6800      	ldr	r0, [r0, #0]
 8004178:	f005 fd4e 	bl	8009c18 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800417c:	4620      	mov	r0, r4
 800417e:	f7ff fbd9 	bl	8003934 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8004182:	7aa3      	ldrb	r3, [r4, #10]
}
 8004184:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8004186:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004188:	bf1c      	itt	ne
 800418a:	3301      	addne	r3, #1
 800418c:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800418e:	7aa3      	ldrb	r3, [r4, #10]
 8004190:	2b09      	cmp	r3, #9
 8004192:	bf96      	itet	ls
 8004194:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8004198:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 800419c:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80041a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 80041a4:	bf9c      	itt	ls
 80041a6:	011b      	lslls	r3, r3, #4
 80041a8:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80041aa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80041ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80041b2:	82e3      	strh	r3, [r4, #22]
}
 80041b4:	b002      	add	sp, #8
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	200000a0 	.word	0x200000a0

080041bc <dhcp_stop>:
{
 80041bc:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80041be:	b940      	cbnz	r0, 80041d2 <dhcp_stop+0x16>
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <dhcp_stop+0x44>)
 80041c2:	f240 5242 	movw	r2, #1346	; 0x542
 80041c6:	490f      	ldr	r1, [pc, #60]	; (8004204 <dhcp_stop+0x48>)
 80041c8:	480f      	ldr	r0, [pc, #60]	; (8004208 <dhcp_stop+0x4c>)
}
 80041ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80041ce:	f007 b9a7 	b.w	800b520 <iprintf>
  dhcp = netif_dhcp_data(netif);
 80041d2:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 80041d4:	b194      	cbz	r4, 80041fc <dhcp_stop+0x40>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	b133      	cbz	r3, 80041e8 <dhcp_stop+0x2c>
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <dhcp_stop+0x44>)
 80041dc:	f240 524f 	movw	r2, #1359	; 0x54f
 80041e0:	490a      	ldr	r1, [pc, #40]	; (800420c <dhcp_stop+0x50>)
 80041e2:	4809      	ldr	r0, [pc, #36]	; (8004208 <dhcp_stop+0x4c>)
 80041e4:	f007 f99c 	bl	800b520 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80041e8:	2100      	movs	r1, #0
 80041ea:	4620      	mov	r0, r4
 80041ec:	f7ff f8eb 	bl	80033c6 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 80041f0:	7a23      	ldrb	r3, [r4, #8]
 80041f2:	b11b      	cbz	r3, 80041fc <dhcp_stop+0x40>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80041f4:	f7ff fd0a 	bl	8003c0c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	7223      	strb	r3, [r4, #8]
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	bf00      	nop
 8004200:	0800c911 	.word	0x0800c911
 8004204:	0800cb1e 	.word	0x0800cb1e
 8004208:	0800c987 	.word	0x0800c987
 800420c:	0800ca3c 	.word	0x0800ca3c

08004210 <dhcp_start>:
{
 8004210:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8004212:	4605      	mov	r5, r0
 8004214:	b948      	cbnz	r0, 800422a <dhcp_start+0x1a>
 8004216:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <dhcp_start+0xa4>)
 8004218:	f240 22d6 	movw	r2, #726	; 0x2d6
 800421c:	4926      	ldr	r1, [pc, #152]	; (80042b8 <dhcp_start+0xa8>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800421e:	4827      	ldr	r0, [pc, #156]	; (80042bc <dhcp_start+0xac>)
 8004220:	f007 f97e 	bl	800b520 <iprintf>
 8004224:	f06f 000f 	mvn.w	r0, #15
 8004228:	bd38      	pop	{r3, r4, r5, pc}
 800422a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800422e:	07db      	lsls	r3, r3, #31
 8004230:	d404      	bmi.n	800423c <dhcp_start+0x2c>
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <dhcp_start+0xa4>)
 8004234:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004238:	4921      	ldr	r1, [pc, #132]	; (80042c0 <dhcp_start+0xb0>)
 800423a:	e7f0      	b.n	800421e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800423c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  dhcp = netif_dhcp_data(netif);
 800423e:	6a04      	ldr	r4, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8004240:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8004244:	d202      	bcs.n	800424c <dhcp_start+0x3c>
    return ERR_MEM;
 8004246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800424a:	bd38      	pop	{r3, r4, r5, pc}
  if (dhcp == NULL) {
 800424c:	b9d4      	cbnz	r4, 8004284 <dhcp_start+0x74>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800424e:	2040      	movs	r0, #64	; 0x40
 8004250:	f001 fc88 	bl	8005b64 <mem_malloc>
    if (dhcp == NULL) {
 8004254:	4604      	mov	r4, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d0f5      	beq.n	8004246 <dhcp_start+0x36>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800425a:	6228      	str	r0, [r5, #32]
  memset(dhcp, 0, sizeof(struct dhcp));
 800425c:	2240      	movs	r2, #64	; 0x40
 800425e:	2100      	movs	r1, #0
 8004260:	4620      	mov	r0, r4
 8004262:	f007 f8a9 	bl	800b3b8 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8004266:	f7ff fab9 	bl	80037dc <dhcp_inc_pcb_refcount>
 800426a:	2800      	cmp	r0, #0
 800426c:	d1eb      	bne.n	8004246 <dhcp_start+0x36>
  dhcp->pcb_allocated = 1;
 800426e:	2301      	movs	r3, #1
  result = dhcp_discover(netif);
 8004270:	4628      	mov	r0, r5
  dhcp->pcb_allocated = 1;
 8004272:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 8004274:	f7ff fb8e 	bl	8003994 <dhcp_discover>
  if (result != ERR_OK) {
 8004278:	2800      	cmp	r0, #0
 800427a:	d0e6      	beq.n	800424a <dhcp_start+0x3a>
    dhcp_stop(netif);
 800427c:	4628      	mov	r0, r5
 800427e:	f7ff ff9d 	bl	80041bc <dhcp_stop>
 8004282:	e7e0      	b.n	8004246 <dhcp_start+0x36>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8004284:	68e3      	ldr	r3, [r4, #12]
 8004286:	b133      	cbz	r3, 8004296 <dhcp_start+0x86>
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <dhcp_start+0xa4>)
 800428a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800428e:	490d      	ldr	r1, [pc, #52]	; (80042c4 <dhcp_start+0xb4>)
 8004290:	480a      	ldr	r0, [pc, #40]	; (80042bc <dhcp_start+0xac>)
 8004292:	f007 f945 	bl	800b520 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8004296:	6863      	ldr	r3, [r4, #4]
 8004298:	b133      	cbz	r3, 80042a8 <dhcp_start+0x98>
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <dhcp_start+0xa4>)
 800429c:	f240 22f1 	movw	r2, #753	; 0x2f1
 80042a0:	4909      	ldr	r1, [pc, #36]	; (80042c8 <dhcp_start+0xb8>)
 80042a2:	4806      	ldr	r0, [pc, #24]	; (80042bc <dhcp_start+0xac>)
 80042a4:	f007 f93c 	bl	800b520 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 80042a8:	7a23      	ldrb	r3, [r4, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0d6      	beq.n	800425c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80042ae:	f7ff fcad 	bl	8003c0c <dhcp_dec_pcb_refcount>
 80042b2:	e7d3      	b.n	800425c <dhcp_start+0x4c>
 80042b4:	0800c911 	.word	0x0800c911
 80042b8:	0800c6ac 	.word	0x0800c6ac
 80042bc:	0800c987 	.word	0x0800c987
 80042c0:	0800cae5 	.word	0x0800cae5
 80042c4:	0800cb06 	.word	0x0800cb06
 80042c8:	0800ca3c 	.word	0x0800ca3c

080042cc <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80042cc:	b158      	cbz	r0, 80042e6 <dhcp_supplied_address+0x1a>
 80042ce:	6a00      	ldr	r0, [r0, #32]
 80042d0:	b148      	cbz	r0, 80042e6 <dhcp_supplied_address+0x1a>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80042d2:	7a40      	ldrb	r0, [r0, #9]
 80042d4:	280a      	cmp	r0, #10
 80042d6:	d005      	beq.n	80042e4 <dhcp_supplied_address+0x18>
 80042d8:	3804      	subs	r0, #4
 80042da:	2801      	cmp	r0, #1
 80042dc:	bf8c      	ite	hi
 80042de:	2000      	movhi	r0, #0
 80042e0:	2001      	movls	r0, #1
 80042e2:	4770      	bx	lr
 80042e4:	2001      	movs	r0, #1
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 80042e6:	4770      	bx	lr

080042e8 <dhcp_release>:
{
 80042e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80042ea:	6a04      	ldr	r4, [r0, #32]
{
 80042ec:	b085      	sub	sp, #20
 80042ee:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 80042f0:	2c00      	cmp	r4, #0
 80042f2:	d047      	beq.n	8004384 <dhcp_release+0x9c>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80042f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042f6:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80042f8:	f7ff ffe8 	bl	80042cc <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80042fc:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80042fe:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8004300:	4620      	mov	r0, r4
 8004302:	f7ff f860 	bl	80033c6 <dhcp_set_state>
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8004306:	2300      	movs	r3, #0
 8004308:	6263      	str	r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800430a:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800430c:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800430e:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8004310:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004312:	63a3      	str	r3, [r4, #56]	; 0x38
 8004314:	6363      	str	r3, [r4, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8004316:	8463      	strh	r3, [r4, #34]	; 0x22
 8004318:	8423      	strh	r3, [r4, #32]
 800431a:	83e3      	strh	r3, [r4, #30]
 800431c:	83a3      	strh	r3, [r4, #28]
  if (!is_dhcp_supplied_address) {
 800431e:	b375      	cbz	r5, 800437e <dhcp_release+0x96>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8004320:	2207      	movs	r2, #7
 8004322:	4621      	mov	r1, r4
 8004324:	4630      	mov	r0, r6
 8004326:	f7ff f8e7 	bl	80034f8 <dhcp_create_msg>
  if (result == ERR_OK) {
 800432a:	4605      	mov	r5, r0
 800432c:	bb08      	cbnz	r0, 8004372 <dhcp_release+0x8a>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800432e:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8004330:	2204      	movs	r2, #4
 8004332:	2136      	movs	r1, #54	; 0x36
 8004334:	4620      	mov	r0, r4
 8004336:	f7ff f871 	bl	800341c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800433a:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800433e:	f7ff f831 	bl	80033a4 <lwip_htonl>
 8004342:	4601      	mov	r1, r0
 8004344:	4620      	mov	r0, r4
 8004346:	f7ff f8a9 	bl	800349c <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800434a:	4620      	mov	r0, r4
 800434c:	f7ff fa80 	bl	8003850 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004350:	8aa1      	ldrh	r1, [r4, #20]
 8004352:	68e0      	ldr	r0, [r4, #12]
 8004354:	31f0      	adds	r1, #240	; 0xf0
 8004356:	b289      	uxth	r1, r1
 8004358:	f001 ffa8 	bl	80062ac <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800435c:	480b      	ldr	r0, [pc, #44]	; (800438c <dhcp_release+0xa4>)
 800435e:	9600      	str	r6, [sp, #0]
 8004360:	2343      	movs	r3, #67	; 0x43
 8004362:	463a      	mov	r2, r7
 8004364:	68e1      	ldr	r1, [r4, #12]
 8004366:	6800      	ldr	r0, [r0, #0]
 8004368:	f005 fc56 	bl	8009c18 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800436c:	4620      	mov	r0, r4
 800436e:	f7ff fae1 	bl	8003934 <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <dhcp_release+0xa8>)
 8004374:	4630      	mov	r0, r6
 8004376:	461a      	mov	r2, r3
 8004378:	4619      	mov	r1, r3
 800437a:	f001 fd37 	bl	8005dec <netif_set_addr>
}
 800437e:	4628      	mov	r0, r5
 8004380:	b005      	add	sp, #20
 8004382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 8004384:	f06f 050f 	mvn.w	r5, #15
 8004388:	e7f9      	b.n	800437e <dhcp_release+0x96>
 800438a:	bf00      	nop
 800438c:	200000a0 	.word	0x200000a0
 8004390:	0800ce0c 	.word	0x0800ce0c

08004394 <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 8004394:	4b51      	ldr	r3, [pc, #324]	; (80044dc <dhcp_coarse_tmr+0x148>)
{
 8004396:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct netif *netif = netif_list;
 800439a:	681d      	ldr	r5, [r3, #0]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800439c:	f240 2619 	movw	r6, #537	; 0x219
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80043a0:	4f4f      	ldr	r7, [pc, #316]	; (80044e0 <dhcp_coarse_tmr+0x14c>)
 80043a2:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80044e4 <dhcp_coarse_tmr+0x150>
  while (netif != NULL) {
 80043a6:	b915      	cbnz	r5, 80043ae <dhcp_coarse_tmr+0x1a>
}
 80043a8:	b003      	add	sp, #12
 80043aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80043ae:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80043b0:	b17c      	cbz	r4, 80043d2 <dhcp_coarse_tmr+0x3e>
 80043b2:	7a63      	ldrb	r3, [r4, #9]
 80043b4:	b16b      	cbz	r3, 80043d2 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80043b6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80043b8:	b169      	cbz	r1, 80043d6 <dhcp_coarse_tmr+0x42>
 80043ba:	8c22      	ldrh	r2, [r4, #32]
 80043bc:	3201      	adds	r2, #1
 80043be:	b292      	uxth	r2, r2
 80043c0:	4291      	cmp	r1, r2
 80043c2:	8422      	strh	r2, [r4, #32]
 80043c4:	d107      	bne.n	80043d6 <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 80043c6:	4628      	mov	r0, r5
 80043c8:	f7ff ff8e 	bl	80042e8 <dhcp_release>
        dhcp_discover(netif);
 80043cc:	4628      	mov	r0, r5
 80043ce:	f7ff fae1 	bl	8003994 <dhcp_discover>
    netif = netif->next;
 80043d2:	682d      	ldr	r5, [r5, #0]
 80043d4:	e7e7      	b.n	80043a6 <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80043d6:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 80043da:	f1b9 0f00 	cmp.w	r9, #0
 80043de:	d064      	beq.n	80044aa <dhcp_coarse_tmr+0x116>
 80043e0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80043e4:	f1b9 0f01 	cmp.w	r9, #1
 80043e8:	83e2      	strh	r2, [r4, #30]
 80043ea:	d15e      	bne.n	80044aa <dhcp_coarse_tmr+0x116>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b09      	cmp	r3, #9
 80043f2:	d8ee      	bhi.n	80043d2 <dhcp_coarse_tmr+0x3e>
 80043f4:	fa26 f303 	lsr.w	r3, r6, r3
 80043f8:	07db      	lsls	r3, r3, #31
 80043fa:	d5ea      	bpl.n	80043d2 <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80043fc:	2104      	movs	r1, #4
 80043fe:	4620      	mov	r0, r4
 8004400:	f7fe ffe1 	bl	80033c6 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8004404:	2203      	movs	r2, #3
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f7ff f875 	bl	80034f8 <dhcp_create_msg>
  if (result == ERR_OK) {
 800440e:	bb60      	cbnz	r0, 800446a <dhcp_coarse_tmr+0xd6>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004410:	2202      	movs	r2, #2
 8004412:	2139      	movs	r1, #57	; 0x39
 8004414:	4620      	mov	r0, r4
 8004416:	f7ff f801 	bl	800341c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800441a:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 800441c:	4620      	mov	r0, r4
 800441e:	f7fe ffdb 	bl	80033d8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004422:	2203      	movs	r2, #3
 8004424:	2137      	movs	r1, #55	; 0x37
 8004426:	4620      	mov	r0, r4
 8004428:	f7fe fff8 	bl	800341c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800442c:	4649      	mov	r1, r9
 800442e:	4620      	mov	r0, r4
 8004430:	f7ff f818 	bl	8003464 <dhcp_option_byte>
 8004434:	2103      	movs	r1, #3
 8004436:	4620      	mov	r0, r4
 8004438:	f7ff f814 	bl	8003464 <dhcp_option_byte>
 800443c:	211c      	movs	r1, #28
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff f810 	bl	8003464 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004444:	4620      	mov	r0, r4
 8004446:	f7ff fa03 	bl	8003850 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800444a:	8aa1      	ldrh	r1, [r4, #20]
 800444c:	68e0      	ldr	r0, [r4, #12]
 800444e:	31f0      	adds	r1, #240	; 0xf0
 8004450:	b289      	uxth	r1, r1
 8004452:	f001 ff2b 	bl	80062ac <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8004456:	9500      	str	r5, [sp, #0]
 8004458:	2343      	movs	r3, #67	; 0x43
 800445a:	4642      	mov	r2, r8
 800445c:	68e1      	ldr	r1, [r4, #12]
 800445e:	6838      	ldr	r0, [r7, #0]
 8004460:	f005 fbda 	bl	8009c18 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff fa65 	bl	8003934 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800446a:	7aa3      	ldrb	r3, [r4, #10]
 800446c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800446e:	bf1c      	itt	ne
 8004470:	3301      	addne	r3, #1
 8004472:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8004474:	7aa3      	ldrb	r3, [r4, #10]
 8004476:	2b09      	cmp	r3, #9
 8004478:	bf96      	itet	ls
 800447a:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800447e:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8004482:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004486:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800448a:	bf9c      	itt	ls
 800448c:	00db      	lslls	r3, r3, #3
 800448e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004490:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004494:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8004498:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800449a:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800449c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	dd96      	ble.n	80043d2 <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80044a4:	105b      	asrs	r3, r3, #1
 80044a6:	83e3      	strh	r3, [r4, #30]
 80044a8:	e793      	b.n	80043d2 <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80044aa:	8ba2      	ldrh	r2, [r4, #28]
 80044ac:	2a00      	cmp	r2, #0
 80044ae:	d090      	beq.n	80043d2 <dhcp_coarse_tmr+0x3e>
 80044b0:	1e51      	subs	r1, r2, #1
 80044b2:	2a01      	cmp	r2, #1
 80044b4:	83a1      	strh	r1, [r4, #28]
 80044b6:	d18c      	bne.n	80043d2 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80044b8:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 80044bc:	2a01      	cmp	r2, #1
 80044be:	d001      	beq.n	80044c4 <dhcp_coarse_tmr+0x130>
 80044c0:	2b0a      	cmp	r3, #10
 80044c2:	d186      	bne.n	80043d2 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7ff fe1f 	bl	8004108 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80044ca:	8b63      	ldrh	r3, [r4, #26]
 80044cc:	8c22      	ldrh	r2, [r4, #32]
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80044d2:	bfc4      	itt	gt
 80044d4:	105b      	asrgt	r3, r3, #1
 80044d6:	83a3      	strhgt	r3, [r4, #28]
 80044d8:	e77b      	b.n	80043d2 <dhcp_coarse_tmr+0x3e>
 80044da:	bf00      	nop
 80044dc:	200037dc 	.word	0x200037dc
 80044e0:	200000a0 	.word	0x200000a0
 80044e4:	0800ce10 	.word	0x0800ce10

080044e8 <dhcp_fine_tmr>:
{
 80044e8:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <dhcp_fine_tmr+0x78>)
        dhcp->request_timeout--;
 80044ec:	2500      	movs	r5, #0
  struct netif *netif = netif_list;
 80044ee:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 80044f0:	b904      	cbnz	r4, 80044f4 <dhcp_fine_tmr+0xc>
}
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80044f4:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 80044f6:	b123      	cbz	r3, 8004502 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 80044f8:	8ada      	ldrh	r2, [r3, #22]
 80044fa:	2a01      	cmp	r2, #1
 80044fc:	d903      	bls.n	8004506 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 80044fe:	3a01      	subs	r2, #1
 8004500:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 8004502:	6824      	ldr	r4, [r4, #0]
 8004504:	e7f4      	b.n	80044f0 <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 8004506:	d1fc      	bne.n	8004502 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8004508:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 800450a:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800450c:	2a0c      	cmp	r2, #12
 800450e:	d001      	beq.n	8004514 <dhcp_fine_tmr+0x2c>
 8004510:	2a06      	cmp	r2, #6
 8004512:	d103      	bne.n	800451c <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 8004514:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8004516:	f7ff fa3d 	bl	8003994 <dhcp_discover>
 800451a:	e7f2      	b.n	8004502 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800451c:	2a01      	cmp	r2, #1
 800451e:	d109      	bne.n	8004534 <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 8004520:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 8004522:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8004524:	2b05      	cmp	r3, #5
 8004526:	d802      	bhi.n	800452e <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8004528:	f7ff fa92 	bl	8003a50 <dhcp_select>
 800452c:	e7e9      	b.n	8004502 <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 800452e:	f7ff fedb 	bl	80042e8 <dhcp_release>
 8004532:	e7ef      	b.n	8004514 <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8004534:	2a08      	cmp	r2, #8
 8004536:	d109      	bne.n	800454c <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 8004538:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 800453a:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 800453c:	2b01      	cmp	r3, #1
 800453e:	d802      	bhi.n	8004546 <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 8004540:	f7ff f8b6 	bl	80036b0 <dhcp_check>
 8004544:	e7dd      	b.n	8004502 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8004546:	f7ff f8c9 	bl	80036dc <dhcp_bind>
 800454a:	e7da      	b.n	8004502 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800454c:	2a03      	cmp	r2, #3
 800454e:	d1d8      	bne.n	8004502 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8004550:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 8004552:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8004554:	2b01      	cmp	r3, #1
 8004556:	d8de      	bhi.n	8004516 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8004558:	f7ff faee 	bl	8003b38 <dhcp_reboot>
 800455c:	e7d1      	b.n	8004502 <dhcp_fine_tmr+0x1a>
 800455e:	bf00      	nop
 8004560:	200037dc 	.word	0x200037dc

08004564 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004564:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004566:	2618      	movs	r6, #24
 8004568:	4c07      	ldr	r4, [pc, #28]	; (8004588 <etharp_free_entry+0x24>)
{
 800456a:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800456c:	4346      	muls	r6, r0
 800456e:	59a0      	ldr	r0, [r4, r6]
 8004570:	b118      	cbz	r0, 800457a <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004572:	f001 fd59 	bl	8006028 <pbuf_free>
    arp_table[i].q = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800457a:	2318      	movs	r3, #24
 800457c:	fb03 4405 	mla	r4, r3, r5, r4
 8004580:	2300      	movs	r3, #0
 8004582:	7523      	strb	r3, [r4, #20]
 8004584:	bd70      	pop	{r4, r5, r6, pc}
 8004586:	bf00      	nop
 8004588:	200000ac 	.word	0x200000ac

0800458c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800458c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004592:	4689      	mov	r9, r1
 8004594:	4692      	mov	sl, r2
 8004596:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004598:	4607      	mov	r7, r0
 800459a:	b930      	cbnz	r0, 80045aa <etharp_raw+0x1e>
 800459c:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <etharp_raw+0xc4>)
 800459e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80045a2:	492c      	ldr	r1, [pc, #176]	; (8004654 <etharp_raw+0xc8>)
 80045a4:	482c      	ldr	r0, [pc, #176]	; (8004658 <etharp_raw+0xcc>)
 80045a6:	f006 ffbb 	bl	800b520 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80045aa:	2200      	movs	r2, #0
 80045ac:	211c      	movs	r1, #28
 80045ae:	2002      	movs	r0, #2
 80045b0:	f001 fd9c 	bl	80060ec <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80045b4:	4606      	mov	r6, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d047      	beq.n	800464a <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80045ba:	8943      	ldrh	r3, [r0, #10]
 80045bc:	2b1b      	cmp	r3, #27
 80045be:	d806      	bhi.n	80045ce <etharp_raw+0x42>
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <etharp_raw+0xc4>)
 80045c2:	f240 4264 	movw	r2, #1124	; 0x464
 80045c6:	4925      	ldr	r1, [pc, #148]	; (800465c <etharp_raw+0xd0>)
 80045c8:	4823      	ldr	r0, [pc, #140]	; (8004658 <etharp_raw+0xcc>)
 80045ca:	f006 ffa9 	bl	800b520 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80045ce:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80045d0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80045d4:	f7fe fee3 	bl	800339e <lwip_htons>
 80045d8:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80045da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d006      	beq.n	80045f0 <etharp_raw+0x64>
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <etharp_raw+0xc4>)
 80045e4:	f240 426b 	movw	r2, #1131	; 0x46b
 80045e8:	491d      	ldr	r1, [pc, #116]	; (8004660 <etharp_raw+0xd4>)
 80045ea:	481b      	ldr	r0, [pc, #108]	; (8004658 <etharp_raw+0xcc>)
 80045ec:	f006 ff98 	bl	800b520 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80045f0:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80045f4:	464a      	mov	r2, r9
 80045f6:	4631      	mov	r1, r6
 80045f8:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80045fa:	60a3      	str	r3, [r4, #8]
 80045fc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004600:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8004602:	682b      	ldr	r3, [r5, #0]
 8004604:	f8c4 3012 	str.w	r3, [r4, #18]
 8004608:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800460a:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800460c:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800460e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8004616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004618:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800461a:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800461c:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800461e:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004620:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004622:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004624:	2308      	movs	r3, #8
 8004626:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8004628:	2306      	movs	r3, #6
 800462a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800462c:	2304      	movs	r3, #4
 800462e:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8004630:	f640 0306 	movw	r3, #2054	; 0x806
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	4653      	mov	r3, sl
 8004638:	f005 fbbe 	bl	8009db8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800463c:	4630      	mov	r0, r6
 800463e:	f001 fcf3 	bl	8006028 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8004642:	4628      	mov	r0, r5
}
 8004644:	b002      	add	sp, #8
 8004646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800464a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800464e:	e7f9      	b.n	8004644 <etharp_raw+0xb8>
 8004650:	0800cc2c 	.word	0x0800cc2c
 8004654:	0800c6ac 	.word	0x0800c6ac
 8004658:	0800c987 	.word	0x0800c987
 800465c:	0800cc63 	.word	0x0800cc63
 8004660:	0800cc94 	.word	0x0800cc94

08004664 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8004664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	4b3e      	ldr	r3, [pc, #248]	; (8004764 <etharp_find_entry.isra.0+0x100>)
  s8_t old_queue = ARP_TABLE_SIZE;
 800466a:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800466c:	4605      	mov	r5, r0
 800466e:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004670:	4694      	mov	ip, r2
 8004672:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004674:	4681      	mov	r9, r0
 8004676:	4680      	mov	r8, r0
 8004678:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 800467a:	4696      	mov	lr, r2
 800467c:	461e      	mov	r6, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800467e:	9101      	str	r1, [sp, #4]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004680:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8004684:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004686:	d111      	bne.n	80046ac <etharp_find_entry.isra.0+0x48>
 8004688:	b997      	cbnz	r7, 80046b0 <etharp_find_entry.isra.0+0x4c>
      empty = i;
 800468a:	fa4f fe80 	sxtb.w	lr, r0
 800468e:	3001      	adds	r0, #1
 8004690:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004692:	280a      	cmp	r0, #10
 8004694:	d1f4      	bne.n	8004680 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004696:	9b01      	ldr	r3, [sp, #4]
 8004698:	0799      	lsls	r1, r3, #30
 800469a:	d404      	bmi.n	80046a6 <etharp_find_entry.isra.0+0x42>
 800469c:	f1be 0f0a 	cmp.w	lr, #10
 80046a0:	d11c      	bne.n	80046dc <etharp_find_entry.isra.0+0x78>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80046a2:	07db      	lsls	r3, r3, #31
 80046a4:	d435      	bmi.n	8004712 <etharp_find_entry.isra.0+0xae>
    return (s8_t)ERR_MEM;
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046aa:	e009      	b.n	80046c0 <etharp_find_entry.isra.0+0x5c>
    } else if (state != ETHARP_STATE_EMPTY) {
 80046ac:	2f00      	cmp	r7, #0
 80046ae:	d0ee      	beq.n	800468e <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	d04a      	beq.n	800474a <etharp_find_entry.isra.0+0xe6>
 80046b4:	6829      	ldr	r1, [r5, #0]
 80046b6:	468a      	mov	sl, r1
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	458a      	cmp	sl, r1
 80046bc:	d145      	bne.n	800474a <etharp_find_entry.isra.0+0xe6>
        return i;
 80046be:	b240      	sxtb	r0, r0
}
 80046c0:	b003      	add	sp, #12
 80046c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80046c6:	45c2      	cmp	sl, r8
 80046c8:	d3e1      	bcc.n	800468e <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 80046ca:	fa4f fc80 	sxtb.w	ip, r0
 80046ce:	46d0      	mov	r8, sl
 80046d0:	e7dd      	b.n	800468e <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 80046d2:	45ca      	cmp	sl, r9
            old_stable = i;
 80046d4:	bf24      	itt	cs
 80046d6:	b244      	sxtbcs	r4, r0
 80046d8:	46d1      	movcs	r9, sl
 80046da:	e7d8      	b.n	800468e <etharp_find_entry.isra.0+0x2a>
    i = empty;
 80046dc:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80046e0:	2318      	movs	r3, #24
 80046e2:	fb03 6307 	mla	r3, r3, r7, r6
 80046e6:	7d1b      	ldrb	r3, [r3, #20]
 80046e8:	b133      	cbz	r3, 80046f8 <etharp_find_entry.isra.0+0x94>
 80046ea:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <etharp_find_entry.isra.0+0x104>)
 80046ec:	f240 1287 	movw	r2, #391	; 0x187
 80046f0:	491e      	ldr	r1, [pc, #120]	; (800476c <etharp_find_entry.isra.0+0x108>)
 80046f2:	481f      	ldr	r0, [pc, #124]	; (8004770 <etharp_find_entry.isra.0+0x10c>)
 80046f4:	f006 ff14 	bl	800b520 <iprintf>
  if (ipaddr != NULL) {
 80046f8:	b125      	cbz	r5, 8004704 <etharp_find_entry.isra.0+0xa0>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80046fa:	2318      	movs	r3, #24
 80046fc:	682a      	ldr	r2, [r5, #0]
 80046fe:	fb03 6307 	mla	r3, r3, r7, r6
 8004702:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8004704:	2318      	movs	r3, #24
  return (err_t)i;
 8004706:	b278      	sxtb	r0, r7
  arp_table[i].ctime = 0;
 8004708:	fb03 6607 	mla	r6, r3, r7, r6
 800470c:	2300      	movs	r3, #0
 800470e:	8273      	strh	r3, [r6, #18]
 8004710:	e7d6      	b.n	80046c0 <etharp_find_entry.isra.0+0x5c>
    if (old_stable < ARP_TABLE_SIZE) {
 8004712:	2c0a      	cmp	r4, #10
 8004714:	d00f      	beq.n	8004736 <etharp_find_entry.isra.0+0xd2>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004716:	2318      	movs	r3, #24
      i = old_stable;
 8004718:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800471a:	435c      	muls	r4, r3
 800471c:	5933      	ldr	r3, [r6, r4]
 800471e:	b133      	cbz	r3, 800472e <etharp_find_entry.isra.0+0xca>
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <etharp_find_entry.isra.0+0x104>)
 8004722:	f240 126f 	movw	r2, #367	; 0x16f
 8004726:	4913      	ldr	r1, [pc, #76]	; (8004774 <etharp_find_entry.isra.0+0x110>)
 8004728:	4811      	ldr	r0, [pc, #68]	; (8004770 <etharp_find_entry.isra.0+0x10c>)
 800472a:	f006 fef9 	bl	800b520 <iprintf>
    etharp_free_entry(i);
 800472e:	4638      	mov	r0, r7
 8004730:	f7ff ff18 	bl	8004564 <etharp_free_entry>
 8004734:	e7d4      	b.n	80046e0 <etharp_find_entry.isra.0+0x7c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004736:	f1bc 0f0a 	cmp.w	ip, #10
 800473a:	d002      	beq.n	8004742 <etharp_find_entry.isra.0+0xde>
      i = old_pending;
 800473c:	fa5f f78c 	uxtb.w	r7, ip
 8004740:	e7f5      	b.n	800472e <etharp_find_entry.isra.0+0xca>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004742:	2a0a      	cmp	r2, #10
 8004744:	d0af      	beq.n	80046a6 <etharp_find_entry.isra.0+0x42>
      i = old_queue;
 8004746:	b2d7      	uxtb	r7, r2
 8004748:	e7f1      	b.n	800472e <etharp_find_entry.isra.0+0xca>
      if (state == ETHARP_STATE_PENDING) {
 800474a:	2f01      	cmp	r7, #1
 800474c:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8004750:	d1bf      	bne.n	80046d2 <etharp_find_entry.isra.0+0x6e>
        if (arp_table[i].q != NULL) {
 8004752:	681f      	ldr	r7, [r3, #0]
 8004754:	2f00      	cmp	r7, #0
 8004756:	d0b6      	beq.n	80046c6 <etharp_find_entry.isra.0+0x62>
          if (arp_table[i].ctime >= age_queue) {
 8004758:	45da      	cmp	sl, fp
 800475a:	d398      	bcc.n	800468e <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 800475c:	b242      	sxtb	r2, r0
 800475e:	46d3      	mov	fp, sl
 8004760:	e795      	b.n	800468e <etharp_find_entry.isra.0+0x2a>
 8004762:	bf00      	nop
 8004764:	200000ac 	.word	0x200000ac
 8004768:	0800cc2c 	.word	0x0800cc2c
 800476c:	0800cb4e 	.word	0x0800cb4e
 8004770:	0800c987 	.word	0x0800c987
 8004774:	0800cb37 	.word	0x0800cb37

08004778 <etharp_cleanup_netif>:
{
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4606      	mov	r6, r0
 800477c:	4d07      	ldr	r5, [pc, #28]	; (800479c <etharp_cleanup_netif+0x24>)
 800477e:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004780:	7d2b      	ldrb	r3, [r5, #20]
 8004782:	b12b      	cbz	r3, 8004790 <etharp_cleanup_netif+0x18>
 8004784:	68ab      	ldr	r3, [r5, #8]
 8004786:	42b3      	cmp	r3, r6
 8004788:	d102      	bne.n	8004790 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800478a:	4620      	mov	r0, r4
 800478c:	f7ff feea 	bl	8004564 <etharp_free_entry>
 8004790:	3401      	adds	r4, #1
 8004792:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004794:	2c0a      	cmp	r4, #10
 8004796:	d1f3      	bne.n	8004780 <etharp_cleanup_netif+0x8>
}
 8004798:	bd70      	pop	{r4, r5, r6, pc}
 800479a:	bf00      	nop
 800479c:	200000ac 	.word	0x200000ac

080047a0 <etharp_input>:
{
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	4680      	mov	r8, r0
 80047a6:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80047a8:	460c      	mov	r4, r1
 80047aa:	b949      	cbnz	r1, 80047c0 <etharp_input+0x20>
 80047ac:	4b4a      	ldr	r3, [pc, #296]	; (80048d8 <etharp_input+0x138>)
 80047ae:	f44f 7222 	mov.w	r2, #648	; 0x288
 80047b2:	494a      	ldr	r1, [pc, #296]	; (80048dc <etharp_input+0x13c>)
 80047b4:	484a      	ldr	r0, [pc, #296]	; (80048e0 <etharp_input+0x140>)
 80047b6:	f006 feb3 	bl	800b520 <iprintf>
}
 80047ba:	b006      	add	sp, #24
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 80047c0:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80047c2:	882b      	ldrh	r3, [r5, #0]
 80047c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c8:	d108      	bne.n	80047dc <etharp_input+0x3c>
 80047ca:	792b      	ldrb	r3, [r5, #4]
 80047cc:	2b06      	cmp	r3, #6
 80047ce:	d105      	bne.n	80047dc <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80047d0:	796b      	ldrb	r3, [r5, #5]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d102      	bne.n	80047dc <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80047d6:	886b      	ldrh	r3, [r5, #2]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d003      	beq.n	80047e4 <etharp_input+0x44>
  pbuf_free(p);
 80047dc:	4640      	mov	r0, r8
 80047de:	f001 fc23 	bl	8006028 <pbuf_free>
 80047e2:	e7ea      	b.n	80047ba <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80047e4:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80047e8:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80047ea:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80047ec:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80047ee:	b116      	cbz	r6, 80047f6 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80047f0:	1b9b      	subs	r3, r3, r6
 80047f2:	425e      	negs	r6, r3
 80047f4:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80047f6:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80047f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80047fc:	f105 0708 	add.w	r7, r5, #8
 8004800:	bf14      	ite	ne
 8004802:	f04f 0901 	movne.w	r9, #1
 8004806:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800480a:	2b06      	cmp	r3, #6
 800480c:	d006      	beq.n	800481c <etharp_input+0x7c>
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <etharp_input+0x138>)
 8004810:	f240 12ab 	movw	r2, #427	; 0x1ab
 8004814:	4933      	ldr	r1, [pc, #204]	; (80048e4 <etharp_input+0x144>)
 8004816:	4832      	ldr	r0, [pc, #200]	; (80048e0 <etharp_input+0x140>)
 8004818:	f006 fe82 	bl	800b520 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800481c:	9805      	ldr	r0, [sp, #20]
 800481e:	2800      	cmp	r0, #0
 8004820:	d03c      	beq.n	800489c <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004822:	4621      	mov	r1, r4
 8004824:	f000 fca9 	bl	800517a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8004828:	4682      	mov	sl, r0
 800482a:	bbb8      	cbnz	r0, 800489c <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 800482c:	9b05      	ldr	r3, [sp, #20]
 800482e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004832:	2be0      	cmp	r3, #224	; 0xe0
 8004834:	d032      	beq.n	800489c <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8004836:	4649      	mov	r1, r9
 8004838:	a805      	add	r0, sp, #20
 800483a:	f7ff ff13 	bl	8004664 <etharp_find_entry.isra.0>
  if (i < 0) {
 800483e:	2800      	cmp	r0, #0
 8004840:	db2c      	blt.n	800489c <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8004842:	2218      	movs	r2, #24
 8004844:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <etharp_input+0x148>)
 8004846:	f04f 0c02 	mov.w	ip, #2
 800484a:	fb02 f100 	mul.w	r1, r2, r0
 800484e:	eb03 0e01 	add.w	lr, r3, r1
 8004852:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8004856:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 800485a:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800485e:	fb12 c200 	smlabb	r2, r2, r0, ip
 8004862:	6838      	ldr	r0, [r7, #0]
 8004864:	eb03 0c02 	add.w	ip, r3, r2
 8004868:	5098      	str	r0, [r3, r2]
 800486a:	88ba      	ldrh	r2, [r7, #4]
 800486c:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8004870:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8004874:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8004878:	f1b9 0f00 	cmp.w	r9, #0
 800487c:	d00e      	beq.n	800489c <etharp_input+0xfc>
    arp_table[i].q = NULL;
 800487e:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8004882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004886:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800488a:	4649      	mov	r1, r9
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	4620      	mov	r0, r4
 8004890:	463b      	mov	r3, r7
 8004892:	f005 fa91 	bl	8009db8 <ethernet_output>
    pbuf_free(p);
 8004896:	4648      	mov	r0, r9
 8004898:	f001 fbc6 	bl	8006028 <pbuf_free>
  switch (hdr->opcode) {
 800489c:	88eb      	ldrh	r3, [r5, #6]
 800489e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a2:	d007      	beq.n	80048b4 <etharp_input+0x114>
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	d198      	bne.n	80047dc <etharp_input+0x3c>
    dhcp_arp_reply(netif, &sipaddr);
 80048aa:	a905      	add	r1, sp, #20
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7ff fbd3 	bl	8004058 <dhcp_arp_reply>
    break;
 80048b2:	e793      	b.n	80047dc <etharp_input+0x3c>
    if (for_us) {
 80048b4:	2e00      	cmp	r6, #0
 80048b6:	d091      	beq.n	80047dc <etharp_input+0x3c>
      etharp_raw(netif,
 80048b8:	2202      	movs	r2, #2
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80048ba:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 80048be:	9701      	str	r7, [sp, #4]
 80048c0:	4620      	mov	r0, r4
 80048c2:	9203      	str	r2, [sp, #12]
 80048c4:	aa05      	add	r2, sp, #20
 80048c6:	4619      	mov	r1, r3
 80048c8:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80048ca:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 80048cc:	9200      	str	r2, [sp, #0]
 80048ce:	463a      	mov	r2, r7
 80048d0:	f7ff fe5c 	bl	800458c <etharp_raw>
 80048d4:	e782      	b.n	80047dc <etharp_input+0x3c>
 80048d6:	bf00      	nop
 80048d8:	0800cc2c 	.word	0x0800cc2c
 80048dc:	0800c6ac 	.word	0x0800c6ac
 80048e0:	0800c987 	.word	0x0800c987
 80048e4:	0800cb96 	.word	0x0800cb96
 80048e8:	200000ac 	.word	0x200000ac

080048ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80048ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048ee:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80048f0:	f100 0329 	add.w	r3, r0, #41	; 0x29
 80048f4:	9102      	str	r1, [sp, #8]
 80048f6:	2401      	movs	r4, #1
 80048f8:	4905      	ldr	r1, [pc, #20]	; (8004910 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80048fa:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80048fc:	9403      	str	r4, [sp, #12]
 80048fe:	9101      	str	r1, [sp, #4]
 8004900:	4619      	mov	r1, r3
 8004902:	9200      	str	r2, [sp, #0]
 8004904:	4a03      	ldr	r2, [pc, #12]	; (8004914 <etharp_request+0x28>)
 8004906:	f7ff fe41 	bl	800458c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800490a:	b004      	add	sp, #16
 800490c:	bd10      	pop	{r4, pc}
 800490e:	bf00      	nop
 8004910:	0800e25a 	.word	0x0800e25a
 8004914:	0800e1ee 	.word	0x0800e1ee

08004918 <etharp_tmr>:
{
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	4c13      	ldr	r4, [pc, #76]	; (8004968 <etharp_tmr+0x50>)
 800491c:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800491e:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004920:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8004922:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8004924:	b16a      	cbz	r2, 8004942 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8004926:	89e3      	ldrh	r3, [r4, #14]
 8004928:	3301      	adds	r3, #1
 800492a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800492c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8004930:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004932:	d203      	bcs.n	800493c <etharp_tmr+0x24>
 8004934:	2a01      	cmp	r2, #1
 8004936:	d109      	bne.n	800494c <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004938:	2b04      	cmp	r3, #4
 800493a:	d90b      	bls.n	8004954 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 800493c:	4628      	mov	r0, r5
 800493e:	f7ff fe11 	bl	8004564 <etharp_free_entry>
 8004942:	3501      	adds	r5, #1
 8004944:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004946:	2d0a      	cmp	r5, #10
 8004948:	d1eb      	bne.n	8004922 <etharp_tmr+0xa>
 800494a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800494c:	2a03      	cmp	r2, #3
 800494e:	d106      	bne.n	800495e <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004950:	7427      	strb	r7, [r4, #16]
 8004952:	e7f6      	b.n	8004942 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8004954:	4621      	mov	r1, r4
 8004956:	6860      	ldr	r0, [r4, #4]
 8004958:	f7ff ffc8 	bl	80048ec <etharp_request>
 800495c:	e7f1      	b.n	8004942 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800495e:	2a04      	cmp	r2, #4
 8004960:	d1ef      	bne.n	8004942 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004962:	7426      	strb	r6, [r4, #16]
 8004964:	e7ed      	b.n	8004942 <etharp_tmr+0x2a>
 8004966:	bf00      	nop
 8004968:	200000b0 	.word	0x200000b0

0800496c <etharp_output_to_arp_index>:
{
 800496c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004970:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004972:	4d27      	ldr	r5, [pc, #156]	; (8004a10 <etharp_output_to_arp_index+0xa4>)
 8004974:	2218      	movs	r2, #24
{
 8004976:	b085      	sub	sp, #20
 8004978:	4606      	mov	r6, r0
 800497a:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800497c:	fb02 5204 	mla	r2, r2, r4, r5
 8004980:	7d12      	ldrb	r2, [r2, #20]
 8004982:	2a01      	cmp	r2, #1
 8004984:	d806      	bhi.n	8004994 <etharp_output_to_arp_index+0x28>
 8004986:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <etharp_output_to_arp_index+0xa8>)
 8004988:	f240 22ed 	movw	r2, #749	; 0x2ed
 800498c:	4922      	ldr	r1, [pc, #136]	; (8004a18 <etharp_output_to_arp_index+0xac>)
 800498e:	4823      	ldr	r0, [pc, #140]	; (8004a1c <etharp_output_to_arp_index+0xb0>)
 8004990:	f006 fdc6 	bl	800b520 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8004994:	2118      	movs	r1, #24
 8004996:	f106 0729 	add.w	r7, r6, #41	; 0x29
 800499a:	fb01 5904 	mla	r9, r1, r4, r5
 800499e:	f899 3014 	ldrb.w	r3, [r9, #20]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d10d      	bne.n	80049c2 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80049a6:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 80049aa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80049ae:	d917      	bls.n	80049e0 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80049b0:	4649      	mov	r1, r9
 80049b2:	4630      	mov	r0, r6
 80049b4:	3104      	adds	r1, #4
 80049b6:	f7ff ff99 	bl	80048ec <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80049ba:	b910      	cbnz	r0, 80049c2 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80049bc:	2303      	movs	r3, #3
 80049be:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80049c2:	2318      	movs	r3, #24
 80049c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c8:	4641      	mov	r1, r8
 80049ca:	4630      	mov	r0, r6
 80049cc:	fb03 5304 	mla	r3, r3, r4, r5
 80049d0:	9200      	str	r2, [sp, #0]
 80049d2:	463a      	mov	r2, r7
 80049d4:	330c      	adds	r3, #12
 80049d6:	f005 f9ef 	bl	8009db8 <ethernet_output>
}
 80049da:	b005      	add	sp, #20
 80049dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80049e0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80049e4:	d3ed      	bcc.n	80049c2 <etharp_output_to_arp_index+0x56>
 80049e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80049ea:	2101      	movs	r1, #1
 80049ec:	4630      	mov	r0, r6
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	9103      	str	r1, [sp, #12]
 80049f2:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80049f4:	f103 020c 	add.w	r2, r3, #12
 80049f8:	3304      	adds	r3, #4
 80049fa:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80049fc:	442a      	add	r2, r5
 80049fe:	9302      	str	r3, [sp, #8]
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <etharp_output_to_arp_index+0xb4>)
 8004a02:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004a04:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	463b      	mov	r3, r7
 8004a0a:	f7ff fdbf 	bl	800458c <etharp_raw>
 8004a0e:	e7d4      	b.n	80049ba <etharp_output_to_arp_index+0x4e>
 8004a10:	200000ac 	.word	0x200000ac
 8004a14:	0800cc2c 	.word	0x0800cc2c
 8004a18:	0800cbba 	.word	0x0800cbba
 8004a1c:	0800c987 	.word	0x0800c987
 8004a20:	0800e25a 	.word	0x0800e25a

08004a24 <etharp_query>:
{
 8004a24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a28:	4689      	mov	r9, r1
 8004a2a:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004a2c:	4601      	mov	r1, r0
{
 8004a2e:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004a30:	f8d9 0000 	ldr.w	r0, [r9]
 8004a34:	f000 fba1 	bl	800517a <ip4_addr_isbroadcast_u32>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d15e      	bne.n	8004afc <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 8004a3e:	f8d9 3000 	ldr.w	r3, [r9]
 8004a42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004a46:	2ae0      	cmp	r2, #224	; 0xe0
 8004a48:	d058      	beq.n	8004afc <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d056      	beq.n	8004afc <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4648      	mov	r0, r9
 8004a52:	f7ff fe07 	bl	8004664 <etharp_find_entry.isra.0>
  if (i < 0) {
 8004a56:	1e05      	subs	r5, r0, #0
 8004a58:	db53      	blt.n	8004b02 <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8004a5a:	4f40      	ldr	r7, [pc, #256]	; (8004b5c <etharp_query+0x138>)
 8004a5c:	2318      	movs	r3, #24
 8004a5e:	fb03 7305 	mla	r3, r3, r5, r7
 8004a62:	7d1a      	ldrb	r2, [r3, #20]
 8004a64:	b91a      	cbnz	r2, 8004a6e <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004a66:	2401      	movs	r4, #1
    arp_table[i].netif = netif;
 8004a68:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004a6c:	751c      	strb	r4, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8004a6e:	2318      	movs	r3, #24
 8004a70:	fb03 7305 	mla	r3, r3, r5, r7
 8004a74:	7d1b      	ldrb	r3, [r3, #20]
 8004a76:	b933      	cbnz	r3, 8004a86 <etharp_query+0x62>
 8004a78:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <etharp_query+0x13c>)
 8004a7a:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004a7e:	4939      	ldr	r1, [pc, #228]	; (8004b64 <etharp_query+0x140>)
 8004a80:	4839      	ldr	r0, [pc, #228]	; (8004b68 <etharp_query+0x144>)
 8004a82:	f006 fd4d 	bl	800b520 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8004a86:	b90c      	cbnz	r4, 8004a8c <etharp_query+0x68>
 8004a88:	2e00      	cmp	r6, #0
 8004a8a:	d13c      	bne.n	8004b06 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4640      	mov	r0, r8
 8004a90:	f7ff ff2c 	bl	80048ec <etharp_request>
    if (q == NULL) {
 8004a94:	2e00      	cmp	r6, #0
 8004a96:	d138      	bne.n	8004b0a <etharp_query+0xe6>
}
 8004a98:	b002      	add	sp, #8
 8004a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004a9e:	d1fb      	bne.n	8004a98 <etharp_query+0x74>
 8004aa0:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004aa2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004b60 <etharp_query+0x13c>
 8004aa6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004b70 <etharp_query+0x14c>
 8004aaa:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004b68 <etharp_query+0x144>
    while (p) {
 8004aae:	b99c      	cbnz	r4, 8004ad8 <etharp_query+0xb4>
      pbuf_ref(p);
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f001 fc73 	bl	800639c <pbuf_ref>
    if (p != NULL) {
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	d04c      	beq.n	8004b54 <etharp_query+0x130>
 8004aba:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8004abc:	2318      	movs	r3, #24
 8004abe:	fb03 f205 	mul.w	r2, r3, r5
 8004ac2:	461c      	mov	r4, r3
 8004ac4:	58b8      	ldr	r0, [r7, r2]
 8004ac6:	b108      	cbz	r0, 8004acc <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8004ac8:	f001 faae 	bl	8006028 <pbuf_free>
      arp_table[i].q = p;
 8004acc:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8004ad0:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8004ad2:	f847 8003 	str.w	r8, [r7, r3]
 8004ad6:	e7df      	b.n	8004a98 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004ad8:	8962      	ldrh	r2, [r4, #10]
 8004ada:	8923      	ldrh	r3, [r4, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d108      	bne.n	8004af2 <etharp_query+0xce>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	b133      	cbz	r3, 8004af2 <etharp_query+0xce>
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8004aea:	4649      	mov	r1, r9
 8004aec:	4650      	mov	r0, sl
 8004aee:	f006 fd17 	bl	800b520 <iprintf>
      if (p->type != PBUF_ROM) {
 8004af2:	7b23      	ldrb	r3, [r4, #12]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d11e      	bne.n	8004b36 <etharp_query+0x112>
      p = p->next;
 8004af8:	6824      	ldr	r4, [r4, #0]
 8004afa:	e7d8      	b.n	8004aae <etharp_query+0x8a>
    return ERR_ARG;
 8004afc:	f06f 000f 	mvn.w	r0, #15
 8004b00:	e7ca      	b.n	8004a98 <etharp_query+0x74>
 8004b02:	4628      	mov	r0, r5
 8004b04:	e7c8      	b.n	8004a98 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8004b0a:	2318      	movs	r3, #24
 8004b0c:	fb03 7205 	mla	r2, r3, r5, r7
 8004b10:	7d12      	ldrb	r2, [r2, #20]
 8004b12:	2a01      	cmp	r2, #1
 8004b14:	d9c3      	bls.n	8004a9e <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 8004b16:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4640      	mov	r0, r8
    ETHARP_SET_HINT(netif, i);
 8004b1c:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8004b1e:	220c      	movs	r2, #12
 8004b20:	fb13 2305 	smlabb	r3, r3, r5, r2
 8004b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b28:	443b      	add	r3, r7
 8004b2a:	9200      	str	r2, [sp, #0]
 8004b2c:	f108 0229 	add.w	r2, r8, #41	; 0x29
 8004b30:	f005 f942 	bl	8009db8 <ethernet_output>
 8004b34:	e7b0      	b.n	8004a98 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8004b36:	2200      	movs	r2, #0
 8004b38:	8921      	ldrh	r1, [r4, #8]
 8004b3a:	2002      	movs	r0, #2
 8004b3c:	f001 fad6 	bl	80060ec <pbuf_alloc>
      if (p != NULL) {
 8004b40:	4680      	mov	r8, r0
 8004b42:	b138      	cbz	r0, 8004b54 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 8004b44:	4631      	mov	r1, r6
 8004b46:	f001 fc81 	bl	800644c <pbuf_copy>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d0b6      	beq.n	8004abc <etharp_query+0x98>
          pbuf_free(p);
 8004b4e:	4640      	mov	r0, r8
 8004b50:	f001 fa6a 	bl	8006028 <pbuf_free>
      result = ERR_MEM;
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b58:	e79e      	b.n	8004a98 <etharp_query+0x74>
 8004b5a:	bf00      	nop
 8004b5c:	200000ac 	.word	0x200000ac
 8004b60:	0800cc2c 	.word	0x0800cc2c
 8004b64:	0800cbea 	.word	0x0800cbea
 8004b68:	0800c987 	.word	0x0800c987
 8004b6c:	2000019c 	.word	0x2000019c
 8004b70:	0800cc12 	.word	0x0800cc12

08004b74 <etharp_output>:
{
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	460e      	mov	r6, r1
 8004b78:	b085      	sub	sp, #20
 8004b7a:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	b930      	cbnz	r0, 8004b8e <etharp_output+0x1a>
 8004b80:	4b3e      	ldr	r3, [pc, #248]	; (8004c7c <etharp_output+0x108>)
 8004b82:	f240 321b 	movw	r2, #795	; 0x31b
 8004b86:	493e      	ldr	r1, [pc, #248]	; (8004c80 <etharp_output+0x10c>)
 8004b88:	483e      	ldr	r0, [pc, #248]	; (8004c84 <etharp_output+0x110>)
 8004b8a:	f006 fcc9 	bl	800b520 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8004b8e:	b936      	cbnz	r6, 8004b9e <etharp_output+0x2a>
 8004b90:	4b3a      	ldr	r3, [pc, #232]	; (8004c7c <etharp_output+0x108>)
 8004b92:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8004b96:	493c      	ldr	r1, [pc, #240]	; (8004c88 <etharp_output+0x114>)
 8004b98:	483a      	ldr	r0, [pc, #232]	; (8004c84 <etharp_output+0x110>)
 8004b9a:	f006 fcc1 	bl	800b520 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8004b9e:	b935      	cbnz	r5, 8004bae <etharp_output+0x3a>
 8004ba0:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <etharp_output+0x108>)
 8004ba2:	f240 321d 	movw	r2, #797	; 0x31d
 8004ba6:	4939      	ldr	r1, [pc, #228]	; (8004c8c <etharp_output+0x118>)
 8004ba8:	4836      	ldr	r0, [pc, #216]	; (8004c84 <etharp_output+0x110>)
 8004baa:	f006 fcb9 	bl	800b520 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8004bae:	4621      	mov	r1, r4
 8004bb0:	6828      	ldr	r0, [r5, #0]
 8004bb2:	f000 fae2 	bl	800517a <ip4_addr_isbroadcast_u32>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d15a      	bne.n	8004c70 <etharp_output+0xfc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bc0:	2ae0      	cmp	r2, #224	; 0xe0
 8004bc2:	d11d      	bne.n	8004c00 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004bc4:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8004bc6:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004bca:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8004bce:	235e      	movs	r3, #94	; 0x5e
 8004bd0:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004bd4:	786b      	ldrb	r3, [r5, #1]
 8004bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bda:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8004bde:	78ab      	ldrb	r3, [r5, #2]
 8004be0:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8004be4:	78eb      	ldrb	r3, [r5, #3]
 8004be6:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8004bea:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8004bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	9200      	str	r2, [sp, #0]
 8004bf6:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8004bfa:	f005 f8dd 	bl	8009db8 <ethernet_output>
 8004bfe:	e01f      	b.n	8004c40 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004c00:	6862      	ldr	r2, [r4, #4]
 8004c02:	68a1      	ldr	r1, [r4, #8]
 8004c04:	405a      	eors	r2, r3
 8004c06:	420a      	tst	r2, r1
 8004c08:	d008      	beq.n	8004c1c <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8004c0a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004c0c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8004c14:	68e3      	ldr	r3, [r4, #12]
 8004c16:	b36b      	cbz	r3, 8004c74 <etharp_output+0x100>
            dst_addr = netif_ip4_gw(netif);
 8004c18:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8004c1c:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <etharp_output+0x11c>)
 8004c1e:	2018      	movs	r0, #24
 8004c20:	491c      	ldr	r1, [pc, #112]	; (8004c94 <etharp_output+0x120>)
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	fb00 1002 	mla	r0, r0, r2, r1
 8004c28:	7d01      	ldrb	r1, [r0, #20]
 8004c2a:	2901      	cmp	r1, #1
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	d909      	bls.n	8004c44 <etharp_output+0xd0>
 8004c30:	682f      	ldr	r7, [r5, #0]
 8004c32:	6843      	ldr	r3, [r0, #4]
 8004c34:	429f      	cmp	r7, r3
 8004c36:	d105      	bne.n	8004c44 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f7ff fe96 	bl	800496c <etharp_output_to_arp_index>
}
 8004c40:	b005      	add	sp, #20
 8004c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <etharp_output+0x120>)
{
 8004c46:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8004c48:	7d18      	ldrb	r0, [r3, #20]
 8004c4a:	2801      	cmp	r0, #1
 8004c4c:	d906      	bls.n	8004c5c <etharp_output+0xe8>
 8004c4e:	682f      	ldr	r7, [r5, #0]
 8004c50:	6858      	ldr	r0, [r3, #4]
 8004c52:	4287      	cmp	r7, r0
 8004c54:	d102      	bne.n	8004c5c <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	700a      	strb	r2, [r1, #0]
 8004c5a:	e7ed      	b.n	8004c38 <etharp_output+0xc4>
 8004c5c:	3201      	adds	r2, #1
 8004c5e:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8004c60:	2a0a      	cmp	r2, #10
 8004c62:	d1f1      	bne.n	8004c48 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 8004c64:	4632      	mov	r2, r6
 8004c66:	4629      	mov	r1, r5
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7ff fedb 	bl	8004a24 <etharp_query>
 8004c6e:	e7e7      	b.n	8004c40 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <etharp_output+0x124>)
 8004c72:	e7bb      	b.n	8004bec <etharp_output+0x78>
            return ERR_RTE;
 8004c74:	f06f 0003 	mvn.w	r0, #3
 8004c78:	e7e2      	b.n	8004c40 <etharp_output+0xcc>
 8004c7a:	bf00      	nop
 8004c7c:	0800cc2c 	.word	0x0800cc2c
 8004c80:	0800c6ac 	.word	0x0800c6ac
 8004c84:	0800c987 	.word	0x0800c987
 8004c88:	0800d607 	.word	0x0800d607
 8004c8c:	0800cb77 	.word	0x0800cb77
 8004c90:	2000019c 	.word	0x2000019c
 8004c94:	200000ac 	.word	0x200000ac
 8004c98:	0800e1ee 	.word	0x0800e1ee

08004c9c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	b087      	sub	sp, #28
 8004ca2:	460f      	mov	r7, r1
 8004ca4:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8004ca6:	2124      	movs	r1, #36	; 0x24
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2001      	movs	r0, #1
 8004cac:	f001 fa1e 	bl	80060ec <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	b3a0      	cbz	r0, 8004d1e <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8004cb4:	8943      	ldrh	r3, [r0, #10]
 8004cb6:	2b23      	cmp	r3, #35	; 0x23
 8004cb8:	d806      	bhi.n	8004cc8 <icmp_send_response.isra.0+0x2c>
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <icmp_send_response.isra.0+0x88>)
 8004cbc:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004cc0:	4919      	ldr	r1, [pc, #100]	; (8004d28 <icmp_send_response.isra.0+0x8c>)
 8004cc2:	481a      	ldr	r0, [pc, #104]	; (8004d2c <icmp_send_response.isra.0+0x90>)
 8004cc4:	f006 fc2c 	bl	800b520 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004cc8:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8004cca:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8004ccc:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004cce:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8004cd2:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004cd4:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8004cd8:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8004cda:	71a3      	strb	r3, [r4, #6]
 8004cdc:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004cde:	4613      	mov	r3, r2
  icmphdr->type = type;
 8004ce0:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8004ce2:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004ce4:	f853 6b04 	ldr.w	r6, [r3], #4
 8004ce8:	4283      	cmp	r3, r0
 8004cea:	f841 6b04 	str.w	r6, [r1], #4
 8004cee:	d1f9      	bne.n	8004ce4 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8004cf0:	ae06      	add	r6, sp, #24
 8004cf2:	68d3      	ldr	r3, [r2, #12]
 8004cf4:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 f8bb 	bl	8004e74 <ip4_route>
#endif
  if (netif != NULL) {
 8004cfe:	b158      	cbz	r0, 8004d18 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8004d00:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004d02:	2301      	movs	r3, #1
 8004d04:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8004d06:	70a1      	strb	r1, [r4, #2]
 8004d08:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004d0a:	9002      	str	r0, [sp, #8]
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	e88d 000a 	stmia.w	sp, {r1, r3}
 8004d12:	23ff      	movs	r3, #255	; 0xff
 8004d14:	f000 fa20 	bl	8005158 <ip4_output_if>
  }
  pbuf_free(q);
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f001 f985 	bl	8006028 <pbuf_free>
}
 8004d1e:	b007      	add	sp, #28
 8004d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d22:	bf00      	nop
 8004d24:	0800cd3c 	.word	0x0800cd3c
 8004d28:	0800cd71 	.word	0x0800cd71
 8004d2c:	0800c987 	.word	0x0800c987

08004d30 <icmp_input>:
  iphdr_in = ip4_current_header();
 8004d30:	4b45      	ldr	r3, [pc, #276]	; (8004e48 <icmp_input+0x118>)
{
 8004d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8004d36:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 8004d40:	f899 5000 	ldrb.w	r5, [r9]
 8004d44:	461f      	mov	r7, r3
 8004d46:	f005 050f 	and.w	r5, r5, #15
 8004d4a:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8004d4c:	2d13      	cmp	r5, #19
 8004d4e:	d92a      	bls.n	8004da6 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8004d50:	8942      	ldrh	r2, [r0, #10]
 8004d52:	2a03      	cmp	r2, #3
 8004d54:	d927      	bls.n	8004da6 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8004d56:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	2a08      	cmp	r2, #8
 8004d5c:	d123      	bne.n	8004da6 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004d5e:	6958      	ldr	r0, [r3, #20]
 8004d60:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8004d64:	2ae0      	cmp	r2, #224	; 0xe0
 8004d66:	d01e      	beq.n	8004da6 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	f000 fa06 	bl	800517a <ip4_addr_isbroadcast_u32>
 8004d6e:	4606      	mov	r6, r0
 8004d70:	b9c8      	cbnz	r0, 8004da6 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8004d72:	8923      	ldrh	r3, [r4, #8]
 8004d74:	2b07      	cmp	r3, #7
 8004d76:	d916      	bls.n	8004da6 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004d78:	f105 010e 	add.w	r1, r5, #14
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f001 f94d 	bl	800601c <pbuf_header>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d04f      	beq.n	8004e26 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8004d86:	8921      	ldrh	r1, [r4, #8]
 8004d88:	4632      	mov	r2, r6
 8004d8a:	2002      	movs	r0, #2
 8004d8c:	4429      	add	r1, r5
 8004d8e:	b289      	uxth	r1, r1
 8004d90:	f001 f9ac 	bl	80060ec <pbuf_alloc>
      if (r == NULL) {
 8004d94:	4606      	mov	r6, r0
 8004d96:	b130      	cbz	r0, 8004da6 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8004d98:	8942      	ldrh	r2, [r0, #10]
 8004d9a:	f105 0308 	add.w	r3, r5, #8
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d207      	bcs.n	8004db2 <icmp_input+0x82>
        pbuf_free(r);
 8004da2:	f001 f941 	bl	8006028 <pbuf_free>
  pbuf_free(p);
 8004da6:	4620      	mov	r0, r4
}
 8004da8:	b005      	add	sp, #20
 8004daa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8004dae:	f001 b93b 	b.w	8006028 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8004db2:	4649      	mov	r1, r9
 8004db4:	462a      	mov	r2, r5
 8004db6:	6840      	ldr	r0, [r0, #4]
 8004db8:	f006 faf3 	bl	800b3a2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8004dbc:	4269      	negs	r1, r5
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f001 f92c 	bl	800601c <pbuf_header>
 8004dc4:	b138      	cbz	r0, 8004dd6 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8004dc6:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <icmp_input+0x11c>)
 8004dc8:	22af      	movs	r2, #175	; 0xaf
 8004dca:	4921      	ldr	r1, [pc, #132]	; (8004e50 <icmp_input+0x120>)
 8004dcc:	4821      	ldr	r0, [pc, #132]	; (8004e54 <icmp_input+0x124>)
 8004dce:	f006 fba7 	bl	800b520 <iprintf>
        pbuf_free(r);
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	e7e5      	b.n	8004da2 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f001 fb37 	bl	800644c <pbuf_copy>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d1f7      	bne.n	8004dd2 <icmp_input+0xa2>
      pbuf_free(p);
 8004de2:	4620      	mov	r0, r4
 8004de4:	4634      	mov	r4, r6
 8004de6:	f001 f91f 	bl	8006028 <pbuf_free>
    if (pbuf_header(p, (s16_t)hlen)) {
 8004dea:	4629      	mov	r1, r5
 8004dec:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8004dee:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8004df0:	f001 f914 	bl	800601c <pbuf_header>
 8004df4:	4602      	mov	r2, r0
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d1d5      	bne.n	8004da6 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8004dfa:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8004e04:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8004e06:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8004e08:	70b0      	strb	r0, [r6, #2]
 8004e0a:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8004e0c:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8004e0e:	7288      	strb	r0, [r1, #10]
 8004e10:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8004e12:	2101      	movs	r1, #1
 8004e14:	9000      	str	r0, [sp, #0]
 8004e16:	4620      	mov	r0, r4
 8004e18:	9101      	str	r1, [sp, #4]
 8004e1a:	f8cd 8008 	str.w	r8, [sp, #8]
 8004e1e:	490e      	ldr	r1, [pc, #56]	; (8004e58 <icmp_input+0x128>)
 8004e20:	f000 f99a 	bl	8005158 <ip4_output_if>
 8004e24:	e7bf      	b.n	8004da6 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004e26:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	31f2      	adds	r1, #242	; 0xf2
 8004e2e:	b209      	sxth	r1, r1
 8004e30:	f001 f8f4 	bl	800601c <pbuf_header>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d0d8      	beq.n	8004dea <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <icmp_input+0x11c>)
 8004e3a:	22c0      	movs	r2, #192	; 0xc0
 8004e3c:	4907      	ldr	r1, [pc, #28]	; (8004e5c <icmp_input+0x12c>)
 8004e3e:	4805      	ldr	r0, [pc, #20]	; (8004e54 <icmp_input+0x124>)
 8004e40:	f006 fb6e 	bl	800b520 <iprintf>
        goto icmperr;
 8004e44:	e7af      	b.n	8004da6 <icmp_input+0x76>
 8004e46:	bf00      	nop
 8004e48:	20000240 	.word	0x20000240
 8004e4c:	0800cd3c 	.word	0x0800cd3c
 8004e50:	0800ccd5 	.word	0x0800ccd5
 8004e54:	0800c987 	.word	0x0800c987
 8004e58:	20000254 	.word	0x20000254
 8004e5c:	0800cd0a 	.word	0x0800cd0a

08004e60 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8004e60:	460a      	mov	r2, r1
 8004e62:	3004      	adds	r0, #4
 8004e64:	2103      	movs	r1, #3
 8004e66:	f7ff bf19 	b.w	8004c9c <icmp_send_response.isra.0>

08004e6a <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	3004      	adds	r0, #4
 8004e6e:	210b      	movs	r1, #11
 8004e70:	f7ff bf14 	b.w	8004c9c <icmp_send_response.isra.0>

08004e74 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8004e74:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <ip4_route+0x50>)
{
 8004e76:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b96b      	cbnz	r3, 8004e98 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004e7c:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <ip4_route+0x54>)
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	b1ea      	cbz	r2, 8004ebe <ip4_route+0x4a>
 8004e82:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8004e86:	f001 0105 	and.w	r1, r1, #5
 8004e8a:	2905      	cmp	r1, #5
 8004e8c:	d117      	bne.n	8004ebe <ip4_route+0x4a>
 8004e8e:	6851      	ldr	r1, [r2, #4]
 8004e90:	2900      	cmp	r1, #0
 8004e92:	bf18      	it	ne
 8004e94:	4613      	movne	r3, r2
 8004e96:	e012      	b.n	8004ebe <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004e98:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
 8004e9c:	f004 0205 	and.w	r2, r4, #5
 8004ea0:	2a05      	cmp	r2, #5
 8004ea2:	d1e9      	bne.n	8004e78 <ip4_route+0x4>
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	d0e6      	beq.n	8004e78 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8004eaa:	6801      	ldr	r1, [r0, #0]
 8004eac:	689d      	ldr	r5, [r3, #8]
 8004eae:	404a      	eors	r2, r1
 8004eb0:	422a      	tst	r2, r5
 8004eb2:	d004      	beq.n	8004ebe <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8004eb4:	07a2      	lsls	r2, r4, #30
 8004eb6:	d4df      	bmi.n	8004e78 <ip4_route+0x4>
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	4291      	cmp	r1, r2
 8004ebc:	d1dc      	bne.n	8004e78 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	bd30      	pop	{r4, r5, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200037dc 	.word	0x200037dc
 8004ec8:	200037e0 	.word	0x200037e0

08004ecc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8004ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8004ed0:	6847      	ldr	r7, [r0, #4]
{
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8004ed6:	f897 9000 	ldrb.w	r9, [r7]
 8004eda:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d005      	beq.n	8004eee <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f001 f8a0 	bl	8006028 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004eee:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL(iphdr);
 8004ef0:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004ef4:	f7fe fa53 	bl	800339e <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8004ef8:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 8004efa:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004efe:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8004f00:	4283      	cmp	r3, r0
 8004f02:	d903      	bls.n	8004f0c <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8004f04:	4601      	mov	r1, r0
 8004f06:	4628      	mov	r0, r5
 8004f08:	f001 f9d0 	bl	80062ac <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8004f0c:	896b      	ldrh	r3, [r5, #10]
 8004f0e:	454b      	cmp	r3, r9
 8004f10:	d3e7      	bcc.n	8004ee2 <ip4_input+0x16>
 8004f12:	892b      	ldrh	r3, [r5, #8]
 8004f14:	42a3      	cmp	r3, r4
 8004f16:	d3e4      	bcc.n	8004ee2 <ip4_input+0x16>
 8004f18:	f1b9 0f13 	cmp.w	r9, #19
 8004f1c:	d9e1      	bls.n	8004ee2 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4c4f      	ldr	r4, [pc, #316]	; (8005060 <ip4_input+0x194>)
 8004f22:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8004f28:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004f2a:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8004f2c:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004f2e:	d113      	bne.n	8004f58 <ip4_input+0x8c>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8004f30:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 8004f34:	07da      	lsls	r2, r3, #31
 8004f36:	d504      	bpl.n	8004f42 <ip4_input+0x76>
 8004f38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 808d 	bne.w	800505c <ip4_input+0x190>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8004f42:	7a7b      	ldrb	r3, [r7, #9]
 8004f44:	2b11      	cmp	r3, #17
 8004f46:	d105      	bne.n	8004f54 <ip4_input+0x88>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8004f48:	eb07 0309 	add.w	r3, r7, r9
 8004f4c:	885b      	ldrh	r3, [r3, #2]
 8004f4e:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8004f52:	d059      	beq.n	8005008 <ip4_input+0x13c>
 8004f54:	2600      	movs	r6, #0
 8004f56:	e018      	b.n	8004f8a <ip4_input+0xbe>
 8004f58:	4646      	mov	r6, r8
 8004f5a:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 8004f5e:	f8df b104 	ldr.w	fp, [pc, #260]	; 8005064 <ip4_input+0x198>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004f62:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8004f66:	07db      	lsls	r3, r3, #31
 8004f68:	d404      	bmi.n	8004f74 <ip4_input+0xa8>
      if (first) {
 8004f6a:	f1ba 0f00 	cmp.w	sl, #0
 8004f6e:	d13e      	bne.n	8004fee <ip4_input+0x122>
        netif = netif->next;
 8004f70:	6836      	ldr	r6, [r6, #0]
 8004f72:	e041      	b.n	8004ff8 <ip4_input+0x12c>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004f74:	6873      	ldr	r3, [r6, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f7      	beq.n	8004f6a <ip4_input+0x9e>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004f7a:	6960      	ldr	r0, [r4, #20]
 8004f7c:	4283      	cmp	r3, r0
 8004f7e:	d004      	beq.n	8004f8a <ip4_input+0xbe>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8004f80:	4631      	mov	r1, r6
 8004f82:	f000 f8fa 	bl	800517a <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d0ef      	beq.n	8004f6a <ip4_input+0x9e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8004f8a:	6920      	ldr	r0, [r4, #16]
 8004f8c:	b148      	cbz	r0, 8004fa2 <ip4_input+0xd6>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004f8e:	4641      	mov	r1, r8
 8004f90:	f000 f8f3 	bl	800517a <ip4_addr_isbroadcast_u32>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d1a4      	bne.n	8004ee2 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8004f98:	6923      	ldr	r3, [r4, #16]
 8004f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004f9e:	2be0      	cmp	r3, #224	; 0xe0
 8004fa0:	d09f      	beq.n	8004ee2 <ip4_input+0x16>
  if (netif == NULL) {
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	d09d      	beq.n	8004ee2 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fac:	b133      	cbz	r3, 8004fbc <ip4_input+0xf0>
    p = ip4_reass(p);
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 fa12 	bl	80053d8 <ip4_reass>
    if (p == NULL) {
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d096      	beq.n	8004ee8 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8004fba:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8004fbc:	60a7      	str	r7, [r4, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004fbe:	f1c9 0100 	rsb	r1, r9, #0
 8004fc2:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 8004fc4:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8004fc8:	783b      	ldrb	r3, [r7, #0]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8004fd2:	f001 f823 	bl	800601c <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8004fd6:	7a7b      	ldrb	r3, [r7, #9]
 8004fd8:	2b06      	cmp	r3, #6
 8004fda:	d023      	beq.n	8005024 <ip4_input+0x158>
 8004fdc:	2b11      	cmp	r3, #17
 8004fde:	d015      	beq.n	800500c <ip4_input+0x140>
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d124      	bne.n	800502e <ip4_input+0x162>
      icmp_input(p, inp);
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f7ff fea2 	bl	8004d30 <icmp_input>
      break;
 8004fec:	e012      	b.n	8005014 <ip4_input+0x148>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8004fee:	7d23      	ldrb	r3, [r4, #20]
 8004ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff2:	d0a6      	beq.n	8004f42 <ip4_input+0x76>
        netif = netif_list;
 8004ff4:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8004ff8:	4546      	cmp	r6, r8
 8004ffa:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 8004ffe:	bf08      	it	eq
 8005000:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 8005002:	2e00      	cmp	r6, #0
 8005004:	d1ad      	bne.n	8004f62 <ip4_input+0x96>
 8005006:	e79c      	b.n	8004f42 <ip4_input+0x76>
 8005008:	4646      	mov	r6, r8
 800500a:	e7ca      	b.n	8004fa2 <ip4_input+0xd6>
      udp_input(p, inp);
 800500c:	4641      	mov	r1, r8
 800500e:	4628      	mov	r0, r5
 8005010:	f004 fcb0 	bl	8009974 <udp_input>
  ip_data.current_netif = NULL;
 8005014:	2300      	movs	r3, #0
 8005016:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8005018:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 800501a:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800501c:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800501e:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8005020:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8005022:	e761      	b.n	8004ee8 <ip4_input+0x1c>
      tcp_input(p, inp);
 8005024:	4641      	mov	r1, r8
 8005026:	4628      	mov	r0, r5
 8005028:	f002 ff7e 	bl	8007f28 <tcp_input>
      break;
 800502c:	e7f2      	b.n	8005014 <ip4_input+0x148>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800502e:	4631      	mov	r1, r6
 8005030:	6960      	ldr	r0, [r4, #20]
 8005032:	f000 f8a2 	bl	800517a <ip4_addr_isbroadcast_u32>
 8005036:	b968      	cbnz	r0, 8005054 <ip4_input+0x188>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005038:	6963      	ldr	r3, [r4, #20]
 800503a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800503e:	2be0      	cmp	r3, #224	; 0xe0
 8005040:	d008      	beq.n	8005054 <ip4_input+0x188>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8005042:	4649      	mov	r1, r9
 8005044:	4628      	mov	r0, r5
 8005046:	f000 ffec 	bl	8006022 <pbuf_header_force>
        p->payload = iphdr;
 800504a:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800504c:	2102      	movs	r1, #2
 800504e:	4628      	mov	r0, r5
 8005050:	f7ff ff06 	bl	8004e60 <icmp_dest_unreach>
      pbuf_free(p);
 8005054:	4628      	mov	r0, r5
 8005056:	f000 ffe7 	bl	8006028 <pbuf_free>
 800505a:	e7db      	b.n	8005014 <ip4_input+0x148>
 800505c:	4646      	mov	r6, r8
 800505e:	e794      	b.n	8004f8a <ip4_input+0xbe>
 8005060:	20000240 	.word	0x20000240
 8005064:	200037dc 	.word	0x200037dc

08005068 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8005068:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800506e:	89c3      	ldrh	r3, [r0, #14]
{
 8005070:	4605      	mov	r5, r0
 8005072:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005074:	2b01      	cmp	r3, #1
{
 8005076:	4616      	mov	r6, r2
 8005078:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800507c:	d006      	beq.n	800508c <ip4_output_if_src+0x24>
 800507e:	4b30      	ldr	r3, [pc, #192]	; (8005140 <ip4_output_if_src+0xd8>)
 8005080:	f240 3233 	movw	r2, #819	; 0x333
 8005084:	492f      	ldr	r1, [pc, #188]	; (8005144 <ip4_output_if_src+0xdc>)
 8005086:	4830      	ldr	r0, [pc, #192]	; (8005148 <ip4_output_if_src+0xe0>)
 8005088:	f006 fa4a 	bl	800b520 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800508c:	2e00      	cmp	r6, #0
 800508e:	d047      	beq.n	8005120 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8005090:	2114      	movs	r1, #20
 8005092:	4628      	mov	r0, r5
 8005094:	f000 ffc2 	bl	800601c <pbuf_header>
 8005098:	2800      	cmp	r0, #0
 800509a:	d14e      	bne.n	800513a <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800509c:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800509e:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80050a0:	2b13      	cmp	r3, #19
 80050a2:	d806      	bhi.n	80050b2 <ip4_output_if_src+0x4a>
 80050a4:	4b26      	ldr	r3, [pc, #152]	; (8005140 <ip4_output_if_src+0xd8>)
 80050a6:	f240 3261 	movw	r2, #865	; 0x361
 80050aa:	4928      	ldr	r1, [pc, #160]	; (800514c <ip4_output_if_src+0xe4>)
 80050ac:	4826      	ldr	r0, [pc, #152]	; (8005148 <ip4_output_if_src+0xe0>)
 80050ae:	f006 fa37 	bl	800b520 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 80050b2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80050b6:	7227      	strb	r7, [r4, #8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80050b8:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 80050ba:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80050bc:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80050be:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8005154 <ip4_output_if_src+0xec>
    ip4_addr_copy(iphdr->dest, *dest);
 80050c2:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80050c4:	2345      	movs	r3, #69	; 0x45
 80050c6:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80050c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80050cc:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80050ce:	8928      	ldrh	r0, [r5, #8]
 80050d0:	f7fe f965 	bl	800339e <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 80050d4:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80050d6:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 80050d8:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80050da:	f8b9 0000 	ldrh.w	r0, [r9]
 80050de:	f7fe f95e 	bl	800339e <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80050e2:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80050e6:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 80050e8:	3301      	adds	r3, #1
 80050ea:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 80050ee:	f1ba 0f00 	cmp.w	sl, #0
 80050f2:	d112      	bne.n	800511a <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <ip4_output_if_src+0xe8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80050f8:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80050fa:	72a7      	strb	r7, [r4, #10]
 80050fc:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80050fe:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 8005102:	b19b      	cbz	r3, 800512c <ip4_output_if_src+0xc4>
 8005104:	892a      	ldrh	r2, [r5, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d910      	bls.n	800512c <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800510a:	4632      	mov	r2, r6
 800510c:	4641      	mov	r1, r8
 800510e:	4628      	mov	r0, r5
 8005110:	f000 fb0c 	bl	800572c <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8005114:	b002      	add	sp, #8
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800511a:	f8da 3000 	ldr.w	r3, [sl]
 800511e:	e7eb      	b.n	80050f8 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8005120:	686b      	ldr	r3, [r5, #4]
 8005122:	ae02      	add	r6, sp, #8
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f846 3d04 	str.w	r3, [r6, #-4]!
 800512a:	e7e8      	b.n	80050fe <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800512c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005130:	4632      	mov	r2, r6
 8005132:	4629      	mov	r1, r5
 8005134:	4640      	mov	r0, r8
 8005136:	4798      	blx	r3
 8005138:	e7ec      	b.n	8005114 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800513a:	f06f 0001 	mvn.w	r0, #1
 800513e:	e7e9      	b.n	8005114 <ip4_output_if_src+0xac>
 8005140:	0800cd9d 	.word	0x0800cd9d
 8005144:	0800cdd1 	.word	0x0800cdd1
 8005148:	0800c987 	.word	0x0800c987
 800514c:	0800cddd 	.word	0x0800cddd
 8005150:	0800ce0c 	.word	0x0800ce0c
 8005154:	2000019e 	.word	0x2000019e

08005158 <ip4_output_if>:
{
 8005158:	b4f0      	push	{r4, r5, r6, r7}
 800515a:	9c06      	ldr	r4, [sp, #24]
 800515c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8005160:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8005164:	b11a      	cbz	r2, 800516e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8005166:	b109      	cbz	r1, 800516c <ip4_output_if+0x14>
 8005168:	680f      	ldr	r7, [r1, #0]
 800516a:	b907      	cbnz	r7, 800516e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800516c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800516e:	9406      	str	r4, [sp, #24]
 8005170:	9605      	str	r6, [sp, #20]
 8005172:	9504      	str	r5, [sp, #16]
}
 8005174:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005176:	f7ff bf77 	b.w	8005068 <ip4_output_if_src>

0800517a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800517a:	1e43      	subs	r3, r0, #1
 800517c:	3303      	adds	r3, #3
 800517e:	d811      	bhi.n	80051a4 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8005180:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8005184:	f013 0302 	ands.w	r3, r3, #2
 8005188:	d00e      	beq.n	80051a8 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800518a:	684a      	ldr	r2, [r1, #4]
 800518c:	4290      	cmp	r0, r2
 800518e:	d00b      	beq.n	80051a8 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8005190:	688b      	ldr	r3, [r1, #8]
 8005192:	4042      	eors	r2, r0
 8005194:	421a      	tst	r2, r3
 8005196:	d107      	bne.n	80051a8 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8005198:	43db      	mvns	r3, r3
 800519a:	4383      	bics	r3, r0
    return 1;
 800519c:	bf0c      	ite	eq
 800519e:	2001      	moveq	r0, #1
 80051a0:	2000      	movne	r0, #0
 80051a2:	4770      	bx	lr
 80051a4:	2001      	movs	r0, #1
 80051a6:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80051a8:	2000      	movs	r0, #0
  }
}
 80051aa:	4770      	bx	lr

080051ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80051ac:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <ip_reass_dequeue_datagram+0x34>)
{
 80051b0:	4604      	mov	r4, r0
 80051b2:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4282      	cmp	r2, r0
 80051b8:	d107      	bne.n	80051ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80051ba:	6802      	ldr	r2, [r0, #0]
 80051bc:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80051be:	4621      	mov	r1, r4
 80051c0:	2004      	movs	r0, #4
}
 80051c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80051c6:	f000 bdcb 	b.w	8005d60 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80051ca:	b931      	cbnz	r1, 80051da <ip_reass_dequeue_datagram+0x2e>
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <ip_reass_dequeue_datagram+0x38>)
 80051ce:	f240 1245 	movw	r2, #325	; 0x145
 80051d2:	4905      	ldr	r1, [pc, #20]	; (80051e8 <ip_reass_dequeue_datagram+0x3c>)
 80051d4:	4805      	ldr	r0, [pc, #20]	; (80051ec <ip_reass_dequeue_datagram+0x40>)
 80051d6:	f006 f9a3 	bl	800b520 <iprintf>
    prev->next = ipr->next;
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	602b      	str	r3, [r5, #0]
 80051de:	e7ee      	b.n	80051be <ip_reass_dequeue_datagram+0x12>
 80051e0:	200001a4 	.word	0x200001a4
 80051e4:	0800cef9 	.word	0x0800cef9
 80051e8:	0800cf32 	.word	0x0800cf32
 80051ec:	0800c987 	.word	0x0800c987

080051f0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80051f0:	4281      	cmp	r1, r0
{
 80051f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f6:	4605      	mov	r5, r0
 80051f8:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80051fa:	d105      	bne.n	8005208 <ip_reass_free_complete_datagram+0x18>
 80051fc:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <ip_reass_free_complete_datagram+0xcc>)
 80051fe:	22ab      	movs	r2, #171	; 0xab
 8005200:	492f      	ldr	r1, [pc, #188]	; (80052c0 <ip_reass_free_complete_datagram+0xd0>)
 8005202:	4830      	ldr	r0, [pc, #192]	; (80052c4 <ip_reass_free_complete_datagram+0xd4>)
 8005204:	f006 f98c 	bl	800b520 <iprintf>
  if (prev != NULL) {
 8005208:	b147      	cbz	r7, 800521c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	429d      	cmp	r5, r3
 800520e:	d005      	beq.n	800521c <ip_reass_free_complete_datagram+0x2c>
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <ip_reass_free_complete_datagram+0xcc>)
 8005212:	22ad      	movs	r2, #173	; 0xad
 8005214:	492c      	ldr	r1, [pc, #176]	; (80052c8 <ip_reass_free_complete_datagram+0xd8>)
 8005216:	482b      	ldr	r0, [pc, #172]	; (80052c4 <ip_reass_free_complete_datagram+0xd4>)
 8005218:	f006 f982 	bl	800b520 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800521c:	686e      	ldr	r6, [r5, #4]
 800521e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8005220:	889a      	ldrh	r2, [r3, #4]
 8005222:	bb92      	cbnz	r2, 800528a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8005224:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005226:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 800522a:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800522c:	f105 0208 	add.w	r2, r5, #8
 8005230:	f852 0b04 	ldr.w	r0, [r2], #4
 8005234:	428a      	cmp	r2, r1
 8005236:	f843 0b04 	str.w	r0, [r3], #4
 800523a:	d1f9      	bne.n	8005230 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800523c:	2101      	movs	r1, #1
 800523e:	4630      	mov	r0, r6
 8005240:	f7ff fe13 	bl	8004e6a <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8005244:	4630      	mov	r0, r6
 8005246:	f001 f8a1 	bl	800638c <pbuf_clen>
 800524a:	4604      	mov	r4, r0
    pbuf_free(p);
 800524c:	4630      	mov	r0, r6
 800524e:	f000 feeb 	bl	8006028 <pbuf_free>
  p = ipr->p;
 8005252:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005254:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80052bc <ip_reass_free_complete_datagram+0xcc>
 8005258:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80052d4 <ip_reass_free_complete_datagram+0xe4>
 800525c:	f8df a064 	ldr.w	sl, [pc, #100]	; 80052c4 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8005260:	b9ae      	cbnz	r6, 800528e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8005262:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8005264:	4d19      	ldr	r5, [pc, #100]	; (80052cc <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8005266:	4639      	mov	r1, r7
 8005268:	f7ff ffa0 	bl	80051ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800526c:	882b      	ldrh	r3, [r5, #0]
 800526e:	42a3      	cmp	r3, r4
 8005270:	d205      	bcs.n	800527e <ip_reass_free_complete_datagram+0x8e>
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <ip_reass_free_complete_datagram+0xcc>)
 8005274:	22d2      	movs	r2, #210	; 0xd2
 8005276:	4916      	ldr	r1, [pc, #88]	; (80052d0 <ip_reass_free_complete_datagram+0xe0>)
 8005278:	4812      	ldr	r0, [pc, #72]	; (80052c4 <ip_reass_free_complete_datagram+0xd4>)
 800527a:	f006 f951 	bl	800b520 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800527e:	882b      	ldrh	r3, [r5, #0]
}
 8005280:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 8005282:	1b1b      	subs	r3, r3, r4
 8005284:	802b      	strh	r3, [r5, #0]
}
 8005286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800528a:	2400      	movs	r4, #0
 800528c:	e7e1      	b.n	8005252 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800528e:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8005290:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8005292:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8005296:	f001 f879 	bl	800638c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800529a:	4404      	add	r4, r0
 800529c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80052a0:	db05      	blt.n	80052ae <ip_reass_free_complete_datagram+0xbe>
 80052a2:	4643      	mov	r3, r8
 80052a4:	22cc      	movs	r2, #204	; 0xcc
 80052a6:	4649      	mov	r1, r9
 80052a8:	4650      	mov	r0, sl
 80052aa:	f006 f939 	bl	800b520 <iprintf>
    pbuf_free(pcur);
 80052ae:	4630      	mov	r0, r6
    pbufs_freed += clen;
 80052b0:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 80052b2:	f000 feb9 	bl	8006028 <pbuf_free>
    p = iprh->next_pbuf;
 80052b6:	465e      	mov	r6, fp
 80052b8:	e7d2      	b.n	8005260 <ip_reass_free_complete_datagram+0x70>
 80052ba:	bf00      	nop
 80052bc:	0800cef9 	.word	0x0800cef9
 80052c0:	0800cf4b 	.word	0x0800cf4b
 80052c4:	0800c987 	.word	0x0800c987
 80052c8:	0800cf57 	.word	0x0800cf57
 80052cc:	200001a0 	.word	0x200001a0
 80052d0:	0800cf86 	.word	0x0800cf86
 80052d4:	0800cf69 	.word	0x0800cf69

080052d8 <ip_reass_remove_oldest_datagram>:
{
 80052d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052dc:	4606      	mov	r6, r0
 80052de:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80052e0:	2500      	movs	r5, #0
    r = reassdatagrams;
 80052e2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800534c <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 80052e6:	2400      	movs	r4, #0
    r = reassdatagrams;
 80052e8:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 80052ec:	4621      	mov	r1, r4
    prev = NULL;
 80052ee:	46a6      	mov	lr, r4
    oldest = NULL;
 80052f0:	4620      	mov	r0, r4
    while (r != NULL) {
 80052f2:	b953      	cbnz	r3, 800530a <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 80052f4:	b110      	cbz	r0, 80052fc <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80052f6:	f7ff ff7b 	bl	80051f0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80052fa:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80052fc:	42bd      	cmp	r5, r7
 80052fe:	da01      	bge.n	8005304 <ip_reass_remove_oldest_datagram+0x2c>
 8005300:	2c01      	cmp	r4, #1
 8005302:	dcf0      	bgt.n	80052e6 <ip_reass_remove_oldest_datagram+0xe>
}
 8005304:	4628      	mov	r0, r5
 8005306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800530a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800530e:	695a      	ldr	r2, [r3, #20]
 8005310:	4562      	cmp	r2, ip
 8005312:	d109      	bne.n	8005328 <ip_reass_remove_oldest_datagram+0x50>
 8005314:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	4562      	cmp	r2, ip
 800531c:	d104      	bne.n	8005328 <ip_reass_remove_oldest_datagram+0x50>
 800531e:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8005322:	88b2      	ldrh	r2, [r6, #4]
 8005324:	4594      	cmp	ip, r2
 8005326:	d008      	beq.n	800533a <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8005328:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800532a:	b160      	cbz	r0, 8005346 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800532c:	7fc2      	ldrb	r2, [r0, #31]
 800532e:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8005332:	4594      	cmp	ip, r2
 8005334:	bf9c      	itt	ls
 8005336:	4671      	movls	r1, lr
 8005338:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	2a00      	cmp	r2, #0
 800533e:	bf18      	it	ne
 8005340:	469e      	movne	lr, r3
 8005342:	4613      	mov	r3, r2
 8005344:	e7d5      	b.n	80052f2 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8005346:	4671      	mov	r1, lr
 8005348:	4618      	mov	r0, r3
 800534a:	e7f6      	b.n	800533a <ip_reass_remove_oldest_datagram+0x62>
 800534c:	200001a4 	.word	0x200001a4

08005350 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8005350:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8005352:	4604      	mov	r4, r0
 8005354:	b930      	cbnz	r0, 8005364 <ip_frag_free_pbuf_custom_ref+0x14>
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <ip_frag_free_pbuf_custom_ref+0x20>)
 8005358:	f240 22ae 	movw	r2, #686	; 0x2ae
 800535c:	4905      	ldr	r1, [pc, #20]	; (8005374 <ip_frag_free_pbuf_custom_ref+0x24>)
 800535e:	4806      	ldr	r0, [pc, #24]	; (8005378 <ip_frag_free_pbuf_custom_ref+0x28>)
 8005360:	f006 f8de 	bl	800b520 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8005364:	4621      	mov	r1, r4
 8005366:	2005      	movs	r0, #5
}
 8005368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800536c:	f000 bcf8 	b.w	8005d60 <memp_free>
 8005370:	0800cef9 	.word	0x0800cef9
 8005374:	0800d5c3 	.word	0x0800d5c3
 8005378:	0800c987 	.word	0x0800c987

0800537c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800537c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800537e:	4604      	mov	r4, r0
 8005380:	b930      	cbnz	r0, 8005390 <ipfrag_free_pbuf_custom+0x14>
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <ipfrag_free_pbuf_custom+0x28>)
 8005384:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8005388:	4907      	ldr	r1, [pc, #28]	; (80053a8 <ipfrag_free_pbuf_custom+0x2c>)
 800538a:	4808      	ldr	r0, [pc, #32]	; (80053ac <ipfrag_free_pbuf_custom+0x30>)
 800538c:	f006 f8c8 	bl	800b520 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8005390:	6960      	ldr	r0, [r4, #20]
 8005392:	b108      	cbz	r0, 8005398 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8005394:	f000 fe48 	bl	8006028 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8005398:	4620      	mov	r0, r4
}
 800539a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800539e:	f7ff bfd7 	b.w	8005350 <ip_frag_free_pbuf_custom_ref>
 80053a2:	bf00      	nop
 80053a4:	0800cef9 	.word	0x0800cef9
 80053a8:	0800cfa1 	.word	0x0800cfa1
 80053ac:	0800c987 	.word	0x0800c987

080053b0 <ip_reass_tmr>:
{
 80053b0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80053b2:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 80053b4:	2400      	movs	r4, #0
  r = reassdatagrams;
 80053b6:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80053b8:	b900      	cbnz	r0, 80053bc <ip_reass_tmr+0xc>
}
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80053bc:	7fc3      	ldrb	r3, [r0, #31]
 80053be:	6805      	ldr	r5, [r0, #0]
 80053c0:	b123      	cbz	r3, 80053cc <ip_reass_tmr+0x1c>
      r->timer--;
 80053c2:	3b01      	subs	r3, #1
 80053c4:	4604      	mov	r4, r0
 80053c6:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 80053c8:	4628      	mov	r0, r5
 80053ca:	e7f5      	b.n	80053b8 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 80053cc:	4621      	mov	r1, r4
 80053ce:	f7ff ff0f 	bl	80051f0 <ip_reass_free_complete_datagram>
 80053d2:	e7f9      	b.n	80053c8 <ip_reass_tmr+0x18>
 80053d4:	200001a4 	.word	0x200001a4

080053d8 <ip4_reass>:
{
 80053d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 80053dc:	6845      	ldr	r5, [r0, #4]
{
 80053de:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80053e0:	782b      	ldrb	r3, [r5, #0]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	f040 808c 	bne.w	8005504 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80053ec:	88e8      	ldrh	r0, [r5, #6]
 80053ee:	f7fd ffd6 	bl	800339e <lwip_htons>
 80053f2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80053f6:	4cb2      	ldr	r4, [pc, #712]	; (80056c0 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80053f8:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80053fc:	8868      	ldrh	r0, [r5, #2]
 80053fe:	f7fd ffce 	bl	800339e <lwip_htons>
 8005402:	782b      	ldrb	r3, [r5, #0]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800540c:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800540e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005410:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8005412:	f000 ffbb 	bl	800638c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005416:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8005418:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800541a:	4403      	add	r3, r0
 800541c:	2b0a      	cmp	r3, #10
 800541e:	dc68      	bgt.n	80054f2 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005420:	4ea8      	ldr	r6, [pc, #672]	; (80056c4 <ip4_reass+0x2ec>)
 8005422:	6834      	ldr	r4, [r6, #0]
 8005424:	2c00      	cmp	r4, #0
 8005426:	d172      	bne.n	800550e <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005428:	2004      	movs	r0, #4
 800542a:	f000 fc7d 	bl	8005d28 <memp_malloc>
  if (ipr == NULL) {
 800542e:	4604      	mov	r4, r0
 8005430:	b958      	cbnz	r0, 800544a <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8005432:	4651      	mov	r1, sl
 8005434:	4628      	mov	r0, r5
 8005436:	f7ff ff4f 	bl	80052d8 <ip_reass_remove_oldest_datagram>
 800543a:	4582      	cmp	sl, r0
 800543c:	dc62      	bgt.n	8005504 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800543e:	2004      	movs	r0, #4
 8005440:	f000 fc72 	bl	8005d28 <memp_malloc>
    if (ipr == NULL)
 8005444:	4604      	mov	r4, r0
 8005446:	2800      	cmp	r0, #0
 8005448:	d05c      	beq.n	8005504 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800544a:	2220      	movs	r2, #32
 800544c:	2100      	movs	r1, #0
 800544e:	4620      	mov	r0, r4
 8005450:	f005 ffb2 	bl	800b3b8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8005454:	2303      	movs	r3, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005456:	f104 0208 	add.w	r2, r4, #8
 800545a:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800545e:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8005460:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8005462:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8005464:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005466:	462b      	mov	r3, r5
 8005468:	f853 0b04 	ldr.w	r0, [r3], #4
 800546c:	428b      	cmp	r3, r1
 800546e:	f842 0b04 	str.w	r0, [r2], #4
 8005472:	d1f9      	bne.n	8005468 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8005474:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8005478:	f01b 0b20 	ands.w	fp, fp, #32
 800547c:	d108      	bne.n	8005490 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800547e:	9b01      	ldr	r3, [sp, #4]
 8005480:	444b      	add	r3, r9
 8005482:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8005484:	4599      	cmp	r9, r3
 8005486:	d83d      	bhi.n	8005504 <ip4_reass+0x12c>
 8005488:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800548c:	4293      	cmp	r3, r2
 800548e:	d839      	bhi.n	8005504 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8005490:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005492:	8868      	ldrh	r0, [r5, #2]
 8005494:	f7fd ff83 	bl	800339e <lwip_htons>
 8005498:	f895 8000 	ldrb.w	r8, [r5]
 800549c:	f008 080f 	and.w	r8, r8, #15
 80054a0:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80054a4:	88e8      	ldrh	r0, [r5, #6]
 80054a6:	f7fd ff7a 	bl	800339e <lwip_htons>
 80054aa:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80054ae:	fa1f f888 	uxth.w	r8, r8
  for (q = ipr->p; q != NULL;) {
 80054b2:	f8d4 e004 	ldr.w	lr, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80054b6:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 80054b8:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 80054ba:	2500      	movs	r5, #0
  for (q = ipr->p; q != NULL;) {
 80054bc:	4672      	mov	r2, lr
  iprh->end = offset + len;
 80054be:	eb08 0300 	add.w	r3, r8, r0
  int valid = 1;
 80054c2:	f04f 0801 	mov.w	r8, #1
  iprh->next_pbuf = NULL;
 80054c6:	7035      	strb	r5, [r6, #0]
  iprh->end = offset + len;
 80054c8:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 80054ca:	7075      	strb	r5, [r6, #1]
 80054cc:	70b5      	strb	r5, [r6, #2]
 80054ce:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 80054d0:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 80054d2:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 80054d4:	bb52      	cbnz	r2, 800552c <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	f040 8092 	bne.w	8005600 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80054dc:	f1be 0f00 	cmp.w	lr, #0
 80054e0:	d07d      	beq.n	80055de <ip4_reass+0x206>
 80054e2:	4b79      	ldr	r3, [pc, #484]	; (80056c8 <ip4_reass+0x2f0>)
 80054e4:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80054e8:	4978      	ldr	r1, [pc, #480]	; (80056cc <ip4_reass+0x2f4>)
 80054ea:	4879      	ldr	r0, [pc, #484]	; (80056d0 <ip4_reass+0x2f8>)
 80054ec:	f006 f818 	bl	800b520 <iprintf>
 80054f0:	e075      	b.n	80055de <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80054f2:	4601      	mov	r1, r0
 80054f4:	4628      	mov	r0, r5
 80054f6:	f7ff feef 	bl	80052d8 <ip_reass_remove_oldest_datagram>
 80054fa:	b118      	cbz	r0, 8005504 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80054fc:	8823      	ldrh	r3, [r4, #0]
 80054fe:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8005500:	2b0a      	cmp	r3, #10
 8005502:	dd8d      	ble.n	8005420 <ip4_reass+0x48>
  pbuf_free(p);
 8005504:	4638      	mov	r0, r7
 8005506:	f000 fd8f 	bl	8006028 <pbuf_free>
  return NULL;
 800550a:	2500      	movs	r5, #0
 800550c:	e0d4      	b.n	80056b8 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800550e:	68eb      	ldr	r3, [r5, #12]
 8005510:	6962      	ldr	r2, [r4, #20]
 8005512:	429a      	cmp	r2, r3
 8005514:	d108      	bne.n	8005528 <ip4_reass+0x150>
 8005516:	692b      	ldr	r3, [r5, #16]
 8005518:	69a2      	ldr	r2, [r4, #24]
 800551a:	429a      	cmp	r2, r3
 800551c:	d104      	bne.n	8005528 <ip4_reass+0x150>
 800551e:	89a2      	ldrh	r2, [r4, #12]
 8005520:	88ab      	ldrh	r3, [r5, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	f000 80dc 	beq.w	80056e0 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005528:	6824      	ldr	r4, [r4, #0]
 800552a:	e77b      	b.n	8005424 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800552c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8005530:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8005534:	4288      	cmp	r0, r1
 8005536:	d254      	bcs.n	80055e2 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8005538:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800553a:	2d00      	cmp	r5, #0
 800553c:	d04d      	beq.n	80055da <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800553e:	88ea      	ldrh	r2, [r5, #6]
 8005540:	4290      	cmp	r0, r2
 8005542:	f0c0 8091 	bcc.w	8005668 <ip4_reass+0x290>
 8005546:	428b      	cmp	r3, r1
 8005548:	f200 808e 	bhi.w	8005668 <ip4_reass+0x290>
        if (iprh_prev->end != iprh->start) {
 800554c:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 800554e:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8005550:	f040 80e4 	bne.w	800571c <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005554:	f1bb 0f00 	cmp.w	fp, #0
 8005558:	d004      	beq.n	8005564 <ip4_reass+0x18c>
 800555a:	7fa3      	ldrb	r3, [r4, #30]
 800555c:	f013 0301 	ands.w	r3, r3, #1
 8005560:	f000 80da 	beq.w	8005718 <ip4_reass+0x340>
    if (valid) {
 8005564:	f1b8 0f00 	cmp.w	r8, #0
 8005568:	d159      	bne.n	800561e <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800556a:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800556e:	4e54      	ldr	r6, [pc, #336]	; (80056c0 <ip4_reass+0x2e8>)
 8005570:	8833      	ldrh	r3, [r6, #0]
 8005572:	449a      	add	sl, r3
 8005574:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8005578:	f1bb 0f00 	cmp.w	fp, #0
 800557c:	d107      	bne.n	800558e <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800557e:	9b01      	ldr	r3, [sp, #4]
 8005580:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8005582:	7fa3      	ldrb	r3, [r4, #30]
 8005584:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8005588:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800558c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800558e:	f1b8 0f01 	cmp.w	r8, #1
 8005592:	d1ba      	bne.n	800550a <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8005594:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8005596:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 800559a:	3314      	adds	r3, #20
 800559c:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80055a2:	f104 0308 	add.w	r3, r4, #8
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80055a6:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80055a8:	462a      	mov	r2, r5
 80055aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80055ae:	428b      	cmp	r3, r1
 80055b0:	f842 0b04 	str.w	r0, [r2], #4
 80055b4:	d1f9      	bne.n	80055aa <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80055b6:	8ba0      	ldrh	r0, [r4, #28]
 80055b8:	f7fd fef1 	bl	800339e <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80055bc:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80055be:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80055c0:	71ab      	strb	r3, [r5, #6]
 80055c2:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80055c4:	72ab      	strb	r3, [r5, #10]
 80055c6:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 80055c8:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 80055ca:	2f00      	cmp	r7, #0
 80055cc:	d157      	bne.n	800567e <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 80055ce:	4b3d      	ldr	r3, [pc, #244]	; (80056c4 <ip4_reass+0x2ec>)
 80055d0:	6819      	ldr	r1, [r3, #0]
 80055d2:	428c      	cmp	r4, r1
 80055d4:	d165      	bne.n	80056a2 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 80055d6:	4639      	mov	r1, r7
 80055d8:	e065      	b.n	80056a6 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 80055da:	428b      	cmp	r3, r1
 80055dc:	d844      	bhi.n	8005668 <ip4_reass+0x290>
      ipr->p = new_p;
 80055de:	6067      	str	r7, [r4, #4]
 80055e0:	e7b8      	b.n	8005554 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 80055e2:	d041      	beq.n	8005668 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 80055e4:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80055e8:	4282      	cmp	r2, r0
 80055ea:	d83d      	bhi.n	8005668 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 80055ec:	b125      	cbz	r5, 80055f8 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 80055ee:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 80055f0:	428a      	cmp	r2, r1
 80055f2:	bf18      	it	ne
 80055f4:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 80055f8:	f8dc 2000 	ldr.w	r2, [ip]
 80055fc:	4665      	mov	r5, ip
 80055fe:	e769      	b.n	80054d4 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8005600:	88eb      	ldrh	r3, [r5, #6]
 8005602:	4283      	cmp	r3, r0
 8005604:	d906      	bls.n	8005614 <ip4_reass+0x23c>
 8005606:	4b30      	ldr	r3, [pc, #192]	; (80056c8 <ip4_reass+0x2f0>)
 8005608:	f240 12ab 	movw	r2, #427	; 0x1ab
 800560c:	4931      	ldr	r1, [pc, #196]	; (80056d4 <ip4_reass+0x2fc>)
 800560e:	4830      	ldr	r0, [pc, #192]	; (80056d0 <ip4_reass+0x2f8>)
 8005610:	f005 ff86 	bl	800b520 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8005614:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8005616:	88ea      	ldrh	r2, [r5, #6]
 8005618:	88b3      	ldrh	r3, [r6, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	e798      	b.n	8005550 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800561e:	6863      	ldr	r3, [r4, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0a2      	beq.n	800556a <ip4_reass+0x192>
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	888b      	ldrh	r3, [r1, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d19e      	bne.n	800556a <ip4_reass+0x192>
        q = iprh->next_pbuf;
 800562c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800562e:	b99b      	cbnz	r3, 8005658 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8005630:	42b1      	cmp	r1, r6
 8005632:	d106      	bne.n	8005642 <ip4_reass+0x26a>
 8005634:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <ip4_reass+0x2f0>)
 8005636:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800563a:	4927      	ldr	r1, [pc, #156]	; (80056d8 <ip4_reass+0x300>)
 800563c:	4824      	ldr	r0, [pc, #144]	; (80056d0 <ip4_reass+0x2f8>)
 800563e:	f005 ff6f 	bl	800b520 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8005642:	6833      	ldr	r3, [r6, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d092      	beq.n	800556e <ip4_reass+0x196>
 8005648:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <ip4_reass+0x2f0>)
 800564a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800564e:	4923      	ldr	r1, [pc, #140]	; (80056dc <ip4_reass+0x304>)
 8005650:	481f      	ldr	r0, [pc, #124]	; (80056d0 <ip4_reass+0x2f8>)
 8005652:	f005 ff65 	bl	800b520 <iprintf>
 8005656:	e78a      	b.n	800556e <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8005658:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800565a:	88f0      	ldrh	r0, [r6, #6]
 800565c:	8893      	ldrh	r3, [r2, #4]
 800565e:	4298      	cmp	r0, r3
 8005660:	d183      	bne.n	800556a <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	4616      	mov	r6, r2
 8005666:	e7e2      	b.n	800562e <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8005668:	4638      	mov	r0, r7
 800566a:	f000 fe8f 	bl	800638c <pbuf_clen>
 800566e:	4a14      	ldr	r2, [pc, #80]	; (80056c0 <ip4_reass+0x2e8>)
 8005670:	8813      	ldrh	r3, [r2, #0]
 8005672:	1a18      	subs	r0, r3, r0
 8005674:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8005676:	4638      	mov	r0, r7
 8005678:	f000 fcd6 	bl	8006028 <pbuf_free>
 800567c:	e742      	b.n	8005504 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 800567e:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8005682:	f06f 0113 	mvn.w	r1, #19
 8005686:	4638      	mov	r0, r7
 8005688:	f000 fcc8 	bl	800601c <pbuf_header>
      pbuf_cat(p, r);
 800568c:	4639      	mov	r1, r7
 800568e:	4628      	mov	r0, r5
 8005690:	f000 fe98 	bl	80063c4 <pbuf_cat>
      r = iprh->next_pbuf;
 8005694:	f8d8 7000 	ldr.w	r7, [r8]
 8005698:	e797      	b.n	80055ca <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800569a:	680b      	ldr	r3, [r1, #0]
 800569c:	429c      	cmp	r4, r3
 800569e:	d002      	beq.n	80056a6 <ip4_reass+0x2ce>
 80056a0:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d1f9      	bne.n	800569a <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80056a6:	4620      	mov	r0, r4
 80056a8:	f7ff fd80 	bl	80051ac <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 fe6d 	bl	800638c <pbuf_clen>
 80056b2:	8833      	ldrh	r3, [r6, #0]
 80056b4:	1a18      	subs	r0, r3, r0
 80056b6:	8030      	strh	r0, [r6, #0]
}
 80056b8:	4628      	mov	r0, r5
 80056ba:	b003      	add	sp, #12
 80056bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c0:	200001a0 	.word	0x200001a0
 80056c4:	200001a4 	.word	0x200001a4
 80056c8:	0800cef9 	.word	0x0800cef9
 80056cc:	0800ce93 	.word	0x0800ce93
 80056d0:	0800c987 	.word	0x0800c987
 80056d4:	0800ce75 	.word	0x0800ce75
 80056d8:	0800ceca 	.word	0x0800ceca
 80056dc:	0800ced7 	.word	0x0800ced7
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80056e0:	88e8      	ldrh	r0, [r5, #6]
 80056e2:	f7fd fe5c 	bl	800339e <lwip_htons>
 80056e6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80056ea:	2800      	cmp	r0, #0
 80056ec:	f47f aec2 	bne.w	8005474 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80056f0:	89e0      	ldrh	r0, [r4, #14]
 80056f2:	f7fd fe54 	bl	800339e <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80056f6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80056fa:	2800      	cmp	r0, #0
 80056fc:	f43f aeba 	beq.w	8005474 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8005700:	462b      	mov	r3, r5
 8005702:	f104 0208 	add.w	r2, r4, #8
 8005706:	f105 0114 	add.w	r1, r5, #20
 800570a:	f853 0b04 	ldr.w	r0, [r3], #4
 800570e:	428b      	cmp	r3, r1
 8005710:	f842 0b04 	str.w	r0, [r2], #4
 8005714:	d1f9      	bne.n	800570a <ip4_reass+0x332>
 8005716:	e6ad      	b.n	8005474 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8005718:	4698      	mov	r8, r3
 800571a:	e728      	b.n	800556e <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800571c:	f1bb 0f00 	cmp.w	fp, #0
 8005720:	f43f af23 	beq.w	800556a <ip4_reass+0x192>
 8005724:	f04f 0800 	mov.w	r8, #0
 8005728:	e717      	b.n	800555a <ip4_reass+0x182>
 800572a:	bf00      	nop

0800572c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8005730:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
 8005734:	2308      	movs	r3, #8
{
 8005736:	b08b      	sub	sp, #44	; 0x2c
 8005738:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800573a:	f1a8 0814 	sub.w	r8, r8, #20
{
 800573e:	468b      	mov	fp, r1
 8005740:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8005742:	fb98 f8f3 	sdiv	r8, r8, r3
 8005746:	fa1f f388 	uxth.w	r3, r8
 800574a:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800574c:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800574e:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8005750:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8005752:	f006 060f 	and.w	r6, r6, #15
 8005756:	00b6      	lsls	r6, r6, #2
 8005758:	2e14      	cmp	r6, #20
 800575a:	d00b      	beq.n	8005774 <ip4_frag+0x48>
 800575c:	4b5a      	ldr	r3, [pc, #360]	; (80058c8 <ip4_frag+0x19c>)
 800575e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8005762:	495a      	ldr	r1, [pc, #360]	; (80058cc <ip4_frag+0x1a0>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005764:	485a      	ldr	r0, [pc, #360]	; (80058d0 <ip4_frag+0x1a4>)
 8005766:	f005 fedb 	bl	800b520 <iprintf>
 800576a:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800576e:	b00b      	add	sp, #44	; 0x2c
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8005774:	9b02      	ldr	r3, [sp, #8]
 8005776:	88d8      	ldrh	r0, [r3, #6]
 8005778:	f7fd fe11 	bl	800339e <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800577c:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005780:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8005784:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8005786:	d004      	beq.n	8005792 <ip4_frag+0x66>
 8005788:	4b4f      	ldr	r3, [pc, #316]	; (80058c8 <ip4_frag+0x19c>)
 800578a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800578e:	4951      	ldr	r1, [pc, #324]	; (80058d4 <ip4_frag+0x1a8>)
 8005790:	e7e8      	b.n	8005764 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8005792:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8005794:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8005798:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800579a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800579e:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 80057a0:	9307      	str	r3, [sp, #28]
  while (left) {
 80057a2:	b90d      	cbnz	r5, 80057a8 <ip4_frag+0x7c>
  return ERR_OK;
 80057a4:	4628      	mov	r0, r5
 80057a6:	e7e2      	b.n	800576e <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 80057a8:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80057aa:	2200      	movs	r2, #0
 80057ac:	2114      	movs	r1, #20
 80057ae:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	bfa8      	it	ge
 80057b4:	462b      	movge	r3, r5
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80057ba:	f000 fc97 	bl	80060ec <pbuf_alloc>
    if (rambuf == NULL) {
 80057be:	4680      	mov	r8, r0
 80057c0:	b370      	cbz	r0, 8005820 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	2b13      	cmp	r3, #19
 80057c6:	d806      	bhi.n	80057d6 <ip4_frag+0xaa>
 80057c8:	4b3f      	ldr	r3, [pc, #252]	; (80058c8 <ip4_frag+0x19c>)
 80057ca:	f240 3209 	movw	r2, #777	; 0x309
 80057ce:	4942      	ldr	r1, [pc, #264]	; (80058d8 <ip4_frag+0x1ac>)
 80057d0:	483f      	ldr	r0, [pc, #252]	; (80058d0 <ip4_frag+0x1a4>)
 80057d2:	f005 fea5 	bl	800b520 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80057d6:	9b02      	ldr	r3, [sp, #8]
 80057d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80057dc:	4619      	mov	r1, r3
 80057de:	3114      	adds	r1, #20
 80057e0:	f853 0b04 	ldr.w	r0, [r3], #4
 80057e4:	428b      	cmp	r3, r1
 80057e6:	f842 0b04 	str.w	r0, [r2], #4
 80057ea:	d1f9      	bne.n	80057e0 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80057ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 80057f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80057f4:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 80057f6:	f1b9 0f00 	cmp.w	r9, #0
 80057fa:	d037      	beq.n	800586c <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 80057fc:	897c      	ldrh	r4, [r7, #10]
 80057fe:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8005800:	b2a4      	uxth	r4, r4
 8005802:	454c      	cmp	r4, r9
 8005804:	bf28      	it	cs
 8005806:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8005808:	b914      	cbnz	r4, 8005810 <ip4_frag+0xe4>
        p = p->next;
 800580a:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800580c:	2600      	movs	r6, #0
 800580e:	e7f2      	b.n	80057f6 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8005810:	2005      	movs	r0, #5
 8005812:	f000 fa89 	bl	8005d28 <memp_malloc>
      if (pcr == NULL) {
 8005816:	4682      	mov	sl, r0
 8005818:	b928      	cbnz	r0, 8005826 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800581a:	4640      	mov	r0, r8
 800581c:	f000 fc04 	bl	8006028 <pbuf_free>
  return ERR_MEM;
 8005820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005824:	e7a3      	b.n	800576e <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8005826:	9401      	str	r4, [sp, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4621      	mov	r1, r4
 800582e:	4433      	add	r3, r6
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	4603      	mov	r3, r0
 8005834:	2004      	movs	r0, #4
 8005836:	f000 fbb9 	bl	8005fac <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800583a:	b918      	cbnz	r0, 8005844 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 800583c:	4650      	mov	r0, sl
 800583e:	f7ff fd87 	bl	8005350 <ip_frag_free_pbuf_custom_ref>
 8005842:	e7ea      	b.n	800581a <ip4_frag+0xee>
 8005844:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 8005846:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 800584a:	4638      	mov	r0, r7
 800584c:	f000 fda6 	bl	800639c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8005850:	4b22      	ldr	r3, [pc, #136]	; (80058dc <ip4_frag+0x1b0>)
      left_to_copy -= newpbuflen;
 8005852:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 8005856:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800585a:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800585e:	4640      	mov	r0, r8
 8005860:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005862:	f000 fdaf 	bl	80063c4 <pbuf_cat>
      if (left_to_copy) {
 8005866:	f1b9 0f00 	cmp.w	r9, #0
 800586a:	d1ce      	bne.n	800580a <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800586c:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 800586e:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 8005870:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8005874:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    poff += newpbuflen;
 8005878:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 800587a:	3b13      	subs	r3, #19
    if (!last) {
 800587c:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800587e:	bfa8      	it	ge
 8005880:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8005884:	f7fd fd8b 	bl	800339e <lwip_htons>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800588c:	9b05      	ldr	r3, [sp, #20]
 800588e:	f103 0014 	add.w	r0, r3, #20
 8005892:	b280      	uxth	r0, r0
 8005894:	f7fd fd83 	bl	800339e <lwip_htons>
 8005898:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800589a:	9a03      	ldr	r2, [sp, #12]
    netif->output(netif, rambuf, dest);
 800589c:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800589e:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80058a0:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 80058a2:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 80058a4:	7293      	strb	r3, [r2, #10]
 80058a6:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 80058a8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80058ac:	9a08      	ldr	r2, [sp, #32]
 80058ae:	4798      	blx	r3
    pbuf_free(rambuf);
 80058b0:	4640      	mov	r0, r8
 80058b2:	f000 fbb9 	bl	8006028 <pbuf_free>
    left -= fragsize;
 80058b6:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 80058b8:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 80058ba:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 80058bc:	9b04      	ldr	r3, [sp, #16]
 80058be:	4413      	add	r3, r2
    left -= fragsize;
 80058c0:	b2ad      	uxth	r5, r5
    ofo += nfb;
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	e76c      	b.n	80057a2 <ip4_frag+0x76>
 80058c8:	0800cef9 	.word	0x0800cef9
 80058cc:	0800ce14 	.word	0x0800ce14
 80058d0:	0800c987 	.word	0x0800c987
 80058d4:	0800ce3b 	.word	0x0800ce3b
 80058d8:	0800ce55 	.word	0x0800ce55
 80058dc:	0800537d 	.word	0x0800537d

080058e0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <mem_init+0x30>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 80058e2:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80058e4:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <mem_init+0x34>)
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 80058ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 80058f0:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80058f2:	1898      	adds	r0, r3, r2
  mem->used = 0;
 80058f4:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80058f6:	4908      	ldr	r1, [pc, #32]	; (8005918 <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 80058f8:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80058fa:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 80058fc:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 80058fe:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005902:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005906:	4a05      	ldr	r2, [pc, #20]	; (800591c <mem_init+0x3c>)
  ram_end->used = 1;
 8005908:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	4770      	bx	lr
 8005910:	20000283 	.word	0x20000283
 8005914:	200001ac 	.word	0x200001ac
 8005918:	200001b0 	.word	0x200001b0
 800591c:	200001a8 	.word	0x200001a8

08005920 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005924:	4604      	mov	r4, r0
 8005926:	2800      	cmp	r0, #0
 8005928:	f000 8089 	beq.w	8005a3e <mem_free+0x11e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800592c:	0783      	lsls	r3, r0, #30
 800592e:	d006      	beq.n	800593e <mem_free+0x1e>
 8005930:	4b44      	ldr	r3, [pc, #272]	; (8005a44 <mem_free+0x124>)
 8005932:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8005936:	4944      	ldr	r1, [pc, #272]	; (8005a48 <mem_free+0x128>)
 8005938:	4844      	ldr	r0, [pc, #272]	; (8005a4c <mem_free+0x12c>)
 800593a:	f005 fdf1 	bl	800b520 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800593e:	4f44      	ldr	r7, [pc, #272]	; (8005a50 <mem_free+0x130>)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	429c      	cmp	r4, r3
 8005944:	d303      	bcc.n	800594e <mem_free+0x2e>
 8005946:	4b43      	ldr	r3, [pc, #268]	; (8005a54 <mem_free+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429c      	cmp	r4, r3
 800594c:	d306      	bcc.n	800595c <mem_free+0x3c>
 800594e:	4b3d      	ldr	r3, [pc, #244]	; (8005a44 <mem_free+0x124>)
 8005950:	f240 12af 	movw	r2, #431	; 0x1af
 8005954:	4940      	ldr	r1, [pc, #256]	; (8005a58 <mem_free+0x138>)
 8005956:	483d      	ldr	r0, [pc, #244]	; (8005a4c <mem_free+0x12c>)
 8005958:	f005 fde2 	bl	800b520 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	429c      	cmp	r4, r3
 8005960:	d36d      	bcc.n	8005a3e <mem_free+0x11e>
 8005962:	4b3c      	ldr	r3, [pc, #240]	; (8005a54 <mem_free+0x134>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4698      	mov	r8, r3
 8005968:	4294      	cmp	r4, r2
 800596a:	d268      	bcs.n	8005a3e <mem_free+0x11e>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800596c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005970:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005974:	b933      	cbnz	r3, 8005984 <mem_free+0x64>
 8005976:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <mem_free+0x124>)
 8005978:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800597c:	4937      	ldr	r1, [pc, #220]	; (8005a5c <mem_free+0x13c>)
 800597e:	4833      	ldr	r0, [pc, #204]	; (8005a4c <mem_free+0x12c>)
 8005980:	f005 fdce 	bl	800b520 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8005984:	2300      	movs	r3, #0

  if (mem < lfree) {
 8005986:	4e36      	ldr	r6, [pc, #216]	; (8005a60 <mem_free+0x140>)
  mem->used = 0;
 8005988:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800598c:	6833      	ldr	r3, [r6, #0]
 800598e:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005990:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005992:	bf38      	it	cc
 8005994:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005996:	429d      	cmp	r5, r3
 8005998:	d206      	bcs.n	80059a8 <mem_free+0x88>
 800599a:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <mem_free+0x124>)
 800599c:	f240 125d 	movw	r2, #349	; 0x15d
 80059a0:	4930      	ldr	r1, [pc, #192]	; (8005a64 <mem_free+0x144>)
 80059a2:	482a      	ldr	r0, [pc, #168]	; (8005a4c <mem_free+0x12c>)
 80059a4:	f005 fdbc 	bl	800b520 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80059a8:	f8d8 3000 	ldr.w	r3, [r8]
 80059ac:	429d      	cmp	r5, r3
 80059ae:	d306      	bcc.n	80059be <mem_free+0x9e>
 80059b0:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <mem_free+0x124>)
 80059b2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80059b6:	492c      	ldr	r1, [pc, #176]	; (8005a68 <mem_free+0x148>)
 80059b8:	4824      	ldr	r0, [pc, #144]	; (8005a4c <mem_free+0x12c>)
 80059ba:	f005 fdb1 	bl	800b520 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80059be:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80059c2:	b133      	cbz	r3, 80059d2 <mem_free+0xb2>
 80059c4:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <mem_free+0x124>)
 80059c6:	f240 125f 	movw	r2, #351	; 0x15f
 80059ca:	4928      	ldr	r1, [pc, #160]	; (8005a6c <mem_free+0x14c>)
 80059cc:	481f      	ldr	r0, [pc, #124]	; (8005a4c <mem_free+0x12c>)
 80059ce:	f005 fda7 	bl	800b520 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80059d2:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80059d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059da:	d906      	bls.n	80059ea <mem_free+0xca>
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <mem_free+0x124>)
 80059de:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80059e2:	4923      	ldr	r1, [pc, #140]	; (8005a70 <mem_free+0x150>)
 80059e4:	4819      	ldr	r0, [pc, #100]	; (8005a4c <mem_free+0x12c>)
 80059e6:	f005 fd9b 	bl	800b520 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80059f0:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80059f2:	4295      	cmp	r5, r2
 80059f4:	d011      	beq.n	8005a1a <mem_free+0xfa>
 80059f6:	7910      	ldrb	r0, [r2, #4]
 80059f8:	b978      	cbnz	r0, 8005a1a <mem_free+0xfa>
 80059fa:	f8d8 0000 	ldr.w	r0, [r8]
 80059fe:	4282      	cmp	r2, r0
 8005a00:	d00b      	beq.n	8005a1a <mem_free+0xfa>
    if (lfree == nmem) {
 8005a02:	6830      	ldr	r0, [r6, #0]
 8005a04:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8005a06:	5a5a      	ldrh	r2, [r3, r1]
 8005a08:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005a0c:	5a5a      	ldrh	r2, [r3, r1]
 8005a0e:	eba5 0103 	sub.w	r1, r5, r3
      lfree = mem;
 8005a12:	bf08      	it	eq
 8005a14:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005a16:	441a      	add	r2, r3
 8005a18:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8005a1a:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8005a1e:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8005a20:	428d      	cmp	r5, r1
 8005a22:	d00c      	beq.n	8005a3e <mem_free+0x11e>
 8005a24:	7908      	ldrb	r0, [r1, #4]
 8005a26:	b950      	cbnz	r0, 8005a3e <mem_free+0x11e>
    if (lfree == mem) {
 8005a28:	6830      	ldr	r0, [r6, #0]
 8005a2a:	4285      	cmp	r5, r0
      lfree = pmem;
 8005a2c:	bf08      	it	eq
 8005a2e:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8005a30:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005a34:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8005a36:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005a3a:	440b      	add	r3, r1
 8005a3c:	805a      	strh	r2, [r3, #2]
 8005a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a42:	bf00      	nop
 8005a44:	0800cfad 	.word	0x0800cfad
 8005a48:	0800cfdc 	.word	0x0800cfdc
 8005a4c:	0800c987 	.word	0x0800c987
 8005a50:	200001ac 	.word	0x200001ac
 8005a54:	200001b0 	.word	0x200001b0
 8005a58:	0800cffd 	.word	0x0800cffd
 8005a5c:	0800d014 	.word	0x0800d014
 8005a60:	200001a8 	.word	0x200001a8
 8005a64:	0800d028 	.word	0x0800d028
 8005a68:	0800d03f 	.word	0x0800d03f
 8005a6c:	0800d059 	.word	0x0800d059
 8005a70:	0800d074 	.word	0x0800d074

08005a74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005a76:	3103      	adds	r1, #3
 8005a78:	f64f 75fc 	movw	r5, #65532	; 0xfffc
{
 8005a7c:	4604      	mov	r4, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005a7e:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8005a80:	2d0b      	cmp	r5, #11
 8005a82:	d904      	bls.n	8005a8e <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005a84:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005a88:	d902      	bls.n	8005a90 <mem_trim+0x1c>
    return NULL;
 8005a8a:	2400      	movs	r4, #0
 8005a8c:	e059      	b.n	8005b42 <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 8005a8e:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005a90:	4e2d      	ldr	r6, [pc, #180]	; (8005b48 <mem_trim+0xd4>)
 8005a92:	6832      	ldr	r2, [r6, #0]
 8005a94:	42a2      	cmp	r2, r4
 8005a96:	d803      	bhi.n	8005aa0 <mem_trim+0x2c>
 8005a98:	4b2c      	ldr	r3, [pc, #176]	; (8005b4c <mem_trim+0xd8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	d306      	bcc.n	8005aae <mem_trim+0x3a>
 8005aa0:	4b2b      	ldr	r3, [pc, #172]	; (8005b50 <mem_trim+0xdc>)
 8005aa2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005aa6:	492b      	ldr	r1, [pc, #172]	; (8005b54 <mem_trim+0xe0>)
 8005aa8:	482b      	ldr	r0, [pc, #172]	; (8005b58 <mem_trim+0xe4>)
 8005aaa:	f005 fd39 	bl	800b520 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005aae:	6833      	ldr	r3, [r6, #0]
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	d346      	bcc.n	8005b42 <mem_trim+0xce>
 8005ab4:	4a25      	ldr	r2, [pc, #148]	; (8005b4c <mem_trim+0xd8>)
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	4294      	cmp	r4, r2
 8005aba:	d242      	bcs.n	8005b42 <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005abc:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005ac0:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005ac4:	1ad2      	subs	r2, r2, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005ac6:	f1a0 0108 	sub.w	r1, r0, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005aca:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005acc:	1a89      	subs	r1, r1, r2
 8005ace:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005ad0:	42a9      	cmp	r1, r5
 8005ad2:	d219      	bcs.n	8005b08 <mem_trim+0x94>
 8005ad4:	4b1e      	ldr	r3, [pc, #120]	; (8005b50 <mem_trim+0xdc>)
 8005ad6:	f240 2206 	movw	r2, #518	; 0x206
 8005ada:	4920      	ldr	r1, [pc, #128]	; (8005b5c <mem_trim+0xe8>)
 8005adc:	481e      	ldr	r0, [pc, #120]	; (8005b58 <mem_trim+0xe4>)
 8005ade:	f005 fd1f 	bl	800b520 <iprintf>
 8005ae2:	e7d2      	b.n	8005a8a <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005ae4:	f105 0614 	add.w	r6, r5, #20
 8005ae8:	428e      	cmp	r6, r1
 8005aea:	d82a      	bhi.n	8005b42 <mem_trim+0xce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005aec:	f102 0108 	add.w	r1, r2, #8
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8005af0:	4e1b      	ldr	r6, [pc, #108]	; (8005b60 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005af2:	440d      	add	r5, r1
    if (mem2 < lfree) {
 8005af4:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005af6:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005af8:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8005afa:	42b9      	cmp	r1, r7
      lfree = mem2;
 8005afc:	bf38      	it	cc
 8005afe:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 8005b00:	2600      	movs	r6, #0
 8005b02:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 8005b04:	5358      	strh	r0, [r3, r5]
 8005b06:	e013      	b.n	8005b30 <mem_trim+0xbc>
  if (newsize == size) {
 8005b08:	d01b      	beq.n	8005b42 <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8005b0a:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 8005b0c:	7937      	ldrb	r7, [r6, #4]
 8005b0e:	2f00      	cmp	r7, #0
 8005b10:	d1e8      	bne.n	8005ae4 <mem_trim+0x70>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005b12:	f102 0108 	add.w	r1, r2, #8
    next = mem2->next;
 8005b16:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 8005b18:	4811      	ldr	r0, [pc, #68]	; (8005b60 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005b1a:	440d      	add	r5, r1
    if (lfree == mem2) {
 8005b1c:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005b1e:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8005b20:	428e      	cmp	r6, r1
 8005b22:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 8005b26:	bf08      	it	eq
 8005b28:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 8005b2e:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 8005b30:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 8005b32:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b36:	5b5a      	ldrh	r2, [r3, r5]
 8005b38:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8005b3c:	d001      	beq.n	8005b42 <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005b3e:	4413      	add	r3, r2
 8005b40:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8005b42:	4620      	mov	r0, r4
 8005b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200001ac 	.word	0x200001ac
 8005b4c:	200001b0 	.word	0x200001b0
 8005b50:	0800cfad 	.word	0x0800cfad
 8005b54:	0800d139 	.word	0x0800d139
 8005b58:	0800c987 	.word	0x0800c987
 8005b5c:	0800d150 	.word	0x0800d150
 8005b60:	200001a8 	.word	0x200001a8

08005b64 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8005b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8005b68:	b148      	cbz	r0, 8005b7e <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8005b6a:	3003      	adds	r0, #3
 8005b6c:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8005b70:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8005b72:	2d0b      	cmp	r5, #11
 8005b74:	d905      	bls.n	8005b82 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8005b76:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8005b7a:	d903      	bls.n	8005b84 <mem_malloc+0x20>
    return NULL;
 8005b7c:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8005b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8005b82:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005b84:	4837      	ldr	r0, [pc, #220]	; (8005c64 <mem_malloc+0x100>)
 8005b86:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
 8005b8a:	4e37      	ldr	r6, [pc, #220]	; (8005c68 <mem_malloc+0x104>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005b8c:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005b90:	6807      	ldr	r7, [r0, #0]
 8005b92:	6831      	ldr	r1, [r6, #0]
 8005b94:	1a7b      	subs	r3, r7, r1
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	4543      	cmp	r3, r8
 8005b9a:	d2ef      	bcs.n	8005b7c <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8005b9c:	18cc      	adds	r4, r1, r3
 8005b9e:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 8005ba2:	f894 c004 	ldrb.w	ip, [r4, #4]
 8005ba6:	f1bc 0f00 	cmp.w	ip, #0
 8005baa:	d158      	bne.n	8005c5e <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005bac:	eba9 0203 	sub.w	r2, r9, r3
 8005bb0:	4472      	add	r2, lr
      if ((!mem->used) &&
 8005bb2:	4295      	cmp	r5, r2
 8005bb4:	d853      	bhi.n	8005c5e <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005bb6:	f105 0814 	add.w	r8, r5, #20
 8005bba:	4542      	cmp	r2, r8
 8005bbc:	d349      	bcc.n	8005c52 <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8005bbe:	f105 0208 	add.w	r2, r5, #8
 8005bc2:	441a      	add	r2, r3
 8005bc4:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8005bc6:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8005bca:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 8005bce:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 8005bd2:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8005bd6:	2301      	movs	r3, #1
          mem->next = ptr2;
 8005bd8:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8005bda:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005bdc:	5a8b      	ldrh	r3, [r1, r2]
 8005bde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005be2:	d001      	beq.n	8005be8 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005be4:	4419      	add	r1, r3
 8005be6:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8005be8:	42a7      	cmp	r7, r4
 8005bea:	4f20      	ldr	r7, [pc, #128]	; (8005c6c <mem_malloc+0x108>)
 8005bec:	d111      	bne.n	8005c12 <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 8005bee:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	6836      	ldr	r6, [r6, #0]
          while (cur->used && cur != ram_end) {
 8005bf4:	791a      	ldrb	r2, [r3, #4]
 8005bf6:	b10a      	cbz	r2, 8005bfc <mem_malloc+0x98>
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	d12d      	bne.n	8005c58 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005bfc:	428b      	cmp	r3, r1
          lfree = cur;
 8005bfe:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005c00:	d007      	beq.n	8005c12 <mem_malloc+0xae>
 8005c02:	b132      	cbz	r2, 8005c12 <mem_malloc+0xae>
 8005c04:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <mem_malloc+0x10c>)
 8005c06:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005c0a:	491a      	ldr	r1, [pc, #104]	; (8005c74 <mem_malloc+0x110>)
 8005c0c:	481a      	ldr	r0, [pc, #104]	; (8005c78 <mem_malloc+0x114>)
 8005c0e:	f005 fc87 	bl	800b520 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005c12:	3508      	adds	r5, #8
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4425      	add	r5, r4
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	d206      	bcs.n	8005c2a <mem_malloc+0xc6>
 8005c1c:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <mem_malloc+0x10c>)
 8005c1e:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8005c22:	4916      	ldr	r1, [pc, #88]	; (8005c7c <mem_malloc+0x118>)
 8005c24:	4814      	ldr	r0, [pc, #80]	; (8005c78 <mem_malloc+0x114>)
 8005c26:	f005 fc7b 	bl	800b520 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005c2a:	07a3      	lsls	r3, r4, #30
 8005c2c:	d00d      	beq.n	8005c4a <mem_malloc+0xe6>
 8005c2e:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <mem_malloc+0x10c>)
 8005c30:	f240 22d6 	movw	r2, #726	; 0x2d6
 8005c34:	4912      	ldr	r1, [pc, #72]	; (8005c80 <mem_malloc+0x11c>)
 8005c36:	4810      	ldr	r0, [pc, #64]	; (8005c78 <mem_malloc+0x114>)
 8005c38:	f005 fc72 	bl	800b520 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <mem_malloc+0x10c>)
 8005c3e:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8005c42:	4910      	ldr	r1, [pc, #64]	; (8005c84 <mem_malloc+0x120>)
 8005c44:	480c      	ldr	r0, [pc, #48]	; (8005c78 <mem_malloc+0x114>)
 8005c46:	f005 fc6b 	bl	800b520 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8005c4a:	f104 0008 	add.w	r0, r4, #8
 8005c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8005c52:	2301      	movs	r3, #1
 8005c54:	7123      	strb	r3, [r4, #4]
 8005c56:	e7c7      	b.n	8005be8 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	4433      	add	r3, r6
 8005c5c:	e7ca      	b.n	8005bf4 <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8005c5e:	4673      	mov	r3, lr
 8005c60:	e79a      	b.n	8005b98 <mem_malloc+0x34>
 8005c62:	bf00      	nop
 8005c64:	200001a8 	.word	0x200001a8
 8005c68:	200001ac 	.word	0x200001ac
 8005c6c:	200001b0 	.word	0x200001b0
 8005c70:	0800cfad 	.word	0x0800cfad
 8005c74:	0800d09e 	.word	0x0800d09e
 8005c78:	0800c987 	.word	0x0800c987
 8005c7c:	0800d0b7 	.word	0x0800d0b7
 8005c80:	0800d0e7 	.word	0x0800d0e7
 8005c84:	0800d116 	.word	0x0800d116

08005c88 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8005c88:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005c8a:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005c8c:	b154      	cbz	r4, 8005ca4 <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005c92:	07a3      	lsls	r3, r4, #30
 8005c94:	d006      	beq.n	8005ca4 <do_memp_malloc_pool.isra.0+0x1c>
 8005c96:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <do_memp_malloc_pool.isra.0+0x20>)
 8005c98:	f240 1249 	movw	r2, #329	; 0x149
 8005c9c:	4903      	ldr	r1, [pc, #12]	; (8005cac <do_memp_malloc_pool.isra.0+0x24>)
 8005c9e:	4804      	ldr	r0, [pc, #16]	; (8005cb0 <do_memp_malloc_pool.isra.0+0x28>)
 8005ca0:	f005 fc3e 	bl	800b520 <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	bd10      	pop	{r4, pc}
 8005ca8:	0800d190 	.word	0x0800d190
 8005cac:	0800d1c0 	.word	0x0800d1c0
 8005cb0:	0800c987 	.word	0x0800c987

08005cb4 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005cb4:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005cb6:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005cb8:	4605      	mov	r5, r0
 8005cba:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8005cbc:	d006      	beq.n	8005ccc <do_memp_free_pool.isra.1+0x18>
 8005cbe:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <do_memp_free_pool.isra.1+0x24>)
 8005cc0:	f240 129d 	movw	r2, #413	; 0x19d
 8005cc4:	4905      	ldr	r1, [pc, #20]	; (8005cdc <do_memp_free_pool.isra.1+0x28>)
 8005cc6:	4806      	ldr	r0, [pc, #24]	; (8005ce0 <do_memp_free_pool.isra.1+0x2c>)
 8005cc8:	f005 fc2a 	bl	800b520 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8005cd2:	601c      	str	r4, [r3, #0]
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
 8005cd6:	bf00      	nop
 8005cd8:	0800d190 	.word	0x0800d190
 8005cdc:	0800d170 	.word	0x0800d170
 8005ce0:	0800c987 	.word	0x0800c987

08005ce4 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005ce4:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005cea:	3303      	adds	r3, #3
{
 8005cec:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005cee:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005cf2:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8005cf4:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005cf6:	42a2      	cmp	r2, r4
 8005cf8:	db00      	blt.n	8005cfc <memp_init_pool+0x18>
}
 8005cfa:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8005cfc:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005cfe:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8005d00:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005d02:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8005d04:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005d06:	442b      	add	r3, r5
 8005d08:	e7f5      	b.n	8005cf6 <memp_init_pool+0x12>
	...

08005d0c <memp_init>:
{
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8005d10:	4d04      	ldr	r5, [pc, #16]	; (8005d24 <memp_init+0x18>)
 8005d12:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005d16:	3401      	adds	r4, #1
 8005d18:	f7ff ffe4 	bl	8005ce4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005d1c:	2c09      	cmp	r4, #9
 8005d1e:	d1f8      	bne.n	8005d12 <memp_init+0x6>
}
 8005d20:	bd38      	pop	{r3, r4, r5, pc}
 8005d22:	bf00      	nop
 8005d24:	0800d288 	.word	0x0800d288

08005d28 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005d28:	2808      	cmp	r0, #8
{
 8005d2a:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005d2c:	d807      	bhi.n	8005d3e <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <memp_malloc+0x28>)
 8005d30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005d34:	6898      	ldr	r0, [r3, #8]
}
 8005d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005d3a:	f7ff bfa5 	b.w	8005c88 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005d3e:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <memp_malloc+0x2c>)
 8005d40:	f240 1287 	movw	r2, #391	; 0x187
 8005d44:	4904      	ldr	r1, [pc, #16]	; (8005d58 <memp_malloc+0x30>)
 8005d46:	4805      	ldr	r0, [pc, #20]	; (8005d5c <memp_malloc+0x34>)
 8005d48:	f005 fbea 	bl	800b520 <iprintf>
}
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	bd08      	pop	{r3, pc}
 8005d50:	0800d288 	.word	0x0800d288
 8005d54:	0800d190 	.word	0x0800d190
 8005d58:	0800d26b 	.word	0x0800d26b
 8005d5c:	0800c987 	.word	0x0800c987

08005d60 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005d60:	2808      	cmp	r0, #8
 8005d62:	d906      	bls.n	8005d72 <memp_free+0x12>
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <memp_free+0x24>)
 8005d66:	f240 12db 	movw	r2, #475	; 0x1db
 8005d6a:	4907      	ldr	r1, [pc, #28]	; (8005d88 <memp_free+0x28>)
 8005d6c:	4807      	ldr	r0, [pc, #28]	; (8005d8c <memp_free+0x2c>)
 8005d6e:	f005 bbd7 	b.w	800b520 <iprintf>

  if (mem == NULL) {
 8005d72:	b129      	cbz	r1, 8005d80 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <memp_free+0x30>)
 8005d76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005d7a:	3008      	adds	r0, #8
 8005d7c:	f7ff bf9a 	b.w	8005cb4 <do_memp_free_pool.isra.1>
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	0800d190 	.word	0x0800d190
 8005d88:	0800d250 	.word	0x0800d250
 8005d8c:	0800c987 	.word	0x0800c987
 8005d90:	0800d288 	.word	0x0800d288

08005d94 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005d94:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 8005d98:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005d9a:	071b      	lsls	r3, r3, #28
 8005d9c:	d502      	bpl.n	8005da4 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8005d9e:	3104      	adds	r1, #4
 8005da0:	f7fe bda4 	b.w	80048ec <etharp_request>
 8005da4:	4770      	bx	lr

08005da6 <netif_init>:
{
 8005da6:	4770      	bx	lr

08005da8 <netif_set_ipaddr>:
{
 8005da8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005daa:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005dac:	460c      	mov	r4, r1
 8005dae:	b1b9      	cbz	r1, 8005de0 <netif_set_ipaddr+0x38>
 8005db0:	680b      	ldr	r3, [r1, #0]
 8005db2:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8005db4:	9a01      	ldr	r2, [sp, #4]
 8005db6:	686b      	ldr	r3, [r5, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d00f      	beq.n	8005ddc <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005dbc:	1d2e      	adds	r6, r5, #4
 8005dbe:	a901      	add	r1, sp, #4
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f001 fafd 	bl	80073c0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005dc6:	a901      	add	r1, sp, #4
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f003 ff93 	bl	8009cf4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005dce:	b104      	cbz	r4, 8005dd2 <netif_set_ipaddr+0x2a>
 8005dd0:	6824      	ldr	r4, [r4, #0]
 8005dd2:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005dd4:	b114      	cbz	r4, 8005ddc <netif_set_ipaddr+0x34>
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f7ff ffdc 	bl	8005d94 <netif_issue_reports.part.0>
}
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005de0:	4b01      	ldr	r3, [pc, #4]	; (8005de8 <netif_set_ipaddr+0x40>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	e7e5      	b.n	8005db2 <netif_set_ipaddr+0xa>
 8005de6:	bf00      	nop
 8005de8:	0800ce0c 	.word	0x0800ce0c

08005dec <netif_set_addr>:
{
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4606      	mov	r6, r0
 8005df0:	4615      	mov	r5, r2
 8005df2:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8005df4:	b109      	cbz	r1, 8005dfa <netif_set_addr+0xe>
 8005df6:	680b      	ldr	r3, [r1, #0]
 8005df8:	b94b      	cbnz	r3, 8005e0e <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7ff ffd4 	bl	8005da8 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005e00:	b105      	cbz	r5, 8005e04 <netif_set_addr+0x18>
 8005e02:	682d      	ldr	r5, [r5, #0]
 8005e04:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005e06:	b104      	cbz	r4, 8005e0a <netif_set_addr+0x1e>
 8005e08:	6824      	ldr	r4, [r4, #0]
 8005e0a:	60f4      	str	r4, [r6, #12]
 8005e0c:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005e0e:	b102      	cbz	r2, 8005e12 <netif_set_addr+0x26>
 8005e10:	6815      	ldr	r5, [r2, #0]
 8005e12:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005e14:	b104      	cbz	r4, 8005e18 <netif_set_addr+0x2c>
 8005e16:	6824      	ldr	r4, [r4, #0]
 8005e18:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8005e1a:	4630      	mov	r0, r6
}
 8005e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8005e20:	f7ff bfc2 	b.w	8005da8 <netif_set_ipaddr>

08005e24 <netif_add>:
{
 8005e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e28:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	4690      	mov	r8, r2
 8005e30:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8005e32:	b92e      	cbnz	r6, 8005e40 <netif_add+0x1c>
 8005e34:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <netif_add+0x68>)
 8005e36:	22fb      	movs	r2, #251	; 0xfb
 8005e38:	4915      	ldr	r1, [pc, #84]	; (8005e90 <netif_add+0x6c>)
 8005e3a:	4816      	ldr	r0, [pc, #88]	; (8005e94 <netif_add+0x70>)
 8005e3c:	f005 fb70 	bl	800b520 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8005e40:	2303      	movs	r3, #3
  netif->num = netif_num++;
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <netif_add+0x74>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005e44:	2500      	movs	r5, #0
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005e46:	4620      	mov	r0, r4
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8005e48:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 8005e4c:	9b08      	ldr	r3, [sp, #32]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005e4e:	6065      	str	r5, [r4, #4]
  netif->state = state;
 8005e50:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8005e52:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005e54:	60a5      	str	r5, [r4, #8]
  netif->num = netif_num++;
 8005e56:	1c59      	adds	r1, r3, #1
 8005e58:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 8005e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8005e5e:	7011      	strb	r1, [r2, #0]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005e60:	4642      	mov	r2, r8
  netif->input = input;
 8005e62:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005e64:	4639      	mov	r1, r7
  ip_addr_set_zero_ip4(&netif->gw);
 8005e66:	60e5      	str	r5, [r4, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005e68:	464b      	mov	r3, r9
  netif->flags = 0;
 8005e6a:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005e6e:	6225      	str	r5, [r4, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005e70:	f7ff ffbc 	bl	8005dec <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8005e74:	4620      	mov	r0, r4
 8005e76:	47b0      	blx	r6
 8005e78:	b930      	cbnz	r0, 8005e88 <netif_add+0x64>
  netif->next = netif_list;
 8005e7a:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <netif_add+0x78>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8005e80:	601c      	str	r4, [r3, #0]
}
 8005e82:	4620      	mov	r0, r4
 8005e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8005e88:	462c      	mov	r4, r5
 8005e8a:	e7fa      	b.n	8005e82 <netif_add+0x5e>
 8005e8c:	0800d2ac 	.word	0x0800d2ac
 8005e90:	0800d2dd 	.word	0x0800d2dd
 8005e94:	0800c987 	.word	0x0800c987
 8005e98:	200001d8 	.word	0x200001d8
 8005e9c:	200037dc 	.word	0x200037dc

08005ea0 <netif_set_default>:
  netif_default = netif;
 8005ea0:	4b01      	ldr	r3, [pc, #4]	; (8005ea8 <netif_set_default+0x8>)
 8005ea2:	6018      	str	r0, [r3, #0]
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	200037e0 	.word	0x200037e0

08005eac <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005eac:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8005eb0:	07d1      	lsls	r1, r2, #31
 8005eb2:	d409      	bmi.n	8005ec8 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8005eb4:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005eb8:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8005eba:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005ebe:	d503      	bpl.n	8005ec8 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005ec0:	6843      	ldr	r3, [r0, #4]
 8005ec2:	b10b      	cbz	r3, 8005ec8 <netif_set_up+0x1c>
 8005ec4:	f7ff bf66 	b.w	8005d94 <netif_issue_reports.part.0>
 8005ec8:	4770      	bx	lr

08005eca <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8005eca:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005ece:	07d9      	lsls	r1, r3, #31
 8005ed0:	d507      	bpl.n	8005ee2 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8005ed2:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005ed6:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8005ed8:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005edc:	d501      	bpl.n	8005ee2 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8005ede:	f7fe bc4b 	b.w	8004778 <etharp_cleanup_netif>
 8005ee2:	4770      	bx	lr

08005ee4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005ee4:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d12f      	bne.n	8005f4c <pbuf_header_impl+0x68>
 8005eec:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <pbuf_header_impl+0x88>)
 8005eee:	f240 223f 	movw	r2, #575	; 0x23f
 8005ef2:	491f      	ldr	r1, [pc, #124]	; (8005f70 <pbuf_header_impl+0x8c>)
 8005ef4:	481f      	ldr	r0, [pc, #124]	; (8005f74 <pbuf_header_impl+0x90>)
 8005ef6:	f005 fb13 	bl	800b520 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8005efa:	2000      	movs	r0, #0
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8005efe:	b288      	uxth	r0, r1
  type = p->type;
 8005f00:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 8005f02:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005f04:	b10d      	cbz	r5, 8005f0a <pbuf_header_impl+0x26>
 8005f06:	2d03      	cmp	r5, #3
 8005f08:	d106      	bne.n	8005f18 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005f0a:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005f0c:	f104 0210 	add.w	r2, r4, #16
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d20a      	bcs.n	8005f2a <pbuf_header_impl+0x46>
      return 1;
 8005f14:	2001      	movs	r0, #1
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8005f18:	3d01      	subs	r5, #1
 8005f1a:	2d01      	cmp	r5, #1
 8005f1c:	d811      	bhi.n	8005f42 <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005f1e:	2900      	cmp	r1, #0
 8005f20:	da0c      	bge.n	8005f3c <pbuf_header_impl+0x58>
 8005f22:	8962      	ldrh	r2, [r4, #10]
 8005f24:	4282      	cmp	r2, r0
 8005f26:	d3f5      	bcc.n	8005f14 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005f28:	1a5b      	subs	r3, r3, r1
  p->len += header_size_increment;
 8005f2a:	b289      	uxth	r1, r1
  p->tot_len += header_size_increment;
 8005f2c:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005f2e:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 8005f30:	8963      	ldrh	r3, [r4, #10]
 8005f32:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 8005f34:	4401      	add	r1, r0
  p->len += header_size_increment;
 8005f36:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8005f38:	8121      	strh	r1, [r4, #8]
 8005f3a:	e7de      	b.n	8005efa <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	d1f3      	bne.n	8005f28 <pbuf_header_impl+0x44>
 8005f40:	e7e8      	b.n	8005f14 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <pbuf_header_impl+0x88>)
 8005f44:	f240 2277 	movw	r2, #631	; 0x277
 8005f48:	490b      	ldr	r1, [pc, #44]	; (8005f78 <pbuf_header_impl+0x94>)
 8005f4a:	e00b      	b.n	8005f64 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d0d4      	beq.n	8005efa <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8005f50:	dad5      	bge.n	8005efe <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 8005f52:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f54:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8005f56:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f58:	4283      	cmp	r3, r0
 8005f5a:	d2d1      	bcs.n	8005f00 <pbuf_header_impl+0x1c>
 8005f5c:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <pbuf_header_impl+0x88>)
 8005f5e:	f240 2247 	movw	r2, #583	; 0x247
 8005f62:	4906      	ldr	r1, [pc, #24]	; (8005f7c <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 8005f64:	4803      	ldr	r0, [pc, #12]	; (8005f74 <pbuf_header_impl+0x90>)
 8005f66:	f005 fadb 	bl	800b520 <iprintf>
 8005f6a:	e7d3      	b.n	8005f14 <pbuf_header_impl+0x30>
 8005f6c:	0800d559 	.word	0x0800d559
 8005f70:	0800d5c3 	.word	0x0800d5c3
 8005f74:	0800c987 	.word	0x0800c987
 8005f78:	0800d5a7 	.word	0x0800d5a7
 8005f7c:	0800d589 	.word	0x0800d589

08005f80 <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005f80:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <pbuf_free_ooseq+0x24>)
 8005f82:	2200      	movs	r2, #0
{
 8005f84:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005f86:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <pbuf_free_ooseq+0x28>)
 8005f8a:	681c      	ldr	r4, [r3, #0]
 8005f8c:	b904      	cbnz	r4, 8005f90 <pbuf_free_ooseq+0x10>
 8005f8e:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8005f90:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005f92:	b120      	cbz	r0, 8005f9e <pbuf_free_ooseq+0x1e>
      tcp_segs_free(pcb->ooseq);
 8005f94:	f000 fca6 	bl	80068e4 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 8005f9c:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005f9e:	68e4      	ldr	r4, [r4, #12]
 8005fa0:	e7f4      	b.n	8005f8c <pbuf_free_ooseq+0xc>
 8005fa2:	bf00      	nop
 8005fa4:	200037e4 	.word	0x200037e4
 8005fa8:	200037ec 	.word	0x200037ec

08005fac <pbuf_alloced_custom>:
{
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8005fb0:	2804      	cmp	r0, #4
 8005fb2:	d81e      	bhi.n	8005ff2 <pbuf_alloced_custom+0x46>
 8005fb4:	e8df f000 	tbb	[pc, r0]
 8005fb8:	1b280326 	.word	0x1b280326
 8005fbc:	1b          	.byte	0x1b
 8005fbd:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005fbe:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005fc0:	3403      	adds	r4, #3
 8005fc2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8005fc6:	f024 0403 	bic.w	r4, r4, #3
 8005fca:	190e      	adds	r6, r1, r4
 8005fcc:	4286      	cmp	r6, r0
 8005fce:	f04f 0000 	mov.w	r0, #0
 8005fd2:	d80b      	bhi.n	8005fec <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8005fd4:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8005fd6:	b1cd      	cbz	r5, 800600c <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005fd8:	442c      	add	r4, r5
 8005fda:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005fdc:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8005fde:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005fe0:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 8005fe2:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005fe4:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 8005fe6:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 8005fe8:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8005fea:	81da      	strh	r2, [r3, #14]
}
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8005fee:	2400      	movs	r4, #0
    break;
 8005ff0:	e7e6      	b.n	8005fc0 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <pbuf_alloced_custom+0x64>)
 8005ff4:	f240 12c5 	movw	r2, #453	; 0x1c5
 8005ff8:	4906      	ldr	r1, [pc, #24]	; (8006014 <pbuf_alloced_custom+0x68>)
 8005ffa:	4807      	ldr	r0, [pc, #28]	; (8006018 <pbuf_alloced_custom+0x6c>)
 8005ffc:	f005 fa90 	bl	800b520 <iprintf>
    return NULL;
 8006000:	2000      	movs	r0, #0
 8006002:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006004:	2436      	movs	r4, #54	; 0x36
 8006006:	e7db      	b.n	8005fc0 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006008:	240e      	movs	r4, #14
 800600a:	e7d9      	b.n	8005fc0 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 800600c:	605d      	str	r5, [r3, #4]
 800600e:	e7e5      	b.n	8005fdc <pbuf_alloced_custom+0x30>
 8006010:	0800d559 	.word	0x0800d559
 8006014:	0800d39c 	.word	0x0800d39c
 8006018:	0800c987 	.word	0x0800c987

0800601c <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 800601c:	2200      	movs	r2, #0
 800601e:	f7ff bf61 	b.w	8005ee4 <pbuf_header_impl>

08006022 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8006022:	2201      	movs	r2, #1
 8006024:	f7ff bf5e 	b.w	8005ee4 <pbuf_header_impl>

08006028 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800602c:	4604      	mov	r4, r0
 800602e:	b950      	cbnz	r0, 8006046 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006030:	4626      	mov	r6, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8006032:	4b28      	ldr	r3, [pc, #160]	; (80060d4 <pbuf_free+0xac>)
 8006034:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006038:	4927      	ldr	r1, [pc, #156]	; (80060d8 <pbuf_free+0xb0>)
 800603a:	4828      	ldr	r0, [pc, #160]	; (80060dc <pbuf_free+0xb4>)
 800603c:	f005 fa70 	bl	800b520 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006040:	4630      	mov	r0, r6
 8006042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8006046:	7b03      	ldrb	r3, [r0, #12]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d906      	bls.n	800605a <pbuf_free+0x32>
 800604c:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <pbuf_free+0xac>)
 800604e:	f240 22de 	movw	r2, #734	; 0x2de
 8006052:	4923      	ldr	r1, [pc, #140]	; (80060e0 <pbuf_free+0xb8>)
 8006054:	4821      	ldr	r0, [pc, #132]	; (80060dc <pbuf_free+0xb4>)
 8006056:	f005 fa63 	bl	800b520 <iprintf>
{
 800605a:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800605c:	4f1d      	ldr	r7, [pc, #116]	; (80060d4 <pbuf_free+0xac>)
 800605e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80060e8 <pbuf_free+0xc0>
 8006062:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80060dc <pbuf_free+0xb4>
 8006066:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 8006068:	2c00      	cmp	r4, #0
 800606a:	d0e9      	beq.n	8006040 <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800606c:	89e3      	ldrh	r3, [r4, #14]
 800606e:	b933      	cbnz	r3, 800607e <pbuf_free+0x56>
 8006070:	463b      	mov	r3, r7
 8006072:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006076:	4649      	mov	r1, r9
 8006078:	4640      	mov	r0, r8
 800607a:	f005 fa51 	bl	800b520 <iprintf>
    ref = --(p->ref);
 800607e:	89e3      	ldrh	r3, [r4, #14]
 8006080:	3b01      	subs	r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1da      	bne.n	8006040 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800608a:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800608c:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800608e:	079b      	lsls	r3, r3, #30
 8006090:	d50e      	bpl.n	80060b0 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006092:	6923      	ldr	r3, [r4, #16]
 8006094:	b933      	cbnz	r3, 80060a4 <pbuf_free+0x7c>
 8006096:	463b      	mov	r3, r7
 8006098:	f240 22f9 	movw	r2, #761	; 0x2f9
 800609c:	4911      	ldr	r1, [pc, #68]	; (80060e4 <pbuf_free+0xbc>)
 800609e:	4640      	mov	r0, r8
 80060a0:	f005 fa3e 	bl	800b520 <iprintf>
        pc->custom_free_function(p);
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	4620      	mov	r0, r4
 80060a8:	4798      	blx	r3
 80060aa:	3501      	adds	r5, #1
      p = q;
 80060ac:	4634      	mov	r4, r6
 80060ae:	e7da      	b.n	8006066 <pbuf_free+0x3e>
      type = p->type;
 80060b0:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d104      	bne.n	80060c0 <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 80060b6:	4621      	mov	r1, r4
 80060b8:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 80060ba:	f7ff fe51 	bl	8005d60 <memp_free>
 80060be:	e7f4      	b.n	80060aa <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80060c0:	3b01      	subs	r3, #1
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d802      	bhi.n	80060cc <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 80060c6:	4621      	mov	r1, r4
 80060c8:	2007      	movs	r0, #7
 80060ca:	e7f6      	b.n	80060ba <pbuf_free+0x92>
          mem_free(p);
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7ff fc27 	bl	8005920 <mem_free>
 80060d2:	e7ea      	b.n	80060aa <pbuf_free+0x82>
 80060d4:	0800d559 	.word	0x0800d559
 80060d8:	0800d5c3 	.word	0x0800d5c3
 80060dc:	0800c987 	.word	0x0800c987
 80060e0:	0800d50d 	.word	0x0800d50d
 80060e4:	0800d538 	.word	0x0800d538
 80060e8:	0800d522 	.word	0x0800d522

080060ec <pbuf_alloc>:
{
 80060ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f0:	460e      	mov	r6, r1
 80060f2:	4617      	mov	r7, r2
  switch (layer) {
 80060f4:	2804      	cmp	r0, #4
 80060f6:	d80e      	bhi.n	8006116 <pbuf_alloc+0x2a>
 80060f8:	e8df f000 	tbb	[pc, r0]
 80060fc:	0b170315 	.word	0x0b170315
 8006100:	0b          	.byte	0x0b
 8006101:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006102:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8006104:	2f03      	cmp	r7, #3
 8006106:	f200 80bb 	bhi.w	8006280 <pbuf_alloc+0x194>
 800610a:	e8df f007 	tbb	[pc, r7]
 800610e:	ac91      	.short	0xac91
 8006110:	10ac      	.short	0x10ac
    offset = 0;
 8006112:	2500      	movs	r5, #0
    break;
 8006114:	e7f6      	b.n	8006104 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8006116:	4b5d      	ldr	r3, [pc, #372]	; (800628c <pbuf_alloc+0x1a0>)
 8006118:	f44f 728b 	mov.w	r2, #278	; 0x116
 800611c:	495c      	ldr	r1, [pc, #368]	; (8006290 <pbuf_alloc+0x1a4>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800611e:	485d      	ldr	r0, [pc, #372]	; (8006294 <pbuf_alloc+0x1a8>)
 8006120:	f005 f9fe 	bl	800b520 <iprintf>
 8006124:	e04a      	b.n	80061bc <pbuf_alloc+0xd0>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006126:	2536      	movs	r5, #54	; 0x36
 8006128:	e7ec      	b.n	8006104 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800612a:	250e      	movs	r5, #14
 800612c:	e7ea      	b.n	8006104 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800612e:	2008      	movs	r0, #8
 8006130:	f7ff fdfa 	bl	8005d28 <memp_malloc>
    if (p == NULL) {
 8006134:	4604      	mov	r4, r0
 8006136:	b928      	cbnz	r0, 8006144 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006138:	2201      	movs	r2, #1
 800613a:	4b57      	ldr	r3, [pc, #348]	; (8006298 <pbuf_alloc+0x1ac>)
 800613c:	701a      	strb	r2, [r3, #0]
}
 800613e:	4620      	mov	r0, r4
 8006140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8006144:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006146:	f500 7727 	add.w	r7, r0, #668	; 0x29c
    p->tot_len = length;
 800614a:	8106      	strh	r6, [r0, #8]
    p->type = type;
 800614c:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006152:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006154:	3503      	adds	r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006156:	3313      	adds	r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006158:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800615c:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006160:	f5c5 7523 	rsb	r5, r5, #652	; 0x28c
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006164:	6043      	str	r3, [r0, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006166:	42b5      	cmp	r5, r6
 8006168:	bf28      	it	cs
 800616a:	4635      	movcs	r5, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800616c:	442b      	add	r3, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800616e:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006170:	429f      	cmp	r7, r3
 8006172:	d206      	bcs.n	8006182 <pbuf_alloc+0x96>
 8006174:	4b45      	ldr	r3, [pc, #276]	; (800628c <pbuf_alloc+0x1a0>)
 8006176:	f44f 7298 	mov.w	r2, #304	; 0x130
 800617a:	4948      	ldr	r1, [pc, #288]	; (800629c <pbuf_alloc+0x1b0>)
 800617c:	4845      	ldr	r0, [pc, #276]	; (8006294 <pbuf_alloc+0x1a8>)
 800617e:	f005 f9cf 	bl	800b520 <iprintf>
    p->ref = 1;
 8006182:	2301      	movs	r3, #1
    while (rem_len > 0) {
 8006184:	46a3      	mov	fp, r4
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006186:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800628c <pbuf_alloc+0x1a0>
    p->ref = 1;
 800618a:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 800618c:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800618e:	f8df a118 	ldr.w	sl, [pc, #280]	; 80062a8 <pbuf_alloc+0x1bc>
    rem_len = length - p->len;
 8006192:	1af6      	subs	r6, r6, r3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006194:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8006294 <pbuf_alloc+0x1a8>
    while (rem_len > 0) {
 8006198:	2e00      	cmp	r6, #0
 800619a:	dc04      	bgt.n	80061a6 <pbuf_alloc+0xba>
  p->ref = 1;
 800619c:	2301      	movs	r3, #1
 800619e:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	7363      	strb	r3, [r4, #13]
  return p;
 80061a4:	e7cb      	b.n	800613e <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80061a6:	2008      	movs	r0, #8
 80061a8:	f7ff fdbe 	bl	8005d28 <memp_malloc>
      if (q == NULL) {
 80061ac:	4605      	mov	r5, r0
 80061ae:	b938      	cbnz	r0, 80061c0 <pbuf_alloc+0xd4>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80061b0:	2201      	movs	r2, #1
 80061b2:	4b39      	ldr	r3, [pc, #228]	; (8006298 <pbuf_alloc+0x1ac>)
        pbuf_free(p);
 80061b4:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80061b6:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 80061b8:	f7ff ff36 	bl	8006028 <pbuf_free>
    return NULL;
 80061bc:	2400      	movs	r4, #0
 80061be:	e7be      	b.n	800613e <pbuf_alloc+0x52>
      q->type = type;
 80061c0:	2303      	movs	r3, #3
 80061c2:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 80061c8:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80061ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
      r->next = q;
 80061ce:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80061d2:	429e      	cmp	r6, r3
 80061d4:	d106      	bne.n	80061e4 <pbuf_alloc+0xf8>
 80061d6:	4643      	mov	r3, r8
 80061d8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80061dc:	4651      	mov	r1, sl
 80061de:	4648      	mov	r0, r9
 80061e0:	f005 f99e 	bl	800b520 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80061e4:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80061e6:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
      q->tot_len = (u16_t)rem_len;
 80061ea:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80061ec:	bf28      	it	cs
 80061ee:	f44f 7323 	movcs.w	r3, #652	; 0x28c
 80061f2:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80061f4:	f105 0310 	add.w	r3, r5, #16
 80061f8:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80061fa:	079b      	lsls	r3, r3, #30
 80061fc:	d006      	beq.n	800620c <pbuf_alloc+0x120>
 80061fe:	4643      	mov	r3, r8
 8006200:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8006204:	4926      	ldr	r1, [pc, #152]	; (80062a0 <pbuf_alloc+0x1b4>)
 8006206:	4648      	mov	r0, r9
 8006208:	f005 f98a 	bl	800b520 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800620c:	8962      	ldrh	r2, [r4, #10]
 800620e:	6863      	ldr	r3, [r4, #4]
 8006210:	4413      	add	r3, r2
 8006212:	429f      	cmp	r7, r3
 8006214:	d206      	bcs.n	8006224 <pbuf_alloc+0x138>
 8006216:	4643      	mov	r3, r8
 8006218:	f240 1255 	movw	r2, #341	; 0x155
 800621c:	491f      	ldr	r1, [pc, #124]	; (800629c <pbuf_alloc+0x1b0>)
 800621e:	4648      	mov	r0, r9
 8006220:	f005 f97e 	bl	800b520 <iprintf>
      q->ref = 1;
 8006224:	2301      	movs	r3, #1
      rem_len -= q->len;
 8006226:	46ab      	mov	fp, r5
      q->ref = 1;
 8006228:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 800622a:	896b      	ldrh	r3, [r5, #10]
 800622c:	1af6      	subs	r6, r6, r3
 800622e:	e7b3      	b.n	8006198 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006230:	f105 0013 	add.w	r0, r5, #19
 8006234:	1cf3      	adds	r3, r6, #3
 8006236:	f020 0003 	bic.w	r0, r0, #3
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	4418      	add	r0, r3
 8006240:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006242:	4298      	cmp	r0, r3
 8006244:	d3ba      	bcc.n	80061bc <pbuf_alloc+0xd0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006246:	f7ff fc8d 	bl	8005b64 <mem_malloc>
    if (p == NULL) {
 800624a:	4604      	mov	r4, r0
 800624c:	2800      	cmp	r0, #0
 800624e:	d0b5      	beq.n	80061bc <pbuf_alloc+0xd0>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006250:	4405      	add	r5, r0
    p->next = NULL;
 8006252:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8006254:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006256:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 8006258:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800625a:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800625c:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 8006260:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006262:	6045      	str	r5, [r0, #4]
 8006264:	e79a      	b.n	800619c <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006266:	2007      	movs	r0, #7
 8006268:	f7ff fd5e 	bl	8005d28 <memp_malloc>
    if (p == NULL) {
 800626c:	4604      	mov	r4, r0
 800626e:	2800      	cmp	r0, #0
 8006270:	d0a4      	beq.n	80061bc <pbuf_alloc+0xd0>
    p->payload = NULL;
 8006272:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8006274:	8106      	strh	r6, [r0, #8]
 8006276:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 8006278:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 800627a:	6003      	str	r3, [r0, #0]
    p->type = type;
 800627c:	7307      	strb	r7, [r0, #12]
    break;
 800627e:	e78d      	b.n	800619c <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006280:	4b02      	ldr	r3, [pc, #8]	; (800628c <pbuf_alloc+0x1a0>)
 8006282:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006286:	4907      	ldr	r1, [pc, #28]	; (80062a4 <pbuf_alloc+0x1b8>)
 8006288:	e749      	b.n	800611e <pbuf_alloc+0x32>
 800628a:	bf00      	nop
 800628c:	0800d559 	.word	0x0800d559
 8006290:	0800d2f4 	.word	0x0800d2f4
 8006294:	0800c987 	.word	0x0800c987
 8006298:	200037e4 	.word	0x200037e4
 800629c:	0800d30f 	.word	0x0800d30f
 80062a0:	0800d354 	.word	0x0800d354
 80062a4:	0800d381 	.word	0x0800d381
 80062a8:	0800d340 	.word	0x0800d340

080062ac <pbuf_realloc>:
{
 80062ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b0:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80062b2:	4604      	mov	r4, r0
 80062b4:	b930      	cbnz	r0, 80062c4 <pbuf_realloc+0x18>
 80062b6:	4b2e      	ldr	r3, [pc, #184]	; (8006370 <pbuf_realloc+0xc4>)
 80062b8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80062bc:	492d      	ldr	r1, [pc, #180]	; (8006374 <pbuf_realloc+0xc8>)
 80062be:	482e      	ldr	r0, [pc, #184]	; (8006378 <pbuf_realloc+0xcc>)
 80062c0:	f005 f92e 	bl	800b520 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80062c4:	7b23      	ldrb	r3, [r4, #12]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d906      	bls.n	80062d8 <pbuf_realloc+0x2c>
 80062ca:	4b29      	ldr	r3, [pc, #164]	; (8006370 <pbuf_realloc+0xc4>)
 80062cc:	f240 12f7 	movw	r2, #503	; 0x1f7
 80062d0:	492a      	ldr	r1, [pc, #168]	; (800637c <pbuf_realloc+0xd0>)
 80062d2:	4829      	ldr	r0, [pc, #164]	; (8006378 <pbuf_realloc+0xcc>)
 80062d4:	f005 f924 	bl	800b520 <iprintf>
  if (new_len >= p->tot_len) {
 80062d8:	8926      	ldrh	r6, [r4, #8]
 80062da:	42ae      	cmp	r6, r5
 80062dc:	d945      	bls.n	800636a <pbuf_realloc+0xbe>
  grow = new_len - p->tot_len;
 80062de:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80062e0:	4f23      	ldr	r7, [pc, #140]	; (8006370 <pbuf_realloc+0xc4>)
 80062e2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006388 <pbuf_realloc+0xdc>
 80062e6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006378 <pbuf_realloc+0xcc>
  while (rem_len > q->len) {
 80062ea:	8963      	ldrh	r3, [r4, #10]
 80062ec:	429d      	cmp	r5, r3
 80062ee:	d819      	bhi.n	8006324 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80062f0:	7b22      	ldrb	r2, [r4, #12]
 80062f2:	2a00      	cmp	r2, #0
 80062f4:	d131      	bne.n	800635a <pbuf_realloc+0xae>
 80062f6:	429d      	cmp	r5, r3
 80062f8:	d02f      	beq.n	800635a <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80062fa:	7b63      	ldrb	r3, [r4, #13]
 80062fc:	079b      	lsls	r3, r3, #30
 80062fe:	d42c      	bmi.n	800635a <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006300:	6861      	ldr	r1, [r4, #4]
 8006302:	4620      	mov	r0, r4
 8006304:	1b09      	subs	r1, r1, r4
 8006306:	4429      	add	r1, r5
 8006308:	b289      	uxth	r1, r1
 800630a:	f7ff fbb3 	bl	8005a74 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800630e:	4604      	mov	r4, r0
 8006310:	bb18      	cbnz	r0, 800635a <pbuf_realloc+0xae>
 8006312:	4b17      	ldr	r3, [pc, #92]	; (8006370 <pbuf_realloc+0xc4>)
 8006314:	f240 221d 	movw	r2, #541	; 0x21d
 8006318:	4919      	ldr	r1, [pc, #100]	; (8006380 <pbuf_realloc+0xd4>)
 800631a:	4817      	ldr	r0, [pc, #92]	; (8006378 <pbuf_realloc+0xcc>)
 800631c:	f005 f900 	bl	800b520 <iprintf>
  q->len = rem_len;
 8006320:	8164      	strh	r4, [r4, #10]
 8006322:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8006324:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006326:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800632a:	429e      	cmp	r6, r3
    rem_len -= q->len;
 800632c:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800632e:	dd06      	ble.n	800633e <pbuf_realloc+0x92>
 8006330:	463b      	mov	r3, r7
 8006332:	f240 220b 	movw	r2, #523	; 0x20b
 8006336:	4649      	mov	r1, r9
 8006338:	4640      	mov	r0, r8
 800633a:	f005 f8f1 	bl	800b520 <iprintf>
    q->tot_len += (u16_t)grow;
 800633e:	8923      	ldrh	r3, [r4, #8]
 8006340:	4433      	add	r3, r6
 8006342:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8006344:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006346:	2c00      	cmp	r4, #0
 8006348:	d1cf      	bne.n	80062ea <pbuf_realloc+0x3e>
 800634a:	463b      	mov	r3, r7
 800634c:	f240 220f 	movw	r2, #527	; 0x20f
 8006350:	490c      	ldr	r1, [pc, #48]	; (8006384 <pbuf_realloc+0xd8>)
 8006352:	4640      	mov	r0, r8
 8006354:	f005 f8e4 	bl	800b520 <iprintf>
 8006358:	e7c7      	b.n	80062ea <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800635a:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800635c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800635e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8006360:	b108      	cbz	r0, 8006366 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8006362:	f7ff fe61 	bl	8006028 <pbuf_free>
  q->next = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636e:	bf00      	nop
 8006370:	0800d559 	.word	0x0800d559
 8006374:	0800d5b5 	.word	0x0800d5b5
 8006378:	0800c987 	.word	0x0800c987
 800637c:	0800d5cd 	.word	0x0800d5cd
 8006380:	0800d611 	.word	0x0800d611
 8006384:	0800d5f9 	.word	0x0800d5f9
 8006388:	0800d5e8 	.word	0x0800d5e8

0800638c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800638c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800638e:	2200      	movs	r2, #0
 8006390:	b290      	uxth	r0, r2
 8006392:	3201      	adds	r2, #1
 8006394:	b903      	cbnz	r3, 8006398 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8006396:	4770      	bx	lr
    p = p->next;
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	e7f9      	b.n	8006390 <pbuf_clen+0x4>

0800639c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800639c:	b158      	cbz	r0, 80063b6 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 800639e:	89c3      	ldrh	r3, [r0, #14]
 80063a0:	3301      	adds	r3, #1
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80063a6:	b933      	cbnz	r3, 80063b6 <pbuf_ref+0x1a>
 80063a8:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <pbuf_ref+0x1c>)
 80063aa:	f240 3239 	movw	r2, #825	; 0x339
 80063ae:	4903      	ldr	r1, [pc, #12]	; (80063bc <pbuf_ref+0x20>)
 80063b0:	4803      	ldr	r0, [pc, #12]	; (80063c0 <pbuf_ref+0x24>)
 80063b2:	f005 b8b5 	b.w	800b520 <iprintf>
 80063b6:	4770      	bx	lr
 80063b8:	0800d559 	.word	0x0800d559
 80063bc:	0800d62d 	.word	0x0800d62d
 80063c0:	0800c987 	.word	0x0800c987

080063c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80063c8:	4604      	mov	r4, r0
 80063ca:	b100      	cbz	r0, 80063ce <pbuf_cat+0xa>
 80063cc:	b969      	cbnz	r1, 80063ea <pbuf_cat+0x26>
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <pbuf_cat+0x60>)
 80063d0:	f240 324d 	movw	r2, #845	; 0x34d
 80063d4:	4914      	ldr	r1, [pc, #80]	; (8006428 <pbuf_cat+0x64>)
 80063d6:	4815      	ldr	r0, [pc, #84]	; (800642c <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80063d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80063dc:	f005 b8a0 	b.w	800b520 <iprintf>
    p->tot_len += t->tot_len;
 80063e0:	8923      	ldrh	r3, [r4, #8]
 80063e2:	8929      	ldrh	r1, [r5, #8]
 80063e4:	440b      	add	r3, r1
 80063e6:	8123      	strh	r3, [r4, #8]
 80063e8:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	2a00      	cmp	r2, #0
 80063ee:	d1f7      	bne.n	80063e0 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80063f0:	8922      	ldrh	r2, [r4, #8]
 80063f2:	8963      	ldrh	r3, [r4, #10]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d006      	beq.n	8006406 <pbuf_cat+0x42>
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <pbuf_cat+0x60>)
 80063fa:	f240 3255 	movw	r2, #853	; 0x355
 80063fe:	490c      	ldr	r1, [pc, #48]	; (8006430 <pbuf_cat+0x6c>)
 8006400:	480a      	ldr	r0, [pc, #40]	; (800642c <pbuf_cat+0x68>)
 8006402:	f005 f88d 	bl	800b520 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	b133      	cbz	r3, 8006418 <pbuf_cat+0x54>
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <pbuf_cat+0x60>)
 800640c:	f240 3256 	movw	r2, #854	; 0x356
 8006410:	4908      	ldr	r1, [pc, #32]	; (8006434 <pbuf_cat+0x70>)
 8006412:	4806      	ldr	r0, [pc, #24]	; (800642c <pbuf_cat+0x68>)
 8006414:	f005 f884 	bl	800b520 <iprintf>
  p->tot_len += t->tot_len;
 8006418:	892a      	ldrh	r2, [r5, #8]
 800641a:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800641c:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800641e:	4413      	add	r3, r2
 8006420:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	0800d559 	.word	0x0800d559
 8006428:	0800d3c0 	.word	0x0800d3c0
 800642c:	0800c987 	.word	0x0800c987
 8006430:	0800d3f5 	.word	0x0800d3f5
 8006434:	0800d422 	.word	0x0800d422

08006438 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006438:	b510      	push	{r4, lr}
 800643a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800643c:	f7ff ffc2 	bl	80063c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006440:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8006446:	f7ff bfa9 	b.w	800639c <pbuf_ref>
	...

0800644c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800644c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006450:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006452:	4605      	mov	r5, r0
 8006454:	b120      	cbz	r0, 8006460 <pbuf_copy+0x14>
 8006456:	b119      	cbz	r1, 8006460 <pbuf_copy+0x14>
 8006458:	8902      	ldrh	r2, [r0, #8]
 800645a:	890b      	ldrh	r3, [r1, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	d20a      	bcs.n	8006476 <pbuf_copy+0x2a>
 8006460:	4b38      	ldr	r3, [pc, #224]	; (8006544 <pbuf_copy+0xf8>)
 8006462:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006466:	4938      	ldr	r1, [pc, #224]	; (8006548 <pbuf_copy+0xfc>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8006468:	4838      	ldr	r0, [pc, #224]	; (800654c <pbuf_copy+0x100>)
 800646a:	f005 f859 	bl	800b520 <iprintf>
 800646e:	f06f 000f 	mvn.w	r0, #15
 8006472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800647a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8006544 <pbuf_copy+0xf8>
 800647e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800655c <pbuf_copy+0x110>
 8006482:	465f      	mov	r7, fp
 8006484:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800654c <pbuf_copy+0x100>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006488:	896e      	ldrh	r6, [r5, #10]
 800648a:	8963      	ldrh	r3, [r4, #10]
 800648c:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800648e:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006490:	eba3 030b 	sub.w	r3, r3, fp
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8006494:	6861      	ldr	r1, [r4, #4]
 8006496:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006498:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800649a:	4459      	add	r1, fp
      len = p_from->len - offset_from;
 800649c:	bfac      	ite	ge
 800649e:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 80064a0:	b2b6      	uxthlt	r6, r6
    offset_to += len;
 80064a2:	4437      	add	r7, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80064a4:	4632      	mov	r2, r6
 80064a6:	f004 ff7c 	bl	800b3a2 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80064aa:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 80064ac:	b2bf      	uxth	r7, r7
    offset_from += len;
 80064ae:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80064b0:	42bb      	cmp	r3, r7
    offset_from += len;
 80064b2:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80064b6:	d206      	bcs.n	80064c6 <pbuf_copy+0x7a>
 80064b8:	4643      	mov	r3, r8
 80064ba:	f240 32cd 	movw	r2, #973	; 0x3cd
 80064be:	4651      	mov	r1, sl
 80064c0:	4648      	mov	r0, r9
 80064c2:	f005 f82d 	bl	800b520 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80064c6:	8963      	ldrh	r3, [r4, #10]
 80064c8:	455b      	cmp	r3, fp
 80064ca:	d206      	bcs.n	80064da <pbuf_copy+0x8e>
 80064cc:	4643      	mov	r3, r8
 80064ce:	f240 32ce 	movw	r2, #974	; 0x3ce
 80064d2:	491f      	ldr	r1, [pc, #124]	; (8006550 <pbuf_copy+0x104>)
 80064d4:	4648      	mov	r0, r9
 80064d6:	f005 f823 	bl	800b520 <iprintf>
    if (offset_from >= p_from->len) {
 80064da:	8963      	ldrh	r3, [r4, #10]
 80064dc:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 80064de:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80064e0:	bf9c      	itt	ls
 80064e2:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 80064e4:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 80064e8:	42bb      	cmp	r3, r7
 80064ea:	d11e      	bne.n	800652a <pbuf_copy+0xde>
      p_to = p_to->next;
 80064ec:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80064ee:	b9dd      	cbnz	r5, 8006528 <pbuf_copy+0xdc>
 80064f0:	b1bc      	cbz	r4, 8006522 <pbuf_copy+0xd6>
 80064f2:	4b14      	ldr	r3, [pc, #80]	; (8006544 <pbuf_copy+0xf8>)
 80064f4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80064f8:	4916      	ldr	r1, [pc, #88]	; (8006554 <pbuf_copy+0x108>)
 80064fa:	e7b5      	b.n	8006468 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80064fc:	8962      	ldrh	r2, [r4, #10]
 80064fe:	8923      	ldrh	r3, [r4, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	d114      	bne.n	800652e <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	b193      	cbz	r3, 800652e <pbuf_copy+0xe2>
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <pbuf_copy+0xf8>)
 800650a:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800650e:	4912      	ldr	r1, [pc, #72]	; (8006558 <pbuf_copy+0x10c>)
 8006510:	480e      	ldr	r0, [pc, #56]	; (800654c <pbuf_copy+0x100>)
 8006512:	f005 f805 	bl	800b520 <iprintf>
 8006516:	f06f 0005 	mvn.w	r0, #5
 800651a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800651e:	2c00      	cmp	r4, #0
 8006520:	d1b2      	bne.n	8006488 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006522:	4620      	mov	r0, r4
 8006524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8006528:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800652a:	2c00      	cmp	r4, #0
 800652c:	d1e6      	bne.n	80064fc <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800652e:	896a      	ldrh	r2, [r5, #10]
 8006530:	892b      	ldrh	r3, [r5, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	d1f3      	bne.n	800651e <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <pbuf_copy+0xd2>
 800653c:	4b01      	ldr	r3, [pc, #4]	; (8006544 <pbuf_copy+0xf8>)
 800653e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8006542:	e7e4      	b.n	800650e <pbuf_copy+0xc2>
 8006544:	0800d559 	.word	0x0800d559
 8006548:	0800d432 	.word	0x0800d432
 800654c:	0800c987 	.word	0x0800c987
 8006550:	0800d479 	.word	0x0800d479
 8006554:	0800d494 	.word	0x0800d494
 8006558:	0800d4a1 	.word	0x0800d4a1
 800655c:	0800d462 	.word	0x0800d462

08006560 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006564:	460f      	mov	r7, r1
 8006566:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006568:	4606      	mov	r6, r0
 800656a:	b950      	cbnz	r0, 8006582 <pbuf_copy_partial+0x22>
 800656c:	4635      	mov	r5, r6
 800656e:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <pbuf_copy_partial+0x7c>)
 8006570:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006574:	491a      	ldr	r1, [pc, #104]	; (80065e0 <pbuf_copy_partial+0x80>)
 8006576:	481b      	ldr	r0, [pc, #108]	; (80065e4 <pbuf_copy_partial+0x84>)
 8006578:	f004 ffd2 	bl	800b520 <iprintf>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800657c:	4628      	mov	r0, r5
 800657e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006582:	b169      	cbz	r1, 80065a0 <pbuf_copy_partial+0x40>
 8006584:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006586:	f1b8 0f00 	cmp.w	r8, #0
 800658a:	d0f7      	beq.n	800657c <pbuf_copy_partial+0x1c>
 800658c:	2e00      	cmp	r6, #0
 800658e:	d0f5      	beq.n	800657c <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8006590:	b17b      	cbz	r3, 80065b2 <pbuf_copy_partial+0x52>
 8006592:	8971      	ldrh	r1, [r6, #10]
 8006594:	428b      	cmp	r3, r1
 8006596:	d30c      	bcc.n	80065b2 <pbuf_copy_partial+0x52>
      offset -= p->len;
 8006598:	1a5b      	subs	r3, r3, r1
 800659a:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800659c:	6836      	ldr	r6, [r6, #0]
 800659e:	e7f2      	b.n	8006586 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80065a0:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <pbuf_copy_partial+0x7c>)
 80065a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80065a6:	4910      	ldr	r1, [pc, #64]	; (80065e8 <pbuf_copy_partial+0x88>)
 80065a8:	463d      	mov	r5, r7
 80065aa:	480e      	ldr	r0, [pc, #56]	; (80065e4 <pbuf_copy_partial+0x84>)
 80065ac:	f004 ffb8 	bl	800b520 <iprintf>
 80065b0:	e7e4      	b.n	800657c <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 80065b2:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80065b4:	1978      	adds	r0, r7, r5
 80065b6:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 80065b8:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80065ba:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 80065bc:	b2a4      	uxth	r4, r4
 80065be:	4544      	cmp	r4, r8
 80065c0:	bf28      	it	cs
 80065c2:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80065c4:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 80065c6:	4425      	add	r5, r4
      len -= buf_copy_len;
 80065c8:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80065cc:	f004 fee9 	bl	800b3a2 <memcpy>
      copied_total += buf_copy_len;
 80065d0:	b2ad      	uxth	r5, r5
      offset = 0;
 80065d2:	2300      	movs	r3, #0
      len -= buf_copy_len;
 80065d4:	fa1f f884 	uxth.w	r8, r4
 80065d8:	e7e0      	b.n	800659c <pbuf_copy_partial+0x3c>
 80065da:	bf00      	nop
 80065dc:	0800d559 	.word	0x0800d559
 80065e0:	0800d4cb 	.word	0x0800d4cb
 80065e4:	0800c987 	.word	0x0800c987
 80065e8:	0800d4ea 	.word	0x0800d4ea

080065ec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80065ec:	4a12      	ldr	r2, [pc, #72]	; (8006638 <tcp_new_port+0x4c>)
 80065ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f4:	8810      	ldrh	r0, [r2, #0]
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80065f6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80065fa:	4e10      	ldr	r6, [pc, #64]	; (800663c <tcp_new_port+0x50>)
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80065fc:	42a8      	cmp	r0, r5
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80065fe:	f04f 0100 	mov.w	r1, #0
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8006602:	bf16      	itet	ne
 8006604:	3001      	addne	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006606:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800660a:	b280      	uxthne	r0, r0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800660c:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8006610:	6824      	ldr	r4, [r4, #0]
 8006612:	b924      	cbnz	r4, 800661e <tcp_new_port+0x32>
 8006614:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006616:	2904      	cmp	r1, #4
 8006618:	d1f8      	bne.n	800660c <tcp_new_port+0x20>
 800661a:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 800661e:	8ae7      	ldrh	r7, [r4, #22]
 8006620:	4287      	cmp	r7, r0
 8006622:	d106      	bne.n	8006632 <tcp_new_port+0x46>
 8006624:	3b01      	subs	r3, #1
 8006626:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e7      	bne.n	80065fc <tcp_new_port+0x10>
 800662c:	8010      	strh	r0, [r2, #0]
          return 0;
 800662e:	4618      	mov	r0, r3
 8006630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006632:	68e4      	ldr	r4, [r4, #12]
 8006634:	e7ed      	b.n	8006612 <tcp_new_port+0x26>
 8006636:	bf00      	nop
 8006638:	2000000c 	.word	0x2000000c
 800663c:	0800d750 	.word	0x0800d750

08006640 <tcp_close_shutdown_fin>:
{
 8006640:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006642:	4604      	mov	r4, r0
 8006644:	b930      	cbnz	r0, 8006654 <tcp_close_shutdown_fin+0x14>
 8006646:	4b13      	ldr	r3, [pc, #76]	; (8006694 <tcp_close_shutdown_fin+0x54>)
 8006648:	f240 124d 	movw	r2, #333	; 0x14d
 800664c:	4912      	ldr	r1, [pc, #72]	; (8006698 <tcp_close_shutdown_fin+0x58>)
 800664e:	4813      	ldr	r0, [pc, #76]	; (800669c <tcp_close_shutdown_fin+0x5c>)
 8006650:	f004 ff66 	bl	800b520 <iprintf>
  switch (pcb->state) {
 8006654:	7d23      	ldrb	r3, [r4, #20]
 8006656:	2b04      	cmp	r3, #4
 8006658:	d003      	beq.n	8006662 <tcp_close_shutdown_fin+0x22>
 800665a:	2b07      	cmp	r3, #7
 800665c:	d00c      	beq.n	8006678 <tcp_close_shutdown_fin+0x38>
 800665e:	2b03      	cmp	r3, #3
 8006660:	d108      	bne.n	8006674 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 8006662:	4620      	mov	r0, r4
 8006664:	f002 fd6e 	bl	8009144 <tcp_send_fin>
    if (err == ERR_OK) {
 8006668:	b988      	cbnz	r0, 800668e <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 800666a:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 800666c:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800666e:	4620      	mov	r0, r4
 8006670:	f002 fdc0 	bl	80091f4 <tcp_output>
 8006674:	2000      	movs	r0, #0
 8006676:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8006678:	4620      	mov	r0, r4
 800667a:	f002 fd63 	bl	8009144 <tcp_send_fin>
    if (err == ERR_OK) {
 800667e:	b930      	cbnz	r0, 800668e <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8006680:	2309      	movs	r3, #9
 8006682:	e7f3      	b.n	800666c <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 8006684:	7ea3      	ldrb	r3, [r4, #26]
 8006686:	f043 0308 	orr.w	r3, r3, #8
 800668a:	76a3      	strb	r3, [r4, #26]
 800668c:	e7f2      	b.n	8006674 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d0f8      	beq.n	8006684 <tcp_close_shutdown_fin+0x44>
}
 8006692:	bd10      	pop	{r4, pc}
 8006694:	0800d6be 	.word	0x0800d6be
 8006698:	0800d6ed 	.word	0x0800d6ed
 800669c:	0800c987 	.word	0x0800c987

080066a0 <tcp_init>:
{
 80066a0:	4770      	bx	lr
	...

080066a4 <tcp_bind>:
{
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80066a6:	4d1e      	ldr	r5, [pc, #120]	; (8006720 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80066a8:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 80066aa:	2900      	cmp	r1, #0
 80066ac:	bf18      	it	ne
 80066ae:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80066b0:	b140      	cbz	r0, 80066c4 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80066b2:	7d03      	ldrb	r3, [r0, #20]
 80066b4:	b14b      	cbz	r3, 80066ca <tcp_bind+0x26>
 80066b6:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <tcp_bind+0x80>)
 80066b8:	f44f 7211 	mov.w	r2, #580	; 0x244
 80066bc:	491a      	ldr	r1, [pc, #104]	; (8006728 <tcp_bind+0x84>)
 80066be:	481b      	ldr	r0, [pc, #108]	; (800672c <tcp_bind+0x88>)
 80066c0:	f004 ff2e 	bl	800b520 <iprintf>
    return ERR_VAL;
 80066c4:	f06f 0005 	mvn.w	r0, #5
}
 80066c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 80066ca:	b932      	cbnz	r2, 80066da <tcp_bind+0x36>
    port = tcp_new_port();
 80066cc:	f7ff ff8e 	bl	80065ec <tcp_new_port>
    if (port == 0) {
 80066d0:	4602      	mov	r2, r0
 80066d2:	b950      	cbnz	r0, 80066ea <tcp_bind+0x46>
      return ERR_BUF;
 80066d4:	f06f 0001 	mvn.w	r0, #1
 80066d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80066da:	4f15      	ldr	r7, [pc, #84]	; (8006730 <tcp_bind+0x8c>)
 80066dc:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	b970      	cbnz	r0, 8006702 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 80066e4:	3301      	adds	r3, #1
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d1f8      	bne.n	80066dc <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	b103      	cbz	r3, 80066f0 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80066ee:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80066f0:	4b10      	ldr	r3, [pc, #64]	; (8006734 <tcp_bind+0x90>)
  pcb->local_port = port;
 80066f2:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	601c      	str	r4, [r3, #0]
 80066f8:	60e2      	str	r2, [r4, #12]
 80066fa:	f003 f89b 	bl	8009834 <tcp_timer_needed>
  return ERR_OK;
 80066fe:	2000      	movs	r0, #0
 8006700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8006702:	8ac1      	ldrh	r1, [r0, #22]
 8006704:	4291      	cmp	r1, r2
 8006706:	d105      	bne.n	8006714 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006708:	6806      	ldr	r6, [r0, #0]
 800670a:	b12e      	cbz	r6, 8006718 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 800670c:	6829      	ldr	r1, [r5, #0]
 800670e:	b119      	cbz	r1, 8006718 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006710:	428e      	cmp	r6, r1
 8006712:	d001      	beq.n	8006718 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006714:	68c0      	ldr	r0, [r0, #12]
 8006716:	e7e4      	b.n	80066e2 <tcp_bind+0x3e>
              return ERR_USE;
 8006718:	f06f 0007 	mvn.w	r0, #7
 800671c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800671e:	bf00      	nop
 8006720:	0800ce0c 	.word	0x0800ce0c
 8006724:	0800d6be 	.word	0x0800d6be
 8006728:	0800d67d 	.word	0x0800d67d
 800672c:	0800c987 	.word	0x0800c987
 8006730:	0800d750 	.word	0x0800d750
 8006734:	200037f8 	.word	0x200037f8

08006738 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006738:	7d03      	ldrb	r3, [r0, #20]
{
 800673a:	b570      	push	{r4, r5, r6, lr}
 800673c:	4605      	mov	r5, r0
 800673e:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006740:	b16b      	cbz	r3, 800675e <tcp_listen_with_backlog_and_err+0x26>
 8006742:	4b23      	ldr	r3, [pc, #140]	; (80067d0 <tcp_listen_with_backlog_and_err+0x98>)
 8006744:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8006748:	4922      	ldr	r1, [pc, #136]	; (80067d4 <tcp_listen_with_backlog_and_err+0x9c>)
  struct tcp_pcb_listen *lpcb = NULL;
 800674a:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800674c:	4822      	ldr	r0, [pc, #136]	; (80067d8 <tcp_listen_with_backlog_and_err+0xa0>)
 800674e:	f004 fee7 	bl	800b520 <iprintf>
 8006752:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 8006756:	b106      	cbz	r6, 800675a <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 8006758:	7033      	strb	r3, [r6, #0]
}
 800675a:	4620      	mov	r0, r4
 800675c:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800675e:	2002      	movs	r0, #2
 8006760:	f7ff fae2 	bl	8005d28 <memp_malloc>
  if (lpcb == NULL) {
 8006764:	4604      	mov	r4, r0
 8006766:	2800      	cmp	r0, #0
 8006768:	d02f      	beq.n	80067ca <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 800676a:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800676c:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800676e:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8006770:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 8006772:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8006774:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8006776:	7d6a      	ldrb	r2, [r5, #21]
 8006778:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800677a:	7a2a      	ldrb	r2, [r5, #8]
 800677c:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800677e:	7aaa      	ldrb	r2, [r5, #10]
 8006780:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 8006782:	7a6a      	ldrb	r2, [r5, #9]
 8006784:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006786:	682a      	ldr	r2, [r5, #0]
 8006788:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800678a:	b13b      	cbz	r3, 800679c <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800678c:	4a13      	ldr	r2, [pc, #76]	; (80067dc <tcp_listen_with_backlog_and_err+0xa4>)
 800678e:	6813      	ldr	r3, [r2, #0]
 8006790:	429d      	cmp	r5, r3
 8006792:	d112      	bne.n	80067ba <tcp_listen_with_backlog_and_err+0x82>
 8006794:	68eb      	ldr	r3, [r5, #12]
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	2300      	movs	r3, #0
 800679a:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 800679c:	4629      	mov	r1, r5
 800679e:	2001      	movs	r0, #1
 80067a0:	f7ff fade 	bl	8005d60 <memp_free>
  lpcb->accept = tcp_accept_null;
 80067a4:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <tcp_listen_with_backlog_and_err+0xa8>)
 80067a6:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80067a8:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <tcp_listen_with_backlog_and_err+0xac>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	601c      	str	r4, [r3, #0]
 80067ae:	60e2      	str	r2, [r4, #12]
 80067b0:	f003 f840 	bl	8009834 <tcp_timer_needed>
  res = ERR_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e7ce      	b.n	8006756 <tcp_listen_with_backlog_and_err+0x1e>
 80067b8:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0ec      	beq.n	8006798 <tcp_listen_with_backlog_and_err+0x60>
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	4295      	cmp	r5, r2
 80067c2:	d1f9      	bne.n	80067b8 <tcp_listen_with_backlog_and_err+0x80>
 80067c4:	68ea      	ldr	r2, [r5, #12]
 80067c6:	60da      	str	r2, [r3, #12]
 80067c8:	e7e6      	b.n	8006798 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067ce:	e7c2      	b.n	8006756 <tcp_listen_with_backlog_and_err+0x1e>
 80067d0:	0800d6be 	.word	0x0800d6be
 80067d4:	0800d72d 	.word	0x0800d72d
 80067d8:	0800c987 	.word	0x0800c987
 80067dc:	200037f8 	.word	0x200037f8
 80067e0:	080071e7 	.word	0x080071e7
 80067e4:	200037f4 	.word	0x200037f4

080067e8 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80067e8:	2200      	movs	r2, #0
 80067ea:	f7ff bfa5 	b.w	8006738 <tcp_listen_with_backlog_and_err>
	...

080067f0 <tcp_update_rcv_ann_wnd>:
{
 80067f0:	b570      	push	{r4, r5, r6, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80067f2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 80067f4:	4604      	mov	r4, r0
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80067f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80067f8:	f240 5614 	movw	r6, #1300	; 0x514
 80067fc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80067fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006800:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006802:	42b2      	cmp	r2, r6
 8006804:	4428      	add	r0, r5
 8006806:	bf94      	ite	ls
 8006808:	1a82      	subls	r2, r0, r2
 800680a:	1b82      	subhi	r2, r0, r6
 800680c:	2a00      	cmp	r2, #0
 800680e:	db01      	blt.n	8006814 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006810:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006812:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006814:	1aea      	subs	r2, r5, r3
 8006816:	2a00      	cmp	r2, #0
 8006818:	dd02      	ble.n	8006820 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 800681a:	2000      	movs	r0, #0
 800681c:	8560      	strh	r0, [r4, #42]	; 0x2a
 800681e:	bd70      	pop	{r4, r5, r6, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006820:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006822:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8006826:	d306      	bcc.n	8006836 <tcp_update_rcv_ann_wnd+0x46>
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <tcp_update_rcv_ann_wnd+0x4c>)
 800682a:	f44f 7242 	mov.w	r2, #776	; 0x308
 800682e:	4904      	ldr	r1, [pc, #16]	; (8006840 <tcp_update_rcv_ann_wnd+0x50>)
 8006830:	4804      	ldr	r0, [pc, #16]	; (8006844 <tcp_update_rcv_ann_wnd+0x54>)
 8006832:	f004 fe75 	bl	800b520 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006836:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8006838:	2000      	movs	r0, #0
}
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	0800d6be 	.word	0x0800d6be
 8006840:	0800d996 	.word	0x0800d996
 8006844:	0800c987 	.word	0x0800c987

08006848 <tcp_recved>:
{
 8006848:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800684a:	7d03      	ldrb	r3, [r0, #20]
{
 800684c:	4604      	mov	r4, r0
 800684e:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006850:	2b01      	cmp	r3, #1
 8006852:	d106      	bne.n	8006862 <tcp_recved+0x1a>
 8006854:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <tcp_recved+0x70>)
 8006856:	f44f 7248 	mov.w	r2, #800	; 0x320
 800685a:	4918      	ldr	r1, [pc, #96]	; (80068bc <tcp_recved+0x74>)
 800685c:	4818      	ldr	r0, [pc, #96]	; (80068c0 <tcp_recved+0x78>)
 800685e:	f004 fe5f 	bl	800b520 <iprintf>
  pcb->rcv_wnd += len;
 8006862:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006864:	f640 2328 	movw	r3, #2600	; 0xa28
  pcb->rcv_wnd += len;
 8006868:	4429      	add	r1, r5
 800686a:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800686c:	4299      	cmp	r1, r3
  pcb->rcv_wnd += len;
 800686e:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006870:	d912      	bls.n	8006898 <tcp_recved+0x50>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006872:	f640 2328 	movw	r3, #2600	; 0xa28
 8006876:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006878:	4620      	mov	r0, r4
 800687a:	f7ff ffb9 	bl	80067f0 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800687e:	f240 2389 	movw	r3, #649	; 0x289
 8006882:	4298      	cmp	r0, r3
 8006884:	dd17      	ble.n	80068b6 <tcp_recved+0x6e>
    tcp_ack_now(pcb);
 8006886:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 8006888:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800688a:	f043 0302 	orr.w	r3, r3, #2
 800688e:	76a3      	strb	r3, [r4, #26]
}
 8006890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8006894:	f002 bcae 	b.w	80091f4 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8006898:	2900      	cmp	r1, #0
 800689a:	d1ed      	bne.n	8006878 <tcp_recved+0x30>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800689c:	7d23      	ldrb	r3, [r4, #20]
 800689e:	2b07      	cmp	r3, #7
 80068a0:	d0e7      	beq.n	8006872 <tcp_recved+0x2a>
 80068a2:	2b09      	cmp	r3, #9
 80068a4:	d0e5      	beq.n	8006872 <tcp_recved+0x2a>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80068a6:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <tcp_recved+0x70>)
 80068a8:	f240 322d 	movw	r2, #813	; 0x32d
 80068ac:	4905      	ldr	r1, [pc, #20]	; (80068c4 <tcp_recved+0x7c>)
 80068ae:	4804      	ldr	r0, [pc, #16]	; (80068c0 <tcp_recved+0x78>)
 80068b0:	f004 fe36 	bl	800b520 <iprintf>
 80068b4:	e7e0      	b.n	8006878 <tcp_recved+0x30>
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	0800d6be 	.word	0x0800d6be
 80068bc:	0800d7d6 	.word	0x0800d7d6
 80068c0:	0800c987 	.word	0x0800c987
 80068c4:	0800d7fc 	.word	0x0800d7fc

080068c8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80068c8:	b510      	push	{r4, lr}
  if (seg != NULL) {
 80068ca:	4604      	mov	r4, r0
 80068cc:	b148      	cbz	r0, 80068e2 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 80068ce:	6840      	ldr	r0, [r0, #4]
 80068d0:	b108      	cbz	r0, 80068d6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80068d2:	f7ff fba9 	bl	8006028 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80068d6:	4621      	mov	r1, r4
 80068d8:	2003      	movs	r0, #3
  }
}
 80068da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80068de:	f7ff ba3f 	b.w	8005d60 <memp_free>
 80068e2:	bd10      	pop	{r4, pc}

080068e4 <tcp_segs_free>:
{
 80068e4:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80068e6:	b900      	cbnz	r0, 80068ea <tcp_segs_free+0x6>
}
 80068e8:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 80068ea:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80068ec:	f7ff ffec 	bl	80068c8 <tcp_seg_free>
    seg = next;
 80068f0:	4620      	mov	r0, r4
 80068f2:	e7f8      	b.n	80068e6 <tcp_segs_free+0x2>

080068f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80068f8:	2003      	movs	r0, #3
 80068fa:	f7ff fa15 	bl	8005d28 <memp_malloc>
  if (cseg == NULL) {
 80068fe:	4605      	mov	r5, r0
 8006900:	b160      	cbz	r0, 800691c <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006902:	4620      	mov	r0, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f104 0210 	add.w	r2, r4, #16
 800690a:	f850 1b04 	ldr.w	r1, [r0], #4
 800690e:	4290      	cmp	r0, r2
 8006910:	f843 1b04 	str.w	r1, [r3], #4
 8006914:	d1f9      	bne.n	800690a <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8006916:	6868      	ldr	r0, [r5, #4]
 8006918:	f7ff fd40 	bl	800639c <pbuf_ref>
  return cseg;
}
 800691c:	4628      	mov	r0, r5
 800691e:	bd38      	pop	{r3, r4, r5, pc}

08006920 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006920:	b100      	cbz	r0, 8006924 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8006922:	6101      	str	r1, [r0, #16]
 8006924:	4770      	bx	lr
	...

08006928 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800692c:	4604      	mov	r4, r0
 800692e:	b158      	cbz	r0, 8006948 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006930:	7d03      	ldrb	r3, [r0, #20]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d106      	bne.n	8006944 <tcp_recv+0x1c>
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <tcp_recv+0x24>)
 8006938:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800693c:	4904      	ldr	r1, [pc, #16]	; (8006950 <tcp_recv+0x28>)
 800693e:	4805      	ldr	r0, [pc, #20]	; (8006954 <tcp_recv+0x2c>)
 8006940:	f004 fdee 	bl	800b520 <iprintf>
    pcb->recv = recv;
 8006944:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8006948:	bd38      	pop	{r3, r4, r5, pc}
 800694a:	bf00      	nop
 800694c:	0800d6be 	.word	0x0800d6be
 8006950:	0800d7af 	.word	0x0800d7af
 8006954:	0800c987 	.word	0x0800c987

08006958 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800695c:	4604      	mov	r4, r0
 800695e:	b150      	cbz	r0, 8006976 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006960:	7d03      	ldrb	r3, [r0, #20]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d106      	bne.n	8006974 <tcp_sent+0x1c>
 8006966:	4b04      	ldr	r3, [pc, #16]	; (8006978 <tcp_sent+0x20>)
 8006968:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800696c:	4903      	ldr	r1, [pc, #12]	; (800697c <tcp_sent+0x24>)
 800696e:	4804      	ldr	r0, [pc, #16]	; (8006980 <tcp_sent+0x28>)
 8006970:	f004 fdd6 	bl	800b520 <iprintf>
    pcb->sent = sent;
 8006974:	67e5      	str	r5, [r4, #124]	; 0x7c
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	0800d6be 	.word	0x0800d6be
 800697c:	0800d81d 	.word	0x0800d81d
 8006980:	0800c987 	.word	0x0800c987

08006984 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006988:	4604      	mov	r4, r0
 800698a:	b158      	cbz	r0, 80069a4 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800698c:	7d03      	ldrb	r3, [r0, #20]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d106      	bne.n	80069a0 <tcp_err+0x1c>
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <tcp_err+0x24>)
 8006994:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8006998:	4904      	ldr	r1, [pc, #16]	; (80069ac <tcp_err+0x28>)
 800699a:	4805      	ldr	r0, [pc, #20]	; (80069b0 <tcp_err+0x2c>)
 800699c:	f004 fdc0 	bl	800b520 <iprintf>
    pcb->errf = err;
 80069a0:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80069a4:	bd38      	pop	{r3, r4, r5, pc}
 80069a6:	bf00      	nop
 80069a8:	0800d6be 	.word	0x0800d6be
 80069ac:	0800d6f9 	.word	0x0800d6f9
 80069b0:	0800c987 	.word	0x0800c987

080069b4 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80069b4:	b118      	cbz	r0, 80069be <tcp_accept+0xa>
 80069b6:	7d03      	ldrb	r3, [r0, #20]
 80069b8:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 80069ba:	bf08      	it	eq
 80069bc:	6181      	streq	r1, [r0, #24]
 80069be:	4770      	bx	lr

080069c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80069c0:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 80069c2:	7d03      	ldrb	r3, [r0, #20]
{
 80069c4:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d919      	bls.n	80069fe <tcp_pcb_purge+0x3e>
 80069ca:	2b0a      	cmp	r3, #10
 80069cc:	d017      	beq.n	80069fe <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80069ce:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80069d0:	b118      	cbz	r0, 80069da <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80069d2:	f7ff fb29 	bl	8006028 <pbuf_free>
      pcb->refused_data = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80069da:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 80069dc:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 80069de:	f7ff ff81 	bl	80068e4 <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80069e2:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 80069e6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 80069e8:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 80069ea:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 80069ec:	f7ff ff7a 	bl	80068e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80069f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80069f2:	f7ff ff77 	bl	80068e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80069f6:	66a5      	str	r5, [r4, #104]	; 0x68
 80069f8:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80069fa:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80069fe:	bd38      	pop	{r3, r4, r5, pc}

08006a00 <tcp_slowtmr>:
{
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8006a04:	4eb0      	ldr	r6, [pc, #704]	; (8006cc8 <tcp_slowtmr+0x2c8>)
{
 8006a06:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 8006a08:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8006cfc <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8006a12:	4bae      	ldr	r3, [pc, #696]	; (8006ccc <tcp_slowtmr+0x2cc>)
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	9302      	str	r3, [sp, #8]
 8006a18:	3201      	adds	r2, #1
 8006a1a:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 8006a1c:	4fac      	ldr	r7, [pc, #688]	; (8006cd0 <tcp_slowtmr+0x2d0>)
  prev = NULL;
 8006a1e:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006a22:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8006d00 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8006a26:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8006a28:	b96c      	cbnz	r4, 8006a46 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8006a2a:	4faa      	ldr	r7, [pc, #680]	; (8006cd4 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006a2c:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8006d00 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8006a30:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006a32:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8006d04 <tcp_slowtmr+0x304>
 8006a36:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8006cdc <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8006a3a:	2d00      	cmp	r5, #0
 8006a3c:	f040 8185 	bne.w	8006d4a <tcp_slowtmr+0x34a>
}
 8006a40:	b005      	add	sp, #20
 8006a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006a46:	7d23      	ldrb	r3, [r4, #20]
 8006a48:	b933      	cbnz	r3, 8006a58 <tcp_slowtmr+0x58>
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006a50:	49a1      	ldr	r1, [pc, #644]	; (8006cd8 <tcp_slowtmr+0x2d8>)
 8006a52:	48a2      	ldr	r0, [pc, #648]	; (8006cdc <tcp_slowtmr+0x2dc>)
 8006a54:	f004 fd64 	bl	800b520 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006a58:	7d23      	ldrb	r3, [r4, #20]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d106      	bne.n	8006a6c <tcp_slowtmr+0x6c>
 8006a5e:	464b      	mov	r3, r9
 8006a60:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006a64:	499e      	ldr	r1, [pc, #632]	; (8006ce0 <tcp_slowtmr+0x2e0>)
 8006a66:	489d      	ldr	r0, [pc, #628]	; (8006cdc <tcp_slowtmr+0x2dc>)
 8006a68:	f004 fd5a 	bl	800b520 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006a6c:	7d23      	ldrb	r3, [r4, #20]
 8006a6e:	2b0a      	cmp	r3, #10
 8006a70:	d106      	bne.n	8006a80 <tcp_slowtmr+0x80>
 8006a72:	464b      	mov	r3, r9
 8006a74:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006a78:	499a      	ldr	r1, [pc, #616]	; (8006ce4 <tcp_slowtmr+0x2e4>)
 8006a7a:	4898      	ldr	r0, [pc, #608]	; (8006cdc <tcp_slowtmr+0x2dc>)
 8006a7c:	f004 fd50 	bl	800b520 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006a80:	9b02      	ldr	r3, [sp, #8]
 8006a82:	7f62      	ldrb	r2, [r4, #29]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d104      	bne.n	8006a94 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8006a8a:	68e5      	ldr	r5, [r4, #12]
 8006a8c:	4644      	mov	r4, r8
      continue;
 8006a8e:	46a0      	mov	r8, r4
 8006a90:	462c      	mov	r4, r5
 8006a92:	e7c9      	b.n	8006a28 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006a94:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8006a96:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006a98:	2902      	cmp	r1, #2
 8006a9a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006a9e:	d102      	bne.n	8006aa6 <tcp_slowtmr+0xa6>
 8006aa0:	2a05      	cmp	r2, #5
 8006aa2:	f200 80e6 	bhi.w	8006c72 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006aa6:	2a0b      	cmp	r2, #11
 8006aa8:	f200 80e3 	bhi.w	8006c72 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8006aac:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8006ab0:	f1bb 0f00 	cmp.w	fp, #0
 8006ab4:	f000 80a6 	beq.w	8006c04 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006ab8:	488b      	ldr	r0, [pc, #556]	; (8006ce8 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8006aba:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006abe:	4483      	add	fp, r0
 8006ac0:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8006ac4:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 8006ac6:	bf84      	itt	hi
 8006ac8:	3301      	addhi	r3, #1
 8006aca:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8006ace:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	f080 8085 	bcs.w	8006be2 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 8006ad8:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8006adc:	7d23      	ldrb	r3, [r4, #20]
 8006ade:	2b06      	cmp	r3, #6
 8006ae0:	d10b      	bne.n	8006afa <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 8006ae2:	7ea2      	ldrb	r2, [r4, #26]
 8006ae4:	06d2      	lsls	r2, r2, #27
 8006ae6:	d508      	bpl.n	8006afa <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	6a21      	ldr	r1, [r4, #32]
 8006aec:	1a52      	subs	r2, r2, r1
 8006aee:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8006af0:	bf84      	itt	hi
 8006af2:	f10b 0b01 	addhi.w	fp, fp, #1
 8006af6:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006afa:	7a25      	ldrb	r5, [r4, #8]
 8006afc:	f015 0508 	ands.w	r5, r5, #8
 8006b00:	d019      	beq.n	8006b36 <tcp_slowtmr+0x136>
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d002      	beq.n	8006b0c <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 8006b06:	2b07      	cmp	r3, #7
 8006b08:	f040 80c8 	bne.w	8006c9c <tcp_slowtmr+0x29c>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006b0c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8006b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b14:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006b16:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b1a:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006b1c:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b20:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006b22:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b26:	4291      	cmp	r1, r2
 8006b28:	f240 80a6 	bls.w	8006c78 <tcp_slowtmr+0x278>
        ++pcb_remove;
 8006b2c:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 8006b30:	2501      	movs	r5, #1
        ++pcb_remove;
 8006b32:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 8006b36:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006b38:	b168      	cbz	r0, 8006b56 <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8006b3a:	6833      	ldr	r3, [r6, #0]
 8006b3c:	6a22      	ldr	r2, [r4, #32]
 8006b3e:	1a9a      	subs	r2, r3, r2
 8006b40:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006b44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8006b48:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8006b4c:	d303      	bcc.n	8006b56 <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 8006b4e:	f7ff fec9 	bl	80068e4 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8006b56:	7d23      	ldrb	r3, [r4, #20]
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	f040 80a1 	bne.w	8006ca0 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b5e:	6833      	ldr	r3, [r6, #0]
 8006b60:	6a22      	ldr	r2, [r4, #32]
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006b66:	d803      	bhi.n	8006b70 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 8006b68:	f1bb 0f00 	cmp.w	fp, #0
 8006b6c:	f000 80cc 	beq.w	8006d08 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8006b70:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8006b72:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8006b76:	f7ff ff23 	bl	80069c0 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006b7a:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8006b7c:	f1b8 0f00 	cmp.w	r8, #0
 8006b80:	f000 8096 	beq.w	8006cb0 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006b84:	429c      	cmp	r4, r3
 8006b86:	d106      	bne.n	8006b96 <tcp_slowtmr+0x196>
 8006b88:	464b      	mov	r3, r9
 8006b8a:	f240 4289 	movw	r2, #1161	; 0x489
 8006b8e:	4957      	ldr	r1, [pc, #348]	; (8006cec <tcp_slowtmr+0x2ec>)
 8006b90:	4852      	ldr	r0, [pc, #328]	; (8006cdc <tcp_slowtmr+0x2dc>)
 8006b92:	f004 fcc5 	bl	800b520 <iprintf>
        prev->next = pcb->next;
 8006b96:	68e3      	ldr	r3, [r4, #12]
 8006b98:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8006b9c:	b14d      	cbz	r5, 8006bb2 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006b9e:	8b23      	ldrh	r3, [r4, #24]
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	8ae3      	ldrh	r3, [r4, #22]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	1d23      	adds	r3, r4, #4
 8006baa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006bac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006bae:	f002 fc9f 	bl	80094f0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006bb2:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	2001      	movs	r0, #1
      pcb = pcb->next;
 8006bb8:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 8006bba:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006bbc:	f7ff f8d0 	bl	8005d60 <memp_free>
      tcp_active_pcbs_changed = 0;
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006bc6:	f1bb 0f00 	cmp.w	fp, #0
 8006bca:	d004      	beq.n	8006bd6 <tcp_slowtmr+0x1d6>
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	f06f 010c 	mvn.w	r1, #12
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8006bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f43f af56 	beq.w	8006a8c <tcp_slowtmr+0x8c>
 8006be0:	e71c      	b.n	8006a1c <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006be2:	4620      	mov	r0, r4
 8006be4:	f002 fd74 	bl	80096d0 <tcp_zero_window_probe>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f47f af75 	bne.w	8006ad8 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006bee:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8006bf2:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006bf6:	2b06      	cmp	r3, #6
 8006bf8:	f63f af6e 	bhi.w	8006ad8 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8006c02:	e769      	b.n	8006ad8 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 8006c04:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8006c08:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8006c0a:	bfa4      	itt	ge
 8006c0c:	3301      	addge	r3, #1
 8006c0e:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006c10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f43f af60 	beq.w	8006ad8 <tcp_slowtmr+0xd8>
 8006c18:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8006c1c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006c20:	4298      	cmp	r0, r3
 8006c22:	f6ff af59 	blt.w	8006ad8 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 8006c26:	2902      	cmp	r1, #2
 8006c28:	d00a      	beq.n	8006c40 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006c2a:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8006c2e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8006c32:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8006c36:	492e      	ldr	r1, [pc, #184]	; (8006cf0 <tcp_slowtmr+0x2f0>)
 8006c38:	5c8a      	ldrb	r2, [r1, r2]
 8006c3a:	4093      	lsls	r3, r2
 8006c3c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8006c40:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006c42:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006c46:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 8006c48:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8006c4a:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006c4c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 8006c50:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8006c54:	4293      	cmp	r3, r2
 8006c56:	bf28      	it	cs
 8006c58:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006c5a:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8006c5c:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006c5e:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 8006c60:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006c64:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 8006c66:	bf38      	it	cc
 8006c68:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8006c6c:	f002 fc9a 	bl	80095a4 <tcp_rexmit_rto>
 8006c70:	e734      	b.n	8006adc <tcp_slowtmr+0xdc>
      ++pcb_remove;
 8006c72:	f04f 0b01 	mov.w	fp, #1
 8006c76:	e731      	b.n	8006adc <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006c78:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006c7c:	4a1d      	ldr	r2, [pc, #116]	; (8006cf4 <tcp_slowtmr+0x2f4>)
 8006c7e:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8006c82:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c86:	4299      	cmp	r1, r3
 8006c88:	d908      	bls.n	8006c9c <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f002 fcf6 	bl	800967c <tcp_keepalive>
        if (err == ERR_OK) {
 8006c90:	b920      	cbnz	r0, 8006c9c <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8006c92:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006c96:	3301      	adds	r3, #1
 8006c98:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8006c9c:	2500      	movs	r5, #0
 8006c9e:	e74a      	b.n	8006b36 <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8006ca0:	2b09      	cmp	r3, #9
 8006ca2:	f47f af61 	bne.w	8006b68 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006ca6:	6833      	ldr	r3, [r6, #0]
 8006ca8:	6a22      	ldr	r2, [r4, #32]
 8006caa:	1a9b      	subs	r3, r3, r2
 8006cac:	2bf0      	cmp	r3, #240	; 0xf0
 8006cae:	e75a      	b.n	8006b66 <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d006      	beq.n	8006cc2 <tcp_slowtmr+0x2c2>
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	f240 428d 	movw	r2, #1165	; 0x48d
 8006cba:	490f      	ldr	r1, [pc, #60]	; (8006cf8 <tcp_slowtmr+0x2f8>)
 8006cbc:	4807      	ldr	r0, [pc, #28]	; (8006cdc <tcp_slowtmr+0x2dc>)
 8006cbe:	f004 fc2f 	bl	800b520 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006cc2:	68e3      	ldr	r3, [r4, #12]
 8006cc4:	603b      	str	r3, [r7, #0]
 8006cc6:	e769      	b.n	8006b9c <tcp_slowtmr+0x19c>
 8006cc8:	200037f0 	.word	0x200037f0
 8006ccc:	200001da 	.word	0x200001da
 8006cd0:	200037ec 	.word	0x200037ec
 8006cd4:	200037fc 	.word	0x200037fc
 8006cd8:	0800d844 	.word	0x0800d844
 8006cdc:	0800c987 	.word	0x0800c987
 8006ce0:	0800d86e 	.word	0x0800d86e
 8006ce4:	0800d898 	.word	0x0800d898
 8006ce8:	0800d7a8 	.word	0x0800d7a8
 8006cec:	0800d8c5 	.word	0x0800d8c5
 8006cf0:	0800d670 	.word	0x0800d670
 8006cf4:	000124f8 	.word	0x000124f8
 8006cf8:	0800d8f0 	.word	0x0800d8f0
 8006cfc:	200037e8 	.word	0x200037e8
 8006d00:	0800d6be 	.word	0x0800d6be
 8006d04:	0800d91a 	.word	0x0800d91a
      ++prev->polltmr;
 8006d08:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006d0a:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8006d0c:	3301      	adds	r3, #1
      pcb = pcb->next;
 8006d0e:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8006d10:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8006d12:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8006d14:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006d16:	f63f aeba 	bhi.w	8006a8e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006d1a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8006d1e:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8006d22:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8006d26:	b173      	cbz	r3, 8006d46 <tcp_slowtmr+0x346>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	6920      	ldr	r0, [r4, #16]
 8006d2c:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8006d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f47f ae72 	bne.w	8006a1c <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f47f aea8 	bne.w	8006a8e <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f002 fa58 	bl	80091f4 <tcp_output>
 8006d44:	e6a3      	b.n	8006a8e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006d46:	4658      	mov	r0, fp
 8006d48:	e7f1      	b.n	8006d2e <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006d4a:	7d2b      	ldrb	r3, [r5, #20]
 8006d4c:	2b0a      	cmp	r3, #10
 8006d4e:	d006      	beq.n	8006d5e <tcp_slowtmr+0x35e>
 8006d50:	4643      	mov	r3, r8
 8006d52:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006d56:	4651      	mov	r1, sl
 8006d58:	4648      	mov	r0, r9
 8006d5a:	f004 fbe1 	bl	800b520 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006d5e:	6833      	ldr	r3, [r6, #0]
 8006d60:	6a2a      	ldr	r2, [r5, #32]
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	2bf0      	cmp	r3, #240	; 0xf0
 8006d66:	d816      	bhi.n	8006d96 <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8006d68:	462c      	mov	r4, r5
 8006d6a:	68ed      	ldr	r5, [r5, #12]
 8006d6c:	e665      	b.n	8006a3a <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	429d      	cmp	r5, r3
 8006d72:	d106      	bne.n	8006d82 <tcp_slowtmr+0x382>
 8006d74:	4643      	mov	r3, r8
 8006d76:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006d7a:	4910      	ldr	r1, [pc, #64]	; (8006dbc <tcp_slowtmr+0x3bc>)
 8006d7c:	4648      	mov	r0, r9
 8006d7e:	f004 fbcf 	bl	800b520 <iprintf>
        prev->next = pcb->next;
 8006d82:	68eb      	ldr	r3, [r5, #12]
 8006d84:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8006d86:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f7fe ffe7 	bl	8005d60 <memp_free>
      pcb = pcb->next;
 8006d92:	465d      	mov	r5, fp
 8006d94:	e651      	b.n	8006a3a <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7ff fe12 	bl	80069c0 <tcp_pcb_purge>
      if (prev != NULL) {
 8006d9c:	2c00      	cmp	r4, #0
 8006d9e:	d1e6      	bne.n	8006d6e <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	429d      	cmp	r5, r3
 8006da4:	d006      	beq.n	8006db4 <tcp_slowtmr+0x3b4>
 8006da6:	4643      	mov	r3, r8
 8006da8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006dac:	4904      	ldr	r1, [pc, #16]	; (8006dc0 <tcp_slowtmr+0x3c0>)
 8006dae:	4648      	mov	r0, r9
 8006db0:	f004 fbb6 	bl	800b520 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006db4:	68eb      	ldr	r3, [r5, #12]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	e7e5      	b.n	8006d86 <tcp_slowtmr+0x386>
 8006dba:	bf00      	nop
 8006dbc:	0800d949 	.word	0x0800d949
 8006dc0:	0800d970 	.word	0x0800d970

08006dc4 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8006dc4:	6803      	ldr	r3, [r0, #0]
 8006dc6:	428b      	cmp	r3, r1
{
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8006dcc:	d137      	bne.n	8006e3e <tcp_pcb_remove+0x7a>
 8006dce:	68cb      	ldr	r3, [r1, #12]
 8006dd0:	6003      	str	r3, [r0, #0]
 8006dd2:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 8006dd4:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8006dd6:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8006dd8:	f7ff fdf2 	bl	80069c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006ddc:	7d23      	ldrb	r3, [r4, #20]
 8006dde:	2b0a      	cmp	r3, #10
 8006de0:	d00a      	beq.n	8006df8 <tcp_pcb_remove+0x34>
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d008      	beq.n	8006df8 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8006de6:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8006de8:	07da      	lsls	r2, r3, #31
 8006dea:	d505      	bpl.n	8006df8 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8006dec:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8006df0:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 8006df2:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8006df4:	f002 f9fe 	bl	80091f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006df8:	7d23      	ldrb	r3, [r4, #20]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d01a      	beq.n	8006e34 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006dfe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006e00:	b133      	cbz	r3, 8006e10 <tcp_pcb_remove+0x4c>
 8006e02:	4b13      	ldr	r3, [pc, #76]	; (8006e50 <tcp_pcb_remove+0x8c>)
 8006e04:	f240 7253 	movw	r2, #1875	; 0x753
 8006e08:	4912      	ldr	r1, [pc, #72]	; (8006e54 <tcp_pcb_remove+0x90>)
 8006e0a:	4813      	ldr	r0, [pc, #76]	; (8006e58 <tcp_pcb_remove+0x94>)
 8006e0c:	f004 fb88 	bl	800b520 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006e10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006e12:	b133      	cbz	r3, 8006e22 <tcp_pcb_remove+0x5e>
 8006e14:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <tcp_pcb_remove+0x8c>)
 8006e16:	f240 7254 	movw	r2, #1876	; 0x754
 8006e1a:	4910      	ldr	r1, [pc, #64]	; (8006e5c <tcp_pcb_remove+0x98>)
 8006e1c:	480e      	ldr	r0, [pc, #56]	; (8006e58 <tcp_pcb_remove+0x94>)
 8006e1e:	f004 fb7f 	bl	800b520 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006e22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006e24:	b133      	cbz	r3, 8006e34 <tcp_pcb_remove+0x70>
 8006e26:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <tcp_pcb_remove+0x8c>)
 8006e28:	f240 7256 	movw	r2, #1878	; 0x756
 8006e2c:	490c      	ldr	r1, [pc, #48]	; (8006e60 <tcp_pcb_remove+0x9c>)
 8006e2e:	480a      	ldr	r0, [pc, #40]	; (8006e58 <tcp_pcb_remove+0x94>)
 8006e30:	f004 fb76 	bl	800b520 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006e34:	2300      	movs	r3, #0
 8006e36:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006e38:	82e3      	strh	r3, [r4, #22]
 8006e3a:	bd10      	pop	{r4, pc}
 8006e3c:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0c7      	beq.n	8006dd2 <tcp_pcb_remove+0xe>
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	4294      	cmp	r4, r2
 8006e46:	d1f9      	bne.n	8006e3c <tcp_pcb_remove+0x78>
 8006e48:	68e2      	ldr	r2, [r4, #12]
 8006e4a:	60da      	str	r2, [r3, #12]
 8006e4c:	e7c1      	b.n	8006dd2 <tcp_pcb_remove+0xe>
 8006e4e:	bf00      	nop
 8006e50:	0800d6be 	.word	0x0800d6be
 8006e54:	0800d760 	.word	0x0800d760
 8006e58:	0800c987 	.word	0x0800c987
 8006e5c:	0800d778 	.word	0x0800d778
 8006e60:	0800d791 	.word	0x0800d791

08006e64 <tcp_close_shutdown>:
{
 8006e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e66:	7d03      	ldrb	r3, [r0, #20]
 8006e68:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	d04a      	beq.n	8006f04 <tcp_close_shutdown+0xa0>
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d001      	beq.n	8006e76 <tcp_close_shutdown+0x12>
 8006e72:	2b07      	cmp	r3, #7
 8006e74:	d146      	bne.n	8006f04 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006e76:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006e78:	b922      	cbnz	r2, 8006e84 <tcp_close_shutdown+0x20>
 8006e7a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8006e7c:	f640 2228 	movw	r2, #2600	; 0xa28
 8006e80:	4291      	cmp	r1, r2
 8006e82:	d03f      	beq.n	8006f04 <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006e84:	7ea3      	ldrb	r3, [r4, #26]
 8006e86:	06db      	lsls	r3, r3, #27
 8006e88:	d406      	bmi.n	8006e98 <tcp_close_shutdown+0x34>
 8006e8a:	4b3f      	ldr	r3, [pc, #252]	; (8006f88 <tcp_close_shutdown+0x124>)
 8006e8c:	f240 120f 	movw	r2, #271	; 0x10f
 8006e90:	493e      	ldr	r1, [pc, #248]	; (8006f8c <tcp_close_shutdown+0x128>)
 8006e92:	483f      	ldr	r0, [pc, #252]	; (8006f90 <tcp_close_shutdown+0x12c>)
 8006e94:	f004 fb44 	bl	800b520 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006e98:	8b23      	ldrh	r3, [r4, #24]
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	8ae3      	ldrh	r3, [r4, #22]
 8006ea2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	1d23      	adds	r3, r4, #4
 8006ea8:	f002 fb22 	bl	80094f0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7ff fd87 	bl	80069c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006eb2:	4a38      	ldr	r2, [pc, #224]	; (8006f94 <tcp_close_shutdown+0x130>)
 8006eb4:	6813      	ldr	r3, [r2, #0]
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d115      	bne.n	8006ee6 <tcp_close_shutdown+0x82>
 8006eba:	68e3      	ldr	r3, [r4, #12]
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	60e3      	str	r3, [r4, #12]
 8006ec4:	4b34      	ldr	r3, [pc, #208]	; (8006f98 <tcp_close_shutdown+0x134>)
 8006ec6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006ec8:	7d23      	ldrb	r3, [r4, #20]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d113      	bne.n	8006ef6 <tcp_close_shutdown+0x92>
        pcb->state = TIME_WAIT;
 8006ece:	230a      	movs	r3, #10
 8006ed0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006ed2:	4b32      	ldr	r3, [pc, #200]	; (8006f9c <tcp_close_shutdown+0x138>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	601c      	str	r4, [r3, #0]
 8006ed8:	60e2      	str	r2, [r4, #12]
 8006eda:	f002 fcab 	bl	8009834 <tcp_timer_needed>
}
 8006ede:	2000      	movs	r0, #0
 8006ee0:	b003      	add	sp, #12
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0e9      	beq.n	8006ebe <tcp_close_shutdown+0x5a>
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	4294      	cmp	r4, r2
 8006eee:	d1f9      	bne.n	8006ee4 <tcp_close_shutdown+0x80>
 8006ef0:	68e2      	ldr	r2, [r4, #12]
 8006ef2:	60da      	str	r2, [r3, #12]
 8006ef4:	e7e3      	b.n	8006ebe <tcp_close_shutdown+0x5a>
        if (tcp_input_pcb == pcb) {
 8006ef6:	4b2a      	ldr	r3, [pc, #168]	; (8006fa0 <tcp_close_shutdown+0x13c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429c      	cmp	r4, r3
 8006efc:	d117      	bne.n	8006f2e <tcp_close_shutdown+0xca>
          tcp_trigger_input_pcb_close();
 8006efe:	f001 fd11 	bl	8008924 <tcp_trigger_input_pcb_close>
 8006f02:	e7ec      	b.n	8006ede <tcp_close_shutdown+0x7a>
  switch (pcb->state) {
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d020      	beq.n	8006f4a <tcp_close_shutdown+0xe6>
 8006f08:	d307      	bcc.n	8006f1a <tcp_close_shutdown+0xb6>
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d033      	beq.n	8006f76 <tcp_close_shutdown+0x112>
    return tcp_close_shutdown_fin(pcb);
 8006f0e:	4620      	mov	r0, r4
}
 8006f10:	b003      	add	sp, #12
 8006f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8006f16:	f7ff bb93 	b.w	8006640 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8006f1a:	8ae3      	ldrh	r3, [r4, #22]
 8006f1c:	b13b      	cbz	r3, 8006f2e <tcp_close_shutdown+0xca>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f1e:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <tcp_close_shutdown+0x140>)
 8006f20:	6813      	ldr	r3, [r2, #0]
 8006f22:	429c      	cmp	r4, r3
 8006f24:	d109      	bne.n	8006f3a <tcp_close_shutdown+0xd6>
 8006f26:	68e3      	ldr	r3, [r4, #12]
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8006f2e:	4621      	mov	r1, r4
 8006f30:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8006f32:	f7fe ff15 	bl	8005d60 <memp_free>
    break;
 8006f36:	e7d2      	b.n	8006ede <tcp_close_shutdown+0x7a>
 8006f38:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0f5      	beq.n	8006f2a <tcp_close_shutdown+0xc6>
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	4294      	cmp	r4, r2
 8006f42:	d1f9      	bne.n	8006f38 <tcp_close_shutdown+0xd4>
 8006f44:	68e2      	ldr	r2, [r4, #12]
 8006f46:	60da      	str	r2, [r3, #12]
 8006f48:	e7ef      	b.n	8006f2a <tcp_close_shutdown+0xc6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006f4a:	4917      	ldr	r1, [pc, #92]	; (8006fa8 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8006f4c:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8006f4e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8006f52:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006f54:	b94a      	cbnz	r2, 8006f6a <tcp_close_shutdown+0x106>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006f56:	3301      	adds	r3, #1
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d1f8      	bne.n	8006f4e <tcp_close_shutdown+0xea>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4813      	ldr	r0, [pc, #76]	; (8006fac <tcp_close_shutdown+0x148>)
 8006f60:	f7ff ff30 	bl	8006dc4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006f64:	4621      	mov	r1, r4
 8006f66:	2002      	movs	r0, #2
 8006f68:	e7e3      	b.n	8006f32 <tcp_close_shutdown+0xce>
      if (pcb->listener == lpcb) {
 8006f6a:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8006f6c:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8006f6e:	bf08      	it	eq
 8006f70:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006f72:	68d2      	ldr	r2, [r2, #12]
 8006f74:	e7ee      	b.n	8006f54 <tcp_close_shutdown+0xf0>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f76:	4621      	mov	r1, r4
 8006f78:	4806      	ldr	r0, [pc, #24]	; (8006f94 <tcp_close_shutdown+0x130>)
 8006f7a:	f7ff ff23 	bl	8006dc4 <tcp_pcb_remove>
 8006f7e:	2001      	movs	r0, #1
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 8006f82:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f84:	7018      	strb	r0, [r3, #0]
 8006f86:	e7d4      	b.n	8006f32 <tcp_close_shutdown+0xce>
 8006f88:	0800d6be 	.word	0x0800d6be
 8006f8c:	0800d6a5 	.word	0x0800d6a5
 8006f90:	0800c987 	.word	0x0800c987
 8006f94:	200037ec 	.word	0x200037ec
 8006f98:	200037e8 	.word	0x200037e8
 8006f9c:	200037fc 	.word	0x200037fc
 8006fa0:	20003800 	.word	0x20003800
 8006fa4:	200037f8 	.word	0x200037f8
 8006fa8:	0800d750 	.word	0x0800d750
 8006fac:	200037f4 	.word	0x200037f4

08006fb0 <tcp_close>:
  if (pcb->state != LISTEN) {
 8006fb0:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8006fb2:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8006fb4:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8006fb6:	bf1e      	ittt	ne
 8006fb8:	7e83      	ldrbne	r3, [r0, #26]
 8006fba:	f043 0310 	orrne.w	r3, r3, #16
 8006fbe:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006fc0:	f7ff bf50 	b.w	8006e64 <tcp_close_shutdown>

08006fc4 <tcp_recv_null>:
{
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	4608      	mov	r0, r1
  if (p != NULL) {
 8006fc8:	4614      	mov	r4, r2
 8006fca:	b13a      	cbz	r2, 8006fdc <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8006fcc:	8911      	ldrh	r1, [r2, #8]
 8006fce:	f7ff fc3b 	bl	8006848 <tcp_recved>
    pbuf_free(p);
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f7ff f828 	bl	8006028 <pbuf_free>
}
 8006fd8:	2000      	movs	r0, #0
 8006fda:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1fb      	bne.n	8006fd8 <tcp_recv_null+0x14>
}
 8006fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8006fe4:	f7ff bfe4 	b.w	8006fb0 <tcp_close>

08006fe8 <tcp_process_refused_data>:
{
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8006fea:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8006fec:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006fee:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 8006ff2:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8006ff4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8006ff6:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006ff8:	b1e5      	cbz	r5, 8007034 <tcp_process_refused_data+0x4c>
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	6900      	ldr	r0, [r0, #16]
 8007000:	47a8      	blx	r5
 8007002:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8007004:	b9e8      	cbnz	r0, 8007042 <tcp_process_refused_data+0x5a>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8007006:	06bb      	lsls	r3, r7, #26
 8007008:	d512      	bpl.n	8007030 <tcp_process_refused_data+0x48>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800700a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800700c:	f640 2228 	movw	r2, #2600	; 0xa28
        TCP_EVENT_CLOSED(pcb, err);
 8007010:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007014:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8007016:	bf1c      	itt	ne
 8007018:	3301      	addne	r3, #1
 800701a:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800701c:	b146      	cbz	r6, 8007030 <tcp_process_refused_data+0x48>
 800701e:	2300      	movs	r3, #0
 8007020:	4621      	mov	r1, r4
 8007022:	6920      	ldr	r0, [r4, #16]
 8007024:	461a      	mov	r2, r3
 8007026:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007028:	300d      	adds	r0, #13
 800702a:	d101      	bne.n	8007030 <tcp_process_refused_data+0x48>
          return ERR_ABRT;
 800702c:	f06f 050c 	mvn.w	r5, #12
}
 8007030:	4628      	mov	r0, r5
 8007032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007034:	4601      	mov	r1, r0
 8007036:	462b      	mov	r3, r5
 8007038:	4632      	mov	r2, r6
 800703a:	4628      	mov	r0, r5
 800703c:	f7ff ffc2 	bl	8006fc4 <tcp_recv_null>
 8007040:	e7df      	b.n	8007002 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8007042:	f110 050d 	adds.w	r5, r0, #13
 8007046:	d0f1      	beq.n	800702c <tcp_process_refused_data+0x44>
      pcb->refused_data = refused_data;
 8007048:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800704a:	f06f 0504 	mvn.w	r5, #4
 800704e:	e7ef      	b.n	8007030 <tcp_process_refused_data+0x48>

08007050 <tcp_fasttmr>:
{
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8007054:	4d1b      	ldr	r5, [pc, #108]	; (80070c4 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8007056:	4f1c      	ldr	r7, [pc, #112]	; (80070c8 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8007058:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800705a:	4e1c      	ldr	r6, [pc, #112]	; (80070cc <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800705c:	3301      	adds	r3, #1
 800705e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8007060:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8007062:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8007066:	b90c      	cbnz	r4, 800706c <tcp_fasttmr+0x1c>
}
 8007068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800706c:	782b      	ldrb	r3, [r5, #0]
 800706e:	7f62      	ldrb	r2, [r4, #29]
 8007070:	429a      	cmp	r2, r3
 8007072:	d024      	beq.n	80070be <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8007074:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8007076:	7ea3      	ldrb	r3, [r4, #26]
 8007078:	07d9      	lsls	r1, r3, #31
 800707a:	d509      	bpl.n	8007090 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800707c:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8007080:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8007082:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8007084:	f002 f8b6 	bl	80091f4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007088:	7ea3      	ldrb	r3, [r4, #26]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8007090:	7ea3      	ldrb	r3, [r4, #26]
 8007092:	071a      	lsls	r2, r3, #28
 8007094:	d505      	bpl.n	80070a2 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8007096:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800709a:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 800709c:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800709e:	f7ff facf 	bl	8006640 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 80070a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 80070a4:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80070a8:	b13b      	cbz	r3, 80070ba <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 80070aa:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 80070ac:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 80070b0:	f7ff ff9a 	bl	8006fe8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80070b4:	7833      	ldrb	r3, [r6, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1d2      	bne.n	8007060 <tcp_fasttmr+0x10>
{
 80070ba:	464c      	mov	r4, r9
 80070bc:	e7d3      	b.n	8007066 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 80070be:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80070c2:	e7fa      	b.n	80070ba <tcp_fasttmr+0x6a>
 80070c4:	200001da 	.word	0x200001da
 80070c8:	200037ec 	.word	0x200037ec
 80070cc:	200037e8 	.word	0x200037e8

080070d0 <tcp_tmr>:
{
 80070d0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80070d2:	f7ff ffbd 	bl	8007050 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80070d6:	4a06      	ldr	r2, [pc, #24]	; (80070f0 <tcp_tmr+0x20>)
 80070d8:	7813      	ldrb	r3, [r2, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	7013      	strb	r3, [r2, #0]
 80070e0:	07db      	lsls	r3, r3, #31
 80070e2:	d503      	bpl.n	80070ec <tcp_tmr+0x1c>
}
 80070e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80070e8:	f7ff bc8a 	b.w	8006a00 <tcp_slowtmr>
 80070ec:	bd08      	pop	{r3, pc}
 80070ee:	bf00      	nop
 80070f0:	200001d9 	.word	0x200001d9

080070f4 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80070f4:	7d03      	ldrb	r3, [r0, #20]
 80070f6:	2b01      	cmp	r3, #1
{
 80070f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80070fc:	4604      	mov	r4, r0
 80070fe:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007100:	d106      	bne.n	8007110 <tcp_abandon+0x1c>
 8007102:	4b30      	ldr	r3, [pc, #192]	; (80071c4 <tcp_abandon+0xd0>)
 8007104:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007108:	492f      	ldr	r1, [pc, #188]	; (80071c8 <tcp_abandon+0xd4>)
 800710a:	4830      	ldr	r0, [pc, #192]	; (80071cc <tcp_abandon+0xd8>)
 800710c:	f004 fa08 	bl	800b520 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8007110:	7d23      	ldrb	r3, [r4, #20]
 8007112:	2b0a      	cmp	r3, #10
 8007114:	d10a      	bne.n	800712c <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007116:	4621      	mov	r1, r4
 8007118:	482d      	ldr	r0, [pc, #180]	; (80071d0 <tcp_abandon+0xdc>)
 800711a:	f7ff fe53 	bl	8006dc4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800711e:	4621      	mov	r1, r4
 8007120:	2001      	movs	r0, #1
}
 8007122:	b002      	add	sp, #8
 8007124:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8007128:	f7fe be1a 	b.w	8005d60 <memp_free>
    seqno = pcb->snd_nxt;
 800712c:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8007130:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8007134:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8007138:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800713c:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800713e:	b99b      	cbnz	r3, 8007168 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8007140:	b13d      	cbz	r5, 8007152 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007142:	4a24      	ldr	r2, [pc, #144]	; (80071d4 <tcp_abandon+0xe0>)
 8007144:	6813      	ldr	r3, [r2, #0]
 8007146:	429c      	cmp	r4, r3
 8007148:	d106      	bne.n	8007158 <tcp_abandon+0x64>
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	2500      	movs	r5, #0
 8007150:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8007152:	462e      	mov	r6, r5
 8007154:	e00f      	b.n	8007176 <tcp_abandon+0x82>
 8007156:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f8      	beq.n	800714e <tcp_abandon+0x5a>
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	4294      	cmp	r4, r2
 8007160:	d1f9      	bne.n	8007156 <tcp_abandon+0x62>
 8007162:	68e2      	ldr	r2, [r4, #12]
 8007164:	60da      	str	r2, [r3, #12]
 8007166:	e7f2      	b.n	800714e <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007168:	4621      	mov	r1, r4
 800716a:	481b      	ldr	r0, [pc, #108]	; (80071d8 <tcp_abandon+0xe4>)
 800716c:	f7ff fe2a 	bl	8006dc4 <tcp_pcb_remove>
 8007170:	2201      	movs	r2, #1
 8007172:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <tcp_abandon+0xe8>)
 8007174:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007176:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007178:	b108      	cbz	r0, 800717e <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 800717a:	f7ff fbb3 	bl	80068e4 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800717e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007180:	b108      	cbz	r0, 8007186 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8007182:	f7ff fbaf 	bl	80068e4 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007186:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007188:	b108      	cbz	r0, 800718e <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 800718a:	f7ff fbab 	bl	80068e4 <tcp_segs_free>
    if (send_rst) {
 800718e:	b146      	cbz	r6, 80071a2 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007190:	8b23      	ldrh	r3, [r4, #24]
 8007192:	4622      	mov	r2, r4
 8007194:	9500      	str	r5, [sp, #0]
 8007196:	4651      	mov	r1, sl
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	4648      	mov	r0, r9
 800719c:	1d23      	adds	r3, r4, #4
 800719e:	f002 f9a7 	bl	80094f0 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 80071a2:	4621      	mov	r1, r4
 80071a4:	2001      	movs	r0, #1
 80071a6:	f7fe fddb 	bl	8005d60 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80071aa:	b13f      	cbz	r7, 80071bc <tcp_abandon+0xc8>
 80071ac:	f06f 010c 	mvn.w	r1, #12
 80071b0:	4640      	mov	r0, r8
 80071b2:	463b      	mov	r3, r7
}
 80071b4:	b002      	add	sp, #8
 80071b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80071ba:	4718      	bx	r3
}
 80071bc:	b002      	add	sp, #8
 80071be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c2:	bf00      	nop
 80071c4:	0800d6be 	.word	0x0800d6be
 80071c8:	0800d63f 	.word	0x0800d63f
 80071cc:	0800c987 	.word	0x0800c987
 80071d0:	200037fc 	.word	0x200037fc
 80071d4:	200037f8 	.word	0x200037f8
 80071d8:	200037ec 	.word	0x200037ec
 80071dc:	200037e8 	.word	0x200037e8

080071e0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80071e0:	2101      	movs	r1, #1
 80071e2:	f7ff bf87 	b.w	80070f4 <tcp_abandon>

080071e6 <tcp_accept_null>:
  tcp_abort(pcb);
 80071e6:	4608      	mov	r0, r1
{
 80071e8:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 80071ea:	f7ff fff9 	bl	80071e0 <tcp_abort>
}
 80071ee:	f06f 000c 	mvn.w	r0, #12
 80071f2:	bd08      	pop	{r3, pc}

080071f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80071f8:	b901      	cbnz	r1, 80071fc <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80071fc:	680a      	ldr	r2, [r1, #0]
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	68cc      	ldr	r4, [r1, #12]
 8007202:	429a      	cmp	r2, r3
 8007204:	d102      	bne.n	800720c <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8007206:	4608      	mov	r0, r1
 8007208:	f7ff ffea 	bl	80071e0 <tcp_abort>
      pcb = pcb->next;
 800720c:	4621      	mov	r1, r4
 800720e:	e7f3      	b.n	80071f8 <tcp_netif_ip_addr_changed_pcblist+0x4>

08007210 <tcp_kill_state>:
{
 8007210:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007212:	f1a0 0308 	sub.w	r3, r0, #8
{
 8007216:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007218:	2b01      	cmp	r3, #1
 800721a:	d906      	bls.n	800722a <tcp_kill_state+0x1a>
 800721c:	4b0f      	ldr	r3, [pc, #60]	; (800725c <tcp_kill_state+0x4c>)
 800721e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007222:	490f      	ldr	r1, [pc, #60]	; (8007260 <tcp_kill_state+0x50>)
 8007224:	480f      	ldr	r0, [pc, #60]	; (8007264 <tcp_kill_state+0x54>)
 8007226:	f004 f97b 	bl	800b520 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <tcp_kill_state+0x58>)
  inactivity = 0;
 800722c:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800722e:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 8007230:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007232:	4b0e      	ldr	r3, [pc, #56]	; (800726c <tcp_kill_state+0x5c>)
 8007234:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007236:	b921      	cbnz	r1, 8007242 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8007238:	b170      	cbz	r0, 8007258 <tcp_kill_state+0x48>
}
 800723a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 800723e:	f7ff bf59 	b.w	80070f4 <tcp_abandon>
    if (pcb->state == state) {
 8007242:	7d0b      	ldrb	r3, [r1, #20]
 8007244:	42a3      	cmp	r3, r4
 8007246:	d105      	bne.n	8007254 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007248:	6a0b      	ldr	r3, [r1, #32]
 800724a:	1aeb      	subs	r3, r5, r3
 800724c:	429a      	cmp	r2, r3
 800724e:	bf9c      	itt	ls
 8007250:	461a      	movls	r2, r3
 8007252:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007254:	68c9      	ldr	r1, [r1, #12]
 8007256:	e7ee      	b.n	8007236 <tcp_kill_state+0x26>
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	bf00      	nop
 800725c:	0800d6be 	.word	0x0800d6be
 8007260:	0800d71f 	.word	0x0800d71f
 8007264:	0800c987 	.word	0x0800c987
 8007268:	200037ec 	.word	0x200037ec
 800726c:	200037f0 	.word	0x200037f0

08007270 <tcp_alloc>:
{
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007274:	2001      	movs	r0, #1
 8007276:	f7fe fd57 	bl	8005d28 <memp_malloc>
 800727a:	4d3b      	ldr	r5, [pc, #236]	; (8007368 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 800727c:	4604      	mov	r4, r0
 800727e:	bb90      	cbnz	r0, 80072e6 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007280:	4b3a      	ldr	r3, [pc, #232]	; (800736c <tcp_alloc+0xfc>)
  inactivity = 0;
 8007282:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007284:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d158      	bne.n	800733e <tcp_alloc+0xce>
  if (inactive != NULL) {
 800728c:	b114      	cbz	r4, 8007294 <tcp_alloc+0x24>
    tcp_abort(inactive);
 800728e:	4620      	mov	r0, r4
 8007290:	f7ff ffa6 	bl	80071e0 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007294:	2001      	movs	r0, #1
 8007296:	f7fe fd47 	bl	8005d28 <memp_malloc>
    if (pcb == NULL) {
 800729a:	4604      	mov	r4, r0
 800729c:	bb18      	cbnz	r0, 80072e6 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 800729e:	2009      	movs	r0, #9
 80072a0:	f7ff ffb6 	bl	8007210 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80072a4:	2001      	movs	r0, #1
 80072a6:	f7fe fd3f 	bl	8005d28 <memp_malloc>
      if (pcb == NULL) {
 80072aa:	4604      	mov	r4, r0
 80072ac:	b9d8      	cbnz	r0, 80072e6 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 80072ae:	2008      	movs	r0, #8
 80072b0:	f7ff ffae 	bl	8007210 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80072b4:	2001      	movs	r0, #1
 80072b6:	f7fe fd37 	bl	8005d28 <memp_malloc>
        if (pcb == NULL) {
 80072ba:	4604      	mov	r4, r0
 80072bc:	b998      	cbnz	r0, 80072e6 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80072be:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072c2:	4b2b      	ldr	r3, [pc, #172]	; (8007370 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80072c4:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80072c8:	bf0c      	ite	eq
 80072ca:	4631      	moveq	r1, r6
 80072cc:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d13c      	bne.n	800734e <tcp_alloc+0xde>
  if (inactive != NULL) {
 80072d4:	b114      	cbz	r4, 80072dc <tcp_alloc+0x6c>
    tcp_abort(inactive);
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7ff ff82 	bl	80071e0 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80072dc:	2001      	movs	r0, #1
 80072de:	f7fe fd23 	bl	8005d28 <memp_malloc>
  if (pcb != NULL) {
 80072e2:	4604      	mov	r4, r0
 80072e4:	b348      	cbz	r0, 800733a <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80072e6:	2298      	movs	r2, #152	; 0x98
 80072e8:	2100      	movs	r1, #0
 80072ea:	4620      	mov	r0, r4
 80072ec:	f004 f864 	bl	800b3b8 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80072f0:	f640 2228 	movw	r2, #2600	; 0xa28
    pcb->snd_buf = TCP_SND_BUF;
 80072f4:	f240 5314 	movw	r3, #1300	; 0x514
    pcb->prio = prio;
 80072f8:	7566      	strb	r6, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80072fa:	8562      	strh	r2, [r4, #42]	; 0x2a
 80072fc:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80072fe:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8007300:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ttl = TCP_TTL;
 8007304:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8007306:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 800730a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 800730e:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007310:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 8007312:	4b18      	ldr	r3, [pc, #96]	; (8007374 <tcp_alloc+0x104>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007314:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007318:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800731a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 800731e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->rtime = -1;
 8007322:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8007324:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <tcp_alloc+0x108>)
    pcb->cwnd = 1;
 8007328:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800732c:	682a      	ldr	r2, [r5, #0]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800732e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->tmr = tcp_ticks;
 8007332:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007334:	4a11      	ldr	r2, [pc, #68]	; (800737c <tcp_alloc+0x10c>)
 8007336:	7812      	ldrb	r2, [r2, #0]
 8007338:	7762      	strb	r2, [r4, #29]
}
 800733a:	4620      	mov	r0, r4
 800733c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	1a82      	subs	r2, r0, r2
 8007342:	428a      	cmp	r2, r1
 8007344:	bf24      	itt	cs
 8007346:	461c      	movcs	r4, r3
 8007348:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	e79c      	b.n	8007288 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 800734e:	7d5f      	ldrb	r7, [r3, #21]
 8007350:	428f      	cmp	r7, r1
 8007352:	d807      	bhi.n	8007364 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007354:	6a1a      	ldr	r2, [r3, #32]
 8007356:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 800735a:	4282      	cmp	r2, r0
 800735c:	bf22      	ittt	cs
 800735e:	4639      	movcs	r1, r7
 8007360:	4610      	movcs	r0, r2
 8007362:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	e7b3      	b.n	80072d0 <tcp_alloc+0x60>
 8007368:	200037f0 	.word	0x200037f0
 800736c:	200037fc 	.word	0x200037fc
 8007370:	200037ec 	.word	0x200037ec
 8007374:	08006fc5 	.word	0x08006fc5
 8007378:	006ddd00 	.word	0x006ddd00
 800737c:	200001da 	.word	0x200001da

08007380 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007380:	2040      	movs	r0, #64	; 0x40
 8007382:	f7ff bf75 	b.w	8007270 <tcp_alloc>
	...

08007388 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8007388:	4b03      	ldr	r3, [pc, #12]	; (8007398 <tcp_next_iss+0x10>)
 800738a:	4a04      	ldr	r2, [pc, #16]	; (800739c <tcp_next_iss+0x14>)
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	4410      	add	r0, r2
 8007392:	6018      	str	r0, [r3, #0]
}
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	20000008 	.word	0x20000008
 800739c:	200037f0 	.word	0x200037f0

080073a0 <tcp_eff_send_mss_impl>:
{
 80073a0:	b510      	push	{r4, lr}
 80073a2:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 80073a4:	4608      	mov	r0, r1
 80073a6:	f7fd fd65 	bl	8004e74 <ip4_route>
    if (outif == NULL) {
 80073aa:	b130      	cbz	r0, 80073ba <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 80073ac:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 80073ae:	b123      	cbz	r3, 80073ba <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80073b0:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	429c      	cmp	r4, r3
 80073b6:	bf28      	it	cs
 80073b8:	461c      	movcs	r4, r3
}
 80073ba:	4620      	mov	r0, r4
 80073bc:	bd10      	pop	{r4, pc}
	...

080073c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80073c4:	4604      	mov	r4, r0
 80073c6:	b180      	cbz	r0, 80073ea <tcp_netif_ip_addr_changed+0x2a>
 80073c8:	6803      	ldr	r3, [r0, #0]
 80073ca:	b173      	cbz	r3, 80073ea <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <tcp_netif_ip_addr_changed+0x40>)
 80073ce:	6819      	ldr	r1, [r3, #0]
 80073d0:	f7ff ff10 	bl	80071f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80073d4:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <tcp_netif_ip_addr_changed+0x44>)
 80073d6:	4620      	mov	r0, r4
 80073d8:	6819      	ldr	r1, [r3, #0]
 80073da:	f7ff ff0b 	bl	80071f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80073de:	b125      	cbz	r5, 80073ea <tcp_netif_ip_addr_changed+0x2a>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	b113      	cbz	r3, 80073ea <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80073e4:	4b08      	ldr	r3, [pc, #32]	; (8007408 <tcp_netif_ip_addr_changed+0x48>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	b903      	cbnz	r3, 80073ec <tcp_netif_ip_addr_changed+0x2c>
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80073f0:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80073f2:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80073f4:	bf04      	itt	eq
 80073f6:	6829      	ldreq	r1, [r5, #0]
 80073f8:	6019      	streq	r1, [r3, #0]
{
 80073fa:	4613      	mov	r3, r2
 80073fc:	e7f4      	b.n	80073e8 <tcp_netif_ip_addr_changed+0x28>
 80073fe:	bf00      	nop
 8007400:	200037ec 	.word	0x200037ec
 8007404:	200037f8 	.word	0x200037f8
 8007408:	200037f4 	.word	0x200037f4

0800740c <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800740c:	68c3      	ldr	r3, [r0, #12]
{
 800740e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007412:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007414:	8998      	ldrh	r0, [r3, #12]
{
 8007416:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007418:	f7fb ffc1 	bl	800339e <lwip_htons>
 800741c:	07c2      	lsls	r2, r0, #31
 800741e:	d415      	bmi.n	800744c <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007420:	4e18      	ldr	r6, [pc, #96]	; (8007484 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8007422:	b1bc      	cbz	r4, 8007454 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007424:	68e7      	ldr	r7, [r4, #12]
 8007426:	6830      	ldr	r0, [r6, #0]
 8007428:	892b      	ldrh	r3, [r5, #8]
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	8922      	ldrh	r2, [r4, #8]
 800742e:	4403      	add	r3, r0
 8007430:	440a      	add	r2, r1
 8007432:	1a9a      	subs	r2, r3, r2
    while (next &&
 8007434:	2a00      	cmp	r2, #0
 8007436:	da10      	bge.n	800745a <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007438:	1a5b      	subs	r3, r3, r1
    if (next &&
 800743a:	2b00      	cmp	r3, #0
 800743c:	dd0a      	ble.n	8007454 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800743e:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8007440:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007442:	b289      	uxth	r1, r1
 8007444:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007446:	f7fe ff31 	bl	80062ac <pbuf_realloc>
 800744a:	e003      	b.n	8007454 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 800744c:	4620      	mov	r0, r4
    next = NULL;
 800744e:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8007450:	f7ff fa48 	bl	80068e4 <tcp_segs_free>
    }
  }
  cseg->next = next;
 8007454:	602c      	str	r4, [r5, #0]
}
 8007456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800745a:	89b8      	ldrh	r0, [r7, #12]
 800745c:	f7fb ff9f 	bl	800339e <lwip_htons>
 8007460:	07c3      	lsls	r3, r0, #31
 8007462:	d509      	bpl.n	8007478 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007464:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007468:	2001      	movs	r0, #1
 800746a:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800746e:	f7fb ff96 	bl	800339e <lwip_htons>
 8007472:	4338      	orrs	r0, r7
 8007474:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8007478:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800747a:	4620      	mov	r0, r4
 800747c:	f7ff fa24 	bl	80068c8 <tcp_seg_free>
      next = next->next;
 8007480:	463c      	mov	r4, r7
 8007482:	e7ce      	b.n	8007422 <tcp_oos_insert_segment+0x16>
 8007484:	20000200 	.word	0x20000200

08007488 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007488:	7d03      	ldrb	r3, [r0, #20]
 800748a:	2b03      	cmp	r3, #3
{
 800748c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007492:	d806      	bhi.n	80074a2 <tcp_receive+0x1a>
 8007494:	4b89      	ldr	r3, [pc, #548]	; (80076bc <tcp_receive+0x234>)
 8007496:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800749a:	4989      	ldr	r1, [pc, #548]	; (80076c0 <tcp_receive+0x238>)
 800749c:	4889      	ldr	r0, [pc, #548]	; (80076c4 <tcp_receive+0x23c>)
 800749e:	f004 f83f 	bl	800b520 <iprintf>

  if (flags & TCP_ACK) {
 80074a2:	4b89      	ldr	r3, [pc, #548]	; (80076c8 <tcp_receive+0x240>)
 80074a4:	4e89      	ldr	r6, [pc, #548]	; (80076cc <tcp_receive+0x244>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f013 0f10 	tst.w	r3, #16
 80074ac:	f000 8180 	beq.w	80077b0 <tcp_receive+0x328>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80074b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80074b2:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80074b4:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80074b8:	1a1d      	subs	r5, r3, r0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80074ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80074bc:	2d00      	cmp	r5, #0
 80074be:	4d84      	ldr	r5, [pc, #528]	; (80076d0 <tcp_receive+0x248>)
 80074c0:	db0d      	blt.n	80074de <tcp_receive+0x56>
 80074c2:	4283      	cmp	r3, r0
 80074c4:	d103      	bne.n	80074ce <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80074c6:	682b      	ldr	r3, [r5, #0]
 80074c8:	1acb      	subs	r3, r1, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	db07      	blt.n	80074de <tcp_receive+0x56>
 80074ce:	682b      	ldr	r3, [r5, #0]
 80074d0:	4299      	cmp	r1, r3
 80074d2:	d11c      	bne.n	800750e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80074d4:	4b7f      	ldr	r3, [pc, #508]	; (80076d4 <tcp_receive+0x24c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	89db      	ldrh	r3, [r3, #14]
 80074da:	4293      	cmp	r3, r2
 80074dc:	d917      	bls.n	800750e <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80074de:	4b7d      	ldr	r3, [pc, #500]	; (80076d4 <tcp_receive+0x24c>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80074e0:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 80074e8:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80074ea:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 80074ec:	6828      	ldr	r0, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80074ee:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 80074f2:	6560      	str	r0, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 80074f4:	bf38      	it	cc
 80074f6:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 80074fa:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 80074fe:	2f00      	cmp	r7, #0
 8007500:	d13c      	bne.n	800757c <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8007502:	b920      	cbnz	r0, 800750e <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 8007504:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 8007506:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800750a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8007514:	4f70      	ldr	r7, [pc, #448]	; (80076d8 <tcp_receive+0x250>)
 8007516:	eba3 000e 	sub.w	r0, r3, lr
 800751a:	2800      	cmp	r0, #0
 800751c:	dc37      	bgt.n	800758e <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 800751e:	486f      	ldr	r0, [pc, #444]	; (80076dc <tcp_receive+0x254>)
 8007520:	8800      	ldrh	r0, [r0, #0]
 8007522:	2800      	cmp	r0, #0
 8007524:	f040 8476 	bne.w	8007e14 <tcp_receive+0x98c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007528:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800752a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800752c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007530:	4401      	add	r1, r0
 8007532:	428a      	cmp	r2, r1
 8007534:	f040 846e 	bne.w	8007e14 <tcp_receive+0x98c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007538:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800753c:	2a00      	cmp	r2, #0
 800753e:	f2c0 8469 	blt.w	8007e14 <tcp_receive+0x98c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007542:	4573      	cmp	r3, lr
 8007544:	f040 8466 	bne.w	8007e14 <tcp_receive+0x98c>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800754c:	1c53      	adds	r3, r2, #1
 800754e:	b2db      	uxtb	r3, r3
 8007550:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8007552:	bf38      	it	cc
 8007554:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007558:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800755c:	2b03      	cmp	r3, #3
 800755e:	d911      	bls.n	8007584 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007560:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007564:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007566:	4413      	add	r3, r2
 8007568:	b29b      	uxth	r3, r3
 800756a:	429a      	cmp	r2, r3
 800756c:	d201      	bcs.n	8007572 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 800756e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007572:	f8df a148 	ldr.w	sl, [pc, #328]	; 80076bc <tcp_receive+0x234>
 8007576:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80076c4 <tcp_receive+0x23c>
 800757a:	e10c      	b.n	8007796 <tcp_receive+0x30e>
      } else if (pcb->persist_backoff > 0) {
 800757c:	2800      	cmp	r0, #0
 800757e:	d0c6      	beq.n	800750e <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	e7c2      	b.n	800750a <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8007584:	d1f5      	bne.n	8007572 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8007586:	4620      	mov	r0, r4
 8007588:	f002 f851 	bl	800962e <tcp_rexmit_fast>
 800758c:	e7f1      	b.n	8007572 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800758e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007590:	1a9a      	subs	r2, r3, r2
 8007592:	2a00      	cmp	r2, #0
 8007594:	f300 808d 	bgt.w	80076b2 <tcp_receive+0x22a>
      if (pcb->flags & TF_INFR) {
 8007598:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800759a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 800759e:	0751      	lsls	r1, r2, #29
      pcb->lastack = ackno;
 80075a0:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 80075a2:	7d23      	ldrb	r3, [r4, #20]
      pcb->nrtx = 0;
 80075a4:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 80075a8:	bf48      	it	mi
 80075aa:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 80075ae:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        pcb->flags &= ~TF_INFR;
 80075b2:	bf44      	itt	mi
 80075b4:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80075b6:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->dupacks = 0;
 80075ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->cwnd = pcb->ssthresh;
 80075be:	bf48      	it	mi
 80075c0:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 80075c4:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80075c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80075c8:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 80075cc:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 80075d0:	d90f      	bls.n	80075f2 <tcp_receive+0x16a>
        if (pcb->cwnd < pcb->ssthresh) {
 80075d2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80075d6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80075da:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80075dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80075de:	bf9c      	itt	ls
 80075e0:	435b      	mulls	r3, r3
 80075e2:	fb93 f3f2 	sdivls	r3, r3, r2
 80075e6:	4413      	add	r3, r2
 80075e8:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80075ea:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 80075ec:	bf38      	it	cc
 80075ee:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80075f2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80076bc <tcp_receive+0x234>
 80075f6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80076c4 <tcp_receive+0x23c>
      while (pcb->unacked != NULL &&
 80075fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80075fc:	b943      	cbnz	r3, 8007610 <tcp_receive+0x188>
      if (pcb->unacked == NULL) {
 80075fe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007600:	2300      	movs	r3, #0
 8007602:	2a00      	cmp	r2, #0
 8007604:	d153      	bne.n	80076ae <tcp_receive+0x226>
        pcb->rtime = -1;
 8007606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800760a:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800760c:	76e3      	strb	r3, [r4, #27]
 800760e:	e7b0      	b.n	8007572 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	6858      	ldr	r0, [r3, #4]
 8007614:	f7fb fec6 	bl	80033a4 <lwip_htonl>
 8007618:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800761a:	4683      	mov	fp, r0
 800761c:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	8998      	ldrh	r0, [r3, #12]
 8007624:	f7fb febb 	bl	800339e <lwip_htons>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	f010 0003 	ands.w	r0, r0, #3
 800762e:	eba8 0803 	sub.w	r8, r8, r3
 8007632:	bf18      	it	ne
 8007634:	2001      	movne	r0, #1
 8007636:	44d8      	add	r8, fp
 8007638:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 800763a:	f1b8 0f00 	cmp.w	r8, #0
 800763e:	dcde      	bgt.n	80075fe <tcp_receive+0x176>
        next = pcb->unacked;
 8007640:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007644:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8007648:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800764c:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 8007650:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007652:	f7fe fe9b 	bl	800638c <pbuf_clen>
 8007656:	4583      	cmp	fp, r0
 8007658:	d206      	bcs.n	8007668 <tcp_receive+0x1e0>
 800765a:	464b      	mov	r3, r9
 800765c:	f240 429e 	movw	r2, #1182	; 0x49e
 8007660:	491f      	ldr	r1, [pc, #124]	; (80076e0 <tcp_receive+0x258>)
 8007662:	4650      	mov	r0, sl
 8007664:	f003 ff5c 	bl	800b520 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007668:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800766c:	f7fe fe8e 	bl	800638c <pbuf_clen>
 8007670:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8007674:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007676:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8007678:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800767c:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800767e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 8007682:	4640      	mov	r0, r8
        recv_acked += next->len;
 8007684:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8007686:	f7ff f91f 	bl	80068c8 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 800768a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0b3      	beq.n	80075fa <tcp_receive+0x172>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007692:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1b0      	bne.n	80075fa <tcp_receive+0x172>
 8007698:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1ad      	bne.n	80075fa <tcp_receive+0x172>
 800769e:	464b      	mov	r3, r9
 80076a0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80076a4:	490f      	ldr	r1, [pc, #60]	; (80076e4 <tcp_receive+0x25c>)
 80076a6:	4650      	mov	r0, sl
 80076a8:	f003 ff3a 	bl	800b520 <iprintf>
 80076ac:	e7a5      	b.n	80075fa <tcp_receive+0x172>
        pcb->rtime = 0;
 80076ae:	8623      	strh	r3, [r4, #48]	; 0x30
 80076b0:	e7ac      	b.n	800760c <tcp_receive+0x184>
      tcp_send_empty_ack(pcb);
 80076b2:	4620      	mov	r0, r4
 80076b4:	f001 fd68 	bl	8009188 <tcp_send_empty_ack>
 80076b8:	e75b      	b.n	8007572 <tcp_receive+0xea>
 80076ba:	bf00      	nop
 80076bc:	0800db66 	.word	0x0800db66
 80076c0:	0800db98 	.word	0x0800db98
 80076c4:	0800c987 	.word	0x0800c987
 80076c8:	200001e0 	.word	0x200001e0
 80076cc:	20000200 	.word	0x20000200
 80076d0:	200001dc 	.word	0x200001dc
 80076d4:	20000208 	.word	0x20000208
 80076d8:	200001f4 	.word	0x200001f4
 80076dc:	20000216 	.word	0x20000216
 80076e0:	0800dbb1 	.word	0x0800dbb1
 80076e4:	0800dbd9 	.word	0x0800dbd9
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80076e8:	682a      	ldr	r2, [r5, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	9201      	str	r2, [sp, #4]
 80076ee:	6858      	ldr	r0, [r3, #4]
 80076f0:	f7fb fe58 	bl	80033a4 <lwip_htonl>
 80076f4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80076f6:	4683      	mov	fp, r0
 80076f8:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	8998      	ldrh	r0, [r3, #12]
 8007700:	f7fb fe4d 	bl	800339e <lwip_htons>
 8007704:	9a01      	ldr	r2, [sp, #4]
 8007706:	f010 0003 	ands.w	r0, r0, #3
 800770a:	eba2 0808 	sub.w	r8, r2, r8
 800770e:	bf18      	it	ne
 8007710:	2001      	movne	r0, #1
 8007712:	eba8 080b 	sub.w	r8, r8, fp
 8007716:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 800771a:	f1b8 0f00 	cmp.w	r8, #0
 800771e:	db3d      	blt.n	800779c <tcp_receive+0x314>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	2b00      	cmp	r3, #0
 8007728:	dc38      	bgt.n	800779c <tcp_receive+0x314>
      next = pcb->unsent;
 800772a:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800772e:	f8d8 3000 	ldr.w	r3, [r8]
 8007732:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8007734:	b90b      	cbnz	r3, 800773a <tcp_receive+0x2b2>
        pcb->unsent_oversize = 0;
 8007736:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800773a:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800773e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007742:	f7fe fe23 	bl	800638c <pbuf_clen>
 8007746:	4583      	cmp	fp, r0
 8007748:	d206      	bcs.n	8007758 <tcp_receive+0x2d0>
 800774a:	4653      	mov	r3, sl
 800774c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007750:	49ba      	ldr	r1, [pc, #744]	; (8007a3c <tcp_receive+0x5b4>)
 8007752:	4648      	mov	r0, r9
 8007754:	f003 fee4 	bl	800b520 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007758:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800775c:	f7fe fe16 	bl	800638c <pbuf_clen>
 8007760:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8007764:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007766:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8007768:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800776c:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800776e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 8007772:	4640      	mov	r0, r8
      recv_acked += next->len;
 8007774:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8007776:	f7ff f8a7 	bl	80068c8 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800777a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800777e:	b153      	cbz	r3, 8007796 <tcp_receive+0x30e>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8007780:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007782:	b943      	cbnz	r3, 8007796 <tcp_receive+0x30e>
 8007784:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007786:	b933      	cbnz	r3, 8007796 <tcp_receive+0x30e>
 8007788:	4653      	mov	r3, sl
 800778a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800778e:	49ac      	ldr	r1, [pc, #688]	; (8007a40 <tcp_receive+0x5b8>)
 8007790:	4648      	mov	r0, r9
 8007792:	f003 fec5 	bl	800b520 <iprintf>
    while (pcb->unsent != NULL &&
 8007796:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1a5      	bne.n	80076e8 <tcp_receive+0x260>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800779c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80077a0:	883a      	ldrh	r2, [r7, #0]
 80077a2:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80077a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 80077a6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	f040 8117 	bne.w	80079de <tcp_receive+0x556>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80077b0:	4fa4      	ldr	r7, [pc, #656]	; (8007a44 <tcp_receive+0x5bc>)
 80077b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077b4:	8838      	ldrh	r0, [r7, #0]
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f000 831f 	beq.w	8007dfa <tcp_receive+0x972>
 80077bc:	7d23      	ldrb	r3, [r4, #20]
 80077be:	2b06      	cmp	r3, #6
 80077c0:	f200 831b 	bhi.w	8007dfa <tcp_receive+0x972>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80077c4:	6833      	ldr	r3, [r6, #0]
 80077c6:	1ad5      	subs	r5, r2, r3
 80077c8:	2d01      	cmp	r5, #1
 80077ca:	f100 815c 	bmi.w	8007a86 <tcp_receive+0x5fe>
 80077ce:	f1c3 0101 	rsb	r1, r3, #1
 80077d2:	1a09      	subs	r1, r1, r0
 80077d4:	4411      	add	r1, r2
 80077d6:	2900      	cmp	r1, #0
 80077d8:	f300 8155 	bgt.w	8007a86 <tcp_receive+0x5fe>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80077dc:	4b9a      	ldr	r3, [pc, #616]	; (8007a48 <tcp_receive+0x5c0>)
      off = pcb->rcv_nxt - seqno;
 80077de:	46aa      	mov	sl, r5
      struct pbuf *p = inseg.p;
 80077e0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80077e4:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80077e6:	f1b9 0f00 	cmp.w	r9, #0
 80077ea:	d106      	bne.n	80077fa <tcp_receive+0x372>
 80077ec:	4b97      	ldr	r3, [pc, #604]	; (8007a4c <tcp_receive+0x5c4>)
 80077ee:	f240 523c 	movw	r2, #1340	; 0x53c
 80077f2:	4997      	ldr	r1, [pc, #604]	; (8007a50 <tcp_receive+0x5c8>)
 80077f4:	4897      	ldr	r0, [pc, #604]	; (8007a54 <tcp_receive+0x5cc>)
 80077f6:	f003 fe93 	bl	800b520 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80077fa:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80077fe:	429d      	cmp	r5, r3
 8007800:	dd06      	ble.n	8007810 <tcp_receive+0x388>
 8007802:	4b92      	ldr	r3, [pc, #584]	; (8007a4c <tcp_receive+0x5c4>)
 8007804:	f240 523d 	movw	r2, #1341	; 0x53d
 8007808:	4993      	ldr	r1, [pc, #588]	; (8007a58 <tcp_receive+0x5d0>)
 800780a:	4892      	ldr	r0, [pc, #584]	; (8007a54 <tcp_receive+0x5cc>)
 800780c:	f003 fe88 	bl	800b520 <iprintf>
      if (inseg.p->len < off) {
 8007810:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007814:	8943      	ldrh	r3, [r0, #10]
 8007816:	429d      	cmp	r5, r3
 8007818:	f340 812a 	ble.w	8007a70 <tcp_receive+0x5e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800781c:	8903      	ldrh	r3, [r0, #8]
 800781e:	429d      	cmp	r5, r3
 8007820:	dd06      	ble.n	8007830 <tcp_receive+0x3a8>
 8007822:	4b8a      	ldr	r3, [pc, #552]	; (8007a4c <tcp_receive+0x5c4>)
 8007824:	f240 523f 	movw	r2, #1343	; 0x53f
 8007828:	498c      	ldr	r1, [pc, #560]	; (8007a5c <tcp_receive+0x5d4>)
 800782a:	488a      	ldr	r0, [pc, #552]	; (8007a54 <tcp_receive+0x5cc>)
 800782c:	f003 fe78 	bl	800b520 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007830:	f8d8 3004 	ldr.w	r3, [r8, #4]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8007834:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007836:	8919      	ldrh	r1, [r3, #8]
 8007838:	1b4d      	subs	r5, r1, r5
 800783a:	b2ad      	uxth	r5, r5
        while (p->len < off) {
 800783c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8007840:	459a      	cmp	sl, r3
 8007842:	f300 80f1 	bgt.w	8007a28 <tcp_receive+0x5a0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8007846:	f1ca 0100 	rsb	r1, sl, #0
 800784a:	4648      	mov	r0, r9
 800784c:	b209      	sxth	r1, r1
 800784e:	f7fe fbe5 	bl	800601c <pbuf_header>
 8007852:	b130      	cbz	r0, 8007862 <tcp_receive+0x3da>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007854:	4b7d      	ldr	r3, [pc, #500]	; (8007a4c <tcp_receive+0x5c4>)
 8007856:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800785a:	4981      	ldr	r1, [pc, #516]	; (8007a60 <tcp_receive+0x5d8>)
 800785c:	487d      	ldr	r0, [pc, #500]	; (8007a54 <tcp_receive+0x5cc>)
 800785e:	f003 fe5f 	bl	800b520 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8007862:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8007866:	6833      	ldr	r3, [r6, #0]
 8007868:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800786a:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800786c:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007874:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007878:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800787a:	6831      	ldr	r1, [r6, #0]
 800787c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800787e:	1a8b      	subs	r3, r1, r2
 8007880:	2b00      	cmp	r3, #0
 8007882:	f2c0 82b4 	blt.w	8007dee <tcp_receive+0x966>
 8007886:	1c4b      	adds	r3, r1, #1
 8007888:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	1a1b      	subs	r3, r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	f300 82ad 	bgt.w	8007dee <tcp_receive+0x966>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007894:	4291      	cmp	r1, r2
 8007896:	f040 81ca 	bne.w	8007c2e <tcp_receive+0x7a6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800789a:	4d6b      	ldr	r5, [pc, #428]	; (8007a48 <tcp_receive+0x5c0>)
 800789c:	68eb      	ldr	r3, [r5, #12]
 800789e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80078a2:	8998      	ldrh	r0, [r3, #12]
 80078a4:	f7fb fd7b 	bl	800339e <lwip_htons>
 80078a8:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 80078ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 80078ae:	bf18      	it	ne
 80078b0:	2001      	movne	r0, #1
 80078b2:	4440      	add	r0, r8
 80078b4:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 80078b6:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 80078b8:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 80078ba:	d241      	bcs.n	8007940 <tcp_receive+0x4b8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80078bc:	68eb      	ldr	r3, [r5, #12]
 80078be:	8998      	ldrh	r0, [r3, #12]
 80078c0:	f7fb fd6d 	bl	800339e <lwip_htons>
 80078c4:	07c2      	lsls	r2, r0, #31
 80078c6:	d510      	bpl.n	80078ea <tcp_receive+0x462>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80078c8:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80078cc:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80078d0:	4640      	mov	r0, r8
 80078d2:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80078d6:	f7fb fd62 	bl	800339e <lwip_htons>
 80078da:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80078de:	f7fb fd5e 	bl	800339e <lwip_htons>
 80078e2:	ea40 0808 	orr.w	r8, r0, r8
 80078e6:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80078ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80078ec:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80078ee:	68eb      	ldr	r3, [r5, #12]
 80078f0:	8998      	ldrh	r0, [r3, #12]
 80078f2:	f7fb fd54 	bl	800339e <lwip_htons>
 80078f6:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 80078f8:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80078fa:	bf42      	ittt	mi
 80078fc:	892b      	ldrhmi	r3, [r5, #8]
 80078fe:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8007902:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8007904:	8929      	ldrh	r1, [r5, #8]
 8007906:	f7fe fcd1 	bl	80062ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800790a:	68eb      	ldr	r3, [r5, #12]
 800790c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8007910:	8998      	ldrh	r0, [r3, #12]
 8007912:	f7fb fd44 	bl	800339e <lwip_htons>
 8007916:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800791a:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800791c:	bf18      	it	ne
 800791e:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007920:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8007922:	4440      	add	r0, r8
 8007924:	b280      	uxth	r0, r0
 8007926:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007928:	4418      	add	r0, r3
 800792a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800792c:	4413      	add	r3, r2
 800792e:	4298      	cmp	r0, r3
 8007930:	d006      	beq.n	8007940 <tcp_receive+0x4b8>
 8007932:	4b46      	ldr	r3, [pc, #280]	; (8007a4c <tcp_receive+0x5c4>)
 8007934:	f240 527f 	movw	r2, #1407	; 0x57f
 8007938:	494a      	ldr	r1, [pc, #296]	; (8007a64 <tcp_receive+0x5dc>)
 800793a:	4846      	ldr	r0, [pc, #280]	; (8007a54 <tcp_receive+0x5cc>)
 800793c:	f003 fdf0 	bl	800b520 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8007940:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 80ae 	beq.w	8007aa4 <tcp_receive+0x61c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007948:	68eb      	ldr	r3, [r5, #12]
 800794a:	8998      	ldrh	r0, [r3, #12]
 800794c:	f7fb fd27 	bl	800339e <lwip_htons>
 8007950:	07c0      	lsls	r0, r0, #31
 8007952:	f100 80a4 	bmi.w	8007a9e <tcp_receive+0x616>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8007956:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800795a:	f1b8 0f00 	cmp.w	r8, #0
 800795e:	d03b      	beq.n	80079d8 <tcp_receive+0x550>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8007960:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8007964:	6830      	ldr	r0, [r6, #0]
 8007966:	883b      	ldrh	r3, [r7, #0]
 8007968:	f8de 2004 	ldr.w	r2, [lr, #4]
 800796c:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8007970:	4403      	add	r3, r0
 8007972:	4411      	add	r1, r2
 8007974:	1a59      	subs	r1, r3, r1
            while (next &&
 8007976:	2900      	cmp	r1, #0
 8007978:	f280 80d1 	bge.w	8007b1e <tcp_receive+0x696>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 800797c:	1a9b      	subs	r3, r3, r2
            if (next &&
 800797e:	2b00      	cmp	r3, #0
 8007980:	dd2a      	ble.n	80079d8 <tcp_receive+0x550>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007982:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007984:	1a12      	subs	r2, r2, r0
 8007986:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007988:	8998      	ldrh	r0, [r3, #12]
 800798a:	f7fb fd08 	bl	800339e <lwip_htons>
 800798e:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007990:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8007992:	bf42      	ittt	mi
 8007994:	892b      	ldrhmi	r3, [r5, #8]
 8007996:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800799a:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800799c:	8929      	ldrh	r1, [r5, #8]
 800799e:	f7fe fc85 	bl	80062ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80079a2:	68eb      	ldr	r3, [r5, #12]
 80079a4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80079a8:	8998      	ldrh	r0, [r3, #12]
 80079aa:	f7fb fcf8 	bl	800339e <lwip_htons>
 80079ae:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80079b2:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 80079b4:	bf18      	it	ne
 80079b6:	2001      	movne	r0, #1
 80079b8:	4448      	add	r0, r9
 80079ba:	b280      	uxth	r0, r0
 80079bc:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80079be:	4418      	add	r0, r3
 80079c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4298      	cmp	r0, r3
 80079c8:	d006      	beq.n	80079d8 <tcp_receive+0x550>
 80079ca:	4b20      	ldr	r3, [pc, #128]	; (8007a4c <tcp_receive+0x5c4>)
 80079cc:	f240 52af 	movw	r2, #1455	; 0x5af
 80079d0:	4925      	ldr	r1, [pc, #148]	; (8007a68 <tcp_receive+0x5e0>)
 80079d2:	4820      	ldr	r0, [pc, #128]	; (8007a54 <tcp_receive+0x5cc>)
 80079d4:	f003 fda4 	bl	800b520 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80079d8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 80079dc:	e062      	b.n	8007aa4 <tcp_receive+0x61c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80079de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80079e0:	6829      	ldr	r1, [r5, #0]
 80079e2:	1a5b      	subs	r3, r3, r1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f6bf aee3 	bge.w	80077b0 <tcp_receive+0x328>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80079ea:	4b20      	ldr	r3, [pc, #128]	; (8007a6c <tcp_receive+0x5e4>)
      m = m - (pcb->sa >> 3);
 80079ec:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80079f0:	6819      	ldr	r1, [r3, #0]
 80079f2:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 80079f4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 80079f8:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 80079fc:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 8007a00:	b289      	uxth	r1, r1
 8007a02:	b20b      	sxth	r3, r1
      pcb->sa += m;
 8007a04:	4408      	add	r0, r1
      if (m < 0) {
 8007a06:	2b00      	cmp	r3, #0
      pcb->sa += m;
 8007a08:	b200      	sxth	r0, r0
        m = -m;
 8007a0a:	bfb8      	it	lt
 8007a0c:	4249      	neglt	r1, r1
      pcb->sa += m;
 8007a0e:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 8007a10:	bfb8      	it	lt
 8007a12:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8007a14:	4413      	add	r3, r2
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007a1a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8007a1e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	6363      	str	r3, [r4, #52]	; 0x34
 8007a26:	e6c3      	b.n	80077b0 <tcp_receive+0x328>
          p->tot_len = new_tot_len;
 8007a28:	f8a9 5008 	strh.w	r5, [r9, #8]
          off -= p->len;
 8007a2c:	ebaa 0a03 	sub.w	sl, sl, r3
          p->len = 0;
 8007a30:	f8a9 200a 	strh.w	r2, [r9, #10]
          p = p->next;
 8007a34:	f8d9 9000 	ldr.w	r9, [r9]
 8007a38:	e700      	b.n	800783c <tcp_receive+0x3b4>
 8007a3a:	bf00      	nop
 8007a3c:	0800dbb1 	.word	0x0800dbb1
 8007a40:	0800dbd9 	.word	0x0800dbd9
 8007a44:	20000216 	.word	0x20000216
 8007a48:	200001e4 	.word	0x200001e4
 8007a4c:	0800db66 	.word	0x0800db66
 8007a50:	0800dbf9 	.word	0x0800dbf9
 8007a54:	0800c987 	.word	0x0800c987
 8007a58:	0800dc09 	.word	0x0800dc09
 8007a5c:	0800dc18 	.word	0x0800dc18
 8007a60:	0800dc28 	.word	0x0800dc28
 8007a64:	0800dc3b 	.word	0x0800dc3b
 8007a68:	0800dc72 	.word	0x0800dc72
 8007a6c:	200037f0 	.word	0x200037f0
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8007a70:	4269      	negs	r1, r5
 8007a72:	b209      	sxth	r1, r1
 8007a74:	f7fe fad2 	bl	800601c <pbuf_header>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	f43f aef2 	beq.w	8007862 <tcp_receive+0x3da>
          LWIP_ASSERT("pbuf_header failed", 0);
 8007a7e:	4b9d      	ldr	r3, [pc, #628]	; (8007cf4 <tcp_receive+0x86c>)
 8007a80:	f240 5251 	movw	r2, #1361	; 0x551
 8007a84:	e6e9      	b.n	800785a <tcp_receive+0x3d2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8007a8a:	bfbe      	ittt	lt
 8007a8c:	7ea3      	ldrblt	r3, [r4, #26]
 8007a8e:	f043 0302 	orrlt.w	r3, r3, #2
 8007a92:	76a3      	strblt	r3, [r4, #26]
 8007a94:	e6f1      	b.n	800787a <tcp_receive+0x3f2>
              pcb->ooseq = pcb->ooseq->next;
 8007a96:	6803      	ldr	r3, [r0, #0]
 8007a98:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8007a9a:	f7fe ff15 	bl	80068c8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007a9e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d1f8      	bne.n	8007a96 <tcp_receive+0x60e>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007aa4:	883a      	ldrh	r2, [r7, #0]
 8007aa6:	6833      	ldr	r3, [r6, #0]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007aac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d206      	bcs.n	8007ac0 <tcp_receive+0x638>
 8007ab2:	4b90      	ldr	r3, [pc, #576]	; (8007cf4 <tcp_receive+0x86c>)
 8007ab4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8007ab8:	498f      	ldr	r1, [pc, #572]	; (8007cf8 <tcp_receive+0x870>)
 8007aba:	4890      	ldr	r0, [pc, #576]	; (8007cfc <tcp_receive+0x874>)
 8007abc:	f003 fd30 	bl	800b520 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8007ac0:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007ac2:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8007ac4:	883a      	ldrh	r2, [r7, #0]
 8007ac6:	1a9b      	subs	r3, r3, r2
 8007ac8:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8007aca:	f7fe fe91 	bl	80067f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007ace:	686b      	ldr	r3, [r5, #4]
 8007ad0:	891a      	ldrh	r2, [r3, #8]
 8007ad2:	b11a      	cbz	r2, 8007adc <tcp_receive+0x654>
          recv_data = inseg.p;
 8007ad4:	4a8a      	ldr	r2, [pc, #552]	; (8007d00 <tcp_receive+0x878>)
 8007ad6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007adc:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007ade:	4f85      	ldr	r7, [pc, #532]	; (8007cf4 <tcp_receive+0x86c>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007ae0:	8998      	ldrh	r0, [r3, #12]
 8007ae2:	f7fb fc5c 	bl	800339e <lwip_htons>
 8007ae6:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007ae8:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8007d0c <tcp_receive+0x884>
          recv_flags |= TF_GOT_FIN;
 8007aec:	bf48      	it	mi
 8007aee:	4a85      	ldrmi	r2, [pc, #532]	; (8007d04 <tcp_receive+0x87c>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007af0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007cfc <tcp_receive+0x874>
          recv_flags |= TF_GOT_FIN;
 8007af4:	bf42      	ittt	mi
 8007af6:	7813      	ldrbmi	r3, [r2, #0]
 8007af8:	f043 0320 	orrmi.w	r3, r3, #32
 8007afc:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8007afe:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007b00:	b125      	cbz	r5, 8007b0c <tcp_receive+0x684>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007b02:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8007b04:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007b06:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	d033      	beq.n	8007b74 <tcp_receive+0x6ec>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007b0c:	7ea3      	ldrb	r3, [r4, #26]
 8007b0e:	07d9      	lsls	r1, r3, #31
 8007b10:	f140 8087 	bpl.w	8007c22 <tcp_receive+0x79a>
 8007b14:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8007b18:	f043 0302 	orr.w	r3, r3, #2
 8007b1c:	e083      	b.n	8007c26 <tcp_receive+0x79e>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007b1e:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8007b22:	f7fb fc3c 	bl	800339e <lwip_htons>
 8007b26:	07c1      	lsls	r1, r0, #31
 8007b28:	d51d      	bpl.n	8007b66 <tcp_receive+0x6de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007b2a:	68eb      	ldr	r3, [r5, #12]
 8007b2c:	8998      	ldrh	r0, [r3, #12]
 8007b2e:	f7fb fc36 	bl	800339e <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007b32:	0782      	lsls	r2, r0, #30
 8007b34:	d417      	bmi.n	8007b66 <tcp_receive+0x6de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007b36:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8007b40:	f7fb fc2d 	bl	800339e <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8007b44:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007b46:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8007b4a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007b4e:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8007b52:	8998      	ldrh	r0, [r3, #12]
 8007b54:	f7fb fc23 	bl	800339e <lwip_htons>
 8007b58:	f010 0003 	ands.w	r0, r0, #3
 8007b5c:	bf18      	it	ne
 8007b5e:	2001      	movne	r0, #1
 8007b60:	4481      	add	r9, r0
 8007b62:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8007b66:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	f7fe feac 	bl	80068c8 <tcp_seg_free>
              next = next->next;
 8007b70:	46c8      	mov	r8, r9
 8007b72:	e6f2      	b.n	800795a <tcp_receive+0x4d2>
          seqno = pcb->ooseq->tcphdr->seqno;
 8007b74:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007b76:	8990      	ldrh	r0, [r2, #12]
 8007b78:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007b7c:	f7fb fc0f 	bl	800339e <lwip_htons>
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007b86:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007b8a:	bf18      	it	ne
 8007b8c:	2001      	movne	r0, #1
 8007b8e:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007b90:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007b92:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007b94:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007b98:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007b9a:	8998      	ldrh	r0, [r3, #12]
 8007b9c:	f7fb fbff 	bl	800339e <lwip_htons>
 8007ba0:	f010 0003 	ands.w	r0, r0, #3
 8007ba4:	bf18      	it	ne
 8007ba6:	2001      	movne	r0, #1
 8007ba8:	4458      	add	r0, fp
 8007baa:	4582      	cmp	sl, r0
 8007bac:	d206      	bcs.n	8007bbc <tcp_receive+0x734>
 8007bae:	463b      	mov	r3, r7
 8007bb0:	f240 52de 	movw	r2, #1502	; 0x5de
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	4648      	mov	r0, r9
 8007bb8:	f003 fcb2 	bl	800b520 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007bbc:	68eb      	ldr	r3, [r5, #12]
 8007bbe:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007bc2:	8998      	ldrh	r0, [r3, #12]
 8007bc4:	f7fb fbeb 	bl	800339e <lwip_htons>
 8007bc8:	f010 0003 	ands.w	r0, r0, #3
 8007bcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007bce:	bf18      	it	ne
 8007bd0:	2001      	movne	r0, #1
 8007bd2:	4450      	add	r0, sl
 8007bd4:	1a18      	subs	r0, r3, r0
 8007bd6:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f7fe fe09 	bl	80067f0 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8007bde:	6869      	ldr	r1, [r5, #4]
 8007be0:	890b      	ldrh	r3, [r1, #8]
 8007be2:	b133      	cbz	r3, 8007bf2 <tcp_receive+0x76a>
            if (recv_data) {
 8007be4:	4b46      	ldr	r3, [pc, #280]	; (8007d00 <tcp_receive+0x878>)
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	b1c8      	cbz	r0, 8007c1e <tcp_receive+0x796>
              pbuf_cat(recv_data, cseg->p);
 8007bea:	f7fe fbeb 	bl	80063c4 <pbuf_cat>
            cseg->p = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007bf2:	68eb      	ldr	r3, [r5, #12]
 8007bf4:	8998      	ldrh	r0, [r3, #12]
 8007bf6:	f7fb fbd2 	bl	800339e <lwip_htons>
 8007bfa:	07c0      	lsls	r0, r0, #31
 8007bfc:	d509      	bpl.n	8007c12 <tcp_receive+0x78a>
            recv_flags |= TF_GOT_FIN;
 8007bfe:	4a41      	ldr	r2, [pc, #260]	; (8007d04 <tcp_receive+0x87c>)
 8007c00:	7813      	ldrb	r3, [r2, #0]
 8007c02:	f043 0320 	orr.w	r3, r3, #32
 8007c06:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007c08:	7d23      	ldrb	r3, [r4, #20]
 8007c0a:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8007c0c:	bf04      	itt	eq
 8007c0e:	2307      	moveq	r3, #7
 8007c10:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8007c12:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8007c14:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8007c16:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8007c18:	f7fe fe56 	bl	80068c8 <tcp_seg_free>
 8007c1c:	e76f      	b.n	8007afe <tcp_receive+0x676>
              recv_data = cseg->p;
 8007c1e:	6019      	str	r1, [r3, #0]
 8007c20:	e7e5      	b.n	8007bee <tcp_receive+0x766>
        tcp_ack(pcb);
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8007c28:	b003      	add	sp, #12
 8007c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f001 faaa 	bl	8009188 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8007c34:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007c36:	b925      	cbnz	r5, 8007c42 <tcp_receive+0x7ba>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007c38:	4833      	ldr	r0, [pc, #204]	; (8007d08 <tcp_receive+0x880>)
 8007c3a:	f7fe fe5b 	bl	80068f4 <tcp_seg_copy>
 8007c3e:	6720      	str	r0, [r4, #112]	; 0x70
 8007c40:	e7f2      	b.n	8007c28 <tcp_receive+0x7a0>
            if (seqno == next->tcphdr->seqno) {
 8007c42:	6833      	ldr	r3, [r6, #0]
 8007c44:	f04f 0800 	mov.w	r8, #0
 8007c48:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8007c4c:	f103 0c01 	add.w	ip, r3, #1
 8007c50:	68e8      	ldr	r0, [r5, #12]
 8007c52:	6842      	ldr	r2, [r0, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d117      	bne.n	8007c88 <tcp_receive+0x800>
              if (inseg.len > next->len) {
 8007c58:	482b      	ldr	r0, [pc, #172]	; (8007d08 <tcp_receive+0x880>)
 8007c5a:	892b      	ldrh	r3, [r5, #8]
 8007c5c:	8902      	ldrh	r2, [r0, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d9e2      	bls.n	8007c28 <tcp_receive+0x7a0>
                cseg = tcp_seg_copy(&inseg);
 8007c62:	f7fe fe47 	bl	80068f4 <tcp_seg_copy>
                if (cseg != NULL) {
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d0de      	beq.n	8007c28 <tcp_receive+0x7a0>
                  if (prev != NULL) {
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	d009      	beq.n	8007c84 <tcp_receive+0x7fc>
                    prev->next = cseg;
 8007c70:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007c74:	4629      	mov	r1, r5
}
 8007c76:	b003      	add	sp, #12
 8007c78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8007c7c:	f7ff bbc6 	b.w	800740c <tcp_oos_insert_segment>
 8007c80:	460d      	mov	r5, r1
 8007c82:	e7e5      	b.n	8007c50 <tcp_receive+0x7c8>
                    pcb->ooseq = cseg;
 8007c84:	6720      	str	r0, [r4, #112]	; 0x70
 8007c86:	e7f5      	b.n	8007c74 <tcp_receive+0x7ec>
              if (prev == NULL) {
 8007c88:	f1b8 0f00 	cmp.w	r8, #0
 8007c8c:	d109      	bne.n	8007ca2 <tcp_receive+0x81a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007c8e:	1a99      	subs	r1, r3, r2
 8007c90:	2900      	cmp	r1, #0
 8007c92:	da3d      	bge.n	8007d10 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8007c94:	481c      	ldr	r0, [pc, #112]	; (8007d08 <tcp_receive+0x880>)
 8007c96:	f7fe fe2d 	bl	80068f4 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d0c4      	beq.n	8007c28 <tcp_receive+0x7a0>
                    pcb->ooseq = cseg;
 8007c9e:	6720      	str	r0, [r4, #112]	; 0x70
 8007ca0:	e7e8      	b.n	8007c74 <tcp_receive+0x7ec>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007ca2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007ca6:	6849      	ldr	r1, [r1, #4]
 8007ca8:	ebae 0101 	sub.w	r1, lr, r1
 8007cac:	2900      	cmp	r1, #0
 8007cae:	db2f      	blt.n	8007d10 <tcp_receive+0x888>
 8007cb0:	ebac 0102 	sub.w	r1, ip, r2
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	dc2b      	bgt.n	8007d10 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8007cb8:	4813      	ldr	r0, [pc, #76]	; (8007d08 <tcp_receive+0x880>)
 8007cba:	f7fe fe1b 	bl	80068f4 <tcp_seg_copy>
                  if (cseg != NULL) {
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d0b1      	beq.n	8007c28 <tcp_receive+0x7a0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007cc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cc8:	6831      	ldr	r1, [r6, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	1a5b      	subs	r3, r3, r1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dd07      	ble.n	8007ce8 <tcp_receive+0x860>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007cd8:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 8007cda:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007cde:	b289      	uxth	r1, r1
 8007ce0:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007ce4:	f7fe fae2 	bl	80062ac <pbuf_realloc>
                    prev->next = cseg;
 8007ce8:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8007cec:	4629      	mov	r1, r5
 8007cee:	4620      	mov	r0, r4
 8007cf0:	e7c1      	b.n	8007c76 <tcp_receive+0x7ee>
 8007cf2:	bf00      	nop
 8007cf4:	0800db66 	.word	0x0800db66
 8007cf8:	0800dcad 	.word	0x0800dcad
 8007cfc:	0800c987 	.word	0x0800c987
 8007d00:	200001f8 	.word	0x200001f8
 8007d04:	200001fc 	.word	0x200001fc
 8007d08:	200001e4 	.word	0x200001e4
 8007d0c:	0800dccc 	.word	0x0800dccc
              if (next->next == NULL &&
 8007d10:	6829      	ldr	r1, [r5, #0]
 8007d12:	46a8      	mov	r8, r5
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d1b3      	bne.n	8007c80 <tcp_receive+0x7f8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007d18:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dd84      	ble.n	8007c28 <tcp_receive+0x7a0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007d1e:	8980      	ldrh	r0, [r0, #12]
 8007d20:	f7fb fb3d 	bl	800339e <lwip_htons>
 8007d24:	07c2      	lsls	r2, r0, #31
 8007d26:	f53f af7f 	bmi.w	8007c28 <tcp_receive+0x7a0>
                next->next = tcp_seg_copy(&inseg);
 8007d2a:	483d      	ldr	r0, [pc, #244]	; (8007e20 <tcp_receive+0x998>)
 8007d2c:	f7fe fde2 	bl	80068f4 <tcp_seg_copy>
 8007d30:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f43f af78 	beq.w	8007c28 <tcp_receive+0x7a0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007d38:	68eb      	ldr	r3, [r5, #12]
 8007d3a:	6831      	ldr	r1, [r6, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	892b      	ldrh	r3, [r5, #8]
 8007d40:	4413      	add	r3, r2
 8007d42:	1a5b      	subs	r3, r3, r1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dd05      	ble.n	8007d54 <tcp_receive+0x8cc>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007d48:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 8007d4a:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007d4c:	b289      	uxth	r1, r1
 8007d4e:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8007d50:	f7fe faac 	bl	80062ac <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007d54:	6832      	ldr	r2, [r6, #0]
 8007d56:	883b      	ldrh	r3, [r7, #0]
 8007d58:	4413      	add	r3, r2
 8007d5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d5c:	1a9b      	subs	r3, r3, r2
 8007d5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007d60:	1a9b      	subs	r3, r3, r2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f77f af60 	ble.w	8007c28 <tcp_receive+0x7a0>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	8998      	ldrh	r0, [r3, #12]
 8007d6e:	f7fb fb16 	bl	800339e <lwip_htons>
 8007d72:	07c3      	lsls	r3, r0, #31
 8007d74:	d511      	bpl.n	8007d9a <tcp_receive+0x912>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007d76:	682b      	ldr	r3, [r5, #0]
 8007d78:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8007d7c:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8007d80:	4640      	mov	r0, r8
 8007d82:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8007d86:	f7fb fb0a 	bl	800339e <lwip_htons>
 8007d8a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007d8e:	f7fb fb06 	bl	800339e <lwip_htons>
 8007d92:	ea40 0808 	orr.w	r8, r0, r8
 8007d96:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007d9a:	6832      	ldr	r2, [r6, #0]
 8007d9c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007d9e:	682b      	ldr	r3, [r5, #0]
 8007da0:	1a89      	subs	r1, r1, r2
 8007da2:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8007da4:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007da6:	4411      	add	r1, r2
 8007da8:	b289      	uxth	r1, r1
 8007daa:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007dac:	f7fe fa7e 	bl	80062ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	891d      	ldrh	r5, [r3, #8]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	8998      	ldrh	r0, [r3, #12]
 8007db8:	f7fb faf1 	bl	800339e <lwip_htons>
 8007dbc:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007dc0:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8007dc2:	bf18      	it	ne
 8007dc4:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007dc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8007dc8:	4428      	add	r0, r5
 8007dca:	b280      	uxth	r0, r0
 8007dcc:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007dce:	4418      	add	r0, r3
 8007dd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007dd2:	4413      	add	r3, r2
 8007dd4:	4298      	cmp	r0, r3
 8007dd6:	f43f af27 	beq.w	8007c28 <tcp_receive+0x7a0>
 8007dda:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <tcp_receive+0x99c>)
 8007ddc:	f240 627b 	movw	r2, #1659	; 0x67b
 8007de0:	4911      	ldr	r1, [pc, #68]	; (8007e28 <tcp_receive+0x9a0>)
 8007de2:	4812      	ldr	r0, [pc, #72]	; (8007e2c <tcp_receive+0x9a4>)
}
 8007de4:	b003      	add	sp, #12
 8007de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007dea:	f003 bb99 	b.w	800b520 <iprintf>
      tcp_send_empty_ack(pcb);
 8007dee:	4620      	mov	r0, r4
}
 8007df0:	b003      	add	sp, #12
 8007df2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8007df6:	f001 b9c7 	b.w	8009188 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007dfa:	6833      	ldr	r3, [r6, #0]
 8007dfc:	1a99      	subs	r1, r3, r2
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	db06      	blt.n	8007e10 <tcp_receive+0x988>
 8007e02:	3301      	adds	r3, #1
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f77f af0c 	ble.w	8007c28 <tcp_receive+0x7a0>
      tcp_ack_now(pcb);
 8007e10:	7ea3      	ldrb	r3, [r4, #26]
 8007e12:	e681      	b.n	8007b18 <tcp_receive+0x690>
        pcb->dupacks = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e1a:	f7ff bbaa 	b.w	8007572 <tcp_receive+0xea>
 8007e1e:	bf00      	nop
 8007e20:	200001e4 	.word	0x200001e4
 8007e24:	0800db66 	.word	0x0800db66
 8007e28:	0800dc3b 	.word	0x0800dc3b
 8007e2c:	0800c987 	.word	0x0800c987

08007e30 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007e30:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <tcp_getoptbyte+0x30>)
 8007e32:	4a0c      	ldr	r2, [pc, #48]	; (8007e64 <tcp_getoptbyte+0x34>)
 8007e34:	6819      	ldr	r1, [r3, #0]
{
 8007e36:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007e38:	b121      	cbz	r1, 8007e44 <tcp_getoptbyte+0x14>
 8007e3a:	480b      	ldr	r0, [pc, #44]	; (8007e68 <tcp_getoptbyte+0x38>)
 8007e3c:	8813      	ldrh	r3, [r2, #0]
 8007e3e:	8800      	ldrh	r0, [r0, #0]
 8007e40:	4283      	cmp	r3, r0
 8007e42:	d207      	bcs.n	8007e54 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007e44:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8007e46:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007e48:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8007e4a:	1c48      	adds	r0, r1, #1
 8007e4c:	440b      	add	r3, r1
 8007e4e:	8010      	strh	r0, [r2, #0]
 8007e50:	7d18      	ldrb	r0, [r3, #20]
 8007e52:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007e54:	1c5c      	adds	r4, r3, #1
 8007e56:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8007e58:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007e5a:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8007e5c:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8007e5e:	bd10      	pop	{r4, pc}
 8007e60:	20000210 	.word	0x20000210
 8007e64:	20000204 	.word	0x20000204
 8007e68:	2000020c 	.word	0x2000020c
 8007e6c:	20000208 	.word	0x20000208

08007e70 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8007e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007e74:	4d1a      	ldr	r5, [pc, #104]	; (8007ee0 <tcp_parseopt.isra.1.part.2+0x70>)
 8007e76:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8007e78:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007e7a:	4e1a      	ldr	r6, [pc, #104]	; (8007ee4 <tcp_parseopt.isra.1.part.2+0x74>)
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
        mss |= tcp_getoptbyte();
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007e7c:	f240 2889 	movw	r8, #649	; 0x289
 8007e80:	f240 298a 	movw	r9, #650	; 0x28a
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007e84:	802b      	strh	r3, [r5, #0]
 8007e86:	8834      	ldrh	r4, [r6, #0]
 8007e88:	882b      	ldrh	r3, [r5, #0]
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	d301      	bcc.n	8007e92 <tcp_parseopt.isra.1.part.2+0x22>
 8007e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      u8_t opt = tcp_getoptbyte();
 8007e92:	f7ff ffcd 	bl	8007e30 <tcp_getoptbyte>
      switch (opt) {
 8007e96:	2801      	cmp	r0, #1
 8007e98:	d0f5      	beq.n	8007e86 <tcp_parseopt.isra.1.part.2+0x16>
 8007e9a:	d3f8      	bcc.n	8007e8e <tcp_parseopt.isra.1.part.2+0x1e>
 8007e9c:	2802      	cmp	r0, #2
 8007e9e:	d116      	bne.n	8007ece <tcp_parseopt.isra.1.part.2+0x5e>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007ea0:	f7ff ffc6 	bl	8007e30 <tcp_getoptbyte>
 8007ea4:	2804      	cmp	r0, #4
 8007ea6:	d1f2      	bne.n	8007e8e <tcp_parseopt.isra.1.part.2+0x1e>
 8007ea8:	882b      	ldrh	r3, [r5, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	daee      	bge.n	8007e8e <tcp_parseopt.isra.1.part.2+0x1e>
        mss = (tcp_getoptbyte() << 8);
 8007eb0:	f7ff ffbe 	bl	8007e30 <tcp_getoptbyte>
 8007eb4:	0200      	lsls	r0, r0, #8
 8007eb6:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8007eb8:	f7ff ffba 	bl	8007e30 <tcp_getoptbyte>
 8007ebc:	4320      	orrs	r0, r4
 8007ebe:	b280      	uxth	r0, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007ec0:	1e43      	subs	r3, r0, #1
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	4543      	cmp	r3, r8
 8007ec6:	bf88      	it	hi
 8007ec8:	4648      	movhi	r0, r9
 8007eca:	8038      	strh	r0, [r7, #0]
 8007ecc:	e7db      	b.n	8007e86 <tcp_parseopt.isra.1.part.2+0x16>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007ece:	f7ff ffaf 	bl	8007e30 <tcp_getoptbyte>
        if (data < 2) {
 8007ed2:	2801      	cmp	r0, #1
 8007ed4:	d9db      	bls.n	8007e8e <tcp_parseopt.isra.1.part.2+0x1e>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007ed6:	882b      	ldrh	r3, [r5, #0]
 8007ed8:	3b02      	subs	r3, #2
 8007eda:	4418      	add	r0, r3
 8007edc:	8028      	strh	r0, [r5, #0]
 8007ede:	e7d2      	b.n	8007e86 <tcp_parseopt.isra.1.part.2+0x16>
 8007ee0:	20000204 	.word	0x20000204
 8007ee4:	20000214 	.word	0x20000214

08007ee8 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <tcp_input_delayed_close+0x38>)
{
 8007eea:	b510      	push	{r4, lr}
 8007eec:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8007eee:	7818      	ldrb	r0, [r3, #0]
 8007ef0:	f010 0010 	ands.w	r0, r0, #16
 8007ef4:	d012      	beq.n	8007f1c <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007ef6:	7ea3      	ldrb	r3, [r4, #26]
 8007ef8:	06db      	lsls	r3, r3, #27
 8007efa:	d406      	bmi.n	8007f0a <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007efc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007f00:	b11b      	cbz	r3, 8007f0a <tcp_input_delayed_close+0x22>
 8007f02:	f06f 010e 	mvn.w	r1, #14
 8007f06:	6920      	ldr	r0, [r4, #16]
 8007f08:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4805      	ldr	r0, [pc, #20]	; (8007f24 <tcp_input_delayed_close+0x3c>)
 8007f0e:	f7fe ff59 	bl	8006dc4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007f12:	2001      	movs	r0, #1
 8007f14:	4621      	mov	r1, r4
 8007f16:	f7fd ff23 	bl	8005d60 <memp_free>
 8007f1a:	2001      	movs	r0, #1
}
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	200001fc 	.word	0x200001fc
 8007f24:	200037ec 	.word	0x200037ec

08007f28 <tcp_input>:
{
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8007f2c:	6843      	ldr	r3, [r0, #4]
{
 8007f2e:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 8007f30:	4e9e      	ldr	r6, [pc, #632]	; (80081ac <tcp_input+0x284>)
{
 8007f32:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8007f34:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8007f36:	8943      	ldrh	r3, [r0, #10]
 8007f38:	2b13      	cmp	r3, #19
 8007f3a:	f240 81b2 	bls.w	80082a2 <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007f3e:	4f9c      	ldr	r7, [pc, #624]	; (80081b0 <tcp_input+0x288>)
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	46b8      	mov	r8, r7
 8007f44:	6978      	ldr	r0, [r7, #20]
 8007f46:	f7fd f918 	bl	800517a <ip4_addr_isbroadcast_u32>
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	f040 81a8 	bne.w	80082a2 <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007f58:	2be0      	cmp	r3, #224	; 0xe0
 8007f5a:	f000 81a2 	beq.w	80082a2 <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8007f5e:	6833      	ldr	r3, [r6, #0]
 8007f60:	8998      	ldrh	r0, [r3, #12]
 8007f62:	f7fb fa1c 	bl	800339e <lwip_htons>
 8007f66:	0a81      	lsrs	r1, r0, #10
 8007f68:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007f6c:	2913      	cmp	r1, #19
 8007f6e:	f240 8198 	bls.w	80082a2 <tcp_input+0x37a>
 8007f72:	b289      	uxth	r1, r1
 8007f74:	892b      	ldrh	r3, [r5, #8]
 8007f76:	428b      	cmp	r3, r1
 8007f78:	f0c0 8193 	bcc.w	80082a2 <tcp_input+0x37a>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007f7c:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8007f80:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007f82:	4a8c      	ldr	r2, [pc, #560]	; (80081b4 <tcp_input+0x28c>)
 8007f84:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8007f86:	4f8c      	ldr	r7, [pc, #560]	; (80081b8 <tcp_input+0x290>)
  if (p->len >= hdrlen_bytes) {
 8007f88:	4288      	cmp	r0, r1
 8007f8a:	9206      	str	r2, [sp, #24]
  tcphdr_opt2 = NULL;
 8007f8c:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007f8e:	8013      	strh	r3, [r2, #0]
 8007f90:	4c8a      	ldr	r4, [pc, #552]	; (80081bc <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8007f92:	d344      	bcc.n	800801e <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007f94:	4249      	negs	r1, r1
 8007f96:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8007f98:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007f9a:	f7fe f83f 	bl	800601c <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007f9e:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 8007fa0:	f04f 0a00 	mov.w	sl, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007fa4:	f8df b268 	ldr.w	fp, [pc, #616]	; 8008210 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007fa8:	8820      	ldrh	r0, [r4, #0]
 8007faa:	f7fb f9f8 	bl	800339e <lwip_htons>
 8007fae:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007fb0:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007fb2:	4f83      	ldr	r7, [pc, #524]	; (80081c0 <tcp_input+0x298>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007fb4:	8860      	ldrh	r0, [r4, #2]
 8007fb6:	f7fb f9f2 	bl	800339e <lwip_htons>
 8007fba:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007fbc:	6834      	ldr	r4, [r6, #0]
 8007fbe:	6860      	ldr	r0, [r4, #4]
 8007fc0:	f7fb f9f0 	bl	80033a4 <lwip_htonl>
 8007fc4:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007fc6:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007fc8:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007fcc:	68a0      	ldr	r0, [r4, #8]
 8007fce:	f7fb f9e9 	bl	80033a4 <lwip_htonl>
 8007fd2:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007fd4:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007fd6:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007fd8:	89e0      	ldrh	r0, [r4, #14]
 8007fda:	f7fb f9e0 	bl	800339e <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8007fde:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007fe0:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8007fe2:	8998      	ldrh	r0, [r3, #12]
 8007fe4:	f7fb f9db 	bl	800339e <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007fe8:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8007fea:	b2c0      	uxtb	r0, r0
 8007fec:	4a75      	ldr	r2, [pc, #468]	; (80081c4 <tcp_input+0x29c>)
 8007fee:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007ff2:	f010 0003 	ands.w	r0, r0, #3
 8007ff6:	9203      	str	r2, [sp, #12]
 8007ff8:	bf18      	it	ne
 8007ffa:	2001      	movne	r0, #1
  flags = TCPH_FLAGS(tcphdr);
 8007ffc:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007ffe:	4b72      	ldr	r3, [pc, #456]	; (80081c8 <tcp_input+0x2a0>)
 8008000:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008002:	4972      	ldr	r1, [pc, #456]	; (80081cc <tcp_input+0x2a4>)
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	680c      	ldr	r4, [r1, #0]
 8008008:	4689      	mov	r9, r1
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800800a:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800800c:	2c00      	cmp	r4, #0
 800800e:	d140      	bne.n	8008092 <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008010:	4b6f      	ldr	r3, [pc, #444]	; (80081d0 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008012:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 80081d4 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008016:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008018:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8008214 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800801c:	e148      	b.n	80082b0 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	b92b      	cbnz	r3, 800802e <tcp_input+0x106>
 8008022:	4b6c      	ldr	r3, [pc, #432]	; (80081d4 <tcp_input+0x2ac>)
 8008024:	22b2      	movs	r2, #178	; 0xb2
 8008026:	496c      	ldr	r1, [pc, #432]	; (80081d8 <tcp_input+0x2b0>)
 8008028:	486c      	ldr	r0, [pc, #432]	; (80081dc <tcp_input+0x2b4>)
 800802a:	f003 fa79 	bl	800b520 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 800802e:	f06f 0113 	mvn.w	r1, #19
 8008032:	4628      	mov	r0, r5
 8008034:	f7fd fff2 	bl	800601c <pbuf_header>
    tcphdr_opt1len = p->len;
 8008038:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800803a:	9b06      	ldr	r3, [sp, #24]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800803c:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 800803e:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008040:	881c      	ldrh	r4, [r3, #0]
 8008042:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008044:	4249      	negs	r1, r1
 8008046:	b209      	sxth	r1, r1
 8008048:	f7fd ffe8 	bl	800601c <pbuf_header>
    if (opt2len > p->next->len) {
 800804c:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800804e:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8008050:	8943      	ldrh	r3, [r0, #10]
 8008052:	42a3      	cmp	r3, r4
 8008054:	f0c0 8125 	bcc.w	80082a2 <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8008058:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800805a:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 800805c:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800805e:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008060:	f7fd ffdc 	bl	800601c <pbuf_header>
    p->tot_len -= opt2len;
 8008064:	892b      	ldrh	r3, [r5, #8]
 8008066:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008068:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 800806a:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800806c:	b12b      	cbz	r3, 800807a <tcp_input+0x152>
 800806e:	4b59      	ldr	r3, [pc, #356]	; (80081d4 <tcp_input+0x2ac>)
 8008070:	22cf      	movs	r2, #207	; 0xcf
 8008072:	495b      	ldr	r1, [pc, #364]	; (80081e0 <tcp_input+0x2b8>)
 8008074:	4859      	ldr	r0, [pc, #356]	; (80081dc <tcp_input+0x2b4>)
 8008076:	f003 fa53 	bl	800b520 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	892a      	ldrh	r2, [r5, #8]
 800807e:	891b      	ldrh	r3, [r3, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	d08c      	beq.n	8007f9e <tcp_input+0x76>
 8008084:	4b53      	ldr	r3, [pc, #332]	; (80081d4 <tcp_input+0x2ac>)
 8008086:	22d0      	movs	r2, #208	; 0xd0
 8008088:	4956      	ldr	r1, [pc, #344]	; (80081e4 <tcp_input+0x2bc>)
 800808a:	4854      	ldr	r0, [pc, #336]	; (80081dc <tcp_input+0x2b4>)
 800808c:	f003 fa48 	bl	800b520 <iprintf>
 8008090:	e785      	b.n	8007f9e <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008092:	7d23      	ldrb	r3, [r4, #20]
 8008094:	b92b      	cbnz	r3, 80080a2 <tcp_input+0x17a>
 8008096:	4b4f      	ldr	r3, [pc, #316]	; (80081d4 <tcp_input+0x2ac>)
 8008098:	22e2      	movs	r2, #226	; 0xe2
 800809a:	4953      	ldr	r1, [pc, #332]	; (80081e8 <tcp_input+0x2c0>)
 800809c:	484f      	ldr	r0, [pc, #316]	; (80081dc <tcp_input+0x2b4>)
 800809e:	f003 fa3f 	bl	800b520 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80080a2:	7d23      	ldrb	r3, [r4, #20]
 80080a4:	2b0a      	cmp	r3, #10
 80080a6:	d105      	bne.n	80080b4 <tcp_input+0x18c>
 80080a8:	4b4a      	ldr	r3, [pc, #296]	; (80081d4 <tcp_input+0x2ac>)
 80080aa:	22e3      	movs	r2, #227	; 0xe3
 80080ac:	494f      	ldr	r1, [pc, #316]	; (80081ec <tcp_input+0x2c4>)
 80080ae:	484b      	ldr	r0, [pc, #300]	; (80081dc <tcp_input+0x2b4>)
 80080b0:	f003 fa36 	bl	800b520 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80080b4:	7d23      	ldrb	r3, [r4, #20]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d105      	bne.n	80080c6 <tcp_input+0x19e>
 80080ba:	4b46      	ldr	r3, [pc, #280]	; (80081d4 <tcp_input+0x2ac>)
 80080bc:	22e4      	movs	r2, #228	; 0xe4
 80080be:	494c      	ldr	r1, [pc, #304]	; (80081f0 <tcp_input+0x2c8>)
 80080c0:	4846      	ldr	r0, [pc, #280]	; (80081dc <tcp_input+0x2b4>)
 80080c2:	f003 fa2d 	bl	800b520 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80080c6:	6832      	ldr	r2, [r6, #0]
 80080c8:	8b21      	ldrh	r1, [r4, #24]
 80080ca:	8813      	ldrh	r3, [r2, #0]
 80080cc:	4299      	cmp	r1, r3
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	d169      	bne.n	80081a6 <tcp_input+0x27e>
 80080d2:	8ae1      	ldrh	r1, [r4, #22]
 80080d4:	8852      	ldrh	r2, [r2, #2]
 80080d6:	4291      	cmp	r1, r2
 80080d8:	d165      	bne.n	80081a6 <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 80080da:	6861      	ldr	r1, [r4, #4]
 80080dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80080e0:	4291      	cmp	r1, r2
 80080e2:	d160      	bne.n	80081a6 <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80080e4:	6821      	ldr	r1, [r4, #0]
 80080e6:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80080ea:	4291      	cmp	r1, r2
 80080ec:	d15b      	bne.n	80081a6 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80080ee:	429c      	cmp	r4, r3
 80080f0:	f040 8407 	bne.w	8008902 <tcp_input+0x9da>
 80080f4:	4b37      	ldr	r3, [pc, #220]	; (80081d4 <tcp_input+0x2ac>)
 80080f6:	22ec      	movs	r2, #236	; 0xec
 80080f8:	493e      	ldr	r1, [pc, #248]	; (80081f4 <tcp_input+0x2cc>)
 80080fa:	4838      	ldr	r0, [pc, #224]	; (80081dc <tcp_input+0x2b4>)
 80080fc:	f003 fa10 	bl	800b520 <iprintf>
      if (prev != NULL) {
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	d007      	beq.n	8008116 <tcp_input+0x1ee>
        prev->next = pcb->next;
 8008106:	68e3      	ldr	r3, [r4, #12]
 8008108:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 800810c:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 8008110:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 8008114:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008116:	68e3      	ldr	r3, [r4, #12]
 8008118:	429c      	cmp	r4, r3
 800811a:	d105      	bne.n	8008128 <tcp_input+0x200>
 800811c:	4b2d      	ldr	r3, [pc, #180]	; (80081d4 <tcp_input+0x2ac>)
 800811e:	22f4      	movs	r2, #244	; 0xf4
 8008120:	4935      	ldr	r1, [pc, #212]	; (80081f8 <tcp_input+0x2d0>)
 8008122:	482e      	ldr	r0, [pc, #184]	; (80081dc <tcp_input+0x2b4>)
 8008124:	f003 f9fc 	bl	800b520 <iprintf>
    inseg.next = NULL;
 8008128:	4b34      	ldr	r3, [pc, #208]	; (80081fc <tcp_input+0x2d4>)
 800812a:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 800812c:	8929      	ldrh	r1, [r5, #8]
    inseg.next = NULL;
 800812e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008130:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 8008132:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 8008134:	4832      	ldr	r0, [pc, #200]	; (8008200 <tcp_input+0x2d8>)
    inseg.tcphdr = tcphdr;
 8008136:	60d9      	str	r1, [r3, #12]
    inseg.p = p;
 8008138:	605d      	str	r5, [r3, #4]
 800813a:	4680      	mov	r8, r0
    recv_data = NULL;
 800813c:	4b31      	ldr	r3, [pc, #196]	; (8008204 <tcp_input+0x2dc>)
    recv_acked = 0;
 800813e:	4932      	ldr	r1, [pc, #200]	; (8008208 <tcp_input+0x2e0>)
    recv_data = NULL;
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	469a      	mov	sl, r3
    recv_flags = 0;
 8008144:	7002      	strb	r2, [r0, #0]
    recv_acked = 0;
 8008146:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8008148:	9a03      	ldr	r2, [sp, #12]
 800814a:	9105      	str	r1, [sp, #20]
 800814c:	7812      	ldrb	r2, [r2, #0]
 800814e:	f012 0f08 	tst.w	r2, #8
 8008152:	d003      	beq.n	800815c <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8008154:	7b6b      	ldrb	r3, [r5, #13]
 8008156:	f043 0301 	orr.w	r3, r3, #1
 800815a:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800815c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800815e:	4d2b      	ldr	r5, [pc, #172]	; (800820c <tcp_input+0x2e4>)
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8137 	beq.w	80083d4 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008166:	4620      	mov	r0, r4
 8008168:	f7fe ff3e 	bl	8006fe8 <tcp_process_refused_data>
 800816c:	300d      	adds	r0, #13
 800816e:	d008      	beq.n	8008182 <tcp_input+0x25a>
 8008170:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 812e 	beq.w	80083d4 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008178:	9b04      	ldr	r3, [sp, #16]
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8129 	beq.w	80083d4 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8008182:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008184:	b913      	cbnz	r3, 800818c <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8008186:	4620      	mov	r0, r4
 8008188:	f000 fffe 	bl	8009188 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800818c:	2400      	movs	r4, #0
 800818e:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8008190:	4d1a      	ldr	r5, [pc, #104]	; (80081fc <tcp_input+0x2d4>)
    recv_data = NULL;
 8008192:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8008196:	6868      	ldr	r0, [r5, #4]
 8008198:	b110      	cbz	r0, 80081a0 <tcp_input+0x278>
      pbuf_free(inseg.p);
 800819a:	f7fd ff45 	bl	8006028 <pbuf_free>
      inseg.p = NULL;
 800819e:	606c      	str	r4, [r5, #4]
}
 80081a0:	b009      	add	sp, #36	; 0x24
 80081a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081a6:	46a2      	mov	sl, r4
 80081a8:	461c      	mov	r4, r3
 80081aa:	e72f      	b.n	800800c <tcp_input+0xe4>
 80081ac:	20000208 	.word	0x20000208
 80081b0:	20000240 	.word	0x20000240
 80081b4:	20000214 	.word	0x20000214
 80081b8:	20000210 	.word	0x20000210
 80081bc:	2000020c 	.word	0x2000020c
 80081c0:	200001dc 	.word	0x200001dc
 80081c4:	200001e0 	.word	0x200001e0
 80081c8:	20000216 	.word	0x20000216
 80081cc:	200037ec 	.word	0x200037ec
 80081d0:	200037fc 	.word	0x200037fc
 80081d4:	0800db66 	.word	0x0800db66
 80081d8:	0800d9b0 	.word	0x0800d9b0
 80081dc:	0800c987 	.word	0x0800c987
 80081e0:	0800d9c0 	.word	0x0800d9c0
 80081e4:	0800d9cc 	.word	0x0800d9cc
 80081e8:	0800d9eb 	.word	0x0800d9eb
 80081ec:	0800da12 	.word	0x0800da12
 80081f0:	0800da3c 	.word	0x0800da3c
 80081f4:	0800da63 	.word	0x0800da63
 80081f8:	0800da8e 	.word	0x0800da8e
 80081fc:	200001e4 	.word	0x200001e4
 8008200:	200001fc 	.word	0x200001fc
 8008204:	200001f8 	.word	0x200001f8
 8008208:	200001f4 	.word	0x200001f4
 800820c:	20003800 	.word	0x20003800
 8008210:	20000200 	.word	0x20000200
 8008214:	0800dab8 	.word	0x0800dab8
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008218:	7d23      	ldrb	r3, [r4, #20]
 800821a:	2b0a      	cmp	r3, #10
 800821c:	d005      	beq.n	800822a <tcp_input+0x302>
 800821e:	4653      	mov	r3, sl
 8008220:	22fe      	movs	r2, #254	; 0xfe
 8008222:	4649      	mov	r1, r9
 8008224:	489d      	ldr	r0, [pc, #628]	; (800849c <tcp_input+0x574>)
 8008226:	f003 f97b 	bl	800b520 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800822a:	6833      	ldr	r3, [r6, #0]
 800822c:	8b22      	ldrh	r2, [r4, #24]
 800822e:	8818      	ldrh	r0, [r3, #0]
 8008230:	4290      	cmp	r0, r2
 8008232:	d13c      	bne.n	80082ae <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8008234:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8008236:	885a      	ldrh	r2, [r3, #2]
 8008238:	428a      	cmp	r2, r1
 800823a:	d138      	bne.n	80082ae <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 800823c:	6861      	ldr	r1, [r4, #4]
 800823e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008242:	4299      	cmp	r1, r3
 8008244:	d133      	bne.n	80082ae <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008246:	6821      	ldr	r1, [r4, #0]
 8008248:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800824c:	4299      	cmp	r1, r3
 800824e:	d12e      	bne.n	80082ae <tcp_input+0x386>
  if (flags & TCP_RST) {
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	0759      	lsls	r1, r3, #29
 8008256:	d424      	bmi.n	80082a2 <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8008258:	079e      	lsls	r6, r3, #30
 800825a:	d513      	bpl.n	8008284 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800825c:	f8db 1000 	ldr.w	r1, [fp]
 8008260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008262:	1acb      	subs	r3, r1, r3
 8008264:	d413      	bmi.n	800828e <tcp_input+0x366>
 8008266:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8008268:	1b9b      	subs	r3, r3, r6
 800826a:	2b00      	cmp	r3, #0
 800826c:	dc0f      	bgt.n	800828e <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	881c      	ldrh	r4, [r3, #0]
 8008272:	9001      	str	r0, [sp, #4]
 8008274:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008276:	4b8a      	ldr	r3, [pc, #552]	; (80084a0 <tcp_input+0x578>)
 8008278:	4421      	add	r1, r4
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	6838      	ldr	r0, [r7, #0]
 800827e:	f001 f937 	bl	80094f0 <tcp_rst>
 8008282:	e00e      	b.n	80082a2 <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8008284:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8008286:	bf42      	ittt	mi
 8008288:	4b86      	ldrmi	r3, [pc, #536]	; (80084a4 <tcp_input+0x57c>)
 800828a:	681b      	ldrmi	r3, [r3, #0]
 800828c:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b133      	cbz	r3, 80082a2 <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8008294:	7ea3      	ldrb	r3, [r4, #26]
 8008296:	f043 0302 	orr.w	r3, r3, #2
 800829a:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800829c:	4620      	mov	r0, r4
 800829e:	f000 ffa9 	bl	80091f4 <tcp_output>
  pbuf_free(p);
 80082a2:	4628      	mov	r0, r5
}
 80082a4:	b009      	add	sp, #36	; 0x24
 80082a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80082aa:	f7fd bebd 	b.w	8006028 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082ae:	68e4      	ldr	r4, [r4, #12]
 80082b0:	2c00      	cmp	r4, #0
 80082b2:	d1b1      	bne.n	8008218 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082b4:	4b7c      	ldr	r3, [pc, #496]	; (80084a8 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 80082b6:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082b8:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80082ba:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082be:	4689      	mov	r9, r1
 80082c0:	f1b9 0f00 	cmp.w	r9, #0
 80082c4:	d111      	bne.n	80082ea <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80082c6:	8990      	ldrh	r0, [r2, #12]
 80082c8:	f7fb f869 	bl	800339e <lwip_htons>
 80082cc:	0743      	lsls	r3, r0, #29
 80082ce:	d4e8      	bmi.n	80082a2 <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082d0:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80082d2:	9a04      	ldr	r2, [sp, #16]
 80082d4:	f8db 1000 	ldr.w	r1, [fp]
 80082d8:	8810      	ldrh	r0, [r2, #0]
 80082da:	881a      	ldrh	r2, [r3, #0]
 80082dc:	4401      	add	r1, r0
 80082de:	9201      	str	r2, [sp, #4]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	4b6e      	ldr	r3, [pc, #440]	; (80084a0 <tcp_input+0x578>)
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	e7c8      	b.n	800827c <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 80082ea:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 80082ee:	8853      	ldrh	r3, [r2, #2]
 80082f0:	4283      	cmp	r3, r0
 80082f2:	d107      	bne.n	8008304 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80082f4:	f8d9 3000 	ldr.w	r3, [r9]
 80082f8:	4573      	cmp	r3, lr
 80082fa:	f000 82de 	beq.w	80088ba <tcp_input+0x992>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 82db 	beq.w	80088ba <tcp_input+0x992>
 8008304:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008306:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800830a:	e7d9      	b.n	80082c0 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 800830c:	0798      	lsls	r0, r3, #30
 800830e:	d5c8      	bpl.n	80082a2 <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8008310:	f899 0015 	ldrb.w	r0, [r9, #21]
 8008314:	f7fe ffac 	bl	8007270 <tcp_alloc>
    if (npcb == NULL) {
 8008318:	4604      	mov	r4, r0
 800831a:	b950      	cbnz	r0, 8008332 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800831c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0be      	beq.n	80082a2 <tcp_input+0x37a>
 8008324:	4601      	mov	r1, r0
 8008326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800832a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800832e:	4798      	blx	r3
 8008330:	e7b7      	b.n	80082a2 <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008332:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8008336:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008338:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800833a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800833e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8008340:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8008344:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8008346:	7813      	ldrb	r3, [r2, #0]
 8008348:	7852      	ldrb	r2, [r2, #1]
 800834a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800834e:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8008350:	2303      	movs	r3, #3
 8008352:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8008354:	f8db 3000 	ldr.w	r3, [fp]
 8008358:	3301      	adds	r3, #1
 800835a:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800835c:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800835e:	f7ff f813 	bl	8007388 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008362:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8008366:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008368:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800836a:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 800836c:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800836e:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8008370:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 8008374:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8008376:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8008378:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800837c:	f899 3008 	ldrb.w	r3, [r9, #8]
 8008380:	f003 030c 	and.w	r3, r3, #12
 8008384:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8008386:	4b49      	ldr	r3, [pc, #292]	; (80084ac <tcp_input+0x584>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	601c      	str	r4, [r3, #0]
 800838c:	60e2      	str	r2, [r4, #12]
 800838e:	f001 fa51 	bl	8009834 <tcp_timer_needed>
 8008392:	4b47      	ldr	r3, [pc, #284]	; (80084b0 <tcp_input+0x588>)
 8008394:	2201      	movs	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8008398:	9b06      	ldr	r3, [sp, #24]
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b11b      	cbz	r3, 80083a6 <tcp_input+0x47e>
 800839e:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80083a2:	f7ff fd65 	bl	8007e70 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 80083a6:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80083a8:	1d21      	adds	r1, r4, #4
 80083aa:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 80083ac:	89db      	ldrh	r3, [r3, #14]
 80083ae:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80083b2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80083b6:	f7fe fff3 	bl	80073a0 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80083ba:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80083bc:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 fe2a 	bl	8009018 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f43f af69 	beq.w	800829c <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 80083ca:	2100      	movs	r1, #0
 80083cc:	4620      	mov	r0, r4
 80083ce:	f7fe fe91 	bl	80070f4 <tcp_abandon>
 80083d2:	e766      	b.n	80082a2 <tcp_input+0x37a>
  if (flags & TCP_RST) {
 80083d4:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 80083d6:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	0759      	lsls	r1, r3, #29
 80083dc:	d535      	bpl.n	800844a <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 80083de:	7d21      	ldrb	r1, [r4, #20]
 80083e0:	2902      	cmp	r1, #2
 80083e2:	d122      	bne.n	800842a <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 80083e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d109      	bne.n	8008400 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 80083ec:	f898 3000 	ldrb.w	r3, [r8]
 80083f0:	f043 0308 	orr.w	r3, r3, #8
 80083f4:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 80083f8:	7ea3      	ldrb	r3, [r4, #26]
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8008400:	f898 3000 	ldrb.w	r3, [r8]
 8008404:	0719      	lsls	r1, r3, #28
 8008406:	f140 81ed 	bpl.w	80087e4 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800840a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800840e:	b11b      	cbz	r3, 8008418 <tcp_input+0x4f0>
 8008410:	f06f 010d 	mvn.w	r1, #13
 8008414:	6920      	ldr	r0, [r4, #16]
 8008416:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008418:	4621      	mov	r1, r4
 800841a:	4824      	ldr	r0, [pc, #144]	; (80084ac <tcp_input+0x584>)
 800841c:	f7fe fcd2 	bl	8006dc4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008420:	4621      	mov	r1, r4
 8008422:	2001      	movs	r0, #1
 8008424:	f7fd fc9c 	bl	8005d60 <memp_free>
 8008428:	e6b0      	b.n	800818c <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 800842a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800842c:	f8db 3000 	ldr.w	r3, [fp]
 8008430:	429a      	cmp	r2, r3
 8008432:	f000 825b 	beq.w	80088ec <tcp_input+0x9c4>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	d4e2      	bmi.n	8008400 <tcp_input+0x4d8>
 800843a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800843c:	1a9b      	subs	r3, r3, r2
 800843e:	2b00      	cmp	r3, #0
 8008440:	dcde      	bgt.n	8008400 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8008442:	7ea3      	ldrb	r3, [r4, #26]
 8008444:	f043 0302 	orr.w	r3, r3, #2
 8008448:	e7d9      	b.n	80083fe <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800844a:	f013 0102 	ands.w	r1, r3, #2
 800844e:	d003      	beq.n	8008458 <tcp_input+0x530>
 8008450:	7d22      	ldrb	r2, [r4, #20]
 8008452:	3a02      	subs	r2, #2
 8008454:	2a01      	cmp	r2, #1
 8008456:	d8f4      	bhi.n	8008442 <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008458:	7ea2      	ldrb	r2, [r4, #26]
 800845a:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 800845c:	bf5e      	ittt	pl
 800845e:	4a11      	ldrpl	r2, [pc, #68]	; (80084a4 <tcp_input+0x57c>)
 8008460:	6812      	ldrpl	r2, [r2, #0]
 8008462:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8008464:	2200      	movs	r2, #0
 8008466:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 800846a:	9a06      	ldr	r2, [sp, #24]
 800846c:	8812      	ldrh	r2, [r2, #0]
 800846e:	b13a      	cbz	r2, 8008480 <tcp_input+0x558>
 8008470:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8008474:	9107      	str	r1, [sp, #28]
 8008476:	9306      	str	r3, [sp, #24]
 8008478:	f7ff fcfa 	bl	8007e70 <tcp_parseopt.isra.1.part.2>
 800847c:	9907      	ldr	r1, [sp, #28]
 800847e:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8008480:	7d22      	ldrb	r2, [r4, #20]
 8008482:	3a02      	subs	r2, #2
 8008484:	2a07      	cmp	r2, #7
 8008486:	d8bb      	bhi.n	8008400 <tcp_input+0x4d8>
 8008488:	e8df f012 	tbh	[pc, r2, lsl #1]
 800848c:	00940014 	.word	0x00940014
 8008490:	010000fc 	.word	0x010000fc
 8008494:	00fc014a 	.word	0x00fc014a
 8008498:	01830164 	.word	0x01830164
 800849c:	0800c987 	.word	0x0800c987
 80084a0:	20000250 	.word	0x20000250
 80084a4:	200037f0 	.word	0x200037f0
 80084a8:	200037f4 	.word	0x200037f4
 80084ac:	200037ec 	.word	0x200037ec
 80084b0:	200037e8 	.word	0x200037e8
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80084b4:	f003 0212 	and.w	r2, r3, #18
 80084b8:	2a12      	cmp	r2, #18
 80084ba:	d15e      	bne.n	800857a <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 80084bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	3201      	adds	r2, #1
 80084c2:	428a      	cmp	r2, r1
 80084c4:	d159      	bne.n	800857a <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 80084c6:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 80084ca:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 80084cc:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 80084ce:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80084d0:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80084d2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 80084d4:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80084d6:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 80084d8:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80084da:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80084dc:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 80084de:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80084e2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80084e6:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 80084e8:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80084ea:	f7fe ff59 	bl	80073a0 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80084ee:	f241 121c 	movw	r2, #4380	; 0x111c
 80084f2:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80084f4:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80084f6:	0080      	lsls	r0, r0, #2
 80084f8:	4293      	cmp	r3, r2
 80084fa:	bf38      	it	cc
 80084fc:	4613      	movcc	r3, r2
 80084fe:	4283      	cmp	r3, r0
 8008500:	bf28      	it	cs
 8008502:	4603      	movcs	r3, r0
 8008504:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008508:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800850c:	b933      	cbnz	r3, 800851c <tcp_input+0x5f4>
 800850e:	4bad      	ldr	r3, [pc, #692]	; (80087c4 <tcp_input+0x89c>)
 8008510:	f240 321a 	movw	r2, #794	; 0x31a
 8008514:	49ac      	ldr	r1, [pc, #688]	; (80087c8 <tcp_input+0x8a0>)
 8008516:	48ad      	ldr	r0, [pc, #692]	; (80087cc <tcp_input+0x8a4>)
 8008518:	f003 f802 	bl	800b520 <iprintf>
      --pcb->snd_queuelen;
 800851c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8008520:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8008522:	3b01      	subs	r3, #1
 8008524:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8008528:	b9fe      	cbnz	r6, 800856a <tcp_input+0x642>
        rseg = pcb->unsent;
 800852a:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800852c:	b936      	cbnz	r6, 800853c <tcp_input+0x614>
 800852e:	4ba5      	ldr	r3, [pc, #660]	; (80087c4 <tcp_input+0x89c>)
 8008530:	f240 3222 	movw	r2, #802	; 0x322
 8008534:	49a6      	ldr	r1, [pc, #664]	; (80087d0 <tcp_input+0x8a8>)
 8008536:	48a5      	ldr	r0, [pc, #660]	; (80087cc <tcp_input+0x8a4>)
 8008538:	f002 fff2 	bl	800b520 <iprintf>
        pcb->unsent = rseg->next;
 800853c:	6833      	ldr	r3, [r6, #0]
 800853e:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8008540:	4630      	mov	r0, r6
 8008542:	f7fe f9c1 	bl	80068c8 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8008546:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008548:	b993      	cbnz	r3, 8008570 <tcp_input+0x648>
        pcb->rtime = -1;
 800854a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800854e:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008550:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008554:	2b00      	cmp	r3, #0
 8008556:	f43f af74 	beq.w	8008442 <tcp_input+0x51a>
 800855a:	2200      	movs	r2, #0
 800855c:	4621      	mov	r1, r4
 800855e:	6920      	ldr	r0, [r4, #16]
 8008560:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8008562:	300d      	adds	r0, #13
 8008564:	f47f af6d 	bne.w	8008442 <tcp_input+0x51a>
 8008568:	e610      	b.n	800818c <tcp_input+0x264>
        pcb->unacked = rseg->next;
 800856a:	6833      	ldr	r3, [r6, #0]
 800856c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800856e:	e7e7      	b.n	8008540 <tcp_input+0x618>
        pcb->rtime = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8008574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008578:	e7ea      	b.n	8008550 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 800857a:	06db      	lsls	r3, r3, #27
 800857c:	f57f af40 	bpl.w	8008400 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008580:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008582:	9a04      	ldr	r2, [sp, #16]
 8008584:	f8db 1000 	ldr.w	r1, [fp]
 8008588:	8810      	ldrh	r0, [r2, #0]
 800858a:	881a      	ldrh	r2, [r3, #0]
 800858c:	4401      	add	r1, r0
 800858e:	9201      	str	r2, [sp, #4]
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4b8f      	ldr	r3, [pc, #572]	; (80087d4 <tcp_input+0x8ac>)
 8008596:	6838      	ldr	r0, [r7, #0]
 8008598:	1d1a      	adds	r2, r3, #4
 800859a:	f000 ffa9 	bl	80094f0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800859e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80085a2:	2b05      	cmp	r3, #5
 80085a4:	f63f af2c 	bhi.w	8008400 <tcp_input+0x4d8>
        pcb->rtime = 0;
 80085a8:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 80085aa:	4620      	mov	r0, r4
        pcb->rtime = 0;
 80085ac:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80085ae:	f000 fff9 	bl	80095a4 <tcp_rexmit_rto>
 80085b2:	e725      	b.n	8008400 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 80085b4:	06d8      	lsls	r0, r3, #27
 80085b6:	d557      	bpl.n	8008668 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80085b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80085ba:	6838      	ldr	r0, [r7, #0]
 80085bc:	43db      	mvns	r3, r3
 80085be:	42c3      	cmn	r3, r0
 80085c0:	d443      	bmi.n	800864a <tcp_input+0x722>
 80085c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80085c4:	1ac3      	subs	r3, r0, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dc3f      	bgt.n	800864a <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 80085ca:	2304      	movs	r3, #4
 80085cc:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80085ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80085d0:	b143      	cbz	r3, 80085e4 <tcp_input+0x6bc>
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	b933      	cbnz	r3, 80085e4 <tcp_input+0x6bc>
 80085d6:	4b7b      	ldr	r3, [pc, #492]	; (80087c4 <tcp_input+0x89c>)
 80085d8:	f240 3251 	movw	r2, #849	; 0x351
 80085dc:	497e      	ldr	r1, [pc, #504]	; (80087d8 <tcp_input+0x8b0>)
 80085de:	487b      	ldr	r0, [pc, #492]	; (80087cc <tcp_input+0x8a4>)
 80085e0:	f002 ff9e 	bl	800b520 <iprintf>
        if (pcb->listener == NULL) {
 80085e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80085e6:	b91b      	cbnz	r3, 80085f0 <tcp_input+0x6c8>
            tcp_abort(pcb);
 80085e8:	4620      	mov	r0, r4
 80085ea:	f7fe fdf9 	bl	80071e0 <tcp_abort>
            goto aborted;
 80085ee:	e5cd      	b.n	800818c <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f8      	beq.n	80085e8 <tcp_input+0x6c0>
 80085f6:	2200      	movs	r2, #0
 80085f8:	4621      	mov	r1, r4
 80085fa:	6920      	ldr	r0, [r4, #16]
 80085fc:	4798      	blx	r3
        if (err != ERR_OK) {
 80085fe:	b110      	cbz	r0, 8008606 <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8008600:	300d      	adds	r0, #13
 8008602:	d1f1      	bne.n	80085e8 <tcp_input+0x6c0>
 8008604:	e5c2      	b.n	800818c <tcp_input+0x264>
        tcp_receive(pcb);
 8008606:	4620      	mov	r0, r4
 8008608:	f7fe ff3e 	bl	8007488 <tcp_receive>
        if (recv_acked != 0) {
 800860c:	9b05      	ldr	r3, [sp, #20]
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	b113      	cbz	r3, 8008618 <tcp_input+0x6f0>
          recv_acked--;
 8008612:	3b01      	subs	r3, #1
 8008614:	9a05      	ldr	r2, [sp, #20]
 8008616:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008618:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800861a:	f241 111c 	movw	r1, #4380	; 0x111c
 800861e:	0053      	lsls	r3, r2, #1
 8008620:	0092      	lsls	r2, r2, #2
 8008622:	428b      	cmp	r3, r1
 8008624:	bf38      	it	cc
 8008626:	460b      	movcc	r3, r1
 8008628:	4293      	cmp	r3, r2
 800862a:	bf28      	it	cs
 800862c:	4613      	movcs	r3, r2
 800862e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008632:	f898 3000 	ldrb.w	r3, [r8]
 8008636:	069a      	lsls	r2, r3, #26
 8008638:	f57f aee2 	bpl.w	8008400 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 800863c:	7ea3      	ldrb	r3, [r4, #26]
 800863e:	f043 0302 	orr.w	r3, r3, #2
 8008642:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8008644:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 8008646:	7523      	strb	r3, [r4, #20]
 8008648:	e6da      	b.n	8008400 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800864a:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800864c:	9a04      	ldr	r2, [sp, #16]
 800864e:	f8db 1000 	ldr.w	r1, [fp]
 8008652:	8816      	ldrh	r6, [r2, #0]
 8008654:	881a      	ldrh	r2, [r3, #0]
 8008656:	4431      	add	r1, r6
 8008658:	9201      	str	r2, [sp, #4]
 800865a:	885b      	ldrh	r3, [r3, #2]
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4b5d      	ldr	r3, [pc, #372]	; (80087d4 <tcp_input+0x8ac>)
 8008660:	1d1a      	adds	r2, r3, #4
 8008662:	f000 ff45 	bl	80094f0 <tcp_rst>
 8008666:	e6cb      	b.n	8008400 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008668:	2900      	cmp	r1, #0
 800866a:	f43f aec9 	beq.w	8008400 <tcp_input+0x4d8>
 800866e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008670:	f8db 2000 	ldr.w	r2, [fp]
 8008674:	3b01      	subs	r3, #1
 8008676:	4293      	cmp	r3, r2
 8008678:	f47f aec2 	bne.w	8008400 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 800867c:	4620      	mov	r0, r4
 800867e:	f000 ffad 	bl	80095dc <tcp_rexmit>
 8008682:	e6bd      	b.n	8008400 <tcp_input+0x4d8>
    tcp_receive(pcb);
 8008684:	4620      	mov	r0, r4
 8008686:	f7fe feff 	bl	8007488 <tcp_receive>
 800868a:	e7d2      	b.n	8008632 <tcp_input+0x70a>
    tcp_receive(pcb);
 800868c:	4620      	mov	r0, r4
 800868e:	f7fe fefb 	bl	8007488 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008692:	f898 3000 	ldrb.w	r3, [r8]
 8008696:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 800869e:	d031      	beq.n	8008704 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80086a0:	f013 0f10 	tst.w	r3, #16
 80086a4:	7ea3      	ldrb	r3, [r4, #26]
 80086a6:	d028      	beq.n	80086fa <tcp_input+0x7d2>
 80086a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4291      	cmp	r1, r2
 80086ae:	d124      	bne.n	80086fa <tcp_input+0x7d2>
 80086b0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80086b2:	bb12      	cbnz	r2, 80086fa <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 80086b4:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 80086b8:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 80086ba:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80086bc:	f7fe f980 	bl	80069c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80086c0:	f8d9 3000 	ldr.w	r3, [r9]
 80086c4:	429c      	cmp	r4, r3
 80086c6:	d10a      	bne.n	80086de <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 80086c8:	68e3      	ldr	r3, [r4, #12]
 80086ca:	f8c9 3000 	str.w	r3, [r9]
 80086ce:	e008      	b.n	80086e2 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	4294      	cmp	r4, r2
 80086d4:	d102      	bne.n	80086dc <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 80086d6:	68e2      	ldr	r2, [r4, #12]
 80086d8:	60da      	str	r2, [r3, #12]
 80086da:	e002      	b.n	80086e2 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80086dc:	4613      	mov	r3, r2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1f6      	bne.n	80086d0 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 80086e2:	2201      	movs	r2, #1
 80086e4:	4b3d      	ldr	r3, [pc, #244]	; (80087dc <tcp_input+0x8b4>)
 80086e6:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80086e8:	230a      	movs	r3, #10
 80086ea:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80086ec:	4b3c      	ldr	r3, [pc, #240]	; (80087e0 <tcp_input+0x8b8>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	601c      	str	r4, [r3, #0]
 80086f2:	60e2      	str	r2, [r4, #12]
 80086f4:	f001 f89e 	bl	8009834 <tcp_timer_needed>
 80086f8:	e682      	b.n	8008400 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 80086fa:	f043 0302 	orr.w	r3, r3, #2
 80086fe:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8008700:	2308      	movs	r3, #8
 8008702:	e7a0      	b.n	8008646 <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008704:	06db      	lsls	r3, r3, #27
 8008706:	f57f ae7b 	bpl.w	8008400 <tcp_input+0x4d8>
 800870a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	f47f ae76 	bne.w	8008400 <tcp_input+0x4d8>
 8008714:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008716:	2b00      	cmp	r3, #0
 8008718:	f47f ae72 	bne.w	8008400 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 800871c:	2306      	movs	r3, #6
 800871e:	e792      	b.n	8008646 <tcp_input+0x71e>
    tcp_receive(pcb);
 8008720:	4620      	mov	r0, r4
 8008722:	f7fe feb1 	bl	8007488 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008726:	f898 3000 	ldrb.w	r3, [r8]
 800872a:	069f      	lsls	r7, r3, #26
 800872c:	f57f ae68 	bpl.w	8008400 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8008730:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8008732:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 8008734:	f043 0302 	orr.w	r3, r3, #2
 8008738:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800873a:	f7fe f941 	bl	80069c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800873e:	f8d9 3000 	ldr.w	r3, [r9]
 8008742:	429c      	cmp	r4, r3
 8008744:	d0c0      	beq.n	80086c8 <tcp_input+0x7a0>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0cb      	beq.n	80086e2 <tcp_input+0x7ba>
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	4294      	cmp	r4, r2
 800874e:	d0c2      	beq.n	80086d6 <tcp_input+0x7ae>
 8008750:	4613      	mov	r3, r2
 8008752:	e7f8      	b.n	8008746 <tcp_input+0x81e>
    tcp_receive(pcb);
 8008754:	4620      	mov	r0, r4
 8008756:	f7fe fe97 	bl	8007488 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	06de      	lsls	r6, r3, #27
 8008760:	f57f ae4e 	bpl.w	8008400 <tcp_input+0x4d8>
 8008764:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	f47f ae49 	bne.w	8008400 <tcp_input+0x4d8>
 800876e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f ae45 	bne.w	8008400 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8008776:	4620      	mov	r0, r4
 8008778:	f7fe f922 	bl	80069c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800877c:	f8d9 3000 	ldr.w	r3, [r9]
 8008780:	429c      	cmp	r4, r3
 8008782:	d0a1      	beq.n	80086c8 <tcp_input+0x7a0>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0ac      	beq.n	80086e2 <tcp_input+0x7ba>
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	4294      	cmp	r4, r2
 800878c:	d0a3      	beq.n	80086d6 <tcp_input+0x7ae>
 800878e:	4613      	mov	r3, r2
 8008790:	e7f8      	b.n	8008784 <tcp_input+0x85c>
    tcp_receive(pcb);
 8008792:	4620      	mov	r0, r4
 8008794:	f7fe fe78 	bl	8007488 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	06d8      	lsls	r0, r3, #27
 800879e:	f57f ae2f 	bpl.w	8008400 <tcp_input+0x4d8>
 80087a2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	f47f ae2a 	bne.w	8008400 <tcp_input+0x4d8>
 80087ac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f47f ae26 	bne.w	8008400 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 80087b4:	f898 3000 	ldrb.w	r3, [r8]
 80087b8:	f043 0310 	orr.w	r3, r3, #16
 80087bc:	f888 3000 	strb.w	r3, [r8]
 80087c0:	e61e      	b.n	8008400 <tcp_input+0x4d8>
 80087c2:	bf00      	nop
 80087c4:	0800db66 	.word	0x0800db66
 80087c8:	0800db05 	.word	0x0800db05
 80087cc:	0800c987 	.word	0x0800c987
 80087d0:	0800db1b 	.word	0x0800db1b
 80087d4:	20000250 	.word	0x20000250
 80087d8:	0800db2e 	.word	0x0800db2e
 80087dc:	200037e8 	.word	0x200037e8
 80087e0:	200037fc 	.word	0x200037fc
        if (recv_acked > 0) {
 80087e4:	9b05      	ldr	r3, [sp, #20]
 80087e6:	881a      	ldrh	r2, [r3, #0]
 80087e8:	b122      	cbz	r2, 80087f4 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80087ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80087ec:	b9eb      	cbnz	r3, 800882a <tcp_input+0x902>
          recv_acked = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	9a05      	ldr	r2, [sp, #20]
 80087f2:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 80087f4:	4620      	mov	r0, r4
 80087f6:	f7ff fb77 	bl	8007ee8 <tcp_input_delayed_close>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	f47f acc6 	bne.w	800818c <tcp_input+0x264>
        if (recv_data != NULL) {
 8008800:	f8da 3000 	ldr.w	r3, [sl]
 8008804:	b33b      	cbz	r3, 8008856 <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008806:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008808:	b133      	cbz	r3, 8008818 <tcp_input+0x8f0>
 800880a:	4b40      	ldr	r3, [pc, #256]	; (800890c <tcp_input+0x9e4>)
 800880c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8008810:	493f      	ldr	r1, [pc, #252]	; (8008910 <tcp_input+0x9e8>)
 8008812:	4840      	ldr	r0, [pc, #256]	; (8008914 <tcp_input+0x9ec>)
 8008814:	f002 fe84 	bl	800b520 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008818:	7ea3      	ldrb	r3, [r4, #26]
 800881a:	f013 0310 	ands.w	r3, r3, #16
 800881e:	d00a      	beq.n	8008836 <tcp_input+0x90e>
            pbuf_free(recv_data);
 8008820:	f8da 0000 	ldr.w	r0, [sl]
 8008824:	f7fd fc00 	bl	8006028 <pbuf_free>
 8008828:	e6de      	b.n	80085e8 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800882a:	4621      	mov	r1, r4
 800882c:	6920      	ldr	r0, [r4, #16]
 800882e:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8008830:	300d      	adds	r0, #13
 8008832:	d1dc      	bne.n	80087ee <tcp_input+0x8c6>
 8008834:	e4aa      	b.n	800818c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008836:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800883a:	b31e      	cbz	r6, 8008884 <tcp_input+0x95c>
 800883c:	f8da 2000 	ldr.w	r2, [sl]
 8008840:	4621      	mov	r1, r4
 8008842:	6920      	ldr	r0, [r4, #16]
 8008844:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8008846:	f110 0f0d 	cmn.w	r0, #13
 800884a:	f43f ac9f 	beq.w	800818c <tcp_input+0x264>
          if (err != ERR_OK) {
 800884e:	b110      	cbz	r0, 8008856 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8008850:	f8da 3000 	ldr.w	r3, [sl]
 8008854:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8008856:	f898 3000 	ldrb.w	r3, [r8]
 800885a:	069a      	lsls	r2, r3, #26
 800885c:	d505      	bpl.n	800886a <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 800885e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008860:	b1c3      	cbz	r3, 8008894 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008862:	7b5a      	ldrb	r2, [r3, #13]
 8008864:	f042 0220 	orr.w	r2, r2, #32
 8008868:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800886a:	2200      	movs	r2, #0
 800886c:	4b2a      	ldr	r3, [pc, #168]	; (8008918 <tcp_input+0x9f0>)
        if (tcp_input_delayed_close(pcb)) {
 800886e:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8008870:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008872:	f7ff fb39 	bl	8007ee8 <tcp_input_delayed_close>
 8008876:	2800      	cmp	r0, #0
 8008878:	f47f ac88 	bne.w	800818c <tcp_input+0x264>
        tcp_output(pcb);
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fcb9 	bl	80091f4 <tcp_output>
 8008882:	e483      	b.n	800818c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008884:	4633      	mov	r3, r6
 8008886:	f8da 2000 	ldr.w	r2, [sl]
 800888a:	4621      	mov	r1, r4
 800888c:	4630      	mov	r0, r6
 800888e:	f7fe fb99 	bl	8006fc4 <tcp_recv_null>
 8008892:	e7d8      	b.n	8008846 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008894:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008896:	f640 2228 	movw	r2, #2600	; 0xa28
            TCP_EVENT_CLOSED(pcb, err);
 800889a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800889e:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 80088a0:	bf1c      	itt	ne
 80088a2:	3301      	addne	r3, #1
 80088a4:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	d0df      	beq.n	800886a <tcp_input+0x942>
 80088aa:	2300      	movs	r3, #0
 80088ac:	4621      	mov	r1, r4
 80088ae:	6920      	ldr	r0, [r4, #16]
 80088b0:	461a      	mov	r2, r3
 80088b2:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 80088b4:	300d      	adds	r0, #13
 80088b6:	d1d8      	bne.n	800886a <tcp_input+0x942>
 80088b8:	e468      	b.n	800818c <tcp_input+0x264>
      if (prev != NULL) {
 80088ba:	b13c      	cbz	r4, 80088cc <tcp_input+0x9a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80088bc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80088c0:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80088c2:	4b16      	ldr	r3, [pc, #88]	; (800891c <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80088c4:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80088c8:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	0759      	lsls	r1, r3, #29
 80088d2:	f53f ace6 	bmi.w	80082a2 <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 80088d6:	06dc      	lsls	r4, r3, #27
 80088d8:	f57f ad18 	bpl.w	800830c <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80088dc:	9b04      	ldr	r3, [sp, #16]
 80088de:	f8db 1000 	ldr.w	r1, [fp]
 80088e2:	881c      	ldrh	r4, [r3, #0]
 80088e4:	8813      	ldrh	r3, [r2, #0]
 80088e6:	e88d 0009 	stmia.w	sp, {r0, r3}
 80088ea:	e4c4      	b.n	8008276 <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80088ec:	2900      	cmp	r1, #0
 80088ee:	f47f ad7d 	bne.w	80083ec <tcp_input+0x4c4>
 80088f2:	4b06      	ldr	r3, [pc, #24]	; (800890c <tcp_input+0x9e4>)
 80088f4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80088f8:	4909      	ldr	r1, [pc, #36]	; (8008920 <tcp_input+0x9f8>)
 80088fa:	4806      	ldr	r0, [pc, #24]	; (8008914 <tcp_input+0x9ec>)
 80088fc:	f002 fe10 	bl	800b520 <iprintf>
 8008900:	e574      	b.n	80083ec <tcp_input+0x4c4>
      if (prev != NULL) {
 8008902:	f1ba 0f00 	cmp.w	sl, #0
 8008906:	f47f abfe 	bne.w	8008106 <tcp_input+0x1de>
 800890a:	e40d      	b.n	8008128 <tcp_input+0x200>
 800890c:	0800db66 	.word	0x0800db66
 8008910:	0800db4c 	.word	0x0800db4c
 8008914:	0800c987 	.word	0x0800c987
 8008918:	20003800 	.word	0x20003800
 800891c:	200037f4 	.word	0x200037f4
 8008920:	0800dae5 	.word	0x0800dae5

08008924 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8008924:	4a02      	ldr	r2, [pc, #8]	; (8008930 <tcp_trigger_input_pcb_close+0xc>)
 8008926:	7813      	ldrb	r3, [r2, #0]
 8008928:	f043 0310 	orr.w	r3, r3, #16
 800892c:	7013      	strb	r3, [r2, #0]
 800892e:	4770      	bx	lr
 8008930:	200001fc 	.word	0x200001fc

08008934 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	460c      	mov	r4, r1
 8008938:	461e      	mov	r6, r3
 800893a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800893e:	4294      	cmp	r4, r2
{
 8008940:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 8008942:	d228      	bcs.n	8008996 <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8008944:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8008948:	07ad      	lsls	r5, r5, #30
 800894a:	d407      	bmi.n	800895c <tcp_pbuf_prealloc+0x28>
 800894c:	7e9d      	ldrb	r5, [r3, #26]
 800894e:	066d      	lsls	r5, r5, #25
 8008950:	d421      	bmi.n	8008996 <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8008952:	b119      	cbz	r1, 800895c <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8008954:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008956:	b909      	cbnz	r1, 800895c <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8008958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895a:	b1e3      	cbz	r3, 8008996 <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800895c:	f204 238d 	addw	r3, r4, #653	; 0x28d
 8008960:	f023 0103 	bic.w	r1, r3, #3
 8008964:	428a      	cmp	r2, r1
 8008966:	bf28      	it	cs
 8008968:	460a      	movcs	r2, r1
 800896a:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800896c:	2200      	movs	r2, #0
 800896e:	f7fd fbbd 	bl	80060ec <pbuf_alloc>
  if (p == NULL) {
 8008972:	4605      	mov	r5, r0
 8008974:	b168      	cbz	r0, 8008992 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8008976:	6803      	ldr	r3, [r0, #0]
 8008978:	b133      	cbz	r3, 8008988 <tcp_pbuf_prealloc+0x54>
 800897a:	4b08      	ldr	r3, [pc, #32]	; (800899c <tcp_pbuf_prealloc+0x68>)
 800897c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008980:	4907      	ldr	r1, [pc, #28]	; (80089a0 <tcp_pbuf_prealloc+0x6c>)
 8008982:	4808      	ldr	r0, [pc, #32]	; (80089a4 <tcp_pbuf_prealloc+0x70>)
 8008984:	f002 fdcc 	bl	800b520 <iprintf>
  *oversize = p->len - length;
 8008988:	896b      	ldrh	r3, [r5, #10]
 800898a:	1b1b      	subs	r3, r3, r4
 800898c:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800898e:	812c      	strh	r4, [r5, #8]
 8008990:	816c      	strh	r4, [r5, #10]
  return p;
}
 8008992:	4628      	mov	r0, r5
 8008994:	bd70      	pop	{r4, r5, r6, pc}
 8008996:	4621      	mov	r1, r4
 8008998:	e7e8      	b.n	800896c <tcp_pbuf_prealloc+0x38>
 800899a:	bf00      	nop
 800899c:	0800de69 	.word	0x0800de69
 80089a0:	0800de9c 	.word	0x0800de9c
 80089a4:	0800c987 	.word	0x0800c987

080089a8 <tcp_create_segment>:
{
 80089a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	f89d a020 	ldrb.w	sl, [sp, #32]
 80089b0:	4680      	mov	r8, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80089b2:	2003      	movs	r0, #3
{
 80089b4:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80089b6:	f01a 0f01 	tst.w	sl, #1
{
 80089ba:	4616      	mov	r6, r2
 80089bc:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80089be:	bf14      	ite	ne
 80089c0:	2504      	movne	r5, #4
 80089c2:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80089c4:	f7fd f9b0 	bl	8005d28 <memp_malloc>
 80089c8:	4604      	mov	r4, r0
 80089ca:	b928      	cbnz	r0, 80089d8 <tcp_create_segment+0x30>
    pbuf_free(p);
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7fd fb2b 	bl	8006028 <pbuf_free>
}
 80089d2:	4620      	mov	r0, r4
 80089d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 80089d8:	2300      	movs	r3, #0
  seg->flags = optflags;
 80089da:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80089de:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 80089e2:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80089e6:	893b      	ldrh	r3, [r7, #8]
 80089e8:	4553      	cmp	r3, sl
 80089ea:	d205      	bcs.n	80089f8 <tcp_create_segment+0x50>
 80089ec:	4b1e      	ldr	r3, [pc, #120]	; (8008a68 <tcp_create_segment+0xc0>)
 80089ee:	22ba      	movs	r2, #186	; 0xba
 80089f0:	491e      	ldr	r1, [pc, #120]	; (8008a6c <tcp_create_segment+0xc4>)
 80089f2:	481f      	ldr	r0, [pc, #124]	; (8008a70 <tcp_create_segment+0xc8>)
 80089f4:	f002 fd94 	bl	800b520 <iprintf>
  seg->len = p->tot_len - optlen;
 80089f8:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80089fa:	4638      	mov	r0, r7
 80089fc:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 80089fe:	eba3 030a 	sub.w	r3, r3, sl
 8008a02:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8008a04:	f7fd fb0a 	bl	800601c <pbuf_header>
 8008a08:	4607      	mov	r7, r0
 8008a0a:	b120      	cbz	r0, 8008a16 <tcp_create_segment+0x6e>
    tcp_seg_free(seg);
 8008a0c:	4620      	mov	r0, r4
    return NULL;
 8008a0e:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 8008a10:	f7fd ff5a 	bl	80068c8 <tcp_seg_free>
    return NULL;
 8008a14:	e7dd      	b.n	80089d2 <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008a16:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008a18:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008a1a:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008a1e:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008a22:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008a24:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008a28:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008a2c:	f7fa fcb7 	bl	800339e <lwip_htons>
 8008a30:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008a34:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008a38:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8008a3c:	f7fa fcaf 	bl	800339e <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008a40:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008a44:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008a48:	4648      	mov	r0, r9
 8008a4a:	f7fa fcab 	bl	80033a4 <lwip_htonl>
 8008a4e:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008a52:	b2a8      	uxth	r0, r5
 8008a54:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8008a58:	f7fa fca1 	bl	800339e <lwip_htons>
  seg->tcphdr->urgp = 0;
 8008a5c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008a5e:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8008a62:	749f      	strb	r7, [r3, #18]
 8008a64:	74df      	strb	r7, [r3, #19]
  return seg;
 8008a66:	e7b4      	b.n	80089d2 <tcp_create_segment+0x2a>
 8008a68:	0800de69 	.word	0x0800de69
 8008a6c:	0800dcf1 	.word	0x0800dcf1
 8008a70:	0800c987 	.word	0x0800c987

08008a74 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008a74:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8008a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008a78:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008a7e:	2001      	movs	r0, #1
 8008a80:	2200      	movs	r2, #0
 8008a82:	f7fd fb33 	bl	80060ec <pbuf_alloc>
  if (p != NULL) {
 8008a86:	4606      	mov	r6, r0
 8008a88:	b340      	cbz	r0, 8008adc <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008a8a:	8943      	ldrh	r3, [r0, #10]
 8008a8c:	2b13      	cmp	r3, #19
 8008a8e:	dc05      	bgt.n	8008a9c <tcp_output_alloc_header.constprop.0+0x28>
 8008a90:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <tcp_output_alloc_header.constprop.0+0x6c>)
 8008a92:	2273      	movs	r2, #115	; 0x73
 8008a94:	4913      	ldr	r1, [pc, #76]	; (8008ae4 <tcp_output_alloc_header.constprop.0+0x70>)
 8008a96:	4814      	ldr	r0, [pc, #80]	; (8008ae8 <tcp_output_alloc_header.constprop.0+0x74>)
 8008a98:	f002 fd42 	bl	800b520 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 8008a9c:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008a9e:	8ae8      	ldrh	r0, [r5, #22]
 8008aa0:	f7fa fc7d 	bl	800339e <lwip_htons>
 8008aa4:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008aa6:	8b28      	ldrh	r0, [r5, #24]
 8008aa8:	f7fa fc79 	bl	800339e <lwip_htons>
    tcphdr->seqno = seqno_be;
 8008aac:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008aae:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008ab0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008ab2:	f7fa fc77 	bl	80033a4 <lwip_htonl>
 8008ab6:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008ab8:	f245 0010 	movw	r0, #20496	; 0x5010
 8008abc:	f7fa fc6f 	bl	800339e <lwip_htons>
 8008ac0:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008ac2:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8008ac4:	f7fa fc6b 	bl	800339e <lwip_htons>
    tcphdr->chksum = 0;
 8008ac8:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008aca:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 8008acc:	7423      	strb	r3, [r4, #16]
 8008ace:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8008ad0:	74a3      	strb	r3, [r4, #18]
 8008ad2:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008ad4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008ad6:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008ad8:	4413      	add	r3, r2
 8008ada:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8008adc:	4630      	mov	r0, r6
 8008ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae0:	0800de69 	.word	0x0800de69
 8008ae4:	0800de3b 	.word	0x0800de3b
 8008ae8:	0800c987 	.word	0x0800c987

08008aec <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	b091      	sub	sp, #68	; 0x44
 8008af2:	4605      	mov	r5, r0
 8008af4:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8008af6:	2300      	movs	r3, #0
{
 8008af8:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 8008afa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008afe:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008b02:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008b04:	085b      	lsrs	r3, r3, #1
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008b06:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	bf28      	it	cs
 8008b0c:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	bf08      	it	eq
 8008b12:	4613      	moveq	r3, r2
 8008b14:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008b16:	b959      	cbnz	r1, 8008b30 <tcp_write+0x44>
 8008b18:	4ba1      	ldr	r3, [pc, #644]	; (8008da0 <tcp_write+0x2b4>)
 8008b1a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8008b1e:	49a1      	ldr	r1, [pc, #644]	; (8008da4 <tcp_write+0x2b8>)
 8008b20:	48a1      	ldr	r0, [pc, #644]	; (8008da8 <tcp_write+0x2bc>)
 8008b22:	f002 fcfd 	bl	800b520 <iprintf>
 8008b26:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 8008b2a:	b011      	add	sp, #68	; 0x44
 8008b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 8008b30:	7d2b      	ldrb	r3, [r5, #20]
 8008b32:	2b07      	cmp	r3, #7
 8008b34:	d003      	beq.n	8008b3e <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 8008b36:	3b02      	subs	r3, #2
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	f200 8254 	bhi.w	8008fe6 <tcp_write+0x4fa>
  } else if (len == 0) {
 8008b3e:	9b05      	ldr	r3, [sp, #20]
 8008b40:	b1db      	cbz	r3, 8008b7a <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 8008b42:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8008b46:	9a05      	ldr	r2, [sp, #20]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d206      	bcs.n	8008b5a <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 8008b4c:	7eab      	ldrb	r3, [r5, #26]
 8008b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b52:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 8008b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b58:	e7e7      	b.n	8008b2a <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008b5a:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 8008b5e:	2a08      	cmp	r2, #8
 8008b60:	d8f4      	bhi.n	8008b4c <tcp_write+0x60>
 8008b62:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 8008b64:	b30a      	cbz	r2, 8008baa <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8008b66:	b943      	cbnz	r3, 8008b7a <tcp_write+0x8e>
 8008b68:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008b6a:	b933      	cbnz	r3, 8008b7a <tcp_write+0x8e>
 8008b6c:	4b8c      	ldr	r3, [pc, #560]	; (8008da0 <tcp_write+0x2b4>)
 8008b6e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8008b72:	498e      	ldr	r1, [pc, #568]	; (8008dac <tcp_write+0x2c0>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8008b74:	488c      	ldr	r0, [pc, #560]	; (8008da8 <tcp_write+0x2bc>)
 8008b76:	f002 fcd3 	bl	800b520 <iprintf>
  queuelen = pcb->snd_queuelen;
 8008b7a:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  if (pcb->unsent != NULL) {
 8008b7e:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8008b80:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 8008b82:	b9dc      	cbnz	r4, 8008bbc <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008b84:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 8008b88:	f1b8 0f00 	cmp.w	r8, #0
 8008b8c:	f000 8103 	beq.w	8008d96 <tcp_write+0x2aa>
 8008b90:	4b83      	ldr	r3, [pc, #524]	; (8008da0 <tcp_write+0x2b4>)
 8008b92:	f240 2225 	movw	r2, #549	; 0x225
 8008b96:	4986      	ldr	r1, [pc, #536]	; (8008db0 <tcp_write+0x2c4>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008b98:	4627      	mov	r7, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008b9a:	4883      	ldr	r0, [pc, #524]	; (8008da8 <tcp_write+0x2bc>)
  u16_t extendlen = 0;
 8008b9c:	46a2      	mov	sl, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8008b9e:	f002 fcbf 	bl	800b520 <iprintf>
  u16_t oversize_used = 0;
 8008ba2:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 8008ba4:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 8008ba6:	46a1      	mov	r9, r4
 8008ba8:	e094      	b.n	8008cd4 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8008baa:	b913      	cbnz	r3, 8008bb2 <tcp_write+0xc6>
 8008bac:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0e3      	beq.n	8008b7a <tcp_write+0x8e>
 8008bb2:	4b7b      	ldr	r3, [pc, #492]	; (8008da0 <tcp_write+0x2b4>)
 8008bb4:	f240 1259 	movw	r2, #345	; 0x159
 8008bb8:	497e      	ldr	r1, [pc, #504]	; (8008db4 <tcp_write+0x2c8>)
 8008bba:	e7db      	b.n	8008b74 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 8008bbc:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008bbe:	f8d7 b000 	ldr.w	fp, [r7]
 8008bc2:	f1bb 0f00 	cmp.w	fp, #0
 8008bc6:	f040 80b6 	bne.w	8008d36 <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008bca:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008bcc:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008bce:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008bd2:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008bd4:	bf14      	ite	ne
 8008bd6:	2404      	movne	r4, #4
 8008bd8:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008bda:	4423      	add	r3, r4
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	da06      	bge.n	8008bee <tcp_write+0x102>
 8008be0:	4b6f      	ldr	r3, [pc, #444]	; (8008da0 <tcp_write+0x2b4>)
 8008be2:	f240 12c7 	movw	r2, #455	; 0x1c7
 8008be6:	4974      	ldr	r1, [pc, #464]	; (8008db8 <tcp_write+0x2cc>)
 8008be8:	486f      	ldr	r0, [pc, #444]	; (8008da8 <tcp_write+0x2bc>)
 8008bea:	f002 fc99 	bl	800b520 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008bee:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 8008bf2:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 8008bf4:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008bf8:	eba3 0909 	sub.w	r9, r3, r9
    oversize = pcb->unsent_oversize;
 8008bfc:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 8008c00:	eba9 0904 	sub.w	r9, r9, r4
 8008c04:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 8008c08:	2e00      	cmp	r6, #0
 8008c0a:	f000 8096 	beq.w	8008d3a <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8008c0e:	45b1      	cmp	r9, r6
 8008c10:	d206      	bcs.n	8008c20 <tcp_write+0x134>
 8008c12:	4b63      	ldr	r3, [pc, #396]	; (8008da0 <tcp_write+0x2b4>)
 8008c14:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008c18:	4968      	ldr	r1, [pc, #416]	; (8008dbc <tcp_write+0x2d0>)
 8008c1a:	4863      	ldr	r0, [pc, #396]	; (8008da8 <tcp_write+0x2bc>)
 8008c1c:	f002 fc80 	bl	800b520 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8008c20:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8008c24:	463c      	mov	r4, r7
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8008c26:	9a05      	ldr	r2, [sp, #20]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	bf28      	it	cs
 8008c2c:	461a      	movcs	r2, r3
 8008c2e:	454a      	cmp	r2, r9
 8008c30:	4616      	mov	r6, r2
 8008c32:	bfa8      	it	ge
 8008c34:	464e      	movge	r6, r9
      space -= oversize_used;
 8008c36:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 8008c3a:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 8008c3c:	fa1f f989 	uxth.w	r9, r9
      oversize -= oversize_used;
 8008c40:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8008c44:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008c48:	b153      	cbz	r3, 8008c60 <tcp_write+0x174>
 8008c4a:	9b05      	ldr	r3, [sp, #20]
 8008c4c:	429e      	cmp	r6, r3
 8008c4e:	f000 81cd 	beq.w	8008fec <tcp_write+0x500>
 8008c52:	4b53      	ldr	r3, [pc, #332]	; (8008da0 <tcp_write+0x2b4>)
 8008c54:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008c58:	4959      	ldr	r1, [pc, #356]	; (8008dc0 <tcp_write+0x2d4>)
 8008c5a:	4853      	ldr	r0, [pc, #332]	; (8008da8 <tcp_write+0x2bc>)
 8008c5c:	f002 fc60 	bl	800b520 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8008c60:	9b05      	ldr	r3, [sp, #20]
 8008c62:	429e      	cmp	r6, r3
 8008c64:	f080 81c2 	bcs.w	8008fec <tcp_write+0x500>
 8008c68:	f1b9 0f00 	cmp.w	r9, #0
 8008c6c:	f000 808f 	beq.w	8008d8e <tcp_write+0x2a2>
 8008c70:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8008c74:	f1ba 0f00 	cmp.w	sl, #0
 8008c78:	f000 808a 	beq.w	8008d90 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008c7c:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008c80:	454c      	cmp	r4, r9
 8008c82:	bfa8      	it	ge
 8008c84:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008c86:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008c88:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008c8c:	d557      	bpl.n	8008d3e <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8008c8e:	2301      	movs	r3, #1
 8008c90:	464a      	mov	r2, r9
 8008c92:	9500      	str	r5, [sp, #0]
 8008c94:	4641      	mov	r1, r8
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	2004      	movs	r0, #4
 8008c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008ca2:	f7ff fe47 	bl	8008934 <tcp_pbuf_prealloc>
 8008ca6:	4681      	mov	r9, r0
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	f000 8199 	beq.w	8008fe0 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8008cae:	9b08      	ldr	r3, [sp, #32]
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	6840      	ldr	r0, [r0, #4]
 8008cb4:	1999      	adds	r1, r3, r6
 8008cb6:	f002 fb74 	bl	800b3a2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8008cba:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8008cbc:	f7fd fb66 	bl	800638c <pbuf_clen>
 8008cc0:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 8008cc2:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 8008cc6:	4403      	add	r3, r0
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	9306      	str	r3, [sp, #24]
      pos += seglen;
 8008ccc:	44b0      	add	r8, r6
 8008cce:	463c      	mov	r4, r7
 8008cd0:	fa1f f888 	uxth.w	r8, r8
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd6:	f04f 0b00 	mov.w	fp, #0
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008ce2:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8008ce4:	9b05      	ldr	r3, [sp, #20]
 8008ce6:	4598      	cmp	r8, r3
 8008ce8:	d370      	bcc.n	8008dcc <tcp_write+0x2e0>
  if (oversize_used > 0) {
 8008cea:	b146      	cbz	r6, 8008cfe <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 8008cec:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	f040 8110 	bne.w	8008f18 <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 8008cf8:	893b      	ldrh	r3, [r7, #8]
 8008cfa:	441e      	add	r6, r3
 8008cfc:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 8008cfe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008d02:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 8008d06:	f1b9 0f00 	cmp.w	r9, #0
 8008d0a:	f000 811e 	beq.w	8008f4a <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8008d0e:	b937      	cbnz	r7, 8008d1e <tcp_write+0x232>
 8008d10:	4b23      	ldr	r3, [pc, #140]	; (8008da0 <tcp_write+0x2b4>)
 8008d12:	f240 22bb 	movw	r2, #699	; 0x2bb
 8008d16:	492b      	ldr	r1, [pc, #172]	; (8008dc4 <tcp_write+0x2d8>)
 8008d18:	4823      	ldr	r0, [pc, #140]	; (8008da8 <tcp_write+0x2bc>)
 8008d1a:	f002 fc01 	bl	800b520 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8008d1e:	4649      	mov	r1, r9
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fd fb4f 	bl	80063c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8008d26:	893b      	ldrh	r3, [r7, #8]
 8008d28:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 8008d30:	f8c7 b000 	str.w	fp, [r7]
 8008d34:	e12b      	b.n	8008f8e <tcp_write+0x4a2>
 8008d36:	465f      	mov	r7, fp
 8008d38:	e741      	b.n	8008bbe <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008d3a:	4634      	mov	r4, r6
 8008d3c:	e782      	b.n	8008c44 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 9000 	ldr.w	r9, [r3]
 8008d44:	f1b9 0f00 	cmp.w	r9, #0
 8008d48:	d112      	bne.n	8008d70 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8008d4a:	7b1a      	ldrb	r2, [r3, #12]
 8008d4c:	2a01      	cmp	r2, #1
 8008d4e:	d111      	bne.n	8008d74 <tcp_write+0x288>
 8008d50:	895a      	ldrh	r2, [r3, #10]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	9a08      	ldr	r2, [sp, #32]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d10b      	bne.n	8008d74 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008d5c:	b136      	cbz	r6, 8008d6c <tcp_write+0x280>
 8008d5e:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <tcp_write+0x2b4>)
 8008d60:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008d64:	4918      	ldr	r1, [pc, #96]	; (8008dc8 <tcp_write+0x2dc>)
 8008d66:	4810      	ldr	r0, [pc, #64]	; (8008da8 <tcp_write+0x2bc>)
 8008d68:	f002 fbda 	bl	800b520 <iprintf>
          extendlen = seglen;
 8008d6c:	46c2      	mov	sl, r8
 8008d6e:	e7ad      	b.n	8008ccc <tcp_write+0x1e0>
 8008d70:	464b      	mov	r3, r9
 8008d72:	e7e5      	b.n	8008d40 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008d74:	2201      	movs	r2, #1
 8008d76:	4641      	mov	r1, r8
 8008d78:	2004      	movs	r0, #4
 8008d7a:	f7fd f9b7 	bl	80060ec <pbuf_alloc>
 8008d7e:	4681      	mov	r9, r0
 8008d80:	2800      	cmp	r0, #0
 8008d82:	f000 812d 	beq.w	8008fe0 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8008d86:	9b08      	ldr	r3, [sp, #32]
 8008d88:	4433      	add	r3, r6
 8008d8a:	6043      	str	r3, [r0, #4]
 8008d8c:	e796      	b.n	8008cbc <tcp_write+0x1d0>
  u16_t extendlen = 0;
 8008d8e:	46ca      	mov	sl, r9
 8008d90:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8008d92:	46d1      	mov	r9, sl
 8008d94:	e79e      	b.n	8008cd4 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 8008d96:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8008d98:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008d9a:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8008d9c:	46c1      	mov	r9, r8
 8008d9e:	e799      	b.n	8008cd4 <tcp_write+0x1e8>
 8008da0:	0800de69 	.word	0x0800de69
 8008da4:	0800deb0 	.word	0x0800deb0
 8008da8:	0800c987 	.word	0x0800c987
 8008dac:	0800dee1 	.word	0x0800dee1
 8008db0:	0800dfcb 	.word	0x0800dfcb
 8008db4:	0800df1b 	.word	0x0800df1b
 8008db8:	0800df4d 	.word	0x0800df4d
 8008dbc:	0800df64 	.word	0x0800df64
 8008dc0:	0800df84 	.word	0x0800df84
 8008dc4:	0800e057 	.word	0x0800e057
 8008dc8:	0800dfa2 	.word	0x0800dfa2
    u16_t left = len - pos;
 8008dcc:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8008dce:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8008dd0:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	bf28      	it	cs
 8008dda:	4613      	movcs	r3, r2
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008de2:	b363      	cbz	r3, 8008e3e <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008de4:	fabb f38b 	clz	r3, fp
 8008de8:	9500      	str	r5, [sp, #0]
 8008dea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dec:	2000      	movs	r0, #0
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	9302      	str	r3, [sp, #8]
 8008df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008dfa:	f7ff fd9b 	bl	8008934 <tcp_pbuf_prealloc>
 8008dfe:	4604      	mov	r4, r0
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d03b      	beq.n	8008e7c <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008e04:	8943      	ldrh	r3, [r0, #10]
 8008e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d206      	bcs.n	8008e1a <tcp_write+0x32e>
 8008e0c:	4b7b      	ldr	r3, [pc, #492]	; (8008ffc <tcp_write+0x510>)
 8008e0e:	f240 2241 	movw	r2, #577	; 0x241
 8008e12:	497b      	ldr	r1, [pc, #492]	; (8009000 <tcp_write+0x514>)
 8008e14:	487b      	ldr	r0, [pc, #492]	; (8009004 <tcp_write+0x518>)
 8008e16:	f002 fb83 	bl	800b520 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e1e:	eb03 0108 	add.w	r1, r3, r8
 8008e22:	6860      	ldr	r0, [r4, #4]
 8008e24:	f002 fabd 	bl	800b3a2 <memcpy>
    queuelen += pbuf_clen(p);
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f7fd faaf 	bl	800638c <pbuf_clen>
 8008e2e:	9b06      	ldr	r3, [sp, #24]
 8008e30:	4403      	add	r3, r0
 8008e32:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008e34:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 8008e36:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008e38:	d949      	bls.n	8008ece <tcp_write+0x3e2>
      pbuf_free(p);
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	e01c      	b.n	8008e78 <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8008e3e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008e42:	b133      	cbz	r3, 8008e52 <tcp_write+0x366>
 8008e44:	4b6d      	ldr	r3, [pc, #436]	; (8008ffc <tcp_write+0x510>)
 8008e46:	f240 224b 	movw	r2, #587	; 0x24b
 8008e4a:	496f      	ldr	r1, [pc, #444]	; (8009008 <tcp_write+0x51c>)
 8008e4c:	486d      	ldr	r0, [pc, #436]	; (8009004 <tcp_write+0x518>)
 8008e4e:	f002 fb67 	bl	800b520 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8008e52:	2201      	movs	r2, #1
 8008e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e56:	2000      	movs	r0, #0
 8008e58:	f7fd f948 	bl	80060ec <pbuf_alloc>
 8008e5c:	b170      	cbz	r0, 8008e7c <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8008e5e:	9a08      	ldr	r2, [sp, #32]
 8008e60:	900d      	str	r0, [sp, #52]	; 0x34
 8008e62:	4442      	add	r2, r8
 8008e64:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008e66:	2200      	movs	r2, #0
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	f7fd f93e 	bl	80060ec <pbuf_alloc>
 8008e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e72:	4604      	mov	r4, r0
 8008e74:	bb38      	cbnz	r0, 8008ec6 <tcp_write+0x3da>
        pbuf_free(p2);
 8008e76:	4618      	mov	r0, r3
      pbuf_free(p);
 8008e78:	f7fd f8d6 	bl	8006028 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8008e7c:	7eab      	ldrb	r3, [r5, #26]
 8008e7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e82:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 8008e84:	f1b9 0f00 	cmp.w	r9, #0
 8008e88:	d002      	beq.n	8008e90 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 8008e8a:	4648      	mov	r0, r9
 8008e8c:	f7fd f8cc 	bl	8006028 <pbuf_free>
  if (queue != NULL) {
 8008e90:	f1bb 0f00 	cmp.w	fp, #0
 8008e94:	d002      	beq.n	8008e9c <tcp_write+0x3b0>
    tcp_segs_free(queue);
 8008e96:	4658      	mov	r0, fp
 8008e98:	f7fd fd24 	bl	80068e4 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8008e9c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f43f ae57 	beq.w	8008b54 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008ea6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f47f ae53 	bne.w	8008b54 <tcp_write+0x68>
 8008eae:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f47f ae4f 	bne.w	8008b54 <tcp_write+0x68>
 8008eb6:	4b51      	ldr	r3, [pc, #324]	; (8008ffc <tcp_write+0x510>)
 8008eb8:	f240 3202 	movw	r2, #770	; 0x302
 8008ebc:	4953      	ldr	r1, [pc, #332]	; (800900c <tcp_write+0x520>)
 8008ebe:	4851      	ldr	r0, [pc, #324]	; (8009004 <tcp_write+0x518>)
 8008ec0:	f002 fb2e 	bl	800b520 <iprintf>
 8008ec4:	e646      	b.n	8008b54 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f7fd fa7c 	bl	80063c4 <pbuf_cat>
 8008ecc:	e7ac      	b.n	8008e28 <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8008ece:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	9200      	str	r2, [sp, #0]
 8008ed8:	4443      	add	r3, r8
 8008eda:	f7ff fd65 	bl	80089a8 <tcp_create_segment>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d0cb      	beq.n	8008e7c <tcp_write+0x390>
    if (queue == NULL) {
 8008ee4:	f1bb 0f00 	cmp.w	fp, #0
 8008ee8:	d010      	beq.n	8008f0c <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eec:	b933      	cbnz	r3, 8008efc <tcp_write+0x410>
 8008eee:	4b43      	ldr	r3, [pc, #268]	; (8008ffc <tcp_write+0x510>)
 8008ef0:	f240 2285 	movw	r2, #645	; 0x285
 8008ef4:	4946      	ldr	r1, [pc, #280]	; (8009010 <tcp_write+0x524>)
 8008ef6:	4843      	ldr	r0, [pc, #268]	; (8009004 <tcp_write+0x518>)
 8008ef8:	f002 fb12 	bl	800b520 <iprintf>
      prev_seg->next = seg;
 8008efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efe:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8008f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f02:	940b      	str	r4, [sp, #44]	; 0x2c
 8008f04:	4498      	add	r8, r3
 8008f06:	fa1f f888 	uxth.w	r8, r8
 8008f0a:	e6eb      	b.n	8008ce4 <tcp_write+0x1f8>
 8008f0c:	4683      	mov	fp, r0
 8008f0e:	e7f7      	b.n	8008f00 <tcp_write+0x414>
  if (oversize_used > 0) {
 8008f10:	f04f 0a00 	mov.w	sl, #0
 8008f14:	46d1      	mov	r9, sl
 8008f16:	e6e9      	b.n	8008cec <tcp_write+0x200>
      p->tot_len += oversize_used;
 8008f18:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008f1c:	4433      	add	r3, r6
 8008f1e:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8008f22:	f8d8 3000 	ldr.w	r3, [r8]
 8008f26:	b96b      	cbnz	r3, 8008f44 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8008f28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8008f32:	9908      	ldr	r1, [sp, #32]
 8008f34:	4418      	add	r0, r3
 8008f36:	f002 fa34 	bl	800b3a2 <memcpy>
        p->len += oversize_used;
 8008f3a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8008f3e:	4433      	add	r3, r6
 8008f40:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8008f44:	f8d8 8000 	ldr.w	r8, [r8]
 8008f48:	e6d2      	b.n	8008cf0 <tcp_write+0x204>
  } else if (extendlen > 0) {
 8008f4a:	f1ba 0f00 	cmp.w	sl, #0
 8008f4e:	d019      	beq.n	8008f84 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8008f50:	b10f      	cbz	r7, 8008f56 <tcp_write+0x46a>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	b933      	cbnz	r3, 8008f64 <tcp_write+0x478>
 8008f56:	4b29      	ldr	r3, [pc, #164]	; (8008ffc <tcp_write+0x510>)
 8008f58:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008f5c:	492d      	ldr	r1, [pc, #180]	; (8009014 <tcp_write+0x528>)
 8008f5e:	4829      	ldr	r0, [pc, #164]	; (8009004 <tcp_write+0x518>)
 8008f60:	f002 fade 	bl	800b520 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	891a      	ldrh	r2, [r3, #8]
 8008f68:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8008f6a:	4452      	add	r2, sl
 8008f6c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008f6e:	b939      	cbnz	r1, 8008f80 <tcp_write+0x494>
    p->len += extendlen;
 8008f70:	895a      	ldrh	r2, [r3, #10]
 8008f72:	4452      	add	r2, sl
 8008f74:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8008f76:	893b      	ldrh	r3, [r7, #8]
 8008f78:	449a      	add	sl, r3
 8008f7a:	f8a7 a008 	strh.w	sl, [r7, #8]
 8008f7e:	e6d7      	b.n	8008d30 <tcp_write+0x244>
      p->tot_len += extendlen;
 8008f80:	460b      	mov	r3, r1
 8008f82:	e7f0      	b.n	8008f66 <tcp_write+0x47a>
  if (last_unsent == NULL) {
 8008f84:	2f00      	cmp	r7, #0
 8008f86:	f47f aed3 	bne.w	8008d30 <tcp_write+0x244>
    pcb->unsent = queue;
 8008f8a:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8008f8e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008f90:	9a05      	ldr	r2, [sp, #20]
 8008f92:	4413      	add	r3, r2
 8008f94:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 8008f96:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8008fa0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8008fa4:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008fa8:	9b06      	ldr	r3, [sp, #24]
 8008faa:	b153      	cbz	r3, 8008fc2 <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008fac:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008fae:	b943      	cbnz	r3, 8008fc2 <tcp_write+0x4d6>
 8008fb0:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008fb2:	b933      	cbnz	r3, 8008fc2 <tcp_write+0x4d6>
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <tcp_write+0x510>)
 8008fb6:	f240 22ed 	movw	r2, #749	; 0x2ed
 8008fba:	4914      	ldr	r1, [pc, #80]	; (800900c <tcp_write+0x520>)
 8008fbc:	4811      	ldr	r0, [pc, #68]	; (8009004 <tcp_write+0x518>)
 8008fbe:	f002 faaf 	bl	800b520 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8008fc2:	b15c      	cbz	r4, 8008fdc <tcp_write+0x4f0>
 8008fc4:	68e4      	ldr	r4, [r4, #12]
 8008fc6:	b14c      	cbz	r4, 8008fdc <tcp_write+0x4f0>
 8008fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fca:	f013 0602 	ands.w	r6, r3, #2
 8008fce:	d105      	bne.n	8008fdc <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8008fd0:	89a5      	ldrh	r5, [r4, #12]
 8008fd2:	2008      	movs	r0, #8
 8008fd4:	f7fa f9e3 	bl	800339e <lwip_htons>
 8008fd8:	4328      	orrs	r0, r5
 8008fda:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8008fdc:	2000      	movs	r0, #0
 8008fde:	e5a4      	b.n	8008b2a <tcp_write+0x3e>
      p->tot_len += extendlen;
 8008fe0:	f04f 0900 	mov.w	r9, #0
 8008fe4:	e74a      	b.n	8008e7c <tcp_write+0x390>
    return ERR_CONN;
 8008fe6:	f06f 000a 	mvn.w	r0, #10
 8008fea:	e59e      	b.n	8008b2a <tcp_write+0x3e>
  if (oversize_used > 0) {
 8008fec:	2e00      	cmp	r6, #0
 8008fee:	d18f      	bne.n	8008f10 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 8008ff0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008ff4:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 8008ff8:	e69a      	b.n	8008d30 <tcp_write+0x244>
 8008ffa:	bf00      	nop
 8008ffc:	0800de69 	.word	0x0800de69
 8009000:	0800dffa 	.word	0x0800dffa
 8009004:	0800c987 	.word	0x0800c987
 8009008:	0800e038 	.word	0x0800e038
 800900c:	0800e0c4 	.word	0x0800e0c4
 8009010:	0800e046 	.word	0x0800e046
 8009014:	0800e08f 	.word	0x0800e08f

08009018 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800901c:	f011 0803 	ands.w	r8, r1, #3
{
 8009020:	4604      	mov	r4, r0
 8009022:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009024:	d106      	bne.n	8009034 <tcp_enqueue_flags+0x1c>
 8009026:	4b40      	ldr	r3, [pc, #256]	; (8009128 <tcp_enqueue_flags+0x110>)
 8009028:	f240 321b 	movw	r2, #795	; 0x31b
 800902c:	493f      	ldr	r1, [pc, #252]	; (800912c <tcp_enqueue_flags+0x114>)
 800902e:	4840      	ldr	r0, [pc, #256]	; (8009130 <tcp_enqueue_flags+0x118>)
 8009030:	f002 fa76 	bl	800b520 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009034:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009038:	2b08      	cmp	r3, #8
 800903a:	d90a      	bls.n	8009052 <tcp_enqueue_flags+0x3a>
 800903c:	07f1      	lsls	r1, r6, #31
 800903e:	d408      	bmi.n	8009052 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8009040:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    pcb->flags |= TF_NAGLEMEMERR;
 8009046:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800904a:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800904c:	b003      	add	sp, #12
 800904e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009052:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009056:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 8009058:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800905a:	4610      	mov	r0, r2
 800905c:	bf15      	itete	ne
 800905e:	2704      	movne	r7, #4
 8009060:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 8009062:	f04f 0901 	movne.w	r9, #1
 8009066:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800906a:	4639      	mov	r1, r7
 800906c:	f7fd f83e 	bl	80060ec <pbuf_alloc>
 8009070:	4605      	mov	r5, r0
 8009072:	2800      	cmp	r0, #0
 8009074:	d0e4      	beq.n	8009040 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009076:	8943      	ldrh	r3, [r0, #10]
 8009078:	42bb      	cmp	r3, r7
 800907a:	d206      	bcs.n	800908a <tcp_enqueue_flags+0x72>
 800907c:	4b2a      	ldr	r3, [pc, #168]	; (8009128 <tcp_enqueue_flags+0x110>)
 800907e:	f240 3241 	movw	r2, #833	; 0x341
 8009082:	492c      	ldr	r1, [pc, #176]	; (8009134 <tcp_enqueue_flags+0x11c>)
 8009084:	482a      	ldr	r0, [pc, #168]	; (8009130 <tcp_enqueue_flags+0x118>)
 8009086:	f002 fa4b 	bl	800b520 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800908a:	f8cd 9000 	str.w	r9, [sp]
 800908e:	4629      	mov	r1, r5
 8009090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009092:	4632      	mov	r2, r6
 8009094:	4620      	mov	r0, r4
 8009096:	f7ff fc87 	bl	80089a8 <tcp_create_segment>
 800909a:	4605      	mov	r5, r0
 800909c:	2800      	cmp	r0, #0
 800909e:	d0cf      	beq.n	8009040 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80090a0:	68c3      	ldr	r3, [r0, #12]
 80090a2:	079a      	lsls	r2, r3, #30
 80090a4:	d006      	beq.n	80090b4 <tcp_enqueue_flags+0x9c>
 80090a6:	4b20      	ldr	r3, [pc, #128]	; (8009128 <tcp_enqueue_flags+0x110>)
 80090a8:	f240 3249 	movw	r2, #841	; 0x349
 80090ac:	4922      	ldr	r1, [pc, #136]	; (8009138 <tcp_enqueue_flags+0x120>)
 80090ae:	4820      	ldr	r0, [pc, #128]	; (8009130 <tcp_enqueue_flags+0x118>)
 80090b0:	f002 fa36 	bl	800b520 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80090b4:	892b      	ldrh	r3, [r5, #8]
 80090b6:	b133      	cbz	r3, 80090c6 <tcp_enqueue_flags+0xae>
 80090b8:	4b1b      	ldr	r3, [pc, #108]	; (8009128 <tcp_enqueue_flags+0x110>)
 80090ba:	f240 324a 	movw	r2, #842	; 0x34a
 80090be:	491f      	ldr	r1, [pc, #124]	; (800913c <tcp_enqueue_flags+0x124>)
 80090c0:	481b      	ldr	r0, [pc, #108]	; (8009130 <tcp_enqueue_flags+0x118>)
 80090c2:	f002 fa2d 	bl	800b520 <iprintf>
  if (pcb->unsent == NULL) {
 80090c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80090c8:	bb4b      	cbnz	r3, 800911e <tcp_enqueue_flags+0x106>
    pcb->unsent = seg;
 80090ca:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80090d2:	f1b8 0f00 	cmp.w	r8, #0
 80090d6:	d002      	beq.n	80090de <tcp_enqueue_flags+0xc6>
    pcb->snd_lbb++;
 80090d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090da:	3301      	adds	r3, #1
 80090dc:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 80090de:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 80090e0:	bf42      	ittt	mi
 80090e2:	7ea3      	ldrbmi	r3, [r4, #26]
 80090e4:	f043 0320 	orrmi.w	r3, r3, #32
 80090e8:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80090ea:	6868      	ldr	r0, [r5, #4]
 80090ec:	f7fd f94e 	bl	800638c <pbuf_clen>
 80090f0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80090f4:	4418      	add	r0, r3
 80090f6:	b280      	uxth	r0, r0
 80090f8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d0a5      	beq.n	800904c <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009100:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009102:	b948      	cbnz	r0, 8009118 <tcp_enqueue_flags+0x100>
 8009104:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8009106:	2c00      	cmp	r4, #0
 8009108:	d1a0      	bne.n	800904c <tcp_enqueue_flags+0x34>
 800910a:	4b07      	ldr	r3, [pc, #28]	; (8009128 <tcp_enqueue_flags+0x110>)
 800910c:	f240 326d 	movw	r2, #877	; 0x36d
 8009110:	490b      	ldr	r1, [pc, #44]	; (8009140 <tcp_enqueue_flags+0x128>)
 8009112:	4807      	ldr	r0, [pc, #28]	; (8009130 <tcp_enqueue_flags+0x118>)
 8009114:	f002 fa04 	bl	800b520 <iprintf>
  return ERR_OK;
 8009118:	2000      	movs	r0, #0
 800911a:	e797      	b.n	800904c <tcp_enqueue_flags+0x34>
 800911c:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	2a00      	cmp	r2, #0
 8009122:	d1fb      	bne.n	800911c <tcp_enqueue_flags+0x104>
    useg->next = seg;
 8009124:	601d      	str	r5, [r3, #0]
 8009126:	e7d1      	b.n	80090cc <tcp_enqueue_flags+0xb4>
 8009128:	0800de69 	.word	0x0800de69
 800912c:	0800dd06 	.word	0x0800dd06
 8009130:	0800c987 	.word	0x0800c987
 8009134:	0800dd5b 	.word	0x0800dd5b
 8009138:	0800dd94 	.word	0x0800dd94
 800913c:	0800ddac 	.word	0x0800ddac
 8009140:	0800ddd6 	.word	0x0800ddd6

08009144 <tcp_send_fin>:
{
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8009146:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8009148:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800914a:	b934      	cbnz	r4, 800915a <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800914c:	4628      	mov	r0, r5
 800914e:	2101      	movs	r1, #1
}
 8009150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009154:	f7ff bf60 	b.w	8009018 <tcp_enqueue_flags>
 8009158:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1fb      	bne.n	8009158 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009160:	68e3      	ldr	r3, [r4, #12]
 8009162:	8998      	ldrh	r0, [r3, #12]
 8009164:	f7fa f91b 	bl	800339e <lwip_htons>
 8009168:	f010 0707 	ands.w	r7, r0, #7
 800916c:	d1ee      	bne.n	800914c <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800916e:	68e6      	ldr	r6, [r4, #12]
 8009170:	2001      	movs	r0, #1
 8009172:	89b4      	ldrh	r4, [r6, #12]
 8009174:	f7fa f913 	bl	800339e <lwip_htons>
 8009178:	4320      	orrs	r0, r4
 800917a:	81b0      	strh	r0, [r6, #12]
}
 800917c:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 800917e:	7eab      	ldrb	r3, [r5, #26]
 8009180:	f043 0320 	orr.w	r3, r3, #32
 8009184:	76ab      	strb	r3, [r5, #26]
}
 8009186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009188 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800918a:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800918c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800918e:	f7fa f909 	bl	80033a4 <lwip_htonl>
 8009192:	2100      	movs	r1, #0
 8009194:	4602      	mov	r2, r0
 8009196:	4620      	mov	r0, r4
 8009198:	f7ff fc6c 	bl	8008a74 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800919c:	4606      	mov	r6, r0
 800919e:	b940      	cbnz	r0, 80091b2 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80091a0:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80091a2:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80091a6:	f043 0303 	orr.w	r3, r3, #3
 80091aa:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80091ac:	4628      	mov	r0, r5
 80091ae:	b004      	add	sp, #16
 80091b0:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80091b2:	1d25      	adds	r5, r4, #4
 80091b4:	4628      	mov	r0, r5
 80091b6:	f7fb fe5d 	bl	8004e74 <ip4_route>
  if (netif == NULL) {
 80091ba:	b1a0      	cbz	r0, 80091e6 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80091bc:	2206      	movs	r2, #6
 80091be:	9002      	str	r0, [sp, #8]
 80091c0:	7aa3      	ldrb	r3, [r4, #10]
 80091c2:	4621      	mov	r1, r4
 80091c4:	9201      	str	r2, [sp, #4]
 80091c6:	4630      	mov	r0, r6
 80091c8:	7a62      	ldrb	r2, [r4, #9]
 80091ca:	9200      	str	r2, [sp, #0]
 80091cc:	462a      	mov	r2, r5
 80091ce:	f7fb ffc3 	bl	8005158 <ip4_output_if>
 80091d2:	4605      	mov	r5, r0
  pbuf_free(p);
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7fc ff27 	bl	8006028 <pbuf_free>
 80091da:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 80091dc:	b135      	cbz	r5, 80091ec <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80091de:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80091e2:	76a3      	strb	r3, [r4, #26]
 80091e4:	e7e2      	b.n	80091ac <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 80091e6:	f06f 0503 	mvn.w	r5, #3
 80091ea:	e7f3      	b.n	80091d4 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80091ec:	f023 0303 	bic.w	r3, r3, #3
 80091f0:	e7f7      	b.n	80091e2 <tcp_send_empty_ack+0x5a>
	...

080091f4 <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80091f4:	7d03      	ldrb	r3, [r0, #20]
 80091f6:	2b01      	cmp	r3, #1
{
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	4604      	mov	r4, r0
 80091fe:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009200:	d106      	bne.n	8009210 <tcp_output+0x1c>
 8009202:	4ba5      	ldr	r3, [pc, #660]	; (8009498 <tcp_output+0x2a4>)
 8009204:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8009208:	49a4      	ldr	r1, [pc, #656]	; (800949c <tcp_output+0x2a8>)
 800920a:	48a5      	ldr	r0, [pc, #660]	; (80094a0 <tcp_output+0x2ac>)
 800920c:	f002 f988 	bl	800b520 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009210:	4ba4      	ldr	r3, [pc, #656]	; (80094a4 <tcp_output+0x2b0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	429c      	cmp	r4, r3
 8009216:	d052      	beq.n	80092be <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009218:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800921c:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8009220:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009222:	429f      	cmp	r7, r3
 8009224:	bf28      	it	cs
 8009226:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009228:	7ea3      	ldrb	r3, [r4, #26]
 800922a:	0799      	lsls	r1, r3, #30
 800922c:	d510      	bpl.n	8009250 <tcp_output+0x5c>
 800922e:	b92d      	cbnz	r5, 800923c <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8009230:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8009232:	b007      	add	sp, #28
 8009234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8009238:	f7ff bfa6 	b.w	8009188 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800923c:	68eb      	ldr	r3, [r5, #12]
 800923e:	6858      	ldr	r0, [r3, #4]
 8009240:	f7fa f8b0 	bl	80033a4 <lwip_htonl>
 8009244:	892b      	ldrh	r3, [r5, #8]
 8009246:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	4418      	add	r0, r3
     (seg == NULL ||
 800924c:	4287      	cmp	r7, r0
 800924e:	d3ef      	bcc.n	8009230 <tcp_output+0x3c>
  useg = pcb->unacked;
 8009250:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8009252:	2e00      	cmp	r6, #0
 8009254:	d136      	bne.n	80092c4 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009256:	f104 0804 	add.w	r8, r4, #4
 800925a:	4640      	mov	r0, r8
 800925c:	f7fb fe0a 	bl	8004e74 <ip4_route>
  if (netif == NULL) {
 8009260:	4681      	mov	r9, r0
 8009262:	2800      	cmp	r0, #0
 8009264:	f000 813c 	beq.w	80094e0 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009268:	b10c      	cbz	r4, 800926e <tcp_output+0x7a>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	b913      	cbnz	r3, 8009274 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800926e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009272:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8009274:	b1d5      	cbz	r5, 80092ac <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009276:	68eb      	ldr	r3, [r5, #12]
 8009278:	6858      	ldr	r0, [r3, #4]
 800927a:	f7fa f893 	bl	80033a4 <lwip_htonl>
 800927e:	892b      	ldrh	r3, [r5, #8]
 8009280:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	4418      	add	r0, r3
  if (seg != NULL &&
 8009286:	4287      	cmp	r7, r0
 8009288:	d26f      	bcs.n	800936a <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800928a:	2f00      	cmp	r7, #0
 800928c:	d06d      	beq.n	800936a <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800928e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8009292:	429f      	cmp	r7, r3
 8009294:	d169      	bne.n	800936a <tcp_output+0x176>
 8009296:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d166      	bne.n	800936a <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 800929c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80092a0:	b923      	cbnz	r3, 80092ac <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 80092a2:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 80092ac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80092ae:	b913      	cbnz	r3, 80092b6 <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 80092b6:	7ea3      	ldrb	r3, [r4, #26]
 80092b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092bc:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 80092be:	2000      	movs	r0, #0
 80092c0:	e0e6      	b.n	8009490 <tcp_output+0x29c>
 80092c2:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 80092c4:	6833      	ldr	r3, [r6, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1fb      	bne.n	80092c2 <tcp_output+0xce>
 80092ca:	e7c4      	b.n	8009256 <tcp_output+0x62>
    pcb->unsent = seg->next;
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80092d0:	7d23      	ldrb	r3, [r4, #20]
 80092d2:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80092d4:	bf1e      	ittt	ne
 80092d6:	7ea3      	ldrbne	r3, [r4, #26]
 80092d8:	f023 0303 	bicne.w	r3, r3, #3
 80092dc:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80092de:	68eb      	ldr	r3, [r5, #12]
 80092e0:	6858      	ldr	r0, [r3, #4]
 80092e2:	f7fa f85f 	bl	80033a4 <lwip_htonl>
 80092e6:	68e9      	ldr	r1, [r5, #12]
 80092e8:	4683      	mov	fp, r0
 80092ea:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80092ee:	8988      	ldrh	r0, [r1, #12]
 80092f0:	f7fa f855 	bl	800339e <lwip_htons>
 80092f4:	f010 0003 	ands.w	r0, r0, #3
 80092f8:	eb0b 030a 	add.w	r3, fp, sl
    if (TCP_TCPLEN(seg) > 0) {
 80092fc:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80092fe:	bf18      	it	ne
 8009300:	2001      	movne	r0, #1
    if (TCP_TCPLEN(seg) > 0) {
 8009302:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009306:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009308:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800930a:	1a1b      	subs	r3, r3, r0
 800930c:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800930e:	bfb8      	it	lt
 8009310:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8009312:	8990      	ldrh	r0, [r2, #12]
 8009314:	f7fa f843 	bl	800339e <lwip_htons>
 8009318:	f010 0003 	ands.w	r0, r0, #3
 800931c:	bf18      	it	ne
 800931e:	2001      	movne	r0, #1
 8009320:	eb10 0f0a 	cmn.w	r0, sl
 8009324:	f000 80d8 	beq.w	80094d8 <tcp_output+0x2e4>
      seg->next = NULL;
 8009328:	2300      	movs	r3, #0
 800932a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800932c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800932e:	b913      	cbnz	r3, 8009336 <tcp_output+0x142>
        pcb->unacked = seg;
 8009330:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8009332:	462e      	mov	r6, r5
 8009334:	e016      	b.n	8009364 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009336:	68eb      	ldr	r3, [r5, #12]
 8009338:	6858      	ldr	r0, [r3, #4]
 800933a:	f7fa f833 	bl	80033a4 <lwip_htonl>
 800933e:	68f2      	ldr	r2, [r6, #12]
 8009340:	4682      	mov	sl, r0
 8009342:	6850      	ldr	r0, [r2, #4]
 8009344:	f7fa f82e 	bl	80033a4 <lwip_htonl>
 8009348:	ebaa 0000 	sub.w	r0, sl, r0
 800934c:	2800      	cmp	r0, #0
 800934e:	f280 80c1 	bge.w	80094d4 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009352:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	2a00      	cmp	r2, #0
 800935a:	f040 80a9 	bne.w	80094b0 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8009362:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8009364:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8009366:	2d00      	cmp	r5, #0
 8009368:	d0a2      	beq.n	80092b0 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800936a:	68eb      	ldr	r3, [r5, #12]
 800936c:	6858      	ldr	r0, [r3, #4]
 800936e:	f7fa f819 	bl	80033a4 <lwip_htonl>
 8009372:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009374:	1ac0      	subs	r0, r0, r3
 8009376:	892b      	ldrh	r3, [r5, #8]
 8009378:	4418      	add	r0, r3
  while (seg != NULL &&
 800937a:	4287      	cmp	r7, r0
 800937c:	d396      	bcc.n	80092ac <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 800937e:	68eb      	ldr	r3, [r5, #12]
 8009380:	8998      	ldrh	r0, [r3, #12]
 8009382:	f7fa f80c 	bl	800339e <lwip_htons>
 8009386:	0742      	lsls	r2, r0, #29
 8009388:	d506      	bpl.n	8009398 <tcp_output+0x1a4>
 800938a:	4b43      	ldr	r3, [pc, #268]	; (8009498 <tcp_output+0x2a4>)
 800938c:	f240 4246 	movw	r2, #1094	; 0x446
 8009390:	4945      	ldr	r1, [pc, #276]	; (80094a8 <tcp_output+0x2b4>)
 8009392:	4843      	ldr	r0, [pc, #268]	; (80094a0 <tcp_output+0x2ac>)
 8009394:	f002 f8c4 	bl	800b520 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009398:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800939a:	b19b      	cbz	r3, 80093c4 <tcp_output+0x1d0>
 800939c:	7ea2      	ldrb	r2, [r4, #26]
 800939e:	f012 0f44 	tst.w	r2, #68	; 0x44
 80093a2:	d10f      	bne.n	80093c4 <tcp_output+0x1d0>
 80093a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80093a6:	b12b      	cbz	r3, 80093b4 <tcp_output+0x1c0>
 80093a8:	6819      	ldr	r1, [r3, #0]
 80093aa:	b959      	cbnz	r1, 80093c4 <tcp_output+0x1d0>
 80093ac:	8919      	ldrh	r1, [r3, #8]
 80093ae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80093b0:	4299      	cmp	r1, r3
 80093b2:	d207      	bcs.n	80093c4 <tcp_output+0x1d0>
 80093b4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80093b8:	b123      	cbz	r3, 80093c4 <tcp_output+0x1d0>
 80093ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80093be:	2b08      	cmp	r3, #8
 80093c0:	f240 8091 	bls.w	80094e6 <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 80093c4:	7d23      	ldrb	r3, [r4, #20]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d00a      	beq.n	80093e0 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80093ca:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80093ce:	2010      	movs	r0, #16
 80093d0:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 80093d4:	f7f9 ffe3 	bl	800339e <lwip_htons>
 80093d8:	ea4b 0000 	orr.w	r0, fp, r0
 80093dc:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80093e0:	686b      	ldr	r3, [r5, #4]
 80093e2:	89db      	ldrh	r3, [r3, #14]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	f47f af71 	bne.w	80092cc <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80093ea:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80093ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093f0:	f7f9 ffd8 	bl	80033a4 <lwip_htonl>
 80093f4:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80093f8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80093fa:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80093fe:	f7f9 ffce 	bl	800339e <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009402:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009404:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009406:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800940a:	4413      	add	r3, r2
 800940c:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800940e:	7aab      	ldrb	r3, [r5, #10]
 8009410:	07db      	lsls	r3, r3, #31
 8009412:	d50c      	bpl.n	800942e <tcp_output+0x23a>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009414:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009418:	4641      	mov	r1, r8
 800941a:	f240 208a 	movw	r0, #650	; 0x28a
 800941e:	f7fd ffbf 	bl	80073a0 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009422:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8009426:	f7f9 ffbd 	bl	80033a4 <lwip_htonl>
 800942a:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800942e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009432:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8009434:	bfbc      	itt	lt
 8009436:	2300      	movlt	r3, #0
 8009438:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800943a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800943c:	b93b      	cbnz	r3, 800944e <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 800943e:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <tcp_output+0x2b8>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009444:	68eb      	ldr	r3, [r5, #12]
 8009446:	6858      	ldr	r0, [r3, #4]
 8009448:	f7f9 ffac 	bl	80033a4 <lwip_htonl>
 800944c:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800944e:	6868      	ldr	r0, [r5, #4]
 8009450:	68ea      	ldr	r2, [r5, #12]
 8009452:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009454:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009456:	1ad3      	subs	r3, r2, r3
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8009458:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800945a:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800945c:	1ac9      	subs	r1, r1, r3
 800945e:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8009460:	8901      	ldrh	r1, [r0, #8]
 8009462:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009464:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 8009466:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	7413      	strb	r3, [r2, #16]
 800946c:	7453      	strb	r3, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800946e:	2206      	movs	r2, #6
 8009470:	7aa3      	ldrb	r3, [r4, #10]
 8009472:	9201      	str	r2, [sp, #4]
 8009474:	7a62      	ldrb	r2, [r4, #9]
 8009476:	f8cd 9008 	str.w	r9, [sp, #8]
 800947a:	9200      	str	r2, [sp, #0]
 800947c:	4642      	mov	r2, r8
 800947e:	f7fb fe6b 	bl	8005158 <ip4_output_if>
    if (err != ERR_OK) {
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f af22 	beq.w	80092cc <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 8009488:	7ea3      	ldrb	r3, [r4, #26]
 800948a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800948e:	76a3      	strb	r3, [r4, #26]
}
 8009490:	b007      	add	sp, #28
 8009492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009496:	bf00      	nop
 8009498:	0800de69 	.word	0x0800de69
 800949c:	0800ddfe 	.word	0x0800ddfe
 80094a0:	0800c987 	.word	0x0800c987
 80094a4:	20003800 	.word	0x20003800
 80094a8:	0800de24 	.word	0x0800de24
 80094ac:	200037f0 	.word	0x200037f0
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80094b0:	68d2      	ldr	r2, [r2, #12]
 80094b2:	9305      	str	r3, [sp, #20]
 80094b4:	6850      	ldr	r0, [r2, #4]
 80094b6:	f7f9 ff75 	bl	80033a4 <lwip_htonl>
 80094ba:	68e9      	ldr	r1, [r5, #12]
 80094bc:	4682      	mov	sl, r0
 80094be:	6848      	ldr	r0, [r1, #4]
 80094c0:	f7f9 ff70 	bl	80033a4 <lwip_htonl>
 80094c4:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f6bf af47 	bge.w	800935e <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	e740      	b.n	8009356 <tcp_output+0x162>
          useg->next = seg;
 80094d4:	6035      	str	r5, [r6, #0]
 80094d6:	e72c      	b.n	8009332 <tcp_output+0x13e>
      tcp_seg_free(seg);
 80094d8:	4628      	mov	r0, r5
 80094da:	f7fd f9f5 	bl	80068c8 <tcp_seg_free>
 80094de:	e741      	b.n	8009364 <tcp_output+0x170>
    return ERR_RTE;
 80094e0:	f06f 0003 	mvn.w	r0, #3
 80094e4:	e7d4      	b.n	8009490 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80094e6:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 80094ea:	f47f af6b 	bne.w	80093c4 <tcp_output+0x1d0>
 80094ee:	e6dd      	b.n	80092ac <tcp_output+0xb8>

080094f0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	b085      	sub	sp, #20
 80094f6:	4681      	mov	r9, r0
 80094f8:	460e      	mov	r6, r1
 80094fa:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80094fc:	2114      	movs	r1, #20
 80094fe:	2200      	movs	r2, #0
 8009500:	2001      	movs	r0, #1
{
 8009502:	461f      	mov	r7, r3
 8009504:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8009508:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800950c:	f7fc fdee 	bl	80060ec <pbuf_alloc>
  if (p == NULL) {
 8009510:	4605      	mov	r5, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	d03c      	beq.n	8009590 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009516:	8943      	ldrh	r3, [r0, #10]
 8009518:	2b13      	cmp	r3, #19
 800951a:	d806      	bhi.n	800952a <tcp_rst+0x3a>
 800951c:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <tcp_rst+0xa8>)
 800951e:	f240 524d 	movw	r2, #1357	; 0x54d
 8009522:	491e      	ldr	r1, [pc, #120]	; (800959c <tcp_rst+0xac>)
 8009524:	481e      	ldr	r0, [pc, #120]	; (80095a0 <tcp_rst+0xb0>)
 8009526:	f001 fffb 	bl	800b520 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800952a:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800952c:	4658      	mov	r0, fp
 800952e:	f7f9 ff36 	bl	800339e <lwip_htons>
 8009532:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009534:	4650      	mov	r0, sl
 8009536:	f7f9 ff32 	bl	800339e <lwip_htons>
 800953a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800953c:	4648      	mov	r0, r9
 800953e:	f7f9 ff31 	bl	80033a4 <lwip_htonl>
 8009542:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009544:	4630      	mov	r0, r6
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009546:	2600      	movs	r6, #0
  tcphdr->ackno = lwip_htonl(ackno);
 8009548:	f7f9 ff2c 	bl	80033a4 <lwip_htonl>
 800954c:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800954e:	f245 0014 	movw	r0, #20500	; 0x5014
 8009552:	f7f9 ff24 	bl	800339e <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009556:	230a      	movs	r3, #10
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009558:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800955a:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800955c:	73a3      	strb	r3, [r4, #14]
 800955e:	2328      	movs	r3, #40	; 0x28
  tcphdr->chksum = 0;
 8009560:	7426      	strb	r6, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009562:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 8009564:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8009566:	74a6      	strb	r6, [r4, #18]
 8009568:	74e6      	strb	r6, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 800956a:	f7fb fc83 	bl	8004e74 <ip4_route>
  if (netif != NULL) {
 800956e:	b148      	cbz	r0, 8009584 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009570:	2306      	movs	r3, #6
 8009572:	9002      	str	r0, [sp, #8]
 8009574:	9600      	str	r6, [sp, #0]
 8009576:	463a      	mov	r2, r7
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	4641      	mov	r1, r8
 800957c:	23ff      	movs	r3, #255	; 0xff
 800957e:	4628      	mov	r0, r5
 8009580:	f7fb fdea 	bl	8005158 <ip4_output_if>
  }
  pbuf_free(p);
 8009584:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009586:	b005      	add	sp, #20
 8009588:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800958c:	f7fc bd4c 	b.w	8006028 <pbuf_free>
}
 8009590:	b005      	add	sp, #20
 8009592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	bf00      	nop
 8009598:	0800de69 	.word	0x0800de69
 800959c:	0800de3b 	.word	0x0800de3b
 80095a0:	0800c987 	.word	0x0800c987

080095a4 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80095a4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 80095a6:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 80095a8:	b1aa      	cbz	r2, 80095d6 <tcp_rexmit_rto+0x32>
 80095aa:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80095ac:	680b      	ldr	r3, [r1, #0]
 80095ae:	b983      	cbnz	r3, 80095d2 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80095b0:	6e84      	ldr	r4, [r0, #104]	; 0x68
 80095b2:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80095b4:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80095b6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 80095ba:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 80095bc:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80095be:	bf1c      	itt	ne
 80095c0:	3301      	addne	r3, #1
 80095c2:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80095c6:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 80095c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 80095cc:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 80095ce:	f7ff be11 	b.w	80091f4 <tcp_output>
 80095d2:	4619      	mov	r1, r3
 80095d4:	e7ea      	b.n	80095ac <tcp_rexmit_rto+0x8>
}
 80095d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095da:	4770      	bx	lr

080095dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80095de:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 80095e0:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 80095e2:	b1ad      	cbz	r5, 8009610 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 80095e4:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 80095e6:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 80095ea:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 80095ec:	6833      	ldr	r3, [r6, #0]
 80095ee:	b983      	cbnz	r3, 8009612 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 80095f0:	6833      	ldr	r3, [r6, #0]
 80095f2:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 80095f4:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80095f6:	682b      	ldr	r3, [r5, #0]
 80095f8:	b90b      	cbnz	r3, 80095fe <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80095fa:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80095fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009602:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009604:	bf1c      	itt	ne
 8009606:	3301      	addne	r3, #1
 8009608:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	6363      	str	r3, [r4, #52]	; 0x34
 8009610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	6858      	ldr	r0, [r3, #4]
 8009616:	f7f9 fec5 	bl	80033a4 <lwip_htonl>
 800961a:	68eb      	ldr	r3, [r5, #12]
 800961c:	4607      	mov	r7, r0
 800961e:	6858      	ldr	r0, [r3, #4]
 8009620:	f7f9 fec0 	bl	80033a4 <lwip_htonl>
 8009624:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8009626:	2800      	cmp	r0, #0
 8009628:	dae2      	bge.n	80095f0 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800962a:	6836      	ldr	r6, [r6, #0]
 800962c:	e7de      	b.n	80095ec <tcp_rexmit+0x10>

0800962e <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800962e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8009630:	b510      	push	{r4, lr}
 8009632:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009634:	b30b      	cbz	r3, 800967a <tcp_rexmit_fast+0x4c>
 8009636:	7e83      	ldrb	r3, [r0, #26]
 8009638:	075b      	lsls	r3, r3, #29
 800963a:	d41e      	bmi.n	800967a <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800963c:	f7ff ffce 	bl	80095dc <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009640:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8009644:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009648:	4293      	cmp	r3, r2
 800964a:	bf38      	it	cc
 800964c:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800964e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009650:	bf28      	it	cs
 8009652:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009654:	0059      	lsls	r1, r3, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009656:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800965a:	428a      	cmp	r2, r1
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800965c:	440b      	add	r3, r1
      pcb->ssthresh = 2*pcb->mss;
 800965e:	bf38      	it	cc
 8009660:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009664:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009668:	4413      	add	r3, r2
 800966a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800966e:	7ea3      	ldrb	r3, [r4, #26]
 8009670:	f043 0304 	orr.w	r3, r3, #4
 8009674:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	8623      	strh	r3, [r4, #48]	; 0x30
 800967a:	bd10      	pop	{r4, pc}

0800967c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800967c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800967e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009680:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009682:	3801      	subs	r0, #1
 8009684:	f7f9 fe8e 	bl	80033a4 <lwip_htonl>
 8009688:	2100      	movs	r1, #0
 800968a:	4602      	mov	r2, r0
 800968c:	4620      	mov	r0, r4
 800968e:	f7ff f9f1 	bl	8008a74 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009692:	4605      	mov	r5, r0
 8009694:	b1c8      	cbz	r0, 80096ca <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009696:	1d26      	adds	r6, r4, #4
 8009698:	4630      	mov	r0, r6
 800969a:	f7fb fbeb 	bl	8004e74 <ip4_route>
  if (netif == NULL) {
 800969e:	b188      	cbz	r0, 80096c4 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80096a0:	2100      	movs	r1, #0
 80096a2:	2206      	movs	r2, #6
 80096a4:	7aa3      	ldrb	r3, [r4, #10]
 80096a6:	9002      	str	r0, [sp, #8]
 80096a8:	4628      	mov	r0, r5
 80096aa:	e88d 0006 	stmia.w	sp, {r1, r2}
 80096ae:	4621      	mov	r1, r4
 80096b0:	4632      	mov	r2, r6
 80096b2:	f7fb fd51 	bl	8005158 <ip4_output_if>
 80096b6:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80096b8:	4628      	mov	r0, r5
 80096ba:	f7fc fcb5 	bl	8006028 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80096be:	4620      	mov	r0, r4
 80096c0:	b004      	add	sp, #16
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 80096c4:	f06f 0403 	mvn.w	r4, #3
 80096c8:	e7f6      	b.n	80096b8 <tcp_keepalive+0x3c>
    return ERR_MEM;
 80096ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80096ce:	e7f6      	b.n	80096be <tcp_keepalive+0x42>

080096d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80096d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80096d4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 80096d6:	4606      	mov	r6, r0

  if (seg == NULL) {
 80096d8:	b914      	cbnz	r4, 80096e0 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 80096da:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 80096dc:	2c00      	cmp	r4, #0
 80096de:	d041      	beq.n	8009764 <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80096e0:	68e3      	ldr	r3, [r4, #12]
 80096e2:	8998      	ldrh	r0, [r3, #12]
 80096e4:	f7f9 fe5b 	bl	800339e <lwip_htons>
 80096e8:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80096ec:	68e3      	ldr	r3, [r4, #12]
 80096ee:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80096f0:	bf18      	it	ne
 80096f2:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80096f4:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80096f6:	bf1c      	itt	ne
 80096f8:	fab5 f585 	clzne	r5, r5
 80096fc:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80096fe:	f085 0101 	eor.w	r1, r5, #1
 8009702:	f7ff f9b7 	bl	8008a74 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009706:	4607      	mov	r7, r0
 8009708:	2800      	cmp	r0, #0
 800970a:	d03d      	beq.n	8009788 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800970c:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8009710:	b365      	cbz	r5, 800976c <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009712:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8009716:	2011      	movs	r0, #17
 8009718:	f7f9 fe41 	bl	800339e <lwip_htons>
 800971c:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009720:	b2ad      	uxth	r5, r5
 8009722:	4328      	orrs	r0, r5
 8009724:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009728:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800972a:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800972c:	6858      	ldr	r0, [r3, #4]
 800972e:	f7f9 fe39 	bl	80033a4 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009732:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009734:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009736:	1a1b      	subs	r3, r3, r0
 8009738:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800973a:	bfb8      	it	lt
 800973c:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800973e:	4620      	mov	r0, r4
 8009740:	f7fb fb98 	bl	8004e74 <ip4_route>
  if (netif == NULL) {
 8009744:	b1e8      	cbz	r0, 8009782 <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009746:	2100      	movs	r1, #0
 8009748:	2206      	movs	r2, #6
 800974a:	9002      	str	r0, [sp, #8]
 800974c:	4638      	mov	r0, r7
 800974e:	7ab3      	ldrb	r3, [r6, #10]
 8009750:	e88d 0006 	stmia.w	sp, {r1, r2}
 8009754:	4622      	mov	r2, r4
 8009756:	4631      	mov	r1, r6
 8009758:	f7fb fcfe 	bl	8005158 <ip4_output_if>
 800975c:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800975e:	4638      	mov	r0, r7
 8009760:	f7fc fc62 	bl	8006028 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009764:	4620      	mov	r0, r4
 8009766:	b004      	add	sp, #16
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800976c:	6860      	ldr	r0, [r4, #4]
 800976e:	f108 0114 	add.w	r1, r8, #20
 8009772:	8922      	ldrh	r2, [r4, #8]
 8009774:	8903      	ldrh	r3, [r0, #8]
 8009776:	1a9b      	subs	r3, r3, r2
 8009778:	2201      	movs	r2, #1
 800977a:	b29b      	uxth	r3, r3
 800977c:	f7fc fef0 	bl	8006560 <pbuf_copy_partial>
 8009780:	e7d2      	b.n	8009728 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8009782:	f06f 0403 	mvn.w	r4, #3
 8009786:	e7ea      	b.n	800975e <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 8009788:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800978c:	e7ea      	b.n	8009764 <tcp_zero_window_probe+0x94>
	...

08009790 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009796:	2006      	movs	r0, #6
{
 8009798:	460f      	mov	r7, r1
 800979a:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800979c:	f7fc fac4 	bl	8005d28 <memp_malloc>
  if (timeout == NULL) {
 80097a0:	4604      	mov	r4, r0
 80097a2:	b938      	cbnz	r0, 80097b4 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80097a4:	4b1e      	ldr	r3, [pc, #120]	; (8009820 <sys_timeout+0x90>)
 80097a6:	22d4      	movs	r2, #212	; 0xd4
 80097a8:	491e      	ldr	r1, [pc, #120]	; (8009824 <sys_timeout+0x94>)
 80097aa:	481f      	ldr	r0, [pc, #124]	; (8009828 <sys_timeout+0x98>)
        t->next = timeout;
        break;
      }
    }
  }
}
 80097ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80097b0:	f001 beb6 	b.w	800b520 <iprintf>
  now = sys_now();
 80097b4:	f000 fe18 	bl	800a3e8 <sys_now>
  if (next_timeout == NULL) {
 80097b8:	4a1c      	ldr	r2, [pc, #112]	; (800982c <sys_timeout+0x9c>)
 80097ba:	491d      	ldr	r1, [pc, #116]	; (8009830 <sys_timeout+0xa0>)
 80097bc:	6813      	ldr	r3, [r2, #0]
 80097be:	b95b      	cbnz	r3, 80097d8 <sys_timeout+0x48>
    timeouts_last_time = now;
 80097c0:	6008      	str	r0, [r1, #0]
    diff = 0;
 80097c2:	4618      	mov	r0, r3
  timeout->next = NULL;
 80097c4:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 80097c6:	4428      	add	r0, r5
  timeout->h = handler;
 80097c8:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 80097ca:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 80097cc:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 80097ce:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 80097d0:	b92b      	cbnz	r3, 80097de <sys_timeout+0x4e>
    next_timeout = timeout;
 80097d2:	6014      	str	r4, [r2, #0]
 80097d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 80097d8:	6809      	ldr	r1, [r1, #0]
 80097da:	1a40      	subs	r0, r0, r1
 80097dc:	e7f2      	b.n	80097c4 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 80097de:	6859      	ldr	r1, [r3, #4]
 80097e0:	428d      	cmp	r5, r1
 80097e2:	d217      	bcs.n	8009814 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 80097e4:	1b4d      	subs	r5, r1, r5
 80097e6:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	e7f2      	b.n	80097d2 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 80097ec:	684e      	ldr	r6, [r1, #4]
 80097ee:	42b2      	cmp	r2, r6
 80097f0:	d312      	bcc.n	8009818 <sys_timeout+0x88>
 80097f2:	4608      	mov	r0, r1
      timeout->time -= t->time;
 80097f4:	6841      	ldr	r1, [r0, #4]
 80097f6:	6862      	ldr	r2, [r4, #4]
 80097f8:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 80097fa:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 80097fc:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80097fe:	2900      	cmp	r1, #0
 8009800:	d1f4      	bne.n	80097ec <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 8009802:	4295      	cmp	r5, r2
 8009804:	d202      	bcs.n	800980c <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	441d      	add	r5, r3
 800980a:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 800980c:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800980e:	6004      	str	r4, [r0, #0]
        break;
 8009810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009814:	4618      	mov	r0, r3
 8009816:	e7ed      	b.n	80097f4 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 8009818:	1ab2      	subs	r2, r6, r2
 800981a:	604a      	str	r2, [r1, #4]
 800981c:	e7f6      	b.n	800980c <sys_timeout+0x7c>
 800981e:	bf00      	nop
 8009820:	0800e10c 	.word	0x0800e10c
 8009824:	0800e140 	.word	0x0800e140
 8009828:	0800c987 	.word	0x0800c987
 800982c:	20000218 	.word	0x20000218
 8009830:	20000220 	.word	0x20000220

08009834 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009834:	4b08      	ldr	r3, [pc, #32]	; (8009858 <tcp_timer_needed+0x24>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	b962      	cbnz	r2, 8009854 <tcp_timer_needed+0x20>
 800983a:	4a08      	ldr	r2, [pc, #32]	; (800985c <tcp_timer_needed+0x28>)
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	b912      	cbnz	r2, 8009846 <tcp_timer_needed+0x12>
 8009840:	4a07      	ldr	r2, [pc, #28]	; (8009860 <tcp_timer_needed+0x2c>)
 8009842:	6812      	ldr	r2, [r2, #0]
 8009844:	b132      	cbz	r2, 8009854 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8009846:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009848:	4906      	ldr	r1, [pc, #24]	; (8009864 <tcp_timer_needed+0x30>)
 800984a:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800984c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800984e:	2200      	movs	r2, #0
 8009850:	f7ff bf9e 	b.w	8009790 <sys_timeout>
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	2000021c 	.word	0x2000021c
 800985c:	200037ec 	.word	0x200037ec
 8009860:	200037fc 	.word	0x200037fc
 8009864:	08009869 	.word	0x08009869

08009868 <tcpip_tcp_timer>:
{
 8009868:	b508      	push	{r3, lr}
  tcp_tmr();
 800986a:	f7fd fc31 	bl	80070d0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800986e:	4b08      	ldr	r3, [pc, #32]	; (8009890 <tcpip_tcp_timer+0x28>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	b913      	cbnz	r3, 800987a <tcpip_tcp_timer+0x12>
 8009874:	4b07      	ldr	r3, [pc, #28]	; (8009894 <tcpip_tcp_timer+0x2c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	b133      	cbz	r3, 8009888 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800987a:	2200      	movs	r2, #0
 800987c:	4906      	ldr	r1, [pc, #24]	; (8009898 <tcpip_tcp_timer+0x30>)
 800987e:	20fa      	movs	r0, #250	; 0xfa
}
 8009880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009884:	f7ff bf84 	b.w	8009790 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8009888:	4a04      	ldr	r2, [pc, #16]	; (800989c <tcpip_tcp_timer+0x34>)
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	bd08      	pop	{r3, pc}
 800988e:	bf00      	nop
 8009890:	200037ec 	.word	0x200037ec
 8009894:	200037fc 	.word	0x200037fc
 8009898:	08009869 	.word	0x08009869
 800989c:	2000021c 	.word	0x2000021c

080098a0 <sys_timeouts_init>:
{
 80098a0:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80098a2:	4d11      	ldr	r5, [pc, #68]	; (80098e8 <sys_timeouts_init+0x48>)
 80098a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098a8:	4c10      	ldr	r4, [pc, #64]	; (80098ec <sys_timeouts_init+0x4c>)
 80098aa:	f105 0208 	add.w	r2, r5, #8
 80098ae:	4621      	mov	r1, r4
 80098b0:	f7ff ff6e 	bl	8009790 <sys_timeout>
 80098b4:	f105 0210 	add.w	r2, r5, #16
 80098b8:	4621      	mov	r1, r4
 80098ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098be:	f7ff ff67 	bl	8009790 <sys_timeout>
 80098c2:	f105 0218 	add.w	r2, r5, #24
 80098c6:	4621      	mov	r1, r4
 80098c8:	f64e 2060 	movw	r0, #60000	; 0xea60
 80098cc:	f7ff ff60 	bl	8009790 <sys_timeout>
 80098d0:	f105 0220 	add.w	r2, r5, #32
 80098d4:	4621      	mov	r1, r4
 80098d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098da:	f7ff ff59 	bl	8009790 <sys_timeout>
  timeouts_last_time = sys_now();
 80098de:	f000 fd83 	bl	800a3e8 <sys_now>
 80098e2:	4b03      	ldr	r3, [pc, #12]	; (80098f0 <sys_timeouts_init+0x50>)
 80098e4:	6018      	str	r0, [r3, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	0800e0e4 	.word	0x0800e0e4
 80098ec:	080098f5 	.word	0x080098f5
 80098f0:	20000220 	.word	0x20000220

080098f4 <cyclic_timer>:
{
 80098f4:	b510      	push	{r4, lr}
 80098f6:	4604      	mov	r4, r0
  cyclic->handler();
 80098f8:	6843      	ldr	r3, [r0, #4]
 80098fa:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80098fc:	4903      	ldr	r1, [pc, #12]	; (800990c <cyclic_timer+0x18>)
 80098fe:	4622      	mov	r2, r4
 8009900:	6820      	ldr	r0, [r4, #0]
}
 8009902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009906:	f7ff bf43 	b.w	8009790 <sys_timeout>
 800990a:	bf00      	nop
 800990c:	080098f5 	.word	0x080098f5

08009910 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 8009914:	4d13      	ldr	r5, [pc, #76]	; (8009964 <sys_check_timeouts+0x54>)
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	b30b      	cbz	r3, 800995e <sys_check_timeouts+0x4e>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800991a:	4e13      	ldr	r6, [pc, #76]	; (8009968 <sys_check_timeouts+0x58>)
    now = sys_now();
 800991c:	f000 fd64 	bl	800a3e8 <sys_now>
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8009920:	4f12      	ldr	r7, [pc, #72]	; (800996c <sys_check_timeouts+0x5c>)
    diff = now - timeouts_last_time;
 8009922:	6834      	ldr	r4, [r6, #0]
 8009924:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 8009926:	783b      	ldrb	r3, [r7, #0]
 8009928:	b10b      	cbz	r3, 800992e <sys_check_timeouts+0x1e>
 800992a:	f7fc fb29 	bl	8005f80 <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 800992e:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8009930:	b1a9      	cbz	r1, 800995e <sys_check_timeouts+0x4e>
 8009932:	684b      	ldr	r3, [r1, #4]
 8009934:	429c      	cmp	r4, r3
 8009936:	d312      	bcc.n	800995e <sys_check_timeouts+0x4e>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 8009938:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
 800993a:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
 800993c:	f8d1 8008 	ldr.w	r8, [r1, #8]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009940:	2006      	movs	r0, #6
        timeouts_last_time += tmptimeout->time;
 8009942:	441a      	add	r2, r3
        next_timeout = tmptimeout->next;
 8009944:	680b      	ldr	r3, [r1, #0]
        arg = tmptimeout->arg;
 8009946:	f8d1 900c 	ldr.w	r9, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 800994a:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 800994c:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800994e:	f7fc fa07 	bl	8005d60 <memp_free>
        if (handler != NULL) {
 8009952:	f1b8 0f00 	cmp.w	r8, #0
 8009956:	d0e6      	beq.n	8009926 <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8009958:	4648      	mov	r0, r9
 800995a:	47c0      	blx	r8
 800995c:	e7e3      	b.n	8009926 <sys_check_timeouts+0x16>
 800995e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009962:	bf00      	nop
 8009964:	20000218 	.word	0x20000218
 8009968:	20000220 	.word	0x20000220
 800996c:	200037e4 	.word	0x200037e4

08009970 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009970:	4770      	bx	lr
	...

08009974 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009974:	8943      	ldrh	r3, [r0, #10]
 8009976:	2b07      	cmp	r3, #7
{
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	4605      	mov	r5, r0
 800997e:	b085      	sub	sp, #20
 8009980:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8009982:	d805      	bhi.n	8009990 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009984:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009986:	b005      	add	sp, #20
 8009988:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800998c:	f7fc bb4c 	b.w	8006028 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009990:	4e3e      	ldr	r6, [pc, #248]	; (8009a8c <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 8009992:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009994:	6831      	ldr	r1, [r6, #0]
 8009996:	6970      	ldr	r0, [r6, #20]
 8009998:	f7fb fbef 	bl	800517a <ip4_addr_isbroadcast_u32>
 800999c:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800999e:	8820      	ldrh	r0, [r4, #0]
 80099a0:	f7f9 fcfd 	bl	800339e <lwip_htons>
 80099a4:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 80099a6:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 80099a8:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 80099aa:	f7f9 fcf8 	bl	800339e <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80099ae:	4a38      	ldr	r2, [pc, #224]	; (8009a90 <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 80099b0:	4682      	mov	sl, r0
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80099b2:	6971      	ldr	r1, [r6, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80099b4:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 80099b6:	46a4      	mov	ip, r4
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80099b8:	f8d6 e010 	ldr.w	lr, [r6, #16]
 80099bc:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80099be:	4603      	mov	r3, r0
 80099c0:	9603      	str	r6, [sp, #12]
 80099c2:	b92b      	cbnz	r3, 80099d0 <udp_input+0x5c>
  if (pcb != NULL) {
 80099c4:	bb0c      	cbnz	r4, 8009a0a <udp_input+0x96>
  if (for_us) {
 80099c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80099ca:	428b      	cmp	r3, r1
 80099cc:	d1da      	bne.n	8009984 <udp_input+0x10>
 80099ce:	e01c      	b.n	8009a0a <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 80099d0:	8a5a      	ldrh	r2, [r3, #18]
 80099d2:	4552      	cmp	r2, sl
 80099d4:	d12b      	bne.n	8009a2e <udp_input+0xba>
 80099d6:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 80099d8:	b32f      	cbz	r7, 8009a26 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80099da:	b13a      	cbz	r2, 80099ec <udp_input+0x78>
 80099dc:	1c4e      	adds	r6, r1, #1
 80099de:	d005      	beq.n	80099ec <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80099e0:	404a      	eors	r2, r1
 80099e2:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80099e4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80099e8:	4216      	tst	r6, r2
 80099ea:	d120      	bne.n	8009a2e <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80099ec:	7c1a      	ldrb	r2, [r3, #16]
 80099ee:	0752      	lsls	r2, r2, #29
 80099f0:	d402      	bmi.n	80099f8 <udp_input+0x84>
 80099f2:	2c00      	cmp	r4, #0
 80099f4:	bf08      	it	eq
 80099f6:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 80099f8:	8a9a      	ldrh	r2, [r3, #20]
 80099fa:	4542      	cmp	r2, r8
 80099fc:	d117      	bne.n	8009a2e <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80099fe:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009a00:	b9c2      	cbnz	r2, 8009a34 <udp_input+0xc0>
        if (prev != NULL) {
 8009a02:	f1bc 0f00 	cmp.w	ip, #0
 8009a06:	d118      	bne.n	8009a3a <udp_input+0xc6>
 8009a08:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8009a0a:	f06f 0107 	mvn.w	r1, #7
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f7fc fb04 	bl	800601c <pbuf_header>
 8009a14:	b1c0      	cbz	r0, 8009a48 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009a16:	4b1f      	ldr	r3, [pc, #124]	; (8009a94 <udp_input+0x120>)
 8009a18:	f240 1255 	movw	r2, #341	; 0x155
 8009a1c:	491e      	ldr	r1, [pc, #120]	; (8009a98 <udp_input+0x124>)
 8009a1e:	481f      	ldr	r0, [pc, #124]	; (8009a9c <udp_input+0x128>)
 8009a20:	f001 fd7e 	bl	800b520 <iprintf>
 8009a24:	e7ae      	b.n	8009984 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	d0e0      	beq.n	80099ec <udp_input+0x78>
 8009a2a:	428a      	cmp	r2, r1
 8009a2c:	d0de      	beq.n	80099ec <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a2e:	469c      	mov	ip, r3
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	e7c6      	b.n	80099c2 <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009a34:	4572      	cmp	r2, lr
 8009a36:	d1fa      	bne.n	8009a2e <udp_input+0xba>
 8009a38:	e7e3      	b.n	8009a02 <udp_input+0x8e>
          prev->next = pcb->next;
 8009a3a:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 8009a3c:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 8009a40:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 8009a44:	60d8      	str	r0, [r3, #12]
 8009a46:	e7df      	b.n	8009a08 <udp_input+0x94>
    if (pcb != NULL) {
 8009a48:	b164      	cbz	r4, 8009a64 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 8009a4a:	69a6      	ldr	r6, [r4, #24]
 8009a4c:	2e00      	cmp	r6, #0
 8009a4e:	d099      	beq.n	8009984 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009a50:	f8cd 8000 	str.w	r8, [sp]
 8009a54:	462a      	mov	r2, r5
 8009a56:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <udp_input+0x12c>)
 8009a58:	4621      	mov	r1, r4
 8009a5a:	69e0      	ldr	r0, [r4, #28]
 8009a5c:	47b0      	blx	r6
}
 8009a5e:	b005      	add	sp, #20
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009a64:	2f00      	cmp	r7, #0
 8009a66:	d18d      	bne.n	8009984 <udp_input+0x10>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a70:	2be0      	cmp	r3, #224	; 0xe0
 8009a72:	d087      	beq.n	8009984 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	4628      	mov	r0, r5
 8009a78:	8999      	ldrh	r1, [r3, #12]
 8009a7a:	3108      	adds	r1, #8
 8009a7c:	b209      	sxth	r1, r1
 8009a7e:	f7fc fad0 	bl	8006022 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009a82:	2103      	movs	r1, #3
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7fb f9eb 	bl	8004e60 <icmp_dest_unreach>
 8009a8a:	e77b      	b.n	8009984 <udp_input+0x10>
 8009a8c:	20000240 	.word	0x20000240
 8009a90:	20003804 	.word	0x20003804
 8009a94:	0800e17d 	.word	0x0800e17d
 8009a98:	0800e1ac 	.word	0x0800e1ac
 8009a9c:	0800c987 	.word	0x0800c987
 8009aa0:	20000250 	.word	0x20000250

08009aa4 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8009aa4:	4b26      	ldr	r3, [pc, #152]	; (8009b40 <udp_bind+0x9c>)
{
 8009aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	bf08      	it	eq
 8009aae:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d040      	beq.n	8009b36 <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009ab4:	4e23      	ldr	r6, [pc, #140]	; (8009b44 <udp_bind+0xa0>)
 8009ab6:	f8d6 e000 	ldr.w	lr, [r6]
 8009aba:	4675      	mov	r5, lr
 8009abc:	b96d      	cbnz	r5, 8009ada <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8009abe:	b192      	cbz	r2, 8009ae6 <udp_bind+0x42>
 8009ac0:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009ac2:	b1fb      	cbz	r3, 8009b04 <udp_bind+0x60>
      if (pcb != ipcb) {
 8009ac4:	4283      	cmp	r3, r0
 8009ac6:	d006      	beq.n	8009ad6 <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8009ac8:	8a5c      	ldrh	r4, [r3, #18]
 8009aca:	4294      	cmp	r4, r2
 8009acc:	d103      	bne.n	8009ad6 <udp_bind+0x32>
 8009ace:	681f      	ldr	r7, [r3, #0]
 8009ad0:	680c      	ldr	r4, [r1, #0]
 8009ad2:	42a7      	cmp	r7, r4
 8009ad4:	d029      	beq.n	8009b2a <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	e7f3      	b.n	8009ac2 <udp_bind+0x1e>
    if (pcb == ipcb) {
 8009ada:	4285      	cmp	r5, r0
 8009adc:	d001      	beq.n	8009ae2 <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009ade:	68ed      	ldr	r5, [r5, #12]
 8009ae0:	e7ec      	b.n	8009abc <udp_bind+0x18>
      rebind = 1;
 8009ae2:	2501      	movs	r5, #1
 8009ae4:	e7eb      	b.n	8009abe <udp_bind+0x1a>
 8009ae6:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <udp_bind+0xa4>)
  if (port == 0) {
 8009ae8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009aec:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8009af0:	881a      	ldrh	r2, [r3, #0]
 8009af2:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009af4:	4677      	mov	r7, lr
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009af6:	bf16      	itet	ne
 8009af8:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8009afa:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009afe:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b00:	b957      	cbnz	r7, 8009b18 <udp_bind+0x74>
 8009b02:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8009b04:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 8009b06:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8009b08:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8009b0a:	b915      	cbnz	r5, 8009b12 <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8009b0c:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 8009b10:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8009b12:	2000      	movs	r0, #0
 8009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 8009b18:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 8009b1c:	4590      	cmp	r8, r2
 8009b1e:	d108      	bne.n	8009b32 <udp_bind+0x8e>
 8009b20:	3c01      	subs	r4, #1
 8009b22:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8009b24:	2c00      	cmp	r4, #0
 8009b26:	d1e4      	bne.n	8009af2 <udp_bind+0x4e>
 8009b28:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 8009b2a:	f06f 0007 	mvn.w	r0, #7
 8009b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b32:	68ff      	ldr	r7, [r7, #12]
 8009b34:	e7e4      	b.n	8009b00 <udp_bind+0x5c>
    return ERR_VAL;
 8009b36:	f06f 0005 	mvn.w	r0, #5
}
 8009b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3e:	bf00      	nop
 8009b40:	0800ce0c 	.word	0x0800ce0c
 8009b44:	20003804 	.word	0x20003804
 8009b48:	2000000e 	.word	0x2000000e

08009b4c <udp_sendto_if_src>:
{
 8009b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b50:	460e      	mov	r6, r1
 8009b52:	b085      	sub	sp, #20
 8009b54:	4690      	mov	r8, r2
 8009b56:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8009b58:	4607      	mov	r7, r0
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d050      	beq.n	8009c00 <udp_sendto_if_src+0xb4>
 8009b5e:	2a00      	cmp	r2, #0
 8009b60:	d04e      	beq.n	8009c00 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 8009b62:	8a42      	ldrh	r2, [r0, #18]
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	d033      	beq.n	8009bd0 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 8009b68:	2108      	movs	r1, #8
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7fc fa56 	bl	800601c <pbuf_header>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d137      	bne.n	8009be4 <udp_sendto_if_src+0x98>
 8009b74:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8009b76:	8963      	ldrh	r3, [r4, #10]
 8009b78:	2b07      	cmp	r3, #7
 8009b7a:	d806      	bhi.n	8009b8a <udp_sendto_if_src+0x3e>
 8009b7c:	4b23      	ldr	r3, [pc, #140]	; (8009c0c <udp_sendto_if_src+0xc0>)
 8009b7e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009b82:	4923      	ldr	r1, [pc, #140]	; (8009c10 <udp_sendto_if_src+0xc4>)
 8009b84:	4823      	ldr	r0, [pc, #140]	; (8009c14 <udp_sendto_if_src+0xc8>)
 8009b86:	f001 fccb 	bl	800b520 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 8009b8a:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8009b8c:	8a78      	ldrh	r0, [r7, #18]
 8009b8e:	f7f9 fc06 	bl	800339e <lwip_htons>
 8009b92:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 8009b94:	4648      	mov	r0, r9
 8009b96:	f7f9 fc02 	bl	800339e <lwip_htons>
  udphdr->chksum = 0x0000;
 8009b9a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8009b9c:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 8009b9e:	71ab      	strb	r3, [r5, #6]
 8009ba0:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8009ba2:	8920      	ldrh	r0, [r4, #8]
 8009ba4:	f7f9 fbfb 	bl	800339e <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 8009baa:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009bac:	4620      	mov	r0, r4
 8009bae:	7abb      	ldrb	r3, [r7, #10]
 8009bb0:	9202      	str	r2, [sp, #8]
 8009bb2:	2211      	movs	r2, #17
 8009bb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009bb6:	9201      	str	r2, [sp, #4]
 8009bb8:	7a7a      	ldrb	r2, [r7, #9]
 8009bba:	9200      	str	r2, [sp, #0]
 8009bbc:	4642      	mov	r2, r8
 8009bbe:	f7fb fa53 	bl	8005068 <ip4_output_if_src>
  if (q != p) {
 8009bc2:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009bc4:	4605      	mov	r5, r0
  if (q != p) {
 8009bc6:	d009      	beq.n	8009bdc <udp_sendto_if_src+0x90>
    pbuf_free(q);
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f7fc fa2d 	bl	8006028 <pbuf_free>
 8009bce:	e005      	b.n	8009bdc <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009bd0:	4601      	mov	r1, r0
 8009bd2:	f7ff ff67 	bl	8009aa4 <udp_bind>
    if (err != ERR_OK) {
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d0c5      	beq.n	8009b68 <udp_sendto_if_src+0x1c>
}
 8009bdc:	4628      	mov	r0, r5
 8009bde:	b005      	add	sp, #20
 8009be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8009be4:	2200      	movs	r2, #0
 8009be6:	2108      	movs	r1, #8
 8009be8:	2001      	movs	r0, #1
 8009bea:	f7fc fa7f 	bl	80060ec <pbuf_alloc>
    if (q == NULL) {
 8009bee:	4604      	mov	r4, r0
 8009bf0:	b148      	cbz	r0, 8009c06 <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 8009bf2:	8933      	ldrh	r3, [r6, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0be      	beq.n	8009b76 <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	f7fc fc1d 	bl	8006438 <pbuf_chain>
 8009bfe:	e7ba      	b.n	8009b76 <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 8009c00:	f06f 0505 	mvn.w	r5, #5
 8009c04:	e7ea      	b.n	8009bdc <udp_sendto_if_src+0x90>
      return ERR_MEM;
 8009c06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009c0a:	e7e7      	b.n	8009bdc <udp_sendto_if_src+0x90>
 8009c0c:	0800e17d 	.word	0x0800e17d
 8009c10:	0800e1c0 	.word	0x0800e1c0
 8009c14:	0800c987 	.word	0x0800c987

08009c18 <udp_sendto_if>:
{
 8009c18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c1a:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8009c1c:	b190      	cbz	r0, 8009c44 <udp_sendto_if+0x2c>
 8009c1e:	b18a      	cbz	r2, 8009c44 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009c20:	6805      	ldr	r5, [r0, #0]
 8009c22:	b11d      	cbz	r5, 8009c2c <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8009c24:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009c28:	2ee0      	cmp	r6, #224	; 0xe0
 8009c2a:	d106      	bne.n	8009c3a <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 8009c2c:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8009c2e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8009c32:	f7ff ff8b 	bl	8009b4c <udp_sendto_if_src>
}
 8009c36:	b002      	add	sp, #8
 8009c38:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8009c3a:	6866      	ldr	r6, [r4, #4]
 8009c3c:	42b5      	cmp	r5, r6
 8009c3e:	d104      	bne.n	8009c4a <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009c40:	4605      	mov	r5, r0
 8009c42:	e7f4      	b.n	8009c2e <udp_sendto_if+0x16>
    return ERR_VAL;
 8009c44:	f06f 0005 	mvn.w	r0, #5
 8009c48:	e7f5      	b.n	8009c36 <udp_sendto_if+0x1e>
      return ERR_RTE;
 8009c4a:	f06f 0003 	mvn.w	r0, #3
 8009c4e:	e7f2      	b.n	8009c36 <udp_sendto_if+0x1e>

08009c50 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	460d      	mov	r5, r1
 8009c54:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009c56:	4604      	mov	r4, r0
 8009c58:	b1d0      	cbz	r0, 8009c90 <udp_connect+0x40>
 8009c5a:	b1c9      	cbz	r1, 8009c90 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 8009c5c:	8a42      	ldrh	r2, [r0, #18]
 8009c5e:	b16a      	cbz	r2, 8009c7c <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8009c60:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 8009c62:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8009c64:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8009c66:	7c23      	ldrb	r3, [r4, #16]
 8009c68:	f043 0304 	orr.w	r3, r3, #4
 8009c6c:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009c6e:	4b0b      	ldr	r3, [pc, #44]	; (8009c9c <udp_connect+0x4c>)
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4610      	mov	r0, r2
 8009c74:	b940      	cbnz	r0, 8009c88 <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8009c76:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8009c78:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	f7ff ff11 	bl	8009aa4 <udp_bind>
    if (err != ERR_OK) {
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d0ec      	beq.n	8009c60 <udp_connect+0x10>
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 8009c88:	42a0      	cmp	r0, r4
 8009c8a:	d004      	beq.n	8009c96 <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009c8c:	68c0      	ldr	r0, [r0, #12]
 8009c8e:	e7f1      	b.n	8009c74 <udp_connect+0x24>
    return ERR_VAL;
 8009c90:	f06f 0005 	mvn.w	r0, #5
 8009c94:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 8009c96:	2000      	movs	r0, #0
}
 8009c98:	bd70      	pop	{r4, r5, r6, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20003804 	.word	0x20003804

08009ca0 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8009ca0:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 8009ca2:	61c2      	str	r2, [r0, #28]
 8009ca4:	4770      	bx	lr
	...

08009ca8 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8009ca8:	4a0a      	ldr	r2, [pc, #40]	; (8009cd4 <udp_remove+0x2c>)
{
 8009caa:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 8009cac:	6813      	ldr	r3, [r2, #0]
 8009cae:	4283      	cmp	r3, r0
 8009cb0:	d104      	bne.n	8009cbc <udp_remove+0x14>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8009cb2:	68c3      	ldr	r3, [r0, #12]
 8009cb4:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f7fc b852 	b.w	8005d60 <memp_free>
{
 8009cbc:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0f9      	beq.n	8009cb6 <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d0f6      	beq.n	8009cb6 <udp_remove+0xe>
 8009cc8:	4299      	cmp	r1, r3
 8009cca:	d1f7      	bne.n	8009cbc <udp_remove+0x14>
        pcb2->next = pcb->next;
 8009ccc:	68cb      	ldr	r3, [r1, #12]
 8009cce:	60d3      	str	r3, [r2, #12]
        break;
 8009cd0:	e7f1      	b.n	8009cb6 <udp_remove+0xe>
 8009cd2:	bf00      	nop
 8009cd4:	20003804 	.word	0x20003804

08009cd8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8009cd8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f7fc f824 	bl	8005d28 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	b128      	cbz	r0, 8009cf0 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	f001 fb66 	bl	800b3b8 <memset>
    pcb->ttl = UDP_TTL;
 8009cec:	23ff      	movs	r3, #255	; 0xff
 8009cee:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	bd10      	pop	{r4, pc}

08009cf4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009cf4:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8009cf6:	b138      	cbz	r0, 8009d08 <udp_netif_ip_addr_changed+0x14>
 8009cf8:	6803      	ldr	r3, [r0, #0]
 8009cfa:	b12b      	cbz	r3, 8009d08 <udp_netif_ip_addr_changed+0x14>
 8009cfc:	b121      	cbz	r1, 8009d08 <udp_netif_ip_addr_changed+0x14>
 8009cfe:	680b      	ldr	r3, [r1, #0]
 8009d00:	b113      	cbz	r3, 8009d08 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009d02:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <udp_netif_ip_addr_changed+0x28>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	b903      	cbnz	r3, 8009d0a <udp_netif_ip_addr_changed+0x16>
 8009d08:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8009d0a:	681c      	ldr	r4, [r3, #0]
 8009d0c:	6802      	ldr	r2, [r0, #0]
 8009d0e:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8009d10:	bf04      	itt	eq
 8009d12:	680a      	ldreq	r2, [r1, #0]
 8009d14:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	e7f5      	b.n	8009d06 <udp_netif_ip_addr_changed+0x12>
 8009d1a:	bf00      	nop
 8009d1c:	20003804 	.word	0x20003804

08009d20 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8009d20:	8943      	ldrh	r3, [r0, #10]
 8009d22:	2b0e      	cmp	r3, #14
{
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	4604      	mov	r4, r0
 8009d28:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8009d2a:	d914      	bls.n	8009d56 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009d2c:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8009d2e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8009d30:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8009d32:	07d9      	lsls	r1, r3, #31
 8009d34:	d50a      	bpl.n	8009d4c <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d111      	bne.n	8009d5e <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009d3a:	7843      	ldrb	r3, [r0, #1]
 8009d3c:	b933      	cbnz	r3, 8009d4c <ethernet_input+0x2c>
 8009d3e:	7883      	ldrb	r3, [r0, #2]
 8009d40:	2b5e      	cmp	r3, #94	; 0x5e
 8009d42:	d103      	bne.n	8009d4c <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009d44:	7b63      	ldrb	r3, [r4, #13]
 8009d46:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009d4a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8009d4c:	2e08      	cmp	r6, #8
 8009d4e:	d010      	beq.n	8009d72 <ethernet_input+0x52>
 8009d50:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8009d54:	d01e      	beq.n	8009d94 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7fc f966 	bl	8006028 <pbuf_free>
  return ERR_OK;
 8009d5c:	e018      	b.n	8009d90 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009d5e:	2206      	movs	r2, #6
 8009d60:	4914      	ldr	r1, [pc, #80]	; (8009db4 <ethernet_input+0x94>)
 8009d62:	f001 fb0f 	bl	800b384 <memcmp>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d1f0      	bne.n	8009d4c <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 8009d6a:	7b63      	ldrb	r3, [r4, #13]
 8009d6c:	f043 0308 	orr.w	r3, r3, #8
 8009d70:	e7eb      	b.n	8009d4a <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009d72:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8009d76:	071a      	lsls	r2, r3, #28
 8009d78:	d5ed      	bpl.n	8009d56 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8009d7a:	f06f 010d 	mvn.w	r1, #13
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f7fc f94c 	bl	800601c <pbuf_header>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d1e6      	bne.n	8009d56 <ethernet_input+0x36>
        ip4_input(p, netif);
 8009d88:	4629      	mov	r1, r5
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f7fb f89e 	bl	8004ecc <ip4_input>
}
 8009d90:	2000      	movs	r0, #0
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009d94:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8009d98:	071b      	lsls	r3, r3, #28
 8009d9a:	d5dc      	bpl.n	8009d56 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8009d9c:	f06f 010d 	mvn.w	r1, #13
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7fc f93b 	bl	800601c <pbuf_header>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d1d5      	bne.n	8009d56 <ethernet_input+0x36>
        etharp_input(p, netif);
 8009daa:	4629      	mov	r1, r5
 8009dac:	4620      	mov	r0, r4
 8009dae:	f7fa fcf7 	bl	80047a0 <etharp_input>
      break;
 8009db2:	e7ed      	b.n	8009d90 <ethernet_input+0x70>
 8009db4:	0800e1ee 	.word	0x0800e1ee

08009db8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8009db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8009dc0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 8009dc4:	4616      	mov	r6, r2
 8009dc6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8009dc8:	f7f9 fae9 	bl	800339e <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8009dcc:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8009dce:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f7fc f923 	bl	800601c <pbuf_header>
 8009dd6:	b9e0      	cbnz	r0, 8009e12 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8009dd8:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 8009dda:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	600b      	str	r3, [r1, #0]
 8009de2:	88bb      	ldrh	r3, [r7, #4]
 8009de4:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 8009de6:	6833      	ldr	r3, [r6, #0]
 8009de8:	f8c1 3006 	str.w	r3, [r1, #6]
 8009dec:	88b3      	ldrh	r3, [r6, #4]
 8009dee:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8009df0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009df4:	2b06      	cmp	r3, #6
 8009df6:	d006      	beq.n	8009e06 <ethernet_output+0x4e>
 8009df8:	4b08      	ldr	r3, [pc, #32]	; (8009e1c <ethernet_output+0x64>)
 8009dfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009dfe:	4908      	ldr	r1, [pc, #32]	; (8009e20 <ethernet_output+0x68>)
 8009e00:	4808      	ldr	r0, [pc, #32]	; (8009e24 <ethernet_output+0x6c>)
 8009e02:	f001 fb8d 	bl	800b520 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009e06:	69a3      	ldr	r3, [r4, #24]
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8009e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8009e10:	4718      	bx	r3
}
 8009e12:	f06f 0001 	mvn.w	r0, #1
 8009e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e1a:	bf00      	nop
 8009e1c:	0800e1f4 	.word	0x0800e1f4
 8009e20:	0800e229 	.word	0x0800e229
 8009e24:	0800c987 	.word	0x0800c987

08009e28 <SCCB_GPIO_Config>:
#include "SCCB.h"
#include "dwt_delay.h"
//#define DWT_Delay(x) HAL_Delay(1)
#include "main.h"

void SCCB_GPIO_Config(void) {
 8009e28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8009e2a:	2214      	movs	r2, #20
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	a801      	add	r0, sp, #4
 8009e30:	f001 fac2 	bl	800b3b8 <memset>

	GPIO_InitStruct.Pin = CAM_SIOC_Pin | CAM_SIOD_Pin;
 8009e34:	f44f 7310 	mov.w	r3, #576	; 0x240
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e38:	a901      	add	r1, sp, #4
 8009e3a:	4805      	ldr	r0, [pc, #20]	; (8009e50 <SCCB_GPIO_Config+0x28>)
	GPIO_InitStruct.Pin = CAM_SIOC_Pin | CAM_SIOD_Pin;
 8009e3c:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009e42:	2302      	movs	r3, #2
 8009e44:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e46:	f7f7 fd37 	bl	80018b8 <HAL_GPIO_Init>

}
 8009e4a:	b007      	add	sp, #28
 8009e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e50:	40020400 	.word	0x40020400

08009e54 <SCCB_SID_GPIO_OUTPUT>:

void SCCB_SID_GPIO_OUTPUT(void) {
 8009e54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8009e56:	2214      	movs	r2, #20
 8009e58:	2100      	movs	r1, #0
 8009e5a:	a801      	add	r0, sp, #4
 8009e5c:	f001 faac 	bl	800b3b8 <memset>
	GPIO_InitStruct.Pin = CAM_SIOD_Pin;
 8009e60:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e64:	a901      	add	r1, sp, #4
 8009e66:	4805      	ldr	r0, [pc, #20]	; (8009e7c <SCCB_SID_GPIO_OUTPUT+0x28>)
	GPIO_InitStruct.Pin = CAM_SIOD_Pin;
 8009e68:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009e6e:	2302      	movs	r3, #2
 8009e70:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e72:	f7f7 fd21 	bl	80018b8 <HAL_GPIO_Init>
}
 8009e76:	b007      	add	sp, #28
 8009e78:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e7c:	40020400 	.word	0x40020400

08009e80 <SCCB_SID_GPIO_INPUT>:

void SCCB_SID_GPIO_INPUT(void) {
 8009e80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8009e82:	2214      	movs	r2, #20
 8009e84:	2100      	movs	r1, #0
 8009e86:	a801      	add	r0, sp, #4
 8009e88:	f001 fa96 	bl	800b3b8 <memset>
	GPIO_InitStruct.Pin = CAM_SIOD_Pin;
 8009e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e90:	a901      	add	r1, sp, #4
 8009e92:	4803      	ldr	r0, [pc, #12]	; (8009ea0 <SCCB_SID_GPIO_INPUT+0x20>)
	GPIO_InitStruct.Pin = CAM_SIOD_Pin;
 8009e94:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e96:	f7f7 fd0f 	bl	80018b8 <HAL_GPIO_Init>
}
 8009e9a:	b007      	add	sp, #28
 8009e9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ea0:	40020400 	.word	0x40020400

08009ea4 <startSCCB>:

void startSCCB(void) {
 8009ea4:	b510      	push	{r4, lr}
	SCCB_SID_H();
 8009ea6:	4c14      	ldr	r4, [pc, #80]	; (8009ef8 <startSCCB+0x54>)
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f7f7 fdf2 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8009eb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009eb8:	f000 f8aa 	bl	800a010 <DWT_Delay>

	SCCB_SIC_H();
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	2140      	movs	r1, #64	; 0x40
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7f7 fde9 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8009ec6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009eca:	f000 f8a1 	bl	800a010 <DWT_Delay>

	SCCB_SID_L();
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f7f7 fddf 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8009eda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009ede:	f000 f897 	bl	800a010 <DWT_Delay>

	SCCB_SIC_L();
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2140      	movs	r1, #64	; 0x40
 8009ee8:	f7f7 fdd6 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8009eec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8009ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DWT_Delay(500);
 8009ef4:	f000 b88c 	b.w	800a010 <DWT_Delay>
 8009ef8:	40020400 	.word	0x40020400

08009efc <stopSCCB>:
void stopSCCB(void) {
 8009efc:	b510      	push	{r4, lr}
	SCCB_SID_L();
 8009efe:	4c10      	ldr	r4, [pc, #64]	; (8009f40 <stopSCCB+0x44>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f06:	4620      	mov	r0, r4
 8009f08:	f7f7 fdc6 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8009f0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f10:	f000 f87e 	bl	800a010 <DWT_Delay>

	SCCB_SIC_H();
 8009f14:	2201      	movs	r2, #1
 8009f16:	2140      	movs	r1, #64	; 0x40
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f7f7 fdbd 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8009f1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f22:	f000 f875 	bl	800a010 <DWT_Delay>

	SCCB_SID_H();
 8009f26:	4620      	mov	r0, r4
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f2e:	f7f7 fdb3 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(500);
 8009f32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8009f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DWT_Delay(500);
 8009f3a:	f000 b869 	b.w	800a010 <DWT_Delay>
 8009f3e:	bf00      	nop
 8009f40:	40020400 	.word	0x40020400

08009f44 <SCCBwriteByte>:

	SCCB_SID_L();
	DWT_Delay(500);
}

unsigned char SCCBwriteByte(unsigned char m_data) {
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	4606      	mov	r6, r0
 8009f48:	2400      	movs	r4, #0

	for (j = 0; j < 8; j++) {
		if ((m_data << j) & 0x80) {
			SCCB_SID_H();
		} else {
			SCCB_SID_L();
 8009f4a:	4d23      	ldr	r5, [pc, #140]	; (8009fd8 <SCCBwriteByte+0x94>)
		if ((m_data << j) & 0x80) {
 8009f4c:	fa06 f204 	lsl.w	r2, r6, r4
			SCCB_SID_L();
 8009f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f54:	4628      	mov	r0, r5
 8009f56:	3401      	adds	r4, #1
		if ((m_data << j) & 0x80) {
 8009f58:	f012 0280 	ands.w	r2, r2, #128	; 0x80
			SCCB_SID_H();
 8009f5c:	bf18      	it	ne
 8009f5e:	2201      	movne	r2, #1
			SCCB_SID_L();
 8009f60:	f7f7 fd9a 	bl	8001a98 <HAL_GPIO_WritePin>
		}
		DWT_Delay(10);
 8009f64:	200a      	movs	r0, #10
 8009f66:	f000 f853 	bl	800a010 <DWT_Delay>
		SCCB_SIC_H();
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	2140      	movs	r1, #64	; 0x40
 8009f6e:	481a      	ldr	r0, [pc, #104]	; (8009fd8 <SCCBwriteByte+0x94>)
 8009f70:	f7f7 fd92 	bl	8001a98 <HAL_GPIO_WritePin>
		DWT_Delay(10);
 8009f74:	200a      	movs	r0, #10
 8009f76:	f000 f84b 	bl	800a010 <DWT_Delay>
		SCCB_SIC_L();
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2140      	movs	r1, #64	; 0x40
 8009f7e:	4816      	ldr	r0, [pc, #88]	; (8009fd8 <SCCBwriteByte+0x94>)
 8009f80:	f7f7 fd8a 	bl	8001a98 <HAL_GPIO_WritePin>
		DWT_Delay(10);
 8009f84:	200a      	movs	r0, #10
 8009f86:	f000 f843 	bl	800a010 <DWT_Delay>
	for (j = 0; j < 8; j++) {
 8009f8a:	2c08      	cmp	r4, #8
 8009f8c:	d1de      	bne.n	8009f4c <SCCBwriteByte+0x8>
	}
	DWT_Delay(10);
 8009f8e:	200a      	movs	r0, #10
 8009f90:	f000 f83e 	bl	800a010 <DWT_Delay>
	SCCB_SID_IN;
 8009f94:	f7ff ff74 	bl	8009e80 <SCCB_SID_GPIO_INPUT>
	DWT_Delay(10);
 8009f98:	200a      	movs	r0, #10
 8009f9a:	f000 f839 	bl	800a010 <DWT_Delay>
	SCCB_SIC_H();
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	2140      	movs	r1, #64	; 0x40
 8009fa2:	480d      	ldr	r0, [pc, #52]	; (8009fd8 <SCCBwriteByte+0x94>)
 8009fa4:	f7f7 fd78 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8009fa8:	200a      	movs	r0, #10
 8009faa:	f000 f831 	bl	800a010 <DWT_Delay>
	if (SCCB_SID_STATE) {
 8009fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009fb2:	4809      	ldr	r0, [pc, #36]	; (8009fd8 <SCCBwriteByte+0x94>)
 8009fb4:	f7f7 fd6a 	bl	8001a8c <HAL_GPIO_ReadPin>
		tem = 0;
	} else {
		tem = 1;
	}
	SCCB_SIC_L();
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2140      	movs	r1, #64	; 0x40
	if (SCCB_SID_STATE) {
 8009fbc:	4604      	mov	r4, r0
	SCCB_SIC_L();
 8009fbe:	4806      	ldr	r0, [pc, #24]	; (8009fd8 <SCCBwriteByte+0x94>)
 8009fc0:	f7f7 fd6a 	bl	8001a98 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8009fc4:	200a      	movs	r0, #10
 8009fc6:	f000 f823 	bl	800a010 <DWT_Delay>
	SCCB_SID_OUT;
 8009fca:	f7ff ff43 	bl	8009e54 <SCCB_SID_GPIO_OUTPUT>

	return (tem);
}
 8009fce:	f114 30ff 	adds.w	r0, r4, #4294967295	; 0xffffffff
 8009fd2:	bf18      	it	ne
 8009fd4:	2001      	movne	r0, #1
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	40020400 	.word	0x40020400

08009fdc <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8009fdc:	4909      	ldr	r1, [pc, #36]	; (800a004 <DWT_Init+0x28>)
 8009fde:	68ca      	ldr	r2, [r1, #12]
 8009fe0:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
 8009fe4:	d10c      	bne.n	800a000 <DWT_Init+0x24>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009fe6:	68cb      	ldr	r3, [r1, #12]
 8009fe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fec:	60cb      	str	r3, [r1, #12]
        DWT->LAR = 0xC5ACCE55;
 8009fee:	4b06      	ldr	r3, [pc, #24]	; (800a008 <DWT_Init+0x2c>)
 8009ff0:	4906      	ldr	r1, [pc, #24]	; (800a00c <DWT_Init+0x30>)
 8009ff2:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
        DWT->CYCCNT = 0;
 8009ff6:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	f042 0201 	orr.w	r2, r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	e000edf0 	.word	0xe000edf0
 800a008:	e0001000 	.word	0xe0001000
 800a00c:	c5acce55 	.word	0xc5acce55

0800a010 <DWT_Delay>:
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
             delayTicks = us * (SystemCoreClock/1000000);
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <DWT_Delay+0x1c>)
    uint32_t startTick = DWT->CYCCNT,
 800a012:	4a07      	ldr	r2, [pc, #28]	; (800a030 <DWT_Delay+0x20>)
             delayTicks = us * (SystemCoreClock/1000000);
 800a014:	681b      	ldr	r3, [r3, #0]
    uint32_t startTick = DWT->CYCCNT,
 800a016:	6851      	ldr	r1, [r2, #4]
{
 800a018:	b510      	push	{r4, lr}
             delayTicks = us * (SystemCoreClock/1000000);
 800a01a:	4c06      	ldr	r4, [pc, #24]	; (800a034 <DWT_Delay+0x24>)
 800a01c:	fbb3 f3f4 	udiv	r3, r3, r4
 800a020:	4358      	muls	r0, r3

    while ((DWT->CYCCNT - startTick) < delayTicks);
 800a022:	6853      	ldr	r3, [r2, #4]
 800a024:	1a5b      	subs	r3, r3, r1
 800a026:	4298      	cmp	r0, r3
 800a028:	d8fb      	bhi.n	800a022 <DWT_Delay+0x12>
}
 800a02a:	bd10      	pop	{r4, pc}
 800a02c:	2000001c 	.word	0x2000001c
 800a030:	e0001000 	.word	0xe0001000
 800a034:	000f4240 	.word	0x000f4240

0800a038 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a03c:	4a25      	ldr	r2, [pc, #148]	; (800a0d4 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800a03e:	f04f 0800 	mov.w	r8, #0
{
 800a042:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a044:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a048:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800a04a:	4647      	mov	r7, r8
 800a04c:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a04e:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800a050:	b92c      	cbnz	r4, 800a05e <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a052:	4639      	mov	r1, r7
 800a054:	481f      	ldr	r0, [pc, #124]	; (800a0d4 <low_level_output+0x9c>)
 800a056:	f7f7 f9d5 	bl	8001404 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800a05a:	4620      	mov	r0, r4
 800a05c:	e004      	b.n	800a068 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a05e:	682a      	ldr	r2, [r5, #0]
 800a060:	2a00      	cmp	r2, #0
 800a062:	da11      	bge.n	800a088 <low_level_output+0x50>
        errval = ERR_USE;
 800a064:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a068:	9b00      	ldr	r3, [sp, #0]
 800a06a:	f241 0214 	movw	r2, #4116	; 0x1014
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	5899      	ldr	r1, [r3, r2]
 800a072:	0689      	lsls	r1, r1, #26
 800a074:	d505      	bpl.n	800a082 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a076:	2120      	movs	r1, #32
 800a078:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a07a:	2100      	movs	r1, #0
 800a07c:	f241 0204 	movw	r2, #4100	; 0x1004
 800a080:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800a082:	b003      	add	sp, #12
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800a088:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a08c:	4646      	mov	r6, r8
      payloadoffset = 0;
 800a08e:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a092:	eb06 0809 	add.w	r8, r6, r9
 800a096:	1998      	adds	r0, r3, r6
 800a098:	6861      	ldr	r1, [r4, #4]
 800a09a:	45d8      	cmp	r8, fp
 800a09c:	d808      	bhi.n	800a0b0 <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a09e:	464a      	mov	r2, r9
 800a0a0:	4451      	add	r1, sl
 800a0a2:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800a0a4:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a0a6:	f001 f97c 	bl	800b3a2 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800a0aa:	6824      	ldr	r4, [r4, #0]
 800a0ac:	9b01      	ldr	r3, [sp, #4]
 800a0ae:	e7cf      	b.n	800a050 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a0b0:	ebab 0606 	sub.w	r6, fp, r6
 800a0b4:	4451      	add	r1, sl
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	f001 f973 	bl	800b3a2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a0bc:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a0be:	682b      	ldr	r3, [r5, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dbcf      	blt.n	800a064 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a0c4:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a0c6:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a0c8:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a0ca:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	e7df      	b.n	800a092 <low_level_output+0x5a>
 800a0d2:	bf00      	nop
 800a0d4:	200050d8 	.word	0x200050d8

0800a0d8 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800a0d8:	6802      	ldr	r2, [r0, #0]
 800a0da:	4b3b      	ldr	r3, [pc, #236]	; (800a1c8 <HAL_ETH_MspInit+0xf0>)
 800a0dc:	429a      	cmp	r2, r3
{
 800a0de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e0:	b08d      	sub	sp, #52	; 0x34
  if(ethHandle->Instance==ETH)
 800a0e2:	d16e      	bne.n	800a1c2 <HAL_ETH_MspInit+0xea>
    __HAL_RCC_ETH_CLK_ENABLE();
 800a0e4:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0e8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ea:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0ec:	2503      	movs	r5, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800a0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0f0:	240b      	movs	r4, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0f2:	a907      	add	r1, sp, #28
 800a0f4:	4835      	ldr	r0, [pc, #212]	; (800a1cc <HAL_ETH_MspInit+0xf4>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800a0f6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a0fa:	631a      	str	r2, [r3, #48]	; 0x30
 800a0fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0fe:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800a102:	9200      	str	r2, [sp, #0]
 800a104:	9a00      	ldr	r2, [sp, #0]
 800a106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a108:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a10c:	631a      	str	r2, [r3, #48]	; 0x30
 800a10e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a110:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800a114:	9201      	str	r2, [sp, #4]
 800a116:	9a01      	ldr	r2, [sp, #4]
 800a118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a11a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a11e:	631a      	str	r2, [r3, #48]	; 0x30
 800a120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a122:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a126:	9202      	str	r2, [sp, #8]
 800a128:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a12a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a12c:	f042 0204 	orr.w	r2, r2, #4
 800a130:	631a      	str	r2, [r3, #48]	; 0x30
 800a132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a134:	f002 0204 	and.w	r2, r2, #4
 800a138:	9203      	str	r2, [sp, #12]
 800a13a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a13c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13e:	f042 0201 	orr.w	r2, r2, #1
 800a142:	631a      	str	r2, [r3, #48]	; 0x30
 800a144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a146:	f002 0201 	and.w	r2, r2, #1
 800a14a:	9204      	str	r2, [sp, #16]
 800a14c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a150:	f042 0202 	orr.w	r2, r2, #2
 800a154:	631a      	str	r2, [r3, #48]	; 0x30
 800a156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a158:	f002 0202 	and.w	r2, r2, #2
 800a15c:	9205      	str	r2, [sp, #20]
 800a15e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a166:	631a      	str	r2, [r3, #48]	; 0x30
 800a168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a16a:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a170:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a172:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a174:	9306      	str	r3, [sp, #24]
 800a176:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a178:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a17a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a17c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a17e:	f7f7 fb9b 	bl	80018b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a182:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a184:	a907      	add	r1, sp, #28
 800a186:	4812      	ldr	r0, [pc, #72]	; (800a1d0 <HAL_ETH_MspInit+0xf8>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a188:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a18a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a18c:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a18e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a190:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a192:	f7f7 fb91 	bl	80018b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a19a:	a907      	add	r1, sp, #28
 800a19c:	480d      	ldr	r0, [pc, #52]	; (800a1d4 <HAL_ETH_MspInit+0xfc>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a19e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1a0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1a2:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1a4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a1a6:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a1a8:	f7f7 fb86 	bl	80018b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a1ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a1b0:	a907      	add	r1, sp, #28
 800a1b2:	4809      	ldr	r0, [pc, #36]	; (800a1d8 <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a1b4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1ba:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a1bc:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a1be:	f7f7 fb7b 	bl	80018b8 <HAL_GPIO_Init>
}
 800a1c2:	b00d      	add	sp, #52	; 0x34
 800a1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	40028000 	.word	0x40028000
 800a1cc:	40020800 	.word	0x40020800
 800a1d0:	40020000 	.word	0x40020000
 800a1d4:	40020400 	.word	0x40020400
 800a1d8:	40021800 	.word	0x40021800

0800a1dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800a1e0:	4c34      	ldr	r4, [pc, #208]	; (800a2b4 <ethernetif_input+0xd8>)
{
 800a1e2:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f7f7 f97f 	bl	80014e8 <HAL_ETH_GetReceivedFrame>
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d15e      	bne.n	800a2ae <ethernetif_input+0xd2>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a1f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800a1f2:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a1f4:	9300      	str	r3, [sp, #0]
  if (len > 0)
 800a1f6:	bb09      	cbnz	r1, 800a23c <ethernetif_input+0x60>
  struct pbuf *p = NULL;
 800a1f8:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a1fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a200:	4282      	cmp	r2, r0
 800a202:	d14d      	bne.n	800a2a0 <ethernetif_input+0xc4>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	f241 0114 	movw	r1, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 800a20a:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800a20c:	5858      	ldr	r0, [r3, r1]
    heth.RxFrameInfos.SegCount =0;  
 800a20e:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800a210:	0600      	lsls	r0, r0, #24
 800a212:	d504      	bpl.n	800a21e <ethernetif_input+0x42>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a214:	2080      	movs	r0, #128	; 0x80
 800a216:	5058      	str	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 800a218:	f241 0108 	movw	r1, #4104	; 0x1008
 800a21c:	505a      	str	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800a21e:	2f00      	cmp	r7, #0
 800a220:	d045      	beq.n	800a2ae <ethernetif_input+0xd2>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800a222:	9b01      	ldr	r3, [sp, #4]
 800a224:	4638      	mov	r0, r7
 800a226:	9901      	ldr	r1, [sp, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	4798      	blx	r3
    
  if (err != ERR_OK)
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d03e      	beq.n	800a2ae <ethernetif_input+0xd2>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800a230:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 800a232:	b003      	add	sp, #12
 800a234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 800a238:	f7fb bef6 	b.w	8006028 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a23c:	2203      	movs	r2, #3
 800a23e:	2004      	movs	r0, #4
 800a240:	f7fb ff54 	bl	80060ec <pbuf_alloc>
  if (p != NULL)
 800a244:	4607      	mov	r7, r0
 800a246:	2800      	cmp	r0, #0
 800a248:	d0d6      	beq.n	800a1f8 <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a24a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800a24e:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a250:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800a254:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800a258:	462e      	mov	r6, r5
      payloadoffset = 0;
 800a25a:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a25e:	18b5      	adds	r5, r6, r2
 800a260:	9b00      	ldr	r3, [sp, #0]
 800a262:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a266:	455d      	cmp	r5, fp
 800a268:	eb03 0106 	add.w	r1, r3, r6
 800a26c:	d808      	bhi.n	800a280 <ethernetif_input+0xa4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a26e:	4448      	add	r0, r9
 800a270:	f001 f897 	bl	800b3a2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800a274:	f8d8 8000 	ldr.w	r8, [r8]
 800a278:	f1b8 0f00 	cmp.w	r8, #0
 800a27c:	d1ea      	bne.n	800a254 <ethernetif_input+0x78>
 800a27e:	e7bc      	b.n	800a1fa <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a280:	ebab 0606 	sub.w	r6, fp, r6
 800a284:	4448      	add	r0, r9
 800a286:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a288:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a28a:	f001 f88a 	bl	800b3a2 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a28e:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a292:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800a296:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a298:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	e7de      	b.n	800a25e <ethernetif_input+0x82>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a2a0:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a2a2:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a2a4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a2a8:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	e7a8      	b.n	800a200 <ethernetif_input+0x24>
}
 800a2ae:	b003      	add	sp, #12
 800a2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b4:	200050d8 	.word	0x200050d8

0800a2b8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a2b8:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a2ba:	4604      	mov	r4, r0
{
 800a2bc:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a2be:	b930      	cbnz	r0, 800a2ce <ethernetif_init+0x16>
 800a2c0:	4b3e      	ldr	r3, [pc, #248]	; (800a3bc <ethernetif_init+0x104>)
 800a2c2:	f44f 7204 	mov.w	r2, #528	; 0x210
 800a2c6:	493e      	ldr	r1, [pc, #248]	; (800a3c0 <ethernetif_init+0x108>)
 800a2c8:	483e      	ldr	r0, [pc, #248]	; (800a3c4 <ethernetif_init+0x10c>)
 800a2ca:	f001 f929 	bl	800b520 <iprintf>
  heth.Instance = ETH;
 800a2ce:	4d3e      	ldr	r5, [pc, #248]	; (800a3c8 <ethernetif_init+0x110>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	493e      	ldr	r1, [pc, #248]	; (800a3cc <ethernetif_init+0x114>)
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a2d4:	2373      	movs	r3, #115	; 0x73
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a2d6:	4628      	mov	r0, r5
  netif->name[0] = IFNAME0;
 800a2d8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800a2dc:	2374      	movs	r3, #116	; 0x74
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a2de:	e885 0006 	stmia.w	r5, {r1, r2}
  MACAddr[1] = 0x80;
 800a2e2:	2280      	movs	r2, #128	; 0x80
  netif->name[1] = IFNAME1;
 800a2e4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a2e8:	4b39      	ldr	r3, [pc, #228]	; (800a3d0 <ethernetif_init+0x118>)
  MACAddr[1] = 0x80;
 800a2ea:	f88d 2009 	strb.w	r2, [sp, #9]
  MACAddr[2] = 0xE1;
 800a2ee:	22e1      	movs	r2, #225	; 0xe1
  netif->output = etharp_output;
 800a2f0:	6163      	str	r3, [r4, #20]
  MACAddr[2] = 0xE1;
 800a2f2:	f88d 200a 	strb.w	r2, [sp, #10]
  MACAddr[3] = 0x03;
 800a2f6:	2203      	movs	r2, #3
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a2f8:	4b36      	ldr	r3, [pc, #216]	; (800a3d4 <ethernetif_init+0x11c>)
  MACAddr[3] = 0x03;
 800a2fa:	f88d 200b 	strb.w	r2, [sp, #11]
  MACAddr[4] = 0x35;
 800a2fe:	2235      	movs	r2, #53	; 0x35
  netif->linkoutput = low_level_output;
 800a300:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 800a302:	2300      	movs	r3, #0
  MACAddr[4] = 0x35;
 800a304:	f88d 200c 	strb.w	r2, [sp, #12]
  MACAddr[5] = 0xAA;
 800a308:	22aa      	movs	r2, #170	; 0xaa
  uint32_t regvalue = 0;
 800a30a:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a30c:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800a30e:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0xAA;
 800a312:	f88d 200d 	strb.w	r2, [sp, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a316:	aa02      	add	r2, sp, #8
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a318:	61ab      	str	r3, [r5, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a31a:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a31c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 800a320:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a322:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a324:	f7f7 f990 	bl	8001648 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800a328:	b928      	cbnz	r0, 800a336 <ethernetif_init+0x7e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a32a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800a32e:	f043 0304 	orr.w	r3, r3, #4
 800a332:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a336:	2304      	movs	r3, #4
 800a338:	4a27      	ldr	r2, [pc, #156]	; (800a3d8 <ethernetif_init+0x120>)
 800a33a:	4928      	ldr	r1, [pc, #160]	; (800a3dc <ethernetif_init+0x124>)
 800a33c:	4822      	ldr	r0, [pc, #136]	; (800a3c8 <ethernetif_init+0x110>)
 800a33e:	f7f6 ffe7 	bl	8001310 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a342:	4927      	ldr	r1, [pc, #156]	; (800a3e0 <ethernetif_init+0x128>)
 800a344:	2304      	movs	r3, #4
 800a346:	4a27      	ldr	r2, [pc, #156]	; (800a3e4 <ethernetif_init+0x12c>)
 800a348:	481f      	ldr	r0, [pc, #124]	; (800a3c8 <ethernetif_init+0x110>)
 800a34a:	f7f7 f81e 	bl	800138a <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a34e:	2306      	movs	r3, #6
  HAL_ETH_Start(&heth);
 800a350:	481d      	ldr	r0, [pc, #116]	; (800a3c8 <ethernetif_init+0x110>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a352:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a356:	696b      	ldr	r3, [r5, #20]
 800a358:	781a      	ldrb	r2, [r3, #0]
 800a35a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a35e:	785a      	ldrb	r2, [r3, #1]
 800a360:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a364:	789a      	ldrb	r2, [r3, #2]
 800a366:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a36a:	78da      	ldrb	r2, [r3, #3]
 800a36c:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a370:	791a      	ldrb	r2, [r3, #4]
 800a372:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a376:	795b      	ldrb	r3, [r3, #5]
 800a378:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800a37c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a380:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a382:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800a386:	f043 030a 	orr.w	r3, r3, #10
 800a38a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_Start(&heth);
 800a38e:	f7f7 fa55 	bl	800183c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a392:	aa01      	add	r2, sp, #4
 800a394:	211d      	movs	r1, #29
 800a396:	480c      	ldr	r0, [pc, #48]	; (800a3c8 <ethernetif_init+0x110>)
 800a398:	f7f7 f8e5 	bl	8001566 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a39c:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a39e:	211d      	movs	r1, #29
 800a3a0:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <ethernetif_init+0x110>)
  regvalue |= (PHY_ISFR_INT4);
 800a3a2:	f042 020b 	orr.w	r2, r2, #11
 800a3a6:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a3a8:	f7f7 f917 	bl	80015da <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a3ac:	aa01      	add	r2, sp, #4
 800a3ae:	211d      	movs	r1, #29
 800a3b0:	4805      	ldr	r0, [pc, #20]	; (800a3c8 <ethernetif_init+0x110>)
 800a3b2:	f7f7 f8d8 	bl	8001566 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	b005      	add	sp, #20
 800a3ba:	bd30      	pop	{r4, r5, pc}
 800a3bc:	0800e260 	.word	0x0800e260
 800a3c0:	0800c6ac 	.word	0x0800c6ac
 800a3c4:	0800c987 	.word	0x0800c987
 800a3c8:	200050d8 	.word	0x200050d8
 800a3cc:	40028000 	.word	0x40028000
 800a3d0:	08004b75 	.word	0x08004b75
 800a3d4:	0800a039 	.word	0x0800a039
 800a3d8:	20005120 	.word	0x20005120
 800a3dc:	20003808 	.word	0x20003808
 800a3e0:	20005058 	.word	0x20005058
 800a3e4:	20003888 	.word	0x20003888

0800a3e8 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800a3e8:	f7f6 b956 	b.w	8000698 <HAL_GetTick>

0800a3ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a3ec:	b530      	push	{r4, r5, lr}
 800a3ee:	b085      	sub	sp, #20
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a3f0:	4d12      	ldr	r5, [pc, #72]	; (800a43c <MX_LWIP_Init+0x50>)
  lwip_init();
 800a3f2:	f7f8 ffd9 	bl	80033a8 <lwip_init>
  ipaddr.addr = 0;
 800a3f6:	2000      	movs	r0, #0
  gw.addr = 0;
 800a3f8:	4b11      	ldr	r3, [pc, #68]	; (800a440 <MX_LWIP_Init+0x54>)
  ipaddr.addr = 0;
 800a3fa:	4912      	ldr	r1, [pc, #72]	; (800a444 <MX_LWIP_Init+0x58>)
  netmask.addr = 0;
 800a3fc:	4a12      	ldr	r2, [pc, #72]	; (800a448 <MX_LWIP_Init+0x5c>)
  gw.addr = 0;
 800a3fe:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 800a400:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 800a402:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a404:	4c11      	ldr	r4, [pc, #68]	; (800a44c <MX_LWIP_Init+0x60>)
 800a406:	9502      	str	r5, [sp, #8]
 800a408:	4d11      	ldr	r5, [pc, #68]	; (800a450 <MX_LWIP_Init+0x64>)
 800a40a:	e88d 0021 	stmia.w	sp, {r0, r5}
 800a40e:	4620      	mov	r0, r4
 800a410:	f7fb fd08 	bl	8005e24 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a414:	4620      	mov	r0, r4
 800a416:	f7fb fd43 	bl	8005ea0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a41a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a41e:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800a420:	075b      	lsls	r3, r3, #29
 800a422:	d507      	bpl.n	800a434 <MX_LWIP_Init+0x48>
    netif_set_up(&gnetif);
 800a424:	f7fb fd42 	bl	8005eac <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800a428:	4808      	ldr	r0, [pc, #32]	; (800a44c <MX_LWIP_Init+0x60>)

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a42a:	b005      	add	sp, #20
 800a42c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  dhcp_start(&gnetif);
 800a430:	f7f9 beee 	b.w	8004210 <dhcp_start>
    netif_set_down(&gnetif);
 800a434:	f7fb fd49 	bl	8005eca <netif_set_down>
 800a438:	e7f6      	b.n	800a428 <MX_LWIP_Init+0x3c>
 800a43a:	bf00      	nop
 800a43c:	08009d21 	.word	0x08009d21
 800a440:	2000692c 	.word	0x2000692c
 800a444:	20006924 	.word	0x20006924
 800a448:	20006928 	.word	0x20006928
 800a44c:	200068f0 	.word	0x200068f0
 800a450:	0800a2b9 	.word	0x0800a2b9

0800a454 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 800a454:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a456:	4803      	ldr	r0, [pc, #12]	; (800a464 <MX_LWIP_Process+0x10>)
 800a458:	f7ff fec0 	bl	800a1dc <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a45c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 800a460:	f7ff ba56 	b.w	8009910 <sys_check_timeouts>
 800a464:	200068f0 	.word	0x200068f0

0800a468 <tcp_echoserver_error>:
	return ERR_OK;

}

void tcp_echoserver_error(void *arg, err_t err) {
	printf("TCP_ERROR! %i\r\n", err);
 800a468:	4801      	ldr	r0, [pc, #4]	; (800a470 <tcp_echoserver_error+0x8>)
 800a46a:	f001 b859 	b.w	800b520 <iprintf>
 800a46e:	bf00      	nop
 800a470:	0800e39c 	.word	0x0800e39c

0800a474 <tcp_echoserver_recv>:
		err_t err) {
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char* buff = (char*) p->payload;
 800a476:	6856      	ldr	r6, [r2, #4]
		err_t err) {
 800a478:	461f      	mov	r7, r3
 800a47a:	4615      	mov	r5, r2
	buff[p->len] = 0;
 800a47c:	8953      	ldrh	r3, [r2, #10]
 800a47e:	2200      	movs	r2, #0
		err_t err) {
 800a480:	460c      	mov	r4, r1
	printf("TCP_Recv: (%i) '%s'\r\n", err, buff);
 800a482:	4818      	ldr	r0, [pc, #96]	; (800a4e4 <tcp_echoserver_recv+0x70>)
 800a484:	4639      	mov	r1, r7
	buff[p->len] = 0;
 800a486:	54f2      	strb	r2, [r6, r3]
	printf("TCP_Recv: (%i) '%s'\r\n", err, buff);
 800a488:	4632      	mov	r2, r6
 800a48a:	f001 f849 	bl	800b520 <iprintf>
	if (strcmp(buff, "<FRAME>") == 0) {
 800a48e:	4916      	ldr	r1, [pc, #88]	; (800a4e8 <tcp_echoserver_recv+0x74>)
 800a490:	4630      	mov	r0, r6
 800a492:	f7f5 fed5 	bl	8000240 <strcmp>
 800a496:	b958      	cbnz	r0, 800a4b0 <tcp_echoserver_recv+0x3c>
		flagTCP = 1;
 800a498:	2201      	movs	r2, #1
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <tcp_echoserver_recv+0x78>)
 800a49c:	701a      	strb	r2, [r3, #0]
	tcp_recved(tpcb, p->tot_len);
 800a49e:	8929      	ldrh	r1, [r5, #8]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f7fc f9d1 	bl	8006848 <tcp_recved>
	pbuf_free(p);
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7fb fdbe 	bl	8006028 <pbuf_free>
}
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (strcmp(buff, "<CLOSE>") == 0) {
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	490f      	ldr	r1, [pc, #60]	; (800a4f0 <tcp_echoserver_recv+0x7c>)
 800a4b4:	f7f5 fec4 	bl	8000240 <strcmp>
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d1ef      	bne.n	800a49e <tcp_echoserver_recv+0x2a>
		tcp_arg(tpcb, NULL);
 800a4be:	4601      	mov	r1, r0
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f7fc fa2d 	bl	8006920 <tcp_arg>
		tcp_sent(tpcb, NULL);
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f7fc fa45 	bl	8006958 <tcp_sent>
		tcp_recv(tpcb, NULL);
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7fc fa29 	bl	8006928 <tcp_recv>
		tcp_close(tpcb);
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7fc fd6a 	bl	8006fb0 <tcp_close>
		printf("TCP Close\r\n");
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <tcp_echoserver_recv+0x80>)
 800a4de:	f001 f893 	bl	800b608 <puts>
 800a4e2:	e7dc      	b.n	800a49e <tcp_echoserver_recv+0x2a>
 800a4e4:	0800e3ac 	.word	0x0800e3ac
 800a4e8:	0800e3c2 	.word	0x0800e3c2
 800a4ec:	20000226 	.word	0x20000226
 800a4f0:	0800e3ca 	.word	0x0800e3ca
 800a4f4:	0800e3d2 	.word	0x0800e3d2

0800a4f8 <tcp_echoserver_accept>:
 printf("TCP_Poll\n");
 return ERR_OK;
 }
 */

static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 800a4f8:	b538      	push	{r3, r4, r5, lr}
	printf("\nTCP_echoserver_accept\r\n");

	tcp_accepted(newpcb);

	if (socket != NULL) {
 800a4fa:	4d0e      	ldr	r5, [pc, #56]	; (800a534 <tcp_echoserver_accept+0x3c>)
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 800a4fc:	460c      	mov	r4, r1
	printf("\nTCP_echoserver_accept\r\n");
 800a4fe:	480e      	ldr	r0, [pc, #56]	; (800a538 <tcp_echoserver_accept+0x40>)
 800a500:	f001 f882 	bl	800b608 <puts>
	if (socket != NULL) {
 800a504:	6829      	ldr	r1, [r5, #0]
 800a506:	b111      	cbz	r1, 800a50e <tcp_echoserver_accept+0x16>
		memp_free(MEMP_TCP_PCB, socket);
 800a508:	2001      	movs	r0, #1
 800a50a:	f7fb fc29 	bl	8005d60 <memp_free>
	}

	socket = newpcb;
	/* pass newly allocated es structure as argument to newpcb */
	tcp_arg(newpcb, NULL);
 800a50e:	4620      	mov	r0, r4
 800a510:	2100      	movs	r1, #0
	socket = newpcb;
 800a512:	602c      	str	r4, [r5, #0]
	tcp_arg(newpcb, NULL);
 800a514:	f7fc fa04 	bl	8006920 <tcp_arg>

	/* initialize lwIP tcp_recv callback function for newpcb */
	tcp_recv(newpcb, tcp_echoserver_recv);
 800a518:	4620      	mov	r0, r4
 800a51a:	4908      	ldr	r1, [pc, #32]	; (800a53c <tcp_echoserver_accept+0x44>)
 800a51c:	f7fc fa04 	bl	8006928 <tcp_recv>

	tcp_sent(newpcb, tcp_echoserver_sent);
 800a520:	4620      	mov	r0, r4
 800a522:	4907      	ldr	r1, [pc, #28]	; (800a540 <tcp_echoserver_accept+0x48>)
 800a524:	f7fc fa18 	bl	8006958 <tcp_sent>

	/* initialize lwIP tcp_err callback function for newpcb */
	tcp_err(newpcb, tcp_echoserver_error);
 800a528:	4620      	mov	r0, r4
 800a52a:	4906      	ldr	r1, [pc, #24]	; (800a544 <tcp_echoserver_accept+0x4c>)
 800a52c:	f7fc fa2a 	bl	8006984 <tcp_err>

	/* initialize lwIP tcp_poll callback function for newpcb */
	//tcp_poll(newpcb, tcp_echoserver_poll, 1);
	return ERR_OK;
}
 800a530:	2000      	movs	r0, #0
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	20019660 	.word	0x20019660
 800a538:	0800e384 	.word	0x0800e384
 800a53c:	0800a475 	.word	0x0800a475
 800a540:	0800a549 	.word	0x0800a549
 800a544:	0800a469 	.word	0x0800a469

0800a548 <tcp_echoserver_sent>:
	if (len == 5) {
 800a548:	2a05      	cmp	r2, #5
err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 800a54a:	b538      	push	{r3, r4, r5, lr}
	if (len == 5) {
 800a54c:	d10e      	bne.n	800a56c <tcp_echoserver_sent+0x24>
		numero++;
 800a54e:	4a1a      	ldr	r2, [pc, #104]	; (800a5b8 <tcp_echoserver_sent+0x70>)
 800a550:	2100      	movs	r1, #0
		flagEnviando = 0;
 800a552:	f06f 0008 	mvn.w	r0, #8
		numero++;
 800a556:	7813      	ldrb	r3, [r2, #0]
 800a558:	3301      	adds	r3, #1
 800a55a:	b2db      	uxtb	r3, r3
		if (numero > 99)
 800a55c:	2b63      	cmp	r3, #99	; 0x63
		numero++;
 800a55e:	bf98      	it	ls
 800a560:	7013      	strbls	r3, [r2, #0]
		flagEnviando = 0;
 800a562:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <tcp_echoserver_sent+0x74>)
			numero = 0;
 800a564:	bf88      	it	hi
 800a566:	7011      	strbhi	r1, [r2, #0]
		flagEnviando = 0;
 800a568:	7019      	strb	r1, [r3, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
	if (rowEnv == IMG_ROWS) {
 800a56c:	4c14      	ldr	r4, [pc, #80]	; (800a5c0 <tcp_echoserver_sent+0x78>)
 800a56e:	4d15      	ldr	r5, [pc, #84]	; (800a5c4 <tcp_echoserver_sent+0x7c>)
 800a570:	8823      	ldrh	r3, [r4, #0]
 800a572:	2bf0      	cmp	r3, #240	; 0xf0
 800a574:	d10a      	bne.n	800a58c <tcp_echoserver_sent+0x44>
		printf("IMG_FIN\r\n");
 800a576:	4814      	ldr	r0, [pc, #80]	; (800a5c8 <tcp_echoserver_sent+0x80>)
 800a578:	f001 f846 	bl	800b608 <puts>
		tcp_write(socket, "<FIN>", 5, 0);
 800a57c:	2300      	movs	r3, #0
 800a57e:	2205      	movs	r2, #5
 800a580:	4912      	ldr	r1, [pc, #72]	; (800a5cc <tcp_echoserver_sent+0x84>)
 800a582:	6828      	ldr	r0, [r5, #0]
 800a584:	f7fe fab2 	bl	8008aec <tcp_write>
	return ERR_OK;
 800a588:	2000      	movs	r0, #0
}
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
	if (len > 10 && len < (IMG_COLUMNS / 4)) {
 800a58c:	3a0b      	subs	r2, #11
 800a58e:	2a44      	cmp	r2, #68	; 0x44
 800a590:	d804      	bhi.n	800a59c <tcp_echoserver_sent+0x54>
		printf("Primero\r\n");
 800a592:	480f      	ldr	r0, [pc, #60]	; (800a5d0 <tcp_echoserver_sent+0x88>)
 800a594:	f001 f838 	bl	800b608 <puts>
		rowEnv = 0;
 800a598:	2300      	movs	r3, #0
 800a59a:	8023      	strh	r3, [r4, #0]
	ptr += rowEnv * IMG_COLUMNS;
 800a59c:	8820      	ldrh	r0, [r4, #0]
	tcp_write(socket, ptr, IMG_COLUMNS, 0);
 800a59e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a5a2:	490c      	ldr	r1, [pc, #48]	; (800a5d4 <tcp_echoserver_sent+0x8c>)
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	fb02 1100 	mla	r1, r2, r0, r1
 800a5aa:	6828      	ldr	r0, [r5, #0]
 800a5ac:	f7fe fa9e 	bl	8008aec <tcp_write>
	rowEnv++;
 800a5b0:	8823      	ldrh	r3, [r4, #0]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	8023      	strh	r3, [r4, #0]
 800a5b6:	e7e7      	b.n	800a588 <tcp_echoserver_sent+0x40>
 800a5b8:	20000227 	.word	0x20000227
 800a5bc:	20000225 	.word	0x20000225
 800a5c0:	20000228 	.word	0x20000228
 800a5c4:	20019660 	.word	0x20019660
 800a5c8:	0800e3dd 	.word	0x0800e3dd
 800a5cc:	0800e3e6 	.word	0x0800e3e6
 800a5d0:	0800e3ec 	.word	0x0800e3ec
 800a5d4:	20006a60 	.word	0x20006a60

0800a5d8 <__io_putchar>:
extern int __io_putchar(int ch) {
 800a5d8:	b507      	push	{r0, r1, r2, lr}
 800a5da:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800a5dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5e0:	2201      	movs	r2, #1
extern int __io_putchar(int ch) {
 800a5e2:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800a5e6:	4803      	ldr	r0, [pc, #12]	; (800a5f4 <__io_putchar+0x1c>)
 800a5e8:	f7f8 fe34 	bl	8003254 <HAL_UART_Transmit>
}
 800a5ec:	9801      	ldr	r0, [sp, #4]
 800a5ee:	b003      	add	sp, #12
 800a5f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5f4:	20006934 	.word	0x20006934

0800a5f8 <HAL_DCMI_FrameEventCallback>:
	if (hdcmi.Instance != obj->Instance)
 800a5f8:	4b04      	ldr	r3, [pc, #16]	; (800a60c <HAL_DCMI_FrameEventCallback+0x14>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	6803      	ldr	r3, [r0, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d103      	bne.n	800a60a <HAL_DCMI_FrameEventCallback+0x12>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800a602:	2180      	movs	r1, #128	; 0x80
 800a604:	4802      	ldr	r0, [pc, #8]	; (800a610 <HAL_DCMI_FrameEventCallback+0x18>)
 800a606:	f7f7 ba4c 	b.w	8001aa2 <HAL_GPIO_TogglePin>
 800a60a:	4770      	bx	lr
 800a60c:	200196a4 	.word	0x200196a4
 800a610:	40020400 	.word	0x40020400

0800a614 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance != htim2.Instance)
 800a614:	4b3a      	ldr	r3, [pc, #232]	; (800a700 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800a616:	6802      	ldr	r2, [r0, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	429a      	cmp	r2, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800a61c:	b570      	push	{r4, r5, r6, lr}
	if (htim->Instance != htim2.Instance)
 800a61e:	d16d      	bne.n	800a6fc <HAL_TIM_PeriodElapsedCallback+0xe8>
	HAL_GPIO_WritePin(DISP1_GPIO_Port, DISP1_Pin, GPIO_PIN_SET);
 800a620:	2201      	movs	r2, #1
 800a622:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a626:	4837      	ldr	r0, [pc, #220]	; (800a704 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800a628:	f7f7 fa36 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP2_GPIO_Port, DISP2_Pin, GPIO_PIN_SET);
 800a62c:	2201      	movs	r2, #1
 800a62e:	2102      	movs	r1, #2
 800a630:	4835      	ldr	r0, [pc, #212]	; (800a708 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800a632:	f7f7 fa31 	bl	8001a98 <HAL_GPIO_WritePin>
	digTurno++;
 800a636:	4a35      	ldr	r2, [pc, #212]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0xf8>)
	if (digTurno % brillo) {
 800a638:	4935      	ldr	r1, [pc, #212]	; (800a710 <HAL_TIM_PeriodElapsedCallback+0xfc>)
	digTurno++;
 800a63a:	7813      	ldrb	r3, [r2, #0]
	if (digTurno % brillo) {
 800a63c:	7808      	ldrb	r0, [r1, #0]
	digTurno++;
 800a63e:	3301      	adds	r3, #1
 800a640:	b2db      	uxtb	r3, r3
	if (digTurno % brillo) {
 800a642:	fbb3 f1f0 	udiv	r1, r3, r0
 800a646:	fb00 3111 	mls	r1, r0, r1, r3
	digTurno++;
 800a64a:	7013      	strb	r3, [r2, #0]
	if (digTurno % brillo) {
 800a64c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800a650:	d154      	bne.n	800a6fc <HAL_TIM_PeriodElapsedCallback+0xe8>
	if (digTurno >= (brillo * 2)) {
 800a652:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
	uint8_t valor = numero % 10;
 800a656:	4b2f      	ldr	r3, [pc, #188]	; (800a714 <HAL_TIM_PeriodElapsedCallback+0x100>)
		digTurno = 0;
 800a658:	bfa8      	it	ge
 800a65a:	7011      	strbge	r1, [r2, #0]
	if (digTurno) {
 800a65c:	7810      	ldrb	r0, [r2, #0]
 800a65e:	220a      	movs	r2, #10
	uint8_t valor = numero % 10;
 800a660:	781b      	ldrb	r3, [r3, #0]
	if (digTurno) {
 800a662:	2800      	cmp	r0, #0
 800a664:	d141      	bne.n	800a6ea <HAL_TIM_PeriodElapsedCallback+0xd6>
	uint16_t Pin = DISP1_Pin;
 800a666:	f44f 7600 	mov.w	r6, #512	; 0x200
	GPIO_TypeDef* Puerto = DISP1_GPIO_Port;
 800a66a:	4d26      	ldr	r5, [pc, #152]	; (800a704 <HAL_TIM_PeriodElapsedCallback+0xf0>)
	uint8_t valor = numero % 10;
 800a66c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a670:	fb02 3311 	mls	r3, r2, r1, r3
 800a674:	b2db      	uxtb	r3, r3
	uint8_t digito = dig7seg[valor];
 800a676:	4a28      	ldr	r2, [pc, #160]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800a678:	5cd4      	ldrb	r4, [r2, r3]
	if (digTurno && !valor) {
 800a67a:	b110      	cbz	r0, 800a682 <HAL_TIM_PeriodElapsedCallback+0x6e>
		digito = 0;
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	bf08      	it	eq
 800a680:	2400      	moveq	r4, #0
	HAL_GPIO_WritePin(Da_GPIO_Port, Da_Pin,
 800a682:	f004 0201 	and.w	r2, r4, #1
 800a686:	2101      	movs	r1, #1
 800a688:	4824      	ldr	r0, [pc, #144]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800a68a:	f7f7 fa05 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Db_GPIO_Port, Db_Pin,
 800a68e:	f3c4 0240 	ubfx	r2, r4, #1, #1
 800a692:	2101      	movs	r1, #1
 800a694:	4822      	ldr	r0, [pc, #136]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800a696:	f7f7 f9ff 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dc_GPIO_Port, Dc_Pin,
 800a69a:	f3c4 0280 	ubfx	r2, r4, #2, #1
 800a69e:	2104      	movs	r1, #4
 800a6a0:	4820      	ldr	r0, [pc, #128]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800a6a2:	f7f7 f9f9 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dd_GPIO_Port, Dd_Pin,
 800a6a6:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 800a6aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a6ae:	481e      	ldr	r0, [pc, #120]	; (800a728 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800a6b0:	f7f7 f9f2 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(De_GPIO_Port, De_Pin,
 800a6b4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800a6b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6bc:	481a      	ldr	r0, [pc, #104]	; (800a728 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800a6be:	f7f7 f9eb 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Df_GPIO_Port, Df_Pin,
 800a6c2:	f3c4 1240 	ubfx	r2, r4, #5, #1
 800a6c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a6ca:	4817      	ldr	r0, [pc, #92]	; (800a728 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800a6cc:	f7f7 f9e4 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Dg_GPIO_Port, Dg_Pin,
 800a6d0:	f3c4 1280 	ubfx	r2, r4, #6, #1
 800a6d4:	2104      	movs	r1, #4
 800a6d6:	4811      	ldr	r0, [pc, #68]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800a6d8:	f7f7 f9de 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Puerto, Pin, GPIO_PIN_RESET);
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4628      	mov	r0, r5
 800a6e0:	2200      	movs	r2, #0
}
 800a6e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(Puerto, Pin, GPIO_PIN_RESET);
 800a6e6:	f7f7 b9d7 	b.w	8001a98 <HAL_GPIO_WritePin>
 800a6ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ee:	2b09      	cmp	r3, #9
		Pin = DISP2_Pin;
 800a6f0:	f04f 0602 	mov.w	r6, #2
		Puerto = DISP2_GPIO_Port;
 800a6f4:	4d04      	ldr	r5, [pc, #16]	; (800a708 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800a6f6:	bf28      	it	cs
 800a6f8:	2309      	movcs	r3, #9
 800a6fa:	e7bc      	b.n	800a676 <HAL_TIM_PeriodElapsedCallback+0x62>
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
 800a6fe:	bf00      	nop
 800a700:	2003eef4 	.word	0x2003eef4
 800a704:	40021400 	.word	0x40021400
 800a708:	40021800 	.word	0x40021800
 800a70c:	20000224 	.word	0x20000224
 800a710:	20000010 	.word	0x20000010
 800a714:	20000227 	.word	0x20000227
 800a718:	20000011 	.word	0x20000011
 800a71c:	40020400 	.word	0x40020400
 800a720:	40020000 	.word	0x40020000
 800a724:	40021000 	.word	0x40021000
 800a728:	40020c00 	.word	0x40020c00

0800a72c <getTiempoMS>:
int getTiempoMS() {
 800a72c:	b538      	push	{r3, r4, r5, lr}
	int res = HAL_GetTick() - tiempo;
 800a72e:	4d05      	ldr	r5, [pc, #20]	; (800a744 <getTiempoMS+0x18>)
 800a730:	f7f5 ffb2 	bl	8000698 <HAL_GetTick>
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	1ac4      	subs	r4, r0, r3
	tiempo = HAL_GetTick();
 800a738:	f7f5 ffae 	bl	8000698 <HAL_GetTick>
 800a73c:	6028      	str	r0, [r5, #0]
}
 800a73e:	4620      	mov	r0, r4
 800a740:	bd38      	pop	{r3, r4, r5, pc}
 800a742:	bf00      	nop
 800a744:	2000022c 	.word	0x2000022c

0800a748 <enviarIMG>:
void enviarIMG(void) {
 800a748:	b537      	push	{r0, r1, r2, r4, r5, lr}
	sprintf(s_buff, "<FRAME:%u:%u:%u>", IMG_ROWS, IMG_COLUMNS, COLOR);
 800a74a:	4c0c      	ldr	r4, [pc, #48]	; (800a77c <enviarIMG+0x34>)
 800a74c:	2500      	movs	r5, #0
 800a74e:	22f0      	movs	r2, #240	; 0xf0
 800a750:	490b      	ldr	r1, [pc, #44]	; (800a780 <enviarIMG+0x38>)
 800a752:	9500      	str	r5, [sp, #0]
 800a754:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 ffa7 	bl	800b6ac <siprintf>
	rowEnv = 0;
 800a75e:	4b09      	ldr	r3, [pc, #36]	; (800a784 <enviarIMG+0x3c>)
	tcp_write(socket, s_buff, strlen(s_buff), 0);
 800a760:	4620      	mov	r0, r4
	rowEnv = 0;
 800a762:	801d      	strh	r5, [r3, #0]
	tcp_write(socket, s_buff, strlen(s_buff), 0);
 800a764:	f7f5 fd76 	bl	8000254 <strlen>
 800a768:	b282      	uxth	r2, r0
 800a76a:	4807      	ldr	r0, [pc, #28]	; (800a788 <enviarIMG+0x40>)
 800a76c:	462b      	mov	r3, r5
 800a76e:	4621      	mov	r1, r4
 800a770:	6800      	ldr	r0, [r0, #0]
}
 800a772:	b003      	add	sp, #12
 800a774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	tcp_write(socket, s_buff, strlen(s_buff), 0);
 800a778:	f7fe b9b8 	b.w	8008aec <tcp_write>
 800a77c:	2003ef34 	.word	0x2003ef34
 800a780:	0800e274 	.word	0x0800e274
 800a784:	20000228 	.word	0x20000228
 800a788:	20019660 	.word	0x20019660

0800a78c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a78c:	b510      	push	{r4, lr}
 800a78e:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a790:	2234      	movs	r2, #52	; 0x34
 800a792:	2100      	movs	r1, #0
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a794:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a796:	a807      	add	r0, sp, #28
 800a798:	f000 fe0e 	bl	800b3b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a79c:	2214      	movs	r2, #20
 800a79e:	2100      	movs	r1, #0
 800a7a0:	a802      	add	r0, sp, #8
 800a7a2:	f000 fe09 	bl	800b3b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	2290      	movs	r2, #144	; 0x90
 800a7aa:	a814      	add	r0, sp, #80	; 0x50
 800a7ac:	f000 fe04 	bl	800b3b8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800a7b0:	4b22      	ldr	r3, [pc, #136]	; (800a83c <SystemClock_Config+0xb0>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a7b2:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800a7b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a7ba:	641a      	str	r2, [r3, #64]	; 0x40
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7c6:	4b1e      	ldr	r3, [pc, #120]	; (800a840 <SystemClock_Config+0xb4>)
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a7d2:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a7d8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a7da:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a7e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a7e8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a7ee:	2310      	movs	r3, #16
 800a7f0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a7f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a7f6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800a7fc:	23d8      	movs	r3, #216	; 0xd8
 800a7fe:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a800:	f7f7 fa2a 	bl	8001c58 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a804:	f7f7 f9f0 	bl	8001be8 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a808:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a80a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a80c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a80e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a810:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800a814:	2107      	movs	r1, #7
 800a816:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a818:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a81a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a81e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a820:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800a822:	f7f7 fbd3 	bl	8001fcc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800a826:	f44f 4382 	mov.w	r3, #16640	; 0x4100
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a82a:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a82c:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800a82e:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 800a830:	2320      	movs	r3, #32
 800a832:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a834:	f7f7 fc8e 	bl	8002154 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800a838:	b038      	add	sp, #224	; 0xe0
 800a83a:	bd10      	pop	{r4, pc}
 800a83c:	40023800 	.word	0x40023800
 800a840:	40007000 	.word	0x40007000

0800a844 <main>:
{
 800a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a848:	f04f 0a14 	mov.w	sl, #20
{
 800a84c:	b09d      	sub	sp, #116	; 0x74

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a84e:	4db1      	ldr	r5, [pc, #708]	; (800ab14 <main+0x2d0>)
  HAL_Init();
 800a850:	f7f5 ff0a 	bl	8000668 <HAL_Init>
  SystemClock_Config();
 800a854:	f7ff ff9a 	bl	800a78c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a858:	4652      	mov	r2, sl
 800a85a:	2100      	movs	r1, #0
 800a85c:	a815      	add	r0, sp, #84	; 0x54
 800a85e:	f000 fdab 	bl	800b3b8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a862:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dc_GPIO_Port, Dc_Pin, GPIO_PIN_RESET);
 800a864:	2200      	movs	r2, #0
 800a866:	2104      	movs	r1, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a868:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(Dc_GPIO_Port, Dc_Pin, GPIO_PIN_RESET);
 800a86c:	48aa      	ldr	r0, [pc, #680]	; (800ab18 <main+0x2d4>)
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Dc_Pin */
  GPIO_InitStruct.Pin = Dc_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a86e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a870:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a872:	632b      	str	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DISP1_Pin */
  GPIO_InitStruct.Pin = DISP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800a874:	2711      	movs	r7, #17
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a876:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Pin = DISP1_Pin;
 800a878:	f44f 7b00 	mov.w	fp, #512	; 0x200
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : DISP2_Pin */
  GPIO_InitStruct.Pin = DISP2_Pin;
 800a87c:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DISP2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800a880:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a884:	f003 0310 	and.w	r3, r3, #16
 800a888:	9306      	str	r3, [sp, #24]
 800a88a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a88c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a88e:	f043 0304 	orr.w	r3, r3, #4
 800a892:	632b      	str	r3, [r5, #48]	; 0x30
 800a894:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a896:	f003 0304 	and.w	r3, r3, #4
 800a89a:	9307      	str	r3, [sp, #28]
 800a89c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a89e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8a0:	f043 0320 	orr.w	r3, r3, #32
 800a8a4:	632b      	str	r3, [r5, #48]	; 0x30
 800a8a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8a8:	f003 0320 	and.w	r3, r3, #32
 800a8ac:	9308      	str	r3, [sp, #32]
 800a8ae:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a8b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b6:	632b      	str	r3, [r5, #48]	; 0x30
 800a8b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8be:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8c4:	f043 0301 	orr.w	r3, r3, #1
 800a8c8:	632b      	str	r3, [r5, #48]	; 0x30
 800a8ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	930a      	str	r3, [sp, #40]	; 0x28
 800a8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8d6:	f043 0302 	orr.w	r3, r3, #2
 800a8da:	632b      	str	r3, [r5, #48]	; 0x30
 800a8dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a8e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ec:	632b      	str	r3, [r5, #48]	; 0x30
 800a8ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f4:	930c      	str	r3, [sp, #48]	; 0x30
 800a8f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a8fa:	f043 0308 	orr.w	r3, r3, #8
 800a8fe:	632b      	str	r3, [r5, #48]	; 0x30
 800a900:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a902:	f003 0308 	and.w	r3, r3, #8
 800a906:	930d      	str	r3, [sp, #52]	; 0x34
 800a908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(Dc_GPIO_Port, Dc_Pin, GPIO_PIN_RESET);
 800a90a:	f7f7 f8c5 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DISP1_GPIO_Port, DISP1_Pin, GPIO_PIN_SET);
 800a90e:	2201      	movs	r2, #1
 800a910:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a914:	4881      	ldr	r0, [pc, #516]	; (800ab1c <main+0x2d8>)
 800a916:	f7f7 f8bf 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_RESET);
 800a91a:	2200      	movs	r2, #0
 800a91c:	2101      	movs	r1, #1
 800a91e:	4880      	ldr	r0, [pc, #512]	; (800ab20 <main+0x2dc>)
 800a920:	f7f7 f8ba 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, Db_Pin|CAM_PWD_Pin, GPIO_PIN_RESET);
 800a924:	2200      	movs	r2, #0
 800a926:	2109      	movs	r1, #9
 800a928:	487e      	ldr	r0, [pc, #504]	; (800ab24 <main+0x2e0>)
 800a92a:	f7f7 f8b5 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Da_Pin|Dg_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800a92e:	2200      	movs	r2, #0
 800a930:	f244 0185 	movw	r1, #16517	; 0x4085
 800a934:	487c      	ldr	r0, [pc, #496]	; (800ab28 <main+0x2e4>)
 800a936:	f7f7 f8af 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DISP2_GPIO_Port, DISP2_Pin, GPIO_PIN_SET);
 800a93a:	2201      	movs	r2, #1
 800a93c:	2102      	movs	r1, #2
 800a93e:	487b      	ldr	r0, [pc, #492]	; (800ab2c <main+0x2e8>)
 800a940:	f7f7 f8aa 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, Dd_Pin|De_Pin|Df_Pin, GPIO_PIN_RESET);
 800a944:	2200      	movs	r2, #0
 800a946:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800a94a:	4879      	ldr	r0, [pc, #484]	; (800ab30 <main+0x2ec>)
 800a94c:	f7f7 f8a4 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800a950:	2200      	movs	r2, #0
 800a952:	2140      	movs	r1, #64	; 0x40
 800a954:	4875      	ldr	r0, [pc, #468]	; (800ab2c <main+0x2e8>)
 800a956:	f7f7 f89f 	bl	8001a98 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Dc_Pin;
 800a95a:	2304      	movs	r3, #4
  HAL_GPIO_Init(Dc_GPIO_Port, &GPIO_InitStruct);
 800a95c:	a915      	add	r1, sp, #84	; 0x54
 800a95e:	486e      	ldr	r0, [pc, #440]	; (800ab18 <main+0x2d4>)
  GPIO_InitStruct.Pin = Dc_Pin;
 800a960:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a962:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a964:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a966:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(Dc_GPIO_Port, &GPIO_InitStruct);
 800a968:	f7f6 ffa6 	bl	80018b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800a96c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800a970:	a915      	add	r1, sp, #84	; 0x54
 800a972:	486b      	ldr	r0, [pc, #428]	; (800ab20 <main+0x2dc>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800a974:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a976:	4b6f      	ldr	r3, [pc, #444]	; (800ab34 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a978:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a97a:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800a97c:	f7f6 ff9c 	bl	80018b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISP1_GPIO_Port, &GPIO_InitStruct);
 800a980:	a915      	add	r1, sp, #84	; 0x54
 800a982:	4866      	ldr	r0, [pc, #408]	; (800ab1c <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800a984:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a986:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a988:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = DISP1_Pin;
 800a98a:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  HAL_GPIO_Init(DISP1_GPIO_Port, &GPIO_InitStruct);
 800a98e:	f7f6 ff93 	bl	80018b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 800a992:	a915      	add	r1, sp, #84	; 0x54
 800a994:	4862      	ldr	r0, [pc, #392]	; (800ab20 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a996:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a998:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = CAM_RST_Pin;
 800a99a:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a99c:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(CAM_RST_GPIO_Port, &GPIO_InitStruct);
 800a99e:	f7f6 ff8b 	bl	80018b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Db_Pin|CAM_PWD_Pin;
 800a9a2:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9a4:	a915      	add	r1, sp, #84	; 0x54
 800a9a6:	485f      	ldr	r0, [pc, #380]	; (800ab24 <main+0x2e0>)
  GPIO_InitStruct.Pin = Db_Pin|CAM_PWD_Pin;
 800a9a8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9aa:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9ac:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9ae:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9b0:	f7f6 ff82 	bl	80018b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Da_Pin|Dg_Pin|LD2_Pin;
 800a9b4:	2385      	movs	r3, #133	; 0x85
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9b6:	a915      	add	r1, sp, #84	; 0x54
 800a9b8:	485b      	ldr	r0, [pc, #364]	; (800ab28 <main+0x2e4>)
  GPIO_InitStruct.Pin = Da_Pin|Dg_Pin|LD2_Pin;
 800a9ba:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9bc:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9be:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9c0:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9c2:	f7f6 ff79 	bl	80018b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISP2_GPIO_Port, &GPIO_InitStruct);
 800a9c6:	a915      	add	r1, sp, #84	; 0x54
 800a9c8:	4858      	ldr	r0, [pc, #352]	; (800ab2c <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800a9ca:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800a9cc:	2780      	movs	r7, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ce:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9d0:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = DISP2_Pin;
 800a9d2:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(DISP2_GPIO_Port, &GPIO_InitStruct);
 800a9d6:	f7f6 ff6f 	bl	80018b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9da:	2303      	movs	r3, #3
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800a9dc:	a915      	add	r1, sp, #84	; 0x54
 800a9de:	4852      	ldr	r0, [pc, #328]	; (800ab28 <main+0x2e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9e0:	9318      	str	r3, [sp, #96]	; 0x60
 800a9e2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9e4:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = LD3_Pin;
 800a9e6:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9ea:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800a9ec:	f7f6 ff64 	bl	80018b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Dd_Pin|De_Pin|Df_Pin;
 800a9f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a9f4:	a915      	add	r1, sp, #84	; 0x54
 800a9f6:	484e      	ldr	r0, [pc, #312]	; (800ab30 <main+0x2ec>)
  GPIO_InitStruct.Pin = Dd_Pin|De_Pin|Df_Pin;
 800a9f8:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9fa:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9fc:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a9fe:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aa00:	f7f6 ff5a 	bl	80018b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800aa04:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800aa06:	a915      	add	r1, sp, #84	; 0x54
 800aa08:	4848      	ldr	r0, [pc, #288]	; (800ab2c <main+0x2e8>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800aa0a:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa0e:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa10:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800aa12:	f7f6 ff51 	bl	80018b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800aa16:	a915      	add	r1, sp, #84	; 0x54
 800aa18:	4844      	ldr	r0, [pc, #272]	; (800ab2c <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa1a:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa1c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800aa1e:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800aa20:	f7f6 ff4a 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa24:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800aa26:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa2a:	a915      	add	r1, sp, #84	; 0x54
 800aa2c:	483d      	ldr	r0, [pc, #244]	; (800ab24 <main+0x2e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa2e:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa30:	230a      	movs	r3, #10
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800aa32:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa34:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa36:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa38:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa3c:	f7f6 ff3c 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800aa40:	a915      	add	r1, sp, #84	; 0x54
 800aa42:	4838      	ldr	r0, [pc, #224]	; (800ab24 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa44:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa46:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800aa48:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800aa4c:	f7f6 ff34 	bl	80018b8 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800aa50:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800aa52:	4622      	mov	r2, r4
 800aa54:	2105      	movs	r1, #5
 800aa56:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 800aa58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa5c:	632b      	str	r3, [r5, #48]	; 0x30
 800aa5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  htim2.Instance = TIM2;
 800aa60:	4d35      	ldr	r5, [pc, #212]	; (800ab38 <main+0x2f4>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800aa62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800aa6a:	f7f5 fe3f 	bl	80006ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800aa6e:	2039      	movs	r0, #57	; 0x39
 800aa70:	f7f5 fe74 	bl	800075c <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aa74:	4621      	mov	r1, r4
 800aa76:	2210      	movs	r2, #16
 800aa78:	a815      	add	r0, sp, #84	; 0x54
 800aa7a:	f000 fc9d 	bl	800b3b8 <memset>
  htim2.Init.Prescaler = 10000;
 800aa7e:	f242 7310 	movw	r3, #10000	; 0x2710
 800aa82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 20;
 800aa86:	f8c5 a00c 	str.w	sl, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800aa8a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aa8c:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa90:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa92:	612c      	str	r4, [r5, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa94:	9411      	str	r4, [sp, #68]	; 0x44
 800aa96:	9412      	str	r4, [sp, #72]	; 0x48
 800aa98:	9413      	str	r4, [sp, #76]	; 0x4c
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800aa9a:	61af      	str	r7, [r5, #24]
  htim2.Init.Prescaler = 10000;
 800aa9c:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800aaa0:	f7f8 f81c 	bl	8002adc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800aaa4:	a915      	add	r1, sp, #84	; 0x54
 800aaa6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aaa8:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800aaac:	f7f8 f912 	bl	8002cd4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aab0:	a911      	add	r1, sp, #68	; 0x44
 800aab2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aab4:	9411      	str	r4, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aab6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aab8:	f7f8 f9d4 	bl	8002e64 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aabc:	4621      	mov	r1, r4
 800aabe:	2210      	movs	r2, #16
 800aac0:	a811      	add	r0, sp, #68	; 0x44
  htim3.Instance = TIM3;
 800aac2:	4d1e      	ldr	r5, [pc, #120]	; (800ab3c <main+0x2f8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aac4:	f000 fc78 	bl	800b3b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800aac8:	221c      	movs	r2, #28
 800aaca:	4621      	mov	r1, r4
 800aacc:	a815      	add	r0, sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aace:	940e      	str	r4, [sp, #56]	; 0x38
 800aad0:	940f      	str	r4, [sp, #60]	; 0x3c
 800aad2:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 800aad4:	f000 fc70 	bl	800b3b8 <memset>
  htim3.Instance = TIM3;
 800aad8:	4b19      	ldr	r3, [pc, #100]	; (800ab40 <main+0x2fc>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800aada:	4628      	mov	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aadc:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aade:	612c      	str	r4, [r5, #16]
  htim3.Init.Period = 2;
 800aae0:	f8c5 900c 	str.w	r9, [r5, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800aae4:	61af      	str	r7, [r5, #24]
  htim3.Init.Prescaler = 1;
 800aae6:	e885 0048 	stmia.w	r5, {r3, r6}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800aaea:	f7f7 fff7 	bl	8002adc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800aaee:	a911      	add	r1, sp, #68	; 0x44
 800aaf0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aaf2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800aaf6:	f7f8 f8ed 	bl	8002cd4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800aafa:	4628      	mov	r0, r5
 800aafc:	f7f8 f808 	bl	8002b10 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ab00:	a90e      	add	r1, sp, #56	; 0x38
 800ab02:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab04:	940e      	str	r4, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab06:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ab08:	f7f8 f9ac 	bl	8002e64 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ab0c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ab0e:	4622      	mov	r2, r4
 800ab10:	e018      	b.n	800ab44 <main+0x300>
 800ab12:	bf00      	nop
 800ab14:	40023800 	.word	0x40023800
 800ab18:	40021000 	.word	0x40021000
 800ab1c:	40021400 	.word	0x40021400
 800ab20:	40020800 	.word	0x40020800
 800ab24:	40020000 	.word	0x40020000
 800ab28:	40020400 	.word	0x40020400
 800ab2c:	40021800 	.word	0x40021800
 800ab30:	40020c00 	.word	0x40020c00
 800ab34:	10110000 	.word	0x10110000
 800ab38:	2003eef4 	.word	0x2003eef4
 800ab3c:	20019664 	.word	0x20019664
 800ab40:	40000400 	.word	0x40000400
 800ab44:	a915      	add	r1, sp, #84	; 0x54
 800ab46:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ab48:	9315      	str	r3, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ab4a:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ab4c:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.Pulse = 1;
 800ab4e:	9616      	str	r6, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ab50:	f7f8 f830 	bl	8002bb4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800ab54:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 800ab56:	4d8b      	ldr	r5, [pc, #556]	; (800ad84 <main+0x540>)
  HAL_TIM_MspPostInit(&htim3);
 800ab58:	f000 fade 	bl	800b118 <HAL_TIM_MspPostInit>
  huart3.Instance = USART3;
 800ab5c:	488a      	ldr	r0, [pc, #552]	; (800ad88 <main+0x544>)
  huart3.Init.BaudRate = 115200;
 800ab5e:	498b      	ldr	r1, [pc, #556]	; (800ad8c <main+0x548>)
 800ab60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ab64:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ab66:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ab68:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab6a:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab6c:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab6e:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab70:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 800ab72:	e880 000a 	stmia.w	r0, {r1, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ab76:	230c      	movs	r3, #12
 800ab78:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ab7a:	f7f8 fbe2 	bl	8003342 <HAL_UART_Init>
  hdcmi.Instance = DCMI;
 800ab7e:	4884      	ldr	r0, [pc, #528]	; (800ad90 <main+0x54c>)
 800ab80:	4b84      	ldr	r3, [pc, #528]	; (800ad94 <main+0x550>)
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800ab82:	6104      	str	r4, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800ab84:	6144      	str	r4, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800ab86:	6184      	str	r4, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800ab88:	6204      	str	r4, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800ab8a:	6244      	str	r4, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800ab8c:	6284      	str	r4, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800ab8e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800ab90:	6304      	str	r4, [r0, #48]	; 0x30
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800ab92:	60c7      	str	r7, [r0, #12]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800ab94:	e880 0018 	stmia.w	r0, {r3, r4}
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800ab98:	2320      	movs	r3, #32
 800ab9a:	6083      	str	r3, [r0, #8]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800ab9c:	f7f5 fe40 	bl	8000820 <HAL_DCMI_Init>
  hi2c1.Instance = I2C1;
 800aba0:	4b7d      	ldr	r3, [pc, #500]	; (800ad98 <main+0x554>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800aba2:	4628      	mov	r0, r5
  hi2c1.Init.OwnAddress1 = 0;
 800aba4:	60ac      	str	r4, [r5, #8]
  hi2c1.Instance = I2C1;
 800aba6:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x20404768;
 800aba8:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800abac:	612c      	str	r4, [r5, #16]
  hi2c1.Init.Timing = 0x20404768;
 800abae:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
  hi2c1.Init.OwnAddress2 = 0;
 800abb2:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800abb4:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.Timing = 0x20404768;
 800abb6:	606b      	str	r3, [r5, #4]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800abb8:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800abba:	622c      	str	r4, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800abbc:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800abbe:	f7f6 ff77 	bl	8001ab0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800abc2:	4621      	mov	r1, r4
 800abc4:	4628      	mov	r0, r5
 800abc6:	f7f6 ffc4 	bl	8001b52 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800abca:	4621      	mov	r1, r4
 800abcc:	4628      	mov	r0, r5
 800abce:	f7f6 ffe6 	bl	8001b9e <HAL_I2CEx_ConfigDigitalFilter>
  MX_LWIP_Init();
 800abd2:	f7ff fc0b 	bl	800a3ec <MX_LWIP_Init>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800abd6:	4632      	mov	r2, r6
 800abd8:	4639      	mov	r1, r7
 800abda:	4870      	ldr	r0, [pc, #448]	; (800ad9c <main+0x558>)
 800abdc:	f7f6 ff5c 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800abe0:	4632      	mov	r2, r6
 800abe2:	4641      	mov	r1, r8
 800abe4:	486d      	ldr	r0, [pc, #436]	; (800ad9c <main+0x558>)
 800abe6:	f7f6 ff57 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800abea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800abee:	f7f5 fd59 	bl	80006a4 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800abf2:	4622      	mov	r2, r4
 800abf4:	4639      	mov	r1, r7
 800abf6:	4869      	ldr	r0, [pc, #420]	; (800ad9c <main+0x558>)
 800abf8:	f7f6 ff4e 	bl	8001a98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800abfc:	4622      	mov	r2, r4
 800abfe:	4641      	mov	r1, r8
 800ac00:	4866      	ldr	r0, [pc, #408]	; (800ad9c <main+0x558>)
 800ac02:	f7f6 ff49 	bl	8001a98 <HAL_GPIO_WritePin>
		if (gnetif.ip_addr.addr != 0) {
 800ac06:	4c66      	ldr	r4, [pc, #408]	; (800ada0 <main+0x55c>)
	printf("\n\n\n\n\nEMPEZANDO!\r\n\n");
 800ac08:	4866      	ldr	r0, [pc, #408]	; (800ada4 <main+0x560>)
 800ac0a:	f000 fcfd 	bl	800b608 <puts>
	printf("Asignacion DHCP\r\n");
 800ac0e:	4866      	ldr	r0, [pc, #408]	; (800ada8 <main+0x564>)
 800ac10:	f000 fcfa 	bl	800b608 <puts>
		MX_LWIP_Process();
 800ac14:	f7ff fc1e 	bl	800a454 <MX_LWIP_Process>
		if (gnetif.ip_addr.addr != 0) {
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 809d 	beq.w	800ad5a <main+0x516>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800ac20:	2201      	movs	r2, #1
 800ac22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ac26:	485d      	ldr	r0, [pc, #372]	; (800ad9c <main+0x558>)
 800ac28:	f7f6 ff36 	bl	8001a98 <HAL_GPIO_WritePin>
			uint32_t ip = gnetif.ip_addr.addr;
 800ac2c:	6861      	ldr	r1, [r4, #4]
			printf("IP Asignada: %i.%i.%i.%i\r\n", (uint8_t) ip,
 800ac2e:	485f      	ldr	r0, [pc, #380]	; (800adac <main+0x568>)
					(uint8_t) (ip >> 24));
 800ac30:	0e0b      	lsrs	r3, r1, #24
			printf("IP Asignada: %i.%i.%i.%i\r\n", (uint8_t) ip,
 800ac32:	f3c1 2207 	ubfx	r2, r1, #8, #8
		printf("CAM: Error al Inicializar.\r\n");
 800ac36:	4c5e      	ldr	r4, [pc, #376]	; (800adb0 <main+0x56c>)
			printf("IP Asignada: %i.%i.%i.%i\r\n", (uint8_t) ip,
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800ac3e:	b2c9      	uxtb	r1, r1
 800ac40:	f000 fc6e 	bl	800b520 <iprintf>
	DWT_Init(); // Delay de micro segundos
 800ac44:	f7ff f9ca 	bl	8009fdc <DWT_Init>
	tiempo = HAL_GetTick();
 800ac48:	f7f5 fd26 	bl	8000698 <HAL_GetTick>
 800ac4c:	4b59      	ldr	r3, [pc, #356]	; (800adb4 <main+0x570>)
 800ac4e:	6018      	str	r0, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 800ac50:	4859      	ldr	r0, [pc, #356]	; (800adb8 <main+0x574>)
 800ac52:	f7f7 fe11 	bl	8002878 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800ac56:	2100      	movs	r1, #0
 800ac58:	4858      	ldr	r0, [pc, #352]	; (800adbc <main+0x578>)
 800ac5a:	f7f8 f8dd 	bl	8002e18 <HAL_TIM_PWM_Start>
	while (!OV7670_init()) {
 800ac5e:	f000 f8f3 	bl	800ae48 <OV7670_init>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d07d      	beq.n	800ad62 <main+0x51e>
	OV7670_config();
 800ac66:	f000 f905 	bl	800ae74 <OV7670_config>
	conn = tcp_new();
 800ac6a:	4c55      	ldr	r4, [pc, #340]	; (800adc0 <main+0x57c>)
	printf("CAM: Init (%ums)\r\n", getTiempoMS());
 800ac6c:	f7ff fd5e 	bl	800a72c <getTiempoMS>
 800ac70:	4601      	mov	r1, r0
 800ac72:	4854      	ldr	r0, [pc, #336]	; (800adc4 <main+0x580>)
	socket = NULL;
 800ac74:	2500      	movs	r5, #0
	printf("CAM: Init (%ums)\r\n", getTiempoMS());
 800ac76:	f000 fc53 	bl	800b520 <iprintf>
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t) frame_buffer,
 800ac7a:	4a53      	ldr	r2, [pc, #332]	; (800adc8 <main+0x584>)
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800ac82:	4843      	ldr	r0, [pc, #268]	; (800ad90 <main+0x54c>)
 800ac84:	f7f5 fe12 	bl	80008ac <HAL_DCMI_Start_DMA>
	socket = NULL;
 800ac88:	4b50      	ldr	r3, [pc, #320]	; (800adcc <main+0x588>)
	printf("Creando TCP_PCB\r\n");
 800ac8a:	4851      	ldr	r0, [pc, #324]	; (800add0 <main+0x58c>)
	socket = NULL;
 800ac8c:	601d      	str	r5, [r3, #0]
	printf("Creando TCP_PCB\r\n");
 800ac8e:	f000 fcbb 	bl	800b608 <puts>
	conn = tcp_new();
 800ac92:	f7fc fb75 	bl	8007380 <tcp_new>
 800ac96:	6020      	str	r0, [r4, #0]
	printf("TCP BIND\r\n");
 800ac98:	484e      	ldr	r0, [pc, #312]	; (800add4 <main+0x590>)
 800ac9a:	f000 fcb5 	bl	800b608 <puts>
	tcp_err = tcp_bind(conn, IP_ADDR_ANY, 7777); // Puerto 7777
 800ac9e:	f641 6261 	movw	r2, #7777	; 0x1e61
 800aca2:	494d      	ldr	r1, [pc, #308]	; (800add8 <main+0x594>)
 800aca4:	6820      	ldr	r0, [r4, #0]
 800aca6:	f7fb fcfd 	bl	80066a4 <tcp_bind>
	if (tcp_err == ERR_OK) {
 800acaa:	2800      	cmp	r0, #0
 800acac:	d161      	bne.n	800ad72 <main+0x52e>
		printf("TCP ESCUCHANDO\r\n");
 800acae:	484b      	ldr	r0, [pc, #300]	; (800addc <main+0x598>)
 800acb0:	f000 fcaa 	bl	800b608 <puts>
		conn = tcp_listen(conn);
 800acb4:	21ff      	movs	r1, #255	; 0xff
 800acb6:	6820      	ldr	r0, [r4, #0]
 800acb8:	f7fb fd96 	bl	80067e8 <tcp_listen_with_backlog>
 800acbc:	6020      	str	r0, [r4, #0]
		printf("TCP ACEPTANDO\r\n");
 800acbe:	4848      	ldr	r0, [pc, #288]	; (800ade0 <main+0x59c>)
 800acc0:	f000 fca2 	bl	800b608 <puts>
		tcp_accept(conn, tcp_echoserver_accept);
 800acc4:	4947      	ldr	r1, [pc, #284]	; (800ade4 <main+0x5a0>)
 800acc6:	6820      	ldr	r0, [r4, #0]
 800acc8:	f7fb fe74 	bl	80069b4 <tcp_accept>
		if (flagTCP) {
 800accc:	4c46      	ldr	r4, [pc, #280]	; (800ade8 <main+0x5a4>)
 800acce:	4d47      	ldr	r5, [pc, #284]	; (800adec <main+0x5a8>)
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800acd0:	4f32      	ldr	r7, [pc, #200]	; (800ad9c <main+0x558>)
			HAL_DCMI_Suspend(&hdcmi);
 800acd2:	4e2f      	ldr	r6, [pc, #188]	; (800ad90 <main+0x54c>)
		MX_LWIP_Process();
 800acd4:	f7ff fbbe 	bl	800a454 <MX_LWIP_Process>
		if (flagTCP) {
 800acd8:	7823      	ldrb	r3, [r4, #0]
 800acda:	b33b      	cbz	r3, 800ad2c <main+0x4e8>
			flagEnviando = 1;
 800acdc:	2301      	movs	r3, #1
			flagTCP = 0;
 800acde:	f04f 0800 	mov.w	r8, #0
			HAL_DCMI_Suspend(&hdcmi);
 800ace2:	4630      	mov	r0, r6
			flagEnviando = 1;
 800ace4:	702b      	strb	r3, [r5, #0]
			flagTCP = 0;
 800ace6:	f884 8000 	strb.w	r8, [r4]
			HAL_DCMI_Suspend(&hdcmi);
 800acea:	f7f5 fe3d 	bl	8000968 <HAL_DCMI_Suspend>
			for(uint32_t pos=0;pos < (IMG_COLUMNS * IMG_ROWS);pos++){
 800acee:	4643      	mov	r3, r8
				uint16_t pixel = frame_buffer[pos];
 800acf0:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 800adc8 <main+0x584>
				gray_frame[pos] = (b+g+r) / 3;
 800acf4:	483e      	ldr	r0, [pc, #248]	; (800adf0 <main+0x5ac>)
 800acf6:	f04f 0e03 	mov.w	lr, #3
				uint16_t pixel = frame_buffer[pos];
 800acfa:	f83c 1013 	ldrh.w	r1, [ip, r3, lsl #1]
				gray_frame[pos] = (b+g+r) / 3;
 800acfe:	f3c1 1244 	ubfx	r2, r1, #5, #5
 800ad02:	f001 081f 	and.w	r8, r1, #31
 800ad06:	f3c1 2184 	ubfx	r1, r1, #10, #5
 800ad0a:	4442      	add	r2, r8
 800ad0c:	440a      	add	r2, r1
 800ad0e:	fb92 f2fe 	sdiv	r2, r2, lr
 800ad12:	541a      	strb	r2, [r3, r0]
			for(uint32_t pos=0;pos < (IMG_COLUMNS * IMG_ROWS);pos++){
 800ad14:	3301      	adds	r3, #1
 800ad16:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800ad1a:	d1ee      	bne.n	800acfa <main+0x4b6>
			printf("IMG a GRIS\r\n");
 800ad1c:	4835      	ldr	r0, [pc, #212]	; (800adf4 <main+0x5b0>)
 800ad1e:	f000 fc73 	bl	800b608 <puts>
			printf("Enviar IMG por TCP\r\n");
 800ad22:	4835      	ldr	r0, [pc, #212]	; (800adf8 <main+0x5b4>)
 800ad24:	f000 fc70 	bl	800b608 <puts>
			enviarIMG();
 800ad28:	f7ff fd0e 	bl	800a748 <enviarIMG>
		if (!flagEnviando
 800ad2c:	f895 8000 	ldrb.w	r8, [r5]
 800ad30:	f1b8 0f00 	cmp.w	r8, #0
 800ad34:	d1ce      	bne.n	800acd4 <main+0x490>
				&& HAL_DCMI_GetState(&hdcmi) == HAL_DCMI_STATE_SUSPENDED) {
 800ad36:	4630      	mov	r0, r6
 800ad38:	f7f5 fec4 	bl	8000ac4 <HAL_DCMI_GetState>
 800ad3c:	2805      	cmp	r0, #5
 800ad3e:	d1c9      	bne.n	800acd4 <main+0x490>
			printf("Reanudar Captura Camara\r\n");
 800ad40:	482e      	ldr	r0, [pc, #184]	; (800adfc <main+0x5b8>)
 800ad42:	f000 fc61 	bl	800b608 <puts>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800ad46:	4638      	mov	r0, r7
 800ad48:	4642      	mov	r2, r8
 800ad4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ad4e:	f7f6 fea3 	bl	8001a98 <HAL_GPIO_WritePin>
			HAL_DCMI_Resume(&hdcmi);
 800ad52:	480f      	ldr	r0, [pc, #60]	; (800ad90 <main+0x54c>)
 800ad54:	f7f5 fe3e 	bl	80009d4 <HAL_DCMI_Resume>
 800ad58:	e7bb      	b.n	800acd2 <main+0x48e>
		HAL_Delay(10);
 800ad5a:	200a      	movs	r0, #10
 800ad5c:	f7f5 fca2 	bl	80006a4 <HAL_Delay>
		MX_LWIP_Process();
 800ad60:	e758      	b.n	800ac14 <main+0x3d0>
		printf("CAM: Error al Inicializar.\r\n");
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 fc50 	bl	800b608 <puts>
		HAL_Delay(300);
 800ad68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ad6c:	f7f5 fc9a 	bl	80006a4 <HAL_Delay>
 800ad70:	e775      	b.n	800ac5e <main+0x41a>
		printf("TCP No se pudo crear conexion\r\n");
 800ad72:	4823      	ldr	r0, [pc, #140]	; (800ae00 <main+0x5bc>)
 800ad74:	f000 fc48 	bl	800b608 <puts>
		memp_free(MEMP_TCP_PCB, conn);
 800ad78:	6821      	ldr	r1, [r4, #0]
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	f7fa fff0 	bl	8005d60 <memp_free>
		conn = NULL;
 800ad80:	6025      	str	r5, [r4, #0]
 800ad82:	e7a3      	b.n	800accc <main+0x488>
 800ad84:	200069b4 	.word	0x200069b4
 800ad88:	20006934 	.word	0x20006934
 800ad8c:	40004800 	.word	0x40004800
 800ad90:	200196a4 	.word	0x200196a4
 800ad94:	50050000 	.word	0x50050000
 800ad98:	40005400 	.word	0x40005400
 800ad9c:	40020400 	.word	0x40020400
 800ada0:	200068f0 	.word	0x200068f0
 800ada4:	0800e285 	.word	0x0800e285
 800ada8:	0800e297 	.word	0x0800e297
 800adac:	0800e2a8 	.word	0x0800e2a8
 800adb0:	0800e2c3 	.word	0x0800e2c3
 800adb4:	2000022c 	.word	0x2000022c
 800adb8:	2003eef4 	.word	0x2003eef4
 800adbc:	20019664 	.word	0x20019664
 800adc0:	20006930 	.word	0x20006930
 800adc4:	0800e2df 	.word	0x0800e2df
 800adc8:	200196f4 	.word	0x200196f4
 800adcc:	20019660 	.word	0x20019660
 800add0:	0800e2f2 	.word	0x0800e2f2
 800add4:	0800e303 	.word	0x0800e303
 800add8:	0800ce0c 	.word	0x0800ce0c
 800addc:	0800e30d 	.word	0x0800e30d
 800ade0:	0800e31d 	.word	0x0800e31d
 800ade4:	0800a4f9 	.word	0x0800a4f9
 800ade8:	20000226 	.word	0x20000226
 800adec:	20000225 	.word	0x20000225
 800adf0:	20006a60 	.word	0x20006a60
 800adf4:	0800e34b 	.word	0x0800e34b
 800adf8:	0800e357 	.word	0x0800e357
 800adfc:	0800e36b 	.word	0x0800e36b
 800ae00:	0800e32c 	.word	0x0800e32c

0800ae04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae04:	4770      	bx	lr

0800ae06 <wrOV7670Reg>:
#include "dwt_delay.h"
#include "main.h"
#include <stdio.h>


unsigned char wrOV7670Reg(unsigned char regID, unsigned char regDat) {
 800ae06:	b538      	push	{r3, r4, r5, lr}
 800ae08:	4605      	mov	r5, r0
 800ae0a:	460c      	mov	r4, r1
	startSCCB();
 800ae0c:	f7ff f84a 	bl	8009ea4 <startSCCB>
	if (0 == SCCBwriteByte(0x42)) {
 800ae10:	2042      	movs	r0, #66	; 0x42
 800ae12:	f7ff f897 	bl	8009f44 <SCCBwriteByte>
 800ae16:	b918      	cbnz	r0, 800ae20 <wrOV7670Reg+0x1a>
		stopSCCB();
 800ae18:	f7ff f870 	bl	8009efc <stopSCCB>
		return 0;
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	bd38      	pop	{r3, r4, r5, pc}
	}
	DWT_Delay(50);
 800ae20:	2032      	movs	r0, #50	; 0x32
 800ae22:	f7ff f8f5 	bl	800a010 <DWT_Delay>
	if (0 == SCCBwriteByte(regID)) {
 800ae26:	4628      	mov	r0, r5
 800ae28:	f7ff f88c 	bl	8009f44 <SCCBwriteByte>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d0f3      	beq.n	800ae18 <wrOV7670Reg+0x12>
		stopSCCB();
		return 0;
	}
	DWT_Delay(50);
 800ae30:	2032      	movs	r0, #50	; 0x32
 800ae32:	f7ff f8ed 	bl	800a010 <DWT_Delay>
	if (0 == SCCBwriteByte(regDat)) {
 800ae36:	4620      	mov	r0, r4
 800ae38:	f7ff f884 	bl	8009f44 <SCCBwriteByte>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d0eb      	beq.n	800ae18 <wrOV7670Reg+0x12>
		stopSCCB();
		return 0;
	}
	stopSCCB();
 800ae40:	f7ff f85c 	bl	8009efc <stopSCCB>

	return 1;
 800ae44:	2001      	movs	r0, #1
}
 800ae46:	bd38      	pop	{r3, r4, r5, pc}

0800ae48 <OV7670_init>:

}



unsigned char OV7670_init(void) {
 800ae48:	b508      	push	{r3, lr}
	// Quitar PowerDown
	HAL_GPIO_WritePin(CAM_PWD_GPIO_Port, CAM_PWD_Pin, GPIO_PIN_RESET);
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2108      	movs	r1, #8
 800ae4e:	4807      	ldr	r0, [pc, #28]	; (800ae6c <OV7670_init+0x24>)
 800ae50:	f7f6 fe22 	bl	8001a98 <HAL_GPIO_WritePin>
	// Quitar Reset
	HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 800ae54:	2201      	movs	r2, #1
 800ae56:	4806      	ldr	r0, [pc, #24]	; (800ae70 <OV7670_init+0x28>)
 800ae58:	4611      	mov	r1, r2
 800ae5a:	f7f6 fe1d 	bl	8001a98 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 800ae5e:	2032      	movs	r0, #50	; 0x32
 800ae60:	f7f5 fc20 	bl	80006a4 <HAL_Delay>

	SCCB_GPIO_Config(); // io init..
 800ae64:	f7fe ffe0 	bl	8009e28 <SCCB_GPIO_Config>
	set_OV7670reg();

	OV7670_config_window(272, 12, 320, 240); // set 240*320
	*/
	return 0x01; //ok
}
 800ae68:	2001      	movs	r0, #1
 800ae6a:	bd08      	pop	{r3, pc}
 800ae6c:	40020000 	.word	0x40020000
 800ae70:	40020800 	.word	0x40020800

0800ae74 <OV7670_config>:
		{ 0xb1, 0x0c }, //
		{ 0xb2, 0x0e }, //
		{ 0xb3, 0x82 }, //
		{ 0x4b, 0x01 }, };

void OV7670_config(void) {
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	2400      	movs	r4, #0
	uint8_t data, i = 0;
	uint8_t err;

	// Configure camera registers
	for (i = 0; i < 127; i++) {
		data = OV7670_reg[i][1];
 800ae78:	4d0a      	ldr	r5, [pc, #40]	; (800aea4 <OV7670_config+0x30>)
 800ae7a:	eb05 0344 	add.w	r3, r5, r4, lsl #1
		err = wrOV7670Reg(OV7670_reg[i][0], data);
 800ae7e:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
 800ae82:	7859      	ldrb	r1, [r3, #1]
 800ae84:	f7ff ffbf 	bl	800ae06 <wrOV7670Reg>

		if (err == 0) {
 800ae88:	b920      	cbnz	r0, 800ae94 <OV7670_config+0x20>
			printf("Failed to update register\n");
 800ae8a:	4807      	ldr	r0, [pc, #28]	; (800aea8 <OV7670_config+0x34>)

		if(i==0){
			HAL_Delay(50);
		}
	}
}
 800ae8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printf("Failed to update register\n");
 800ae90:	f000 bbba 	b.w	800b608 <puts>
		if(i==0){
 800ae94:	b914      	cbnz	r4, 800ae9c <OV7670_config+0x28>
			HAL_Delay(50);
 800ae96:	2032      	movs	r0, #50	; 0x32
 800ae98:	f7f5 fc04 	bl	80006a4 <HAL_Delay>
 800ae9c:	3401      	adds	r4, #1
	for (i = 0; i < 127; i++) {
 800ae9e:	2c7f      	cmp	r4, #127	; 0x7f
 800aea0:	d1eb      	bne.n	800ae7a <OV7670_config+0x6>
}
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	0800e40f 	.word	0x0800e40f
 800aea8:	0800e3f5 	.word	0x0800e3f5

0800aeac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800aeac:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <HAL_MspInit+0x2c>)
{
 800aeae:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800aeb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800aeb6:	641a      	str	r2, [r3, #64]	; 0x40
 800aeb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeba:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800aebe:	9200      	str	r2, [sp, #0]
 800aec0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aec8:	645a      	str	r2, [r3, #68]	; 0x44
 800aeca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aed4:	b002      	add	sp, #8
 800aed6:	4770      	bx	lr
 800aed8:	40023800 	.word	0x40023800

0800aedc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800aedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aede:	b08d      	sub	sp, #52	; 0x34
 800aee0:	4607      	mov	r7, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aee2:	2214      	movs	r2, #20
 800aee4:	2100      	movs	r1, #0
 800aee6:	a807      	add	r0, sp, #28
 800aee8:	f000 fa66 	bl	800b3b8 <memset>
  if(hdcmi->Instance==DCMI)
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	4b4f      	ldr	r3, [pc, #316]	; (800b02c <HAL_DCMI_MspInit+0x150>)
 800aef0:	429a      	cmp	r2, r3
 800aef2:	f040 8099 	bne.w	800b028 <HAL_DCMI_MspInit+0x14c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800aef6:	4b4e      	ldr	r3, [pc, #312]	; (800b030 <HAL_DCMI_MspInit+0x154>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aef8:	240d      	movs	r4, #13
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aefa:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800aefc:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 800aefe:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af00:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800af02:	484c      	ldr	r0, [pc, #304]	; (800b034 <HAL_DCMI_MspInit+0x158>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 800af04:	f042 0201 	orr.w	r2, r2, #1
 800af08:	635a      	str	r2, [r3, #52]	; 0x34
 800af0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af0c:	f002 0201 	and.w	r2, r2, #1
 800af10:	9201      	str	r2, [sp, #4]
 800af12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800af14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af16:	f042 0210 	orr.w	r2, r2, #16
 800af1a:	631a      	str	r2, [r3, #48]	; 0x30
 800af1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af1e:	f002 0210 	and.w	r2, r2, #16
 800af22:	9202      	str	r2, [sp, #8]
 800af24:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af28:	f042 0201 	orr.w	r2, r2, #1
 800af2c:	631a      	str	r2, [r3, #48]	; 0x30
 800af2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af30:	f002 0201 	and.w	r2, r2, #1
 800af34:	9203      	str	r2, [sp, #12]
 800af36:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af3a:	f042 0204 	orr.w	r2, r2, #4
 800af3e:	631a      	str	r2, [r3, #48]	; 0x30
 800af40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af42:	f002 0204 	and.w	r2, r2, #4
 800af46:	9204      	str	r2, [sp, #16]
 800af48:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800af4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af4c:	f042 0208 	orr.w	r2, r2, #8
 800af50:	631a      	str	r2, [r3, #48]	; 0x30
 800af52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af54:	f002 0208 	and.w	r2, r2, #8
 800af58:	9205      	str	r2, [sp, #20]
 800af5a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800af5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af62:	631a      	str	r2, [r3, #48]	; 0x30
 800af64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af66:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800af68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6c:	9306      	str	r3, [sp, #24]
 800af6e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800af70:	2370      	movs	r3, #112	; 0x70
 800af72:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800af74:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800af76:	f7f6 fc9f 	bl	80018b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800af7a:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af7c:	a907      	add	r1, sp, #28
 800af7e:	482e      	ldr	r0, [pc, #184]	; (800b038 <HAL_DCMI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800af80:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800af82:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af84:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af86:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af88:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af8a:	f7f6 fc95 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800af8e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af92:	a907      	add	r1, sp, #28
 800af94:	4829      	ldr	r0, [pc, #164]	; (800b03c <HAL_DCMI_MspInit+0x160>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800af96:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800af98:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af9a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af9c:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af9e:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800afa0:	f7f6 fc8a 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800afa4:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800afa6:	a907      	add	r1, sp, #28
 800afa8:	4825      	ldr	r0, [pc, #148]	; (800b040 <HAL_DCMI_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800afaa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800afac:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afae:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afb0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afb2:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800afb4:	f7f6 fc80 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800afb8:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800afbc:	4821      	ldr	r0, [pc, #132]	; (800b044 <HAL_DCMI_MspInit+0x168>)
 800afbe:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800afc0:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800afc2:	9307      	str	r3, [sp, #28]

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800afc4:	4c20      	ldr	r4, [pc, #128]	; (800b048 <HAL_DCMI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc8:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afca:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800afcc:	f7f6 fc74 	bl	80018b8 <HAL_GPIO_Init>
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800afd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afd4:	4a1d      	ldr	r2, [pc, #116]	; (800b04c <HAL_DCMI_MspInit+0x170>)
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800afd6:	4620      	mov	r0, r4
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800afd8:	60a5      	str	r5, [r4, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800afda:	60e5      	str	r5, [r4, #12]
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800afdc:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800afde:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800afe0:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800afe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afe8:	6123      	str	r3, [r4, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800afea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afee:	6163      	str	r3, [r4, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800aff0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aff4:	61a3      	str	r3, [r4, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800aff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800affa:	61e3      	str	r3, [r4, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 800affc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b000:	6223      	str	r3, [r4, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b002:	2304      	movs	r3, #4
 800b004:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b006:	2303      	movs	r3, #3
 800b008:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800b00a:	f7f5 fd75 	bl	8000af8 <HAL_DMA_Init>
 800b00e:	b108      	cbz	r0, 800b014 <HAL_DCMI_MspInit+0x138>
    {
      Error_Handler();
 800b010:	f7ff fef8 	bl	800ae04 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 800b014:	204e      	movs	r0, #78	; 0x4e
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800b016:	64bc      	str	r4, [r7, #72]	; 0x48
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 800b018:	2200      	movs	r2, #0
 800b01a:	2105      	movs	r1, #5
    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800b01c:	63a7      	str	r7, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 800b01e:	f7f5 fb65 	bl	80006ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800b022:	204e      	movs	r0, #78	; 0x4e
 800b024:	f7f5 fb9a 	bl	800075c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800b028:	b00d      	add	sp, #52	; 0x34
 800b02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b02c:	50050000 	.word	0x50050000
 800b030:	40023800 	.word	0x40023800
 800b034:	40021000 	.word	0x40021000
 800b038:	40020000 	.word	0x40020000
 800b03c:	40020800 	.word	0x40020800
 800b040:	40020c00 	.word	0x40020c00
 800b044:	40021800 	.word	0x40021800
 800b048:	20006a00 	.word	0x20006a00
 800b04c:	40026428 	.word	0x40026428

0800b050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b050:	b510      	push	{r4, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b056:	2214      	movs	r2, #20
 800b058:	2100      	movs	r1, #0
 800b05a:	a803      	add	r0, sp, #12
 800b05c:	f000 f9ac 	bl	800b3b8 <memset>
  if(hi2c->Instance==I2C1)
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	4b13      	ldr	r3, [pc, #76]	; (800b0b0 <HAL_I2C_MspInit+0x60>)
 800b064:	429a      	cmp	r2, r3
 800b066:	d121      	bne.n	800b0ac <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b068:	4c12      	ldr	r4, [pc, #72]	; (800b0b4 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = CAM_SIOC_Pin|CAM_SIOD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b06a:	a903      	add	r1, sp, #12
 800b06c:	4812      	ldr	r0, [pc, #72]	; (800b0b8 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b06e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b070:	f043 0302 	orr.w	r3, r3, #2
 800b074:	6323      	str	r3, [r4, #48]	; 0x30
 800b076:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAM_SIOC_Pin|CAM_SIOD_Pin;
 800b080:	f44f 7310 	mov.w	r3, #576	; 0x240
 800b084:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b086:	2312      	movs	r3, #18
 800b088:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b08a:	2301      	movs	r3, #1
 800b08c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b08e:	2302      	movs	r3, #2
 800b090:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b092:	2304      	movs	r3, #4
 800b094:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b096:	f7f6 fc0f 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b09a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b09c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0a0:	6423      	str	r3, [r4, #64]	; 0x40
 800b0a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0a8:	9302      	str	r3, [sp, #8]
 800b0aa:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b0ac:	b008      	add	sp, #32
 800b0ae:	bd10      	pop	{r4, pc}
 800b0b0:	40005400 	.word	0x40005400
 800b0b4:	40023800 	.word	0x40023800
 800b0b8:	40020400 	.word	0x40020400

0800b0bc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800b0bc:	6803      	ldr	r3, [r0, #0]
 800b0be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800b0c2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800b0c4:	d115      	bne.n	800b0f2 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b0c6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800b0ca:	201c      	movs	r0, #28
 800b0cc:	210f      	movs	r1, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b0ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0d0:	f042 0201 	orr.w	r2, r2, #1
 800b0d4:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800b0d6:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800b0e2:	f7f5 fb03 	bl	80006ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b0e6:	201c      	movs	r0, #28
 800b0e8:	f7f5 fb38 	bl	800075c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800b0ec:	b003      	add	sp, #12
 800b0ee:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 800b0f2:	4a07      	ldr	r2, [pc, #28]	; (800b110 <HAL_TIM_Base_MspInit+0x54>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d1f9      	bne.n	800b0ec <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b0f8:	4b06      	ldr	r3, [pc, #24]	; (800b114 <HAL_TIM_Base_MspInit+0x58>)
 800b0fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0fc:	f042 0202 	orr.w	r2, r2, #2
 800b100:	641a      	str	r2, [r3, #64]	; 0x40
 800b102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b104:	f003 0302 	and.w	r3, r3, #2
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	9b01      	ldr	r3, [sp, #4]
}
 800b10c:	e7ee      	b.n	800b0ec <HAL_TIM_Base_MspInit+0x30>
 800b10e:	bf00      	nop
 800b110:	40000400 	.word	0x40000400
 800b114:	40023800 	.word	0x40023800

0800b118 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b118:	b510      	push	{r4, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b11e:	2214      	movs	r2, #20
 800b120:	2100      	movs	r1, #0
 800b122:	a801      	add	r0, sp, #4
 800b124:	f000 f948 	bl	800b3b8 <memset>
  if(htim->Instance==TIM3)
 800b128:	6822      	ldr	r2, [r4, #0]
 800b12a:	4b0c      	ldr	r3, [pc, #48]	; (800b15c <HAL_TIM_MspPostInit+0x44>)
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d113      	bne.n	800b158 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b130:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b134:	a901      	add	r1, sp, #4
 800b136:	480a      	ldr	r0, [pc, #40]	; (800b160 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b13a:	f042 0202 	orr.w	r2, r2, #2
 800b13e:	631a      	str	r2, [r3, #48]	; 0x30
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	f003 0302 	and.w	r3, r3, #2
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b14a:	2310      	movs	r3, #16
 800b14c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b14e:	2302      	movs	r3, #2
 800b150:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b152:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b154:	f7f6 fbb0 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b158:	b006      	add	sp, #24
 800b15a:	bd10      	pop	{r4, pc}
 800b15c:	40000400 	.word	0x40000400
 800b160:	40020400 	.word	0x40020400

0800b164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b164:	b510      	push	{r4, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b16a:	2214      	movs	r2, #20
 800b16c:	2100      	movs	r1, #0
 800b16e:	a803      	add	r0, sp, #12
 800b170:	f000 f922 	bl	800b3b8 <memset>
  if(huart->Instance==USART3)
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <HAL_UART_MspInit+0x64>)
 800b178:	429a      	cmp	r2, r3
 800b17a:	d122      	bne.n	800b1c2 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b17c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b180:	a903      	add	r1, sp, #12
 800b182:	4812      	ldr	r0, [pc, #72]	; (800b1cc <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800b184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b186:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b18a:	641a      	str	r2, [r3, #64]	; 0x40
 800b18c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b18e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800b192:	9201      	str	r2, [sp, #4]
 800b194:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b198:	f042 0208 	orr.w	r2, r2, #8
 800b19c:	631a      	str	r2, [r3, #48]	; 0x30
 800b19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a0:	f003 0308 	and.w	r3, r3, #8
 800b1a4:	9302      	str	r3, [sp, #8]
 800b1a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b1a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b1ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b1ba:	2307      	movs	r3, #7
 800b1bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b1be:	f7f6 fb7b 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b1c2:	b008      	add	sp, #32
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	bf00      	nop
 800b1c8:	40004800 	.word	0x40004800
 800b1cc:	40020c00 	.word	0x40020c00

0800b1d0 <NMI_Handler>:
 800b1d0:	4770      	bx	lr

0800b1d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b1d2:	e7fe      	b.n	800b1d2 <HardFault_Handler>

0800b1d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b1d4:	e7fe      	b.n	800b1d4 <MemManage_Handler>

0800b1d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b1d6:	e7fe      	b.n	800b1d6 <BusFault_Handler>

0800b1d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b1d8:	e7fe      	b.n	800b1d8 <UsageFault_Handler>

0800b1da <SVC_Handler>:
 800b1da:	4770      	bx	lr

0800b1dc <DebugMon_Handler>:
 800b1dc:	4770      	bx	lr

0800b1de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b1de:	4770      	bx	lr

0800b1e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b1e0:	f7f5 ba4e 	b.w	8000680 <HAL_IncTick>

0800b1e4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <TIM2_IRQHandler+0x8>)
 800b1e6:	f7f7 bb62 	b.w	80028ae <HAL_TIM_IRQHandler>
 800b1ea:	bf00      	nop
 800b1ec:	2003eef4 	.word	0x2003eef4

0800b1f0 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <DMA2_Stream1_IRQHandler+0x8>)
 800b1f2:	f7f5 bd4f 	b.w	8000c94 <HAL_DMA_IRQHandler>
 800b1f6:	bf00      	nop
 800b1f8:	20006a00 	.word	0x20006a00

0800b1fc <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <DCMI_IRQHandler+0x8>)
 800b1fe:	f7f5 bc17 	b.w	8000a30 <HAL_DCMI_IRQHandler>
 800b202:	bf00      	nop
 800b204:	200196a4 	.word	0x200196a4

0800b208 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	460e      	mov	r6, r1
 800b20c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b20e:	460c      	mov	r4, r1
 800b210:	1ba3      	subs	r3, r4, r6
 800b212:	429d      	cmp	r5, r3
 800b214:	dc01      	bgt.n	800b21a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800b216:	4628      	mov	r0, r5
 800b218:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800b21a:	f3af 8000 	nop.w
 800b21e:	f804 0b01 	strb.w	r0, [r4], #1
 800b222:	e7f5      	b.n	800b210 <_read+0x8>

0800b224 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	460e      	mov	r6, r1
 800b228:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b22a:	460c      	mov	r4, r1
 800b22c:	1ba3      	subs	r3, r4, r6
 800b22e:	429d      	cmp	r5, r3
 800b230:	dc01      	bgt.n	800b236 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800b232:	4628      	mov	r0, r5
 800b234:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800b236:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b23a:	f7ff f9cd 	bl	800a5d8 <__io_putchar>
 800b23e:	e7f5      	b.n	800b22c <_write+0x8>

0800b240 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b240:	4b09      	ldr	r3, [pc, #36]	; (800b268 <_sbrk+0x28>)
{
 800b242:	4602      	mov	r2, r0
	if (heap_end == 0)
 800b244:	6819      	ldr	r1, [r3, #0]
 800b246:	b909      	cbnz	r1, 800b24c <_sbrk+0xc>
		heap_end = &end;
 800b248:	4908      	ldr	r1, [pc, #32]	; (800b26c <_sbrk+0x2c>)
 800b24a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800b24c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800b24e:	4669      	mov	r1, sp
 800b250:	4402      	add	r2, r0
 800b252:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800b254:	bf83      	ittte	hi
 800b256:	220c      	movhi	r2, #12
 800b258:	4b05      	ldrhi	r3, [pc, #20]	; (800b270 <_sbrk+0x30>)
		return (caddr_t) -1;
 800b25a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;
 800b25e:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800b260:	bf88      	it	hi
 800b262:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20000230 	.word	0x20000230
 800b26c:	2003ef58 	.word	0x2003ef58
 800b270:	2003ef54 	.word	0x2003ef54

0800b274 <_close>:

int _close(int file)
{
	return -1;
}
 800b274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b278:	4770      	bx	lr

0800b27a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800b27a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800b27e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800b280:	604b      	str	r3, [r1, #4]
}
 800b282:	4770      	bx	lr

0800b284 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800b284:	2001      	movs	r0, #1
 800b286:	4770      	bx	lr

0800b288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800b288:	2000      	movs	r0, #0
 800b28a:	4770      	bx	lr

0800b28c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b28c:	490f      	ldr	r1, [pc, #60]	; (800b2cc <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b28e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b290:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800b29c:	4b0c      	ldr	r3, [pc, #48]	; (800b2d0 <SystemInit+0x44>)
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	f042 0201 	orr.w	r2, r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b2a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b2ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b2b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b2b4:	4a07      	ldr	r2, [pc, #28]	; (800b2d4 <SystemInit+0x48>)
 800b2b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b2be:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b2c0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b2c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2c6:	608b      	str	r3, [r1, #8]
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	e000ed00 	.word	0xe000ed00
 800b2d0:	40023800 	.word	0x40023800
 800b2d4:	24003010 	.word	0x24003010

0800b2d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b2d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b2dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b2de:	e003      	b.n	800b2e8 <LoopCopyDataInit>

0800b2e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b2e0:	4b0c      	ldr	r3, [pc, #48]	; (800b314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b2e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b2e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b2e6:	3104      	adds	r1, #4

0800b2e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b2e8:	480b      	ldr	r0, [pc, #44]	; (800b318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b2ea:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b2ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b2ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b2f0:	d3f6      	bcc.n	800b2e0 <CopyDataInit>
  ldr  r2, =_sbss
 800b2f2:	4a0b      	ldr	r2, [pc, #44]	; (800b320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b2f4:	e002      	b.n	800b2fc <LoopFillZerobss>

0800b2f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b2f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b2f8:	f842 3b04 	str.w	r3, [r2], #4

0800b2fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b2fc:	4b09      	ldr	r3, [pc, #36]	; (800b324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b2fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b300:	d3f9      	bcc.n	800b2f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b302:	f7ff ffc3 	bl	800b28c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b306:	f000 f811 	bl	800b32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b30a:	f7ff fa9b 	bl	800a844 <main>
  bx  lr    
 800b30e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b310:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800b314:	0800e5d0 	.word	0x0800e5d0
  ldr  r0, =_sdata
 800b318:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b31c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800b320:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 800b324:	2003ef58 	.word	0x2003ef58

0800b328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b328:	e7fe      	b.n	800b328 <ADC_IRQHandler>
	...

0800b32c <__libc_init_array>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	4e0d      	ldr	r6, [pc, #52]	; (800b364 <__libc_init_array+0x38>)
 800b330:	4c0d      	ldr	r4, [pc, #52]	; (800b368 <__libc_init_array+0x3c>)
 800b332:	1ba4      	subs	r4, r4, r6
 800b334:	10a4      	asrs	r4, r4, #2
 800b336:	2500      	movs	r5, #0
 800b338:	42a5      	cmp	r5, r4
 800b33a:	d109      	bne.n	800b350 <__libc_init_array+0x24>
 800b33c:	4e0b      	ldr	r6, [pc, #44]	; (800b36c <__libc_init_array+0x40>)
 800b33e:	4c0c      	ldr	r4, [pc, #48]	; (800b370 <__libc_init_array+0x44>)
 800b340:	f001 f996 	bl	800c670 <_init>
 800b344:	1ba4      	subs	r4, r4, r6
 800b346:	10a4      	asrs	r4, r4, #2
 800b348:	2500      	movs	r5, #0
 800b34a:	42a5      	cmp	r5, r4
 800b34c:	d105      	bne.n	800b35a <__libc_init_array+0x2e>
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b354:	4798      	blx	r3
 800b356:	3501      	adds	r5, #1
 800b358:	e7ee      	b.n	800b338 <__libc_init_array+0xc>
 800b35a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b35e:	4798      	blx	r3
 800b360:	3501      	adds	r5, #1
 800b362:	e7f2      	b.n	800b34a <__libc_init_array+0x1e>
 800b364:	0800e5c8 	.word	0x0800e5c8
 800b368:	0800e5c8 	.word	0x0800e5c8
 800b36c:	0800e5c8 	.word	0x0800e5c8
 800b370:	0800e5cc 	.word	0x0800e5cc

0800b374 <malloc>:
 800b374:	4b02      	ldr	r3, [pc, #8]	; (800b380 <malloc+0xc>)
 800b376:	4601      	mov	r1, r0
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f000 b873 	b.w	800b464 <_malloc_r>
 800b37e:	bf00      	nop
 800b380:	20000020 	.word	0x20000020

0800b384 <memcmp>:
 800b384:	b510      	push	{r4, lr}
 800b386:	3901      	subs	r1, #1
 800b388:	4402      	add	r2, r0
 800b38a:	4290      	cmp	r0, r2
 800b38c:	d101      	bne.n	800b392 <memcmp+0xe>
 800b38e:	2000      	movs	r0, #0
 800b390:	bd10      	pop	{r4, pc}
 800b392:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b396:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b39a:	42a3      	cmp	r3, r4
 800b39c:	d0f5      	beq.n	800b38a <memcmp+0x6>
 800b39e:	1b18      	subs	r0, r3, r4
 800b3a0:	bd10      	pop	{r4, pc}

0800b3a2 <memcpy>:
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	1e43      	subs	r3, r0, #1
 800b3a6:	440a      	add	r2, r1
 800b3a8:	4291      	cmp	r1, r2
 800b3aa:	d100      	bne.n	800b3ae <memcpy+0xc>
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3b6:	e7f7      	b.n	800b3a8 <memcpy+0x6>

0800b3b8 <memset>:
 800b3b8:	4402      	add	r2, r0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d100      	bne.n	800b3c2 <memset+0xa>
 800b3c0:	4770      	bx	lr
 800b3c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c6:	e7f9      	b.n	800b3bc <memset+0x4>

0800b3c8 <_free_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	d045      	beq.n	800b45c <_free_r+0x94>
 800b3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d4:	1f0c      	subs	r4, r1, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bfb8      	it	lt
 800b3da:	18e4      	addlt	r4, r4, r3
 800b3dc:	f000 fc2a 	bl	800bc34 <__malloc_lock>
 800b3e0:	4a1f      	ldr	r2, [pc, #124]	; (800b460 <_free_r+0x98>)
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	b933      	cbnz	r3, 800b3f6 <_free_r+0x2e>
 800b3e8:	6063      	str	r3, [r4, #4]
 800b3ea:	6014      	str	r4, [r2, #0]
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3f2:	f000 bc20 	b.w	800bc36 <__malloc_unlock>
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	d90c      	bls.n	800b414 <_free_r+0x4c>
 800b3fa:	6821      	ldr	r1, [r4, #0]
 800b3fc:	1862      	adds	r2, r4, r1
 800b3fe:	4293      	cmp	r3, r2
 800b400:	bf04      	itt	eq
 800b402:	681a      	ldreq	r2, [r3, #0]
 800b404:	685b      	ldreq	r3, [r3, #4]
 800b406:	6063      	str	r3, [r4, #4]
 800b408:	bf04      	itt	eq
 800b40a:	1852      	addeq	r2, r2, r1
 800b40c:	6022      	streq	r2, [r4, #0]
 800b40e:	6004      	str	r4, [r0, #0]
 800b410:	e7ec      	b.n	800b3ec <_free_r+0x24>
 800b412:	4613      	mov	r3, r2
 800b414:	685a      	ldr	r2, [r3, #4]
 800b416:	b10a      	cbz	r2, 800b41c <_free_r+0x54>
 800b418:	42a2      	cmp	r2, r4
 800b41a:	d9fa      	bls.n	800b412 <_free_r+0x4a>
 800b41c:	6819      	ldr	r1, [r3, #0]
 800b41e:	1858      	adds	r0, r3, r1
 800b420:	42a0      	cmp	r0, r4
 800b422:	d10b      	bne.n	800b43c <_free_r+0x74>
 800b424:	6820      	ldr	r0, [r4, #0]
 800b426:	4401      	add	r1, r0
 800b428:	1858      	adds	r0, r3, r1
 800b42a:	4282      	cmp	r2, r0
 800b42c:	6019      	str	r1, [r3, #0]
 800b42e:	d1dd      	bne.n	800b3ec <_free_r+0x24>
 800b430:	6810      	ldr	r0, [r2, #0]
 800b432:	6852      	ldr	r2, [r2, #4]
 800b434:	605a      	str	r2, [r3, #4]
 800b436:	4401      	add	r1, r0
 800b438:	6019      	str	r1, [r3, #0]
 800b43a:	e7d7      	b.n	800b3ec <_free_r+0x24>
 800b43c:	d902      	bls.n	800b444 <_free_r+0x7c>
 800b43e:	230c      	movs	r3, #12
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	e7d3      	b.n	800b3ec <_free_r+0x24>
 800b444:	6820      	ldr	r0, [r4, #0]
 800b446:	1821      	adds	r1, r4, r0
 800b448:	428a      	cmp	r2, r1
 800b44a:	bf04      	itt	eq
 800b44c:	6811      	ldreq	r1, [r2, #0]
 800b44e:	6852      	ldreq	r2, [r2, #4]
 800b450:	6062      	str	r2, [r4, #4]
 800b452:	bf04      	itt	eq
 800b454:	1809      	addeq	r1, r1, r0
 800b456:	6021      	streq	r1, [r4, #0]
 800b458:	605c      	str	r4, [r3, #4]
 800b45a:	e7c7      	b.n	800b3ec <_free_r+0x24>
 800b45c:	bd38      	pop	{r3, r4, r5, pc}
 800b45e:	bf00      	nop
 800b460:	20000234 	.word	0x20000234

0800b464 <_malloc_r>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	1ccd      	adds	r5, r1, #3
 800b468:	f025 0503 	bic.w	r5, r5, #3
 800b46c:	3508      	adds	r5, #8
 800b46e:	2d0c      	cmp	r5, #12
 800b470:	bf38      	it	cc
 800b472:	250c      	movcc	r5, #12
 800b474:	2d00      	cmp	r5, #0
 800b476:	4606      	mov	r6, r0
 800b478:	db01      	blt.n	800b47e <_malloc_r+0x1a>
 800b47a:	42a9      	cmp	r1, r5
 800b47c:	d903      	bls.n	800b486 <_malloc_r+0x22>
 800b47e:	230c      	movs	r3, #12
 800b480:	6033      	str	r3, [r6, #0]
 800b482:	2000      	movs	r0, #0
 800b484:	bd70      	pop	{r4, r5, r6, pc}
 800b486:	f000 fbd5 	bl	800bc34 <__malloc_lock>
 800b48a:	4a23      	ldr	r2, [pc, #140]	; (800b518 <_malloc_r+0xb4>)
 800b48c:	6814      	ldr	r4, [r2, #0]
 800b48e:	4621      	mov	r1, r4
 800b490:	b991      	cbnz	r1, 800b4b8 <_malloc_r+0x54>
 800b492:	4c22      	ldr	r4, [pc, #136]	; (800b51c <_malloc_r+0xb8>)
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	b91b      	cbnz	r3, 800b4a0 <_malloc_r+0x3c>
 800b498:	4630      	mov	r0, r6
 800b49a:	f000 f8f7 	bl	800b68c <_sbrk_r>
 800b49e:	6020      	str	r0, [r4, #0]
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f000 f8f2 	bl	800b68c <_sbrk_r>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d126      	bne.n	800b4fa <_malloc_r+0x96>
 800b4ac:	230c      	movs	r3, #12
 800b4ae:	6033      	str	r3, [r6, #0]
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f000 fbc0 	bl	800bc36 <__malloc_unlock>
 800b4b6:	e7e4      	b.n	800b482 <_malloc_r+0x1e>
 800b4b8:	680b      	ldr	r3, [r1, #0]
 800b4ba:	1b5b      	subs	r3, r3, r5
 800b4bc:	d41a      	bmi.n	800b4f4 <_malloc_r+0x90>
 800b4be:	2b0b      	cmp	r3, #11
 800b4c0:	d90f      	bls.n	800b4e2 <_malloc_r+0x7e>
 800b4c2:	600b      	str	r3, [r1, #0]
 800b4c4:	50cd      	str	r5, [r1, r3]
 800b4c6:	18cc      	adds	r4, r1, r3
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f000 fbb4 	bl	800bc36 <__malloc_unlock>
 800b4ce:	f104 000b 	add.w	r0, r4, #11
 800b4d2:	1d23      	adds	r3, r4, #4
 800b4d4:	f020 0007 	bic.w	r0, r0, #7
 800b4d8:	1ac3      	subs	r3, r0, r3
 800b4da:	d01b      	beq.n	800b514 <_malloc_r+0xb0>
 800b4dc:	425a      	negs	r2, r3
 800b4de:	50e2      	str	r2, [r4, r3]
 800b4e0:	bd70      	pop	{r4, r5, r6, pc}
 800b4e2:	428c      	cmp	r4, r1
 800b4e4:	bf0d      	iteet	eq
 800b4e6:	6863      	ldreq	r3, [r4, #4]
 800b4e8:	684b      	ldrne	r3, [r1, #4]
 800b4ea:	6063      	strne	r3, [r4, #4]
 800b4ec:	6013      	streq	r3, [r2, #0]
 800b4ee:	bf18      	it	ne
 800b4f0:	460c      	movne	r4, r1
 800b4f2:	e7e9      	b.n	800b4c8 <_malloc_r+0x64>
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	6849      	ldr	r1, [r1, #4]
 800b4f8:	e7ca      	b.n	800b490 <_malloc_r+0x2c>
 800b4fa:	1cc4      	adds	r4, r0, #3
 800b4fc:	f024 0403 	bic.w	r4, r4, #3
 800b500:	42a0      	cmp	r0, r4
 800b502:	d005      	beq.n	800b510 <_malloc_r+0xac>
 800b504:	1a21      	subs	r1, r4, r0
 800b506:	4630      	mov	r0, r6
 800b508:	f000 f8c0 	bl	800b68c <_sbrk_r>
 800b50c:	3001      	adds	r0, #1
 800b50e:	d0cd      	beq.n	800b4ac <_malloc_r+0x48>
 800b510:	6025      	str	r5, [r4, #0]
 800b512:	e7d9      	b.n	800b4c8 <_malloc_r+0x64>
 800b514:	bd70      	pop	{r4, r5, r6, pc}
 800b516:	bf00      	nop
 800b518:	20000234 	.word	0x20000234
 800b51c:	20000238 	.word	0x20000238

0800b520 <iprintf>:
 800b520:	b40f      	push	{r0, r1, r2, r3}
 800b522:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <iprintf+0x2c>)
 800b524:	b513      	push	{r0, r1, r4, lr}
 800b526:	681c      	ldr	r4, [r3, #0]
 800b528:	b124      	cbz	r4, 800b534 <iprintf+0x14>
 800b52a:	69a3      	ldr	r3, [r4, #24]
 800b52c:	b913      	cbnz	r3, 800b534 <iprintf+0x14>
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 fa92 	bl	800ba58 <__sinit>
 800b534:	ab05      	add	r3, sp, #20
 800b536:	9a04      	ldr	r2, [sp, #16]
 800b538:	68a1      	ldr	r1, [r4, #8]
 800b53a:	9301      	str	r3, [sp, #4]
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fcf5 	bl	800bf2c <_vfiprintf_r>
 800b542:	b002      	add	sp, #8
 800b544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b548:	b004      	add	sp, #16
 800b54a:	4770      	bx	lr
 800b54c:	20000020 	.word	0x20000020

0800b550 <_puts_r>:
 800b550:	b570      	push	{r4, r5, r6, lr}
 800b552:	460e      	mov	r6, r1
 800b554:	4605      	mov	r5, r0
 800b556:	b118      	cbz	r0, 800b560 <_puts_r+0x10>
 800b558:	6983      	ldr	r3, [r0, #24]
 800b55a:	b90b      	cbnz	r3, 800b560 <_puts_r+0x10>
 800b55c:	f000 fa7c 	bl	800ba58 <__sinit>
 800b560:	69ab      	ldr	r3, [r5, #24]
 800b562:	68ac      	ldr	r4, [r5, #8]
 800b564:	b913      	cbnz	r3, 800b56c <_puts_r+0x1c>
 800b566:	4628      	mov	r0, r5
 800b568:	f000 fa76 	bl	800ba58 <__sinit>
 800b56c:	4b23      	ldr	r3, [pc, #140]	; (800b5fc <_puts_r+0xac>)
 800b56e:	429c      	cmp	r4, r3
 800b570:	d117      	bne.n	800b5a2 <_puts_r+0x52>
 800b572:	686c      	ldr	r4, [r5, #4]
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	071b      	lsls	r3, r3, #28
 800b578:	d51d      	bpl.n	800b5b6 <_puts_r+0x66>
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	b1db      	cbz	r3, 800b5b6 <_puts_r+0x66>
 800b57e:	3e01      	subs	r6, #1
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b586:	3b01      	subs	r3, #1
 800b588:	60a3      	str	r3, [r4, #8]
 800b58a:	b9e9      	cbnz	r1, 800b5c8 <_puts_r+0x78>
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	da2e      	bge.n	800b5ee <_puts_r+0x9e>
 800b590:	4622      	mov	r2, r4
 800b592:	210a      	movs	r1, #10
 800b594:	4628      	mov	r0, r5
 800b596:	f000 f8ad 	bl	800b6f4 <__swbuf_r>
 800b59a:	3001      	adds	r0, #1
 800b59c:	d011      	beq.n	800b5c2 <_puts_r+0x72>
 800b59e:	200a      	movs	r0, #10
 800b5a0:	bd70      	pop	{r4, r5, r6, pc}
 800b5a2:	4b17      	ldr	r3, [pc, #92]	; (800b600 <_puts_r+0xb0>)
 800b5a4:	429c      	cmp	r4, r3
 800b5a6:	d101      	bne.n	800b5ac <_puts_r+0x5c>
 800b5a8:	68ac      	ldr	r4, [r5, #8]
 800b5aa:	e7e3      	b.n	800b574 <_puts_r+0x24>
 800b5ac:	4b15      	ldr	r3, [pc, #84]	; (800b604 <_puts_r+0xb4>)
 800b5ae:	429c      	cmp	r4, r3
 800b5b0:	bf08      	it	eq
 800b5b2:	68ec      	ldreq	r4, [r5, #12]
 800b5b4:	e7de      	b.n	800b574 <_puts_r+0x24>
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f000 f8ed 	bl	800b798 <__swsetup_r>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d0dd      	beq.n	800b57e <_puts_r+0x2e>
 800b5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	da04      	bge.n	800b5d6 <_puts_r+0x86>
 800b5cc:	69a2      	ldr	r2, [r4, #24]
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	db06      	blt.n	800b5e0 <_puts_r+0x90>
 800b5d2:	290a      	cmp	r1, #10
 800b5d4:	d004      	beq.n	800b5e0 <_puts_r+0x90>
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	1c5a      	adds	r2, r3, #1
 800b5da:	6022      	str	r2, [r4, #0]
 800b5dc:	7019      	strb	r1, [r3, #0]
 800b5de:	e7cf      	b.n	800b580 <_puts_r+0x30>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 f886 	bl	800b6f4 <__swbuf_r>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d1c9      	bne.n	800b580 <_puts_r+0x30>
 800b5ec:	e7e9      	b.n	800b5c2 <_puts_r+0x72>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	200a      	movs	r0, #10
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	6022      	str	r2, [r4, #0]
 800b5f6:	7018      	strb	r0, [r3, #0]
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}
 800b5fa:	bf00      	nop
 800b5fc:	0800e548 	.word	0x0800e548
 800b600:	0800e568 	.word	0x0800e568
 800b604:	0800e528 	.word	0x0800e528

0800b608 <puts>:
 800b608:	4b02      	ldr	r3, [pc, #8]	; (800b614 <puts+0xc>)
 800b60a:	4601      	mov	r1, r0
 800b60c:	6818      	ldr	r0, [r3, #0]
 800b60e:	f7ff bf9f 	b.w	800b550 <_puts_r>
 800b612:	bf00      	nop
 800b614:	20000020 	.word	0x20000020

0800b618 <rand>:
 800b618:	4b19      	ldr	r3, [pc, #100]	; (800b680 <rand+0x68>)
 800b61a:	b510      	push	{r4, lr}
 800b61c:	681c      	ldr	r4, [r3, #0]
 800b61e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b620:	b9d3      	cbnz	r3, 800b658 <rand+0x40>
 800b622:	2018      	movs	r0, #24
 800b624:	f7ff fea6 	bl	800b374 <malloc>
 800b628:	f243 330e 	movw	r3, #13070	; 0x330e
 800b62c:	63a0      	str	r0, [r4, #56]	; 0x38
 800b62e:	8003      	strh	r3, [r0, #0]
 800b630:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800b634:	8043      	strh	r3, [r0, #2]
 800b636:	f241 2334 	movw	r3, #4660	; 0x1234
 800b63a:	8083      	strh	r3, [r0, #4]
 800b63c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800b640:	80c3      	strh	r3, [r0, #6]
 800b642:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800b646:	8103      	strh	r3, [r0, #8]
 800b648:	2305      	movs	r3, #5
 800b64a:	8143      	strh	r3, [r0, #10]
 800b64c:	230b      	movs	r3, #11
 800b64e:	8183      	strh	r3, [r0, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	2300      	movs	r3, #0
 800b654:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b658:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b65a:	480a      	ldr	r0, [pc, #40]	; (800b684 <rand+0x6c>)
 800b65c:	690a      	ldr	r2, [r1, #16]
 800b65e:	694b      	ldr	r3, [r1, #20]
 800b660:	4c09      	ldr	r4, [pc, #36]	; (800b688 <rand+0x70>)
 800b662:	4350      	muls	r0, r2
 800b664:	fb04 0003 	mla	r0, r4, r3, r0
 800b668:	fba2 2304 	umull	r2, r3, r2, r4
 800b66c:	3201      	adds	r2, #1
 800b66e:	4403      	add	r3, r0
 800b670:	f143 0300 	adc.w	r3, r3, #0
 800b674:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b678:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800b67c:	bd10      	pop	{r4, pc}
 800b67e:	bf00      	nop
 800b680:	20000020 	.word	0x20000020
 800b684:	5851f42d 	.word	0x5851f42d
 800b688:	4c957f2d 	.word	0x4c957f2d

0800b68c <_sbrk_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4c06      	ldr	r4, [pc, #24]	; (800b6a8 <_sbrk_r+0x1c>)
 800b690:	2300      	movs	r3, #0
 800b692:	4605      	mov	r5, r0
 800b694:	4608      	mov	r0, r1
 800b696:	6023      	str	r3, [r4, #0]
 800b698:	f7ff fdd2 	bl	800b240 <_sbrk>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	d102      	bne.n	800b6a6 <_sbrk_r+0x1a>
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	b103      	cbz	r3, 800b6a6 <_sbrk_r+0x1a>
 800b6a4:	602b      	str	r3, [r5, #0]
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
 800b6a8:	2003ef54 	.word	0x2003ef54

0800b6ac <siprintf>:
 800b6ac:	b40e      	push	{r1, r2, r3}
 800b6ae:	b500      	push	{lr}
 800b6b0:	b09c      	sub	sp, #112	; 0x70
 800b6b2:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b6b6:	ab1d      	add	r3, sp, #116	; 0x74
 800b6b8:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b6bc:	9002      	str	r0, [sp, #8]
 800b6be:	9006      	str	r0, [sp, #24]
 800b6c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6c4:	480a      	ldr	r0, [pc, #40]	; (800b6f0 <siprintf+0x44>)
 800b6c6:	9104      	str	r1, [sp, #16]
 800b6c8:	9107      	str	r1, [sp, #28]
 800b6ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b6d6:	6800      	ldr	r0, [r0, #0]
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	a902      	add	r1, sp, #8
 800b6dc:	f000 fb08 	bl	800bcf0 <_svfiprintf_r>
 800b6e0:	9b02      	ldr	r3, [sp, #8]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	701a      	strb	r2, [r3, #0]
 800b6e6:	b01c      	add	sp, #112	; 0x70
 800b6e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6ec:	b003      	add	sp, #12
 800b6ee:	4770      	bx	lr
 800b6f0:	20000020 	.word	0x20000020

0800b6f4 <__swbuf_r>:
 800b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f6:	460e      	mov	r6, r1
 800b6f8:	4614      	mov	r4, r2
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	b118      	cbz	r0, 800b706 <__swbuf_r+0x12>
 800b6fe:	6983      	ldr	r3, [r0, #24]
 800b700:	b90b      	cbnz	r3, 800b706 <__swbuf_r+0x12>
 800b702:	f000 f9a9 	bl	800ba58 <__sinit>
 800b706:	4b21      	ldr	r3, [pc, #132]	; (800b78c <__swbuf_r+0x98>)
 800b708:	429c      	cmp	r4, r3
 800b70a:	d12a      	bne.n	800b762 <__swbuf_r+0x6e>
 800b70c:	686c      	ldr	r4, [r5, #4]
 800b70e:	69a3      	ldr	r3, [r4, #24]
 800b710:	60a3      	str	r3, [r4, #8]
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	071a      	lsls	r2, r3, #28
 800b716:	d52e      	bpl.n	800b776 <__swbuf_r+0x82>
 800b718:	6923      	ldr	r3, [r4, #16]
 800b71a:	b363      	cbz	r3, 800b776 <__swbuf_r+0x82>
 800b71c:	6923      	ldr	r3, [r4, #16]
 800b71e:	6820      	ldr	r0, [r4, #0]
 800b720:	1ac0      	subs	r0, r0, r3
 800b722:	6963      	ldr	r3, [r4, #20]
 800b724:	b2f6      	uxtb	r6, r6
 800b726:	4298      	cmp	r0, r3
 800b728:	4637      	mov	r7, r6
 800b72a:	db04      	blt.n	800b736 <__swbuf_r+0x42>
 800b72c:	4621      	mov	r1, r4
 800b72e:	4628      	mov	r0, r5
 800b730:	f000 f928 	bl	800b984 <_fflush_r>
 800b734:	bb28      	cbnz	r0, 800b782 <__swbuf_r+0x8e>
 800b736:	68a3      	ldr	r3, [r4, #8]
 800b738:	3b01      	subs	r3, #1
 800b73a:	60a3      	str	r3, [r4, #8]
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	1c5a      	adds	r2, r3, #1
 800b740:	6022      	str	r2, [r4, #0]
 800b742:	701e      	strb	r6, [r3, #0]
 800b744:	6963      	ldr	r3, [r4, #20]
 800b746:	3001      	adds	r0, #1
 800b748:	4298      	cmp	r0, r3
 800b74a:	d004      	beq.n	800b756 <__swbuf_r+0x62>
 800b74c:	89a3      	ldrh	r3, [r4, #12]
 800b74e:	07db      	lsls	r3, r3, #31
 800b750:	d519      	bpl.n	800b786 <__swbuf_r+0x92>
 800b752:	2e0a      	cmp	r6, #10
 800b754:	d117      	bne.n	800b786 <__swbuf_r+0x92>
 800b756:	4621      	mov	r1, r4
 800b758:	4628      	mov	r0, r5
 800b75a:	f000 f913 	bl	800b984 <_fflush_r>
 800b75e:	b190      	cbz	r0, 800b786 <__swbuf_r+0x92>
 800b760:	e00f      	b.n	800b782 <__swbuf_r+0x8e>
 800b762:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <__swbuf_r+0x9c>)
 800b764:	429c      	cmp	r4, r3
 800b766:	d101      	bne.n	800b76c <__swbuf_r+0x78>
 800b768:	68ac      	ldr	r4, [r5, #8]
 800b76a:	e7d0      	b.n	800b70e <__swbuf_r+0x1a>
 800b76c:	4b09      	ldr	r3, [pc, #36]	; (800b794 <__swbuf_r+0xa0>)
 800b76e:	429c      	cmp	r4, r3
 800b770:	bf08      	it	eq
 800b772:	68ec      	ldreq	r4, [r5, #12]
 800b774:	e7cb      	b.n	800b70e <__swbuf_r+0x1a>
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f000 f80d 	bl	800b798 <__swsetup_r>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d0cc      	beq.n	800b71c <__swbuf_r+0x28>
 800b782:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b786:	4638      	mov	r0, r7
 800b788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b78a:	bf00      	nop
 800b78c:	0800e548 	.word	0x0800e548
 800b790:	0800e568 	.word	0x0800e568
 800b794:	0800e528 	.word	0x0800e528

0800b798 <__swsetup_r>:
 800b798:	4b32      	ldr	r3, [pc, #200]	; (800b864 <__swsetup_r+0xcc>)
 800b79a:	b570      	push	{r4, r5, r6, lr}
 800b79c:	681d      	ldr	r5, [r3, #0]
 800b79e:	4606      	mov	r6, r0
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	b125      	cbz	r5, 800b7ae <__swsetup_r+0x16>
 800b7a4:	69ab      	ldr	r3, [r5, #24]
 800b7a6:	b913      	cbnz	r3, 800b7ae <__swsetup_r+0x16>
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f000 f955 	bl	800ba58 <__sinit>
 800b7ae:	4b2e      	ldr	r3, [pc, #184]	; (800b868 <__swsetup_r+0xd0>)
 800b7b0:	429c      	cmp	r4, r3
 800b7b2:	d10f      	bne.n	800b7d4 <__swsetup_r+0x3c>
 800b7b4:	686c      	ldr	r4, [r5, #4]
 800b7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ba:	b29a      	uxth	r2, r3
 800b7bc:	0715      	lsls	r5, r2, #28
 800b7be:	d42c      	bmi.n	800b81a <__swsetup_r+0x82>
 800b7c0:	06d0      	lsls	r0, r2, #27
 800b7c2:	d411      	bmi.n	800b7e8 <__swsetup_r+0x50>
 800b7c4:	2209      	movs	r2, #9
 800b7c6:	6032      	str	r2, [r6, #0]
 800b7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	4b25      	ldr	r3, [pc, #148]	; (800b86c <__swsetup_r+0xd4>)
 800b7d6:	429c      	cmp	r4, r3
 800b7d8:	d101      	bne.n	800b7de <__swsetup_r+0x46>
 800b7da:	68ac      	ldr	r4, [r5, #8]
 800b7dc:	e7eb      	b.n	800b7b6 <__swsetup_r+0x1e>
 800b7de:	4b24      	ldr	r3, [pc, #144]	; (800b870 <__swsetup_r+0xd8>)
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	bf08      	it	eq
 800b7e4:	68ec      	ldreq	r4, [r5, #12]
 800b7e6:	e7e6      	b.n	800b7b6 <__swsetup_r+0x1e>
 800b7e8:	0751      	lsls	r1, r2, #29
 800b7ea:	d512      	bpl.n	800b812 <__swsetup_r+0x7a>
 800b7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ee:	b141      	cbz	r1, 800b802 <__swsetup_r+0x6a>
 800b7f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7f4:	4299      	cmp	r1, r3
 800b7f6:	d002      	beq.n	800b7fe <__swsetup_r+0x66>
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7ff fde5 	bl	800b3c8 <_free_r>
 800b7fe:	2300      	movs	r3, #0
 800b800:	6363      	str	r3, [r4, #52]	; 0x34
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	2300      	movs	r3, #0
 800b80c:	6063      	str	r3, [r4, #4]
 800b80e:	6923      	ldr	r3, [r4, #16]
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	f043 0308 	orr.w	r3, r3, #8
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	b94b      	cbnz	r3, 800b832 <__swsetup_r+0x9a>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b828:	d003      	beq.n	800b832 <__swsetup_r+0x9a>
 800b82a:	4621      	mov	r1, r4
 800b82c:	4630      	mov	r0, r6
 800b82e:	f000 f9c1 	bl	800bbb4 <__smakebuf_r>
 800b832:	89a2      	ldrh	r2, [r4, #12]
 800b834:	f012 0301 	ands.w	r3, r2, #1
 800b838:	d00c      	beq.n	800b854 <__swsetup_r+0xbc>
 800b83a:	2300      	movs	r3, #0
 800b83c:	60a3      	str	r3, [r4, #8]
 800b83e:	6963      	ldr	r3, [r4, #20]
 800b840:	425b      	negs	r3, r3
 800b842:	61a3      	str	r3, [r4, #24]
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	b953      	cbnz	r3, 800b85e <__swsetup_r+0xc6>
 800b848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b850:	d1ba      	bne.n	800b7c8 <__swsetup_r+0x30>
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	0792      	lsls	r2, r2, #30
 800b856:	bf58      	it	pl
 800b858:	6963      	ldrpl	r3, [r4, #20]
 800b85a:	60a3      	str	r3, [r4, #8]
 800b85c:	e7f2      	b.n	800b844 <__swsetup_r+0xac>
 800b85e:	2000      	movs	r0, #0
 800b860:	e7f7      	b.n	800b852 <__swsetup_r+0xba>
 800b862:	bf00      	nop
 800b864:	20000020 	.word	0x20000020
 800b868:	0800e548 	.word	0x0800e548
 800b86c:	0800e568 	.word	0x0800e568
 800b870:	0800e528 	.word	0x0800e528

0800b874 <__sflush_r>:
 800b874:	898a      	ldrh	r2, [r1, #12]
 800b876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87a:	4605      	mov	r5, r0
 800b87c:	0710      	lsls	r0, r2, #28
 800b87e:	460c      	mov	r4, r1
 800b880:	d45a      	bmi.n	800b938 <__sflush_r+0xc4>
 800b882:	684b      	ldr	r3, [r1, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	dc05      	bgt.n	800b894 <__sflush_r+0x20>
 800b888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	dc02      	bgt.n	800b894 <__sflush_r+0x20>
 800b88e:	2000      	movs	r0, #0
 800b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b896:	2e00      	cmp	r6, #0
 800b898:	d0f9      	beq.n	800b88e <__sflush_r+0x1a>
 800b89a:	2300      	movs	r3, #0
 800b89c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8a0:	682f      	ldr	r7, [r5, #0]
 800b8a2:	602b      	str	r3, [r5, #0]
 800b8a4:	d033      	beq.n	800b90e <__sflush_r+0x9a>
 800b8a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	075a      	lsls	r2, r3, #29
 800b8ac:	d505      	bpl.n	800b8ba <__sflush_r+0x46>
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	1ac0      	subs	r0, r0, r3
 800b8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8b4:	b10b      	cbz	r3, 800b8ba <__sflush_r+0x46>
 800b8b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8b8:	1ac0      	subs	r0, r0, r3
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4602      	mov	r2, r0
 800b8be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8c0:	6a21      	ldr	r1, [r4, #32]
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	47b0      	blx	r6
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	d106      	bne.n	800b8da <__sflush_r+0x66>
 800b8cc:	6829      	ldr	r1, [r5, #0]
 800b8ce:	291d      	cmp	r1, #29
 800b8d0:	d84b      	bhi.n	800b96a <__sflush_r+0xf6>
 800b8d2:	4a2b      	ldr	r2, [pc, #172]	; (800b980 <__sflush_r+0x10c>)
 800b8d4:	40ca      	lsrs	r2, r1
 800b8d6:	07d6      	lsls	r6, r2, #31
 800b8d8:	d547      	bpl.n	800b96a <__sflush_r+0xf6>
 800b8da:	2200      	movs	r2, #0
 800b8dc:	6062      	str	r2, [r4, #4]
 800b8de:	04d9      	lsls	r1, r3, #19
 800b8e0:	6922      	ldr	r2, [r4, #16]
 800b8e2:	6022      	str	r2, [r4, #0]
 800b8e4:	d504      	bpl.n	800b8f0 <__sflush_r+0x7c>
 800b8e6:	1c42      	adds	r2, r0, #1
 800b8e8:	d101      	bne.n	800b8ee <__sflush_r+0x7a>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	b903      	cbnz	r3, 800b8f0 <__sflush_r+0x7c>
 800b8ee:	6560      	str	r0, [r4, #84]	; 0x54
 800b8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f2:	602f      	str	r7, [r5, #0]
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d0ca      	beq.n	800b88e <__sflush_r+0x1a>
 800b8f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	d002      	beq.n	800b906 <__sflush_r+0x92>
 800b900:	4628      	mov	r0, r5
 800b902:	f7ff fd61 	bl	800b3c8 <_free_r>
 800b906:	2000      	movs	r0, #0
 800b908:	6360      	str	r0, [r4, #52]	; 0x34
 800b90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90e:	6a21      	ldr	r1, [r4, #32]
 800b910:	2301      	movs	r3, #1
 800b912:	4628      	mov	r0, r5
 800b914:	47b0      	blx	r6
 800b916:	1c41      	adds	r1, r0, #1
 800b918:	d1c6      	bne.n	800b8a8 <__sflush_r+0x34>
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0c3      	beq.n	800b8a8 <__sflush_r+0x34>
 800b920:	2b1d      	cmp	r3, #29
 800b922:	d001      	beq.n	800b928 <__sflush_r+0xb4>
 800b924:	2b16      	cmp	r3, #22
 800b926:	d101      	bne.n	800b92c <__sflush_r+0xb8>
 800b928:	602f      	str	r7, [r5, #0]
 800b92a:	e7b0      	b.n	800b88e <__sflush_r+0x1a>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b938:	690f      	ldr	r7, [r1, #16]
 800b93a:	2f00      	cmp	r7, #0
 800b93c:	d0a7      	beq.n	800b88e <__sflush_r+0x1a>
 800b93e:	0793      	lsls	r3, r2, #30
 800b940:	680e      	ldr	r6, [r1, #0]
 800b942:	bf08      	it	eq
 800b944:	694b      	ldreq	r3, [r1, #20]
 800b946:	600f      	str	r7, [r1, #0]
 800b948:	bf18      	it	ne
 800b94a:	2300      	movne	r3, #0
 800b94c:	eba6 0807 	sub.w	r8, r6, r7
 800b950:	608b      	str	r3, [r1, #8]
 800b952:	f1b8 0f00 	cmp.w	r8, #0
 800b956:	dd9a      	ble.n	800b88e <__sflush_r+0x1a>
 800b958:	4643      	mov	r3, r8
 800b95a:	463a      	mov	r2, r7
 800b95c:	6a21      	ldr	r1, [r4, #32]
 800b95e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b960:	4628      	mov	r0, r5
 800b962:	47b0      	blx	r6
 800b964:	2800      	cmp	r0, #0
 800b966:	dc07      	bgt.n	800b978 <__sflush_r+0x104>
 800b968:	89a3      	ldrh	r3, [r4, #12]
 800b96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b96e:	81a3      	strh	r3, [r4, #12]
 800b970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b978:	4407      	add	r7, r0
 800b97a:	eba8 0800 	sub.w	r8, r8, r0
 800b97e:	e7e8      	b.n	800b952 <__sflush_r+0xde>
 800b980:	20400001 	.word	0x20400001

0800b984 <_fflush_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	690b      	ldr	r3, [r1, #16]
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	b1db      	cbz	r3, 800b9c6 <_fflush_r+0x42>
 800b98e:	b118      	cbz	r0, 800b998 <_fflush_r+0x14>
 800b990:	6983      	ldr	r3, [r0, #24]
 800b992:	b90b      	cbnz	r3, 800b998 <_fflush_r+0x14>
 800b994:	f000 f860 	bl	800ba58 <__sinit>
 800b998:	4b0c      	ldr	r3, [pc, #48]	; (800b9cc <_fflush_r+0x48>)
 800b99a:	429c      	cmp	r4, r3
 800b99c:	d109      	bne.n	800b9b2 <_fflush_r+0x2e>
 800b99e:	686c      	ldr	r4, [r5, #4]
 800b9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a4:	b17b      	cbz	r3, 800b9c6 <_fflush_r+0x42>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ae:	f7ff bf61 	b.w	800b874 <__sflush_r>
 800b9b2:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <_fflush_r+0x4c>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	d101      	bne.n	800b9bc <_fflush_r+0x38>
 800b9b8:	68ac      	ldr	r4, [r5, #8]
 800b9ba:	e7f1      	b.n	800b9a0 <_fflush_r+0x1c>
 800b9bc:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <_fflush_r+0x50>)
 800b9be:	429c      	cmp	r4, r3
 800b9c0:	bf08      	it	eq
 800b9c2:	68ec      	ldreq	r4, [r5, #12]
 800b9c4:	e7ec      	b.n	800b9a0 <_fflush_r+0x1c>
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	0800e548 	.word	0x0800e548
 800b9d0:	0800e568 	.word	0x0800e568
 800b9d4:	0800e528 	.word	0x0800e528

0800b9d8 <_cleanup_r>:
 800b9d8:	4901      	ldr	r1, [pc, #4]	; (800b9e0 <_cleanup_r+0x8>)
 800b9da:	f000 b8a9 	b.w	800bb30 <_fwalk_reent>
 800b9de:	bf00      	nop
 800b9e0:	0800b985 	.word	0x0800b985

0800b9e4 <std.isra.0>:
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	6003      	str	r3, [r0, #0]
 800b9ec:	6043      	str	r3, [r0, #4]
 800b9ee:	6083      	str	r3, [r0, #8]
 800b9f0:	8181      	strh	r1, [r0, #12]
 800b9f2:	6643      	str	r3, [r0, #100]	; 0x64
 800b9f4:	81c2      	strh	r2, [r0, #14]
 800b9f6:	6103      	str	r3, [r0, #16]
 800b9f8:	6143      	str	r3, [r0, #20]
 800b9fa:	6183      	str	r3, [r0, #24]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	2208      	movs	r2, #8
 800ba00:	305c      	adds	r0, #92	; 0x5c
 800ba02:	f7ff fcd9 	bl	800b3b8 <memset>
 800ba06:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <std.isra.0+0x38>)
 800ba08:	6263      	str	r3, [r4, #36]	; 0x24
 800ba0a:	4b05      	ldr	r3, [pc, #20]	; (800ba20 <std.isra.0+0x3c>)
 800ba0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba0e:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <std.isra.0+0x40>)
 800ba10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba12:	4b05      	ldr	r3, [pc, #20]	; (800ba28 <std.isra.0+0x44>)
 800ba14:	6224      	str	r4, [r4, #32]
 800ba16:	6323      	str	r3, [r4, #48]	; 0x30
 800ba18:	bd10      	pop	{r4, pc}
 800ba1a:	bf00      	nop
 800ba1c:	0800c485 	.word	0x0800c485
 800ba20:	0800c4a7 	.word	0x0800c4a7
 800ba24:	0800c4df 	.word	0x0800c4df
 800ba28:	0800c503 	.word	0x0800c503

0800ba2c <__sfmoreglue>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	1e4a      	subs	r2, r1, #1
 800ba30:	2568      	movs	r5, #104	; 0x68
 800ba32:	4355      	muls	r5, r2
 800ba34:	460e      	mov	r6, r1
 800ba36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba3a:	f7ff fd13 	bl	800b464 <_malloc_r>
 800ba3e:	4604      	mov	r4, r0
 800ba40:	b140      	cbz	r0, 800ba54 <__sfmoreglue+0x28>
 800ba42:	2100      	movs	r1, #0
 800ba44:	e880 0042 	stmia.w	r0, {r1, r6}
 800ba48:	300c      	adds	r0, #12
 800ba4a:	60a0      	str	r0, [r4, #8]
 800ba4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba50:	f7ff fcb2 	bl	800b3b8 <memset>
 800ba54:	4620      	mov	r0, r4
 800ba56:	bd70      	pop	{r4, r5, r6, pc}

0800ba58 <__sinit>:
 800ba58:	6983      	ldr	r3, [r0, #24]
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	bb33      	cbnz	r3, 800baae <__sinit+0x56>
 800ba60:	6483      	str	r3, [r0, #72]	; 0x48
 800ba62:	64c3      	str	r3, [r0, #76]	; 0x4c
 800ba64:	6503      	str	r3, [r0, #80]	; 0x50
 800ba66:	4b12      	ldr	r3, [pc, #72]	; (800bab0 <__sinit+0x58>)
 800ba68:	4a12      	ldr	r2, [pc, #72]	; (800bab4 <__sinit+0x5c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	6282      	str	r2, [r0, #40]	; 0x28
 800ba6e:	4298      	cmp	r0, r3
 800ba70:	bf04      	itt	eq
 800ba72:	2301      	moveq	r3, #1
 800ba74:	6183      	streq	r3, [r0, #24]
 800ba76:	f000 f81f 	bl	800bab8 <__sfp>
 800ba7a:	6060      	str	r0, [r4, #4]
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 f81b 	bl	800bab8 <__sfp>
 800ba82:	60a0      	str	r0, [r4, #8]
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 f817 	bl	800bab8 <__sfp>
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	60e0      	str	r0, [r4, #12]
 800ba8e:	2104      	movs	r1, #4
 800ba90:	6860      	ldr	r0, [r4, #4]
 800ba92:	f7ff ffa7 	bl	800b9e4 <std.isra.0>
 800ba96:	2201      	movs	r2, #1
 800ba98:	2109      	movs	r1, #9
 800ba9a:	68a0      	ldr	r0, [r4, #8]
 800ba9c:	f7ff ffa2 	bl	800b9e4 <std.isra.0>
 800baa0:	2202      	movs	r2, #2
 800baa2:	2112      	movs	r1, #18
 800baa4:	68e0      	ldr	r0, [r4, #12]
 800baa6:	f7ff ff9d 	bl	800b9e4 <std.isra.0>
 800baaa:	2301      	movs	r3, #1
 800baac:	61a3      	str	r3, [r4, #24]
 800baae:	bd10      	pop	{r4, pc}
 800bab0:	0800e588 	.word	0x0800e588
 800bab4:	0800b9d9 	.word	0x0800b9d9

0800bab8 <__sfp>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	4b1c      	ldr	r3, [pc, #112]	; (800bb2c <__sfp+0x74>)
 800babc:	681e      	ldr	r6, [r3, #0]
 800babe:	69b3      	ldr	r3, [r6, #24]
 800bac0:	4607      	mov	r7, r0
 800bac2:	b913      	cbnz	r3, 800baca <__sfp+0x12>
 800bac4:	4630      	mov	r0, r6
 800bac6:	f7ff ffc7 	bl	800ba58 <__sinit>
 800baca:	3648      	adds	r6, #72	; 0x48
 800bacc:	68b4      	ldr	r4, [r6, #8]
 800bace:	6873      	ldr	r3, [r6, #4]
 800bad0:	3b01      	subs	r3, #1
 800bad2:	d503      	bpl.n	800badc <__sfp+0x24>
 800bad4:	6833      	ldr	r3, [r6, #0]
 800bad6:	b133      	cbz	r3, 800bae6 <__sfp+0x2e>
 800bad8:	6836      	ldr	r6, [r6, #0]
 800bada:	e7f7      	b.n	800bacc <__sfp+0x14>
 800badc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bae0:	b16d      	cbz	r5, 800bafe <__sfp+0x46>
 800bae2:	3468      	adds	r4, #104	; 0x68
 800bae4:	e7f4      	b.n	800bad0 <__sfp+0x18>
 800bae6:	2104      	movs	r1, #4
 800bae8:	4638      	mov	r0, r7
 800baea:	f7ff ff9f 	bl	800ba2c <__sfmoreglue>
 800baee:	6030      	str	r0, [r6, #0]
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d1f1      	bne.n	800bad8 <__sfp+0x20>
 800baf4:	230c      	movs	r3, #12
 800baf6:	603b      	str	r3, [r7, #0]
 800baf8:	4604      	mov	r4, r0
 800bafa:	4620      	mov	r0, r4
 800bafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bafe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb02:	81e3      	strh	r3, [r4, #14]
 800bb04:	2301      	movs	r3, #1
 800bb06:	81a3      	strh	r3, [r4, #12]
 800bb08:	6665      	str	r5, [r4, #100]	; 0x64
 800bb0a:	6025      	str	r5, [r4, #0]
 800bb0c:	60a5      	str	r5, [r4, #8]
 800bb0e:	6065      	str	r5, [r4, #4]
 800bb10:	6125      	str	r5, [r4, #16]
 800bb12:	6165      	str	r5, [r4, #20]
 800bb14:	61a5      	str	r5, [r4, #24]
 800bb16:	2208      	movs	r2, #8
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb1e:	f7ff fc4b 	bl	800b3b8 <memset>
 800bb22:	6365      	str	r5, [r4, #52]	; 0x34
 800bb24:	63a5      	str	r5, [r4, #56]	; 0x38
 800bb26:	64a5      	str	r5, [r4, #72]	; 0x48
 800bb28:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bb2a:	e7e6      	b.n	800bafa <__sfp+0x42>
 800bb2c:	0800e588 	.word	0x0800e588

0800bb30 <_fwalk_reent>:
 800bb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb34:	4680      	mov	r8, r0
 800bb36:	4689      	mov	r9, r1
 800bb38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb3c:	2600      	movs	r6, #0
 800bb3e:	b914      	cbnz	r4, 800bb46 <_fwalk_reent+0x16>
 800bb40:	4630      	mov	r0, r6
 800bb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb46:	68a5      	ldr	r5, [r4, #8]
 800bb48:	6867      	ldr	r7, [r4, #4]
 800bb4a:	3f01      	subs	r7, #1
 800bb4c:	d501      	bpl.n	800bb52 <_fwalk_reent+0x22>
 800bb4e:	6824      	ldr	r4, [r4, #0]
 800bb50:	e7f5      	b.n	800bb3e <_fwalk_reent+0xe>
 800bb52:	89ab      	ldrh	r3, [r5, #12]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d907      	bls.n	800bb68 <_fwalk_reent+0x38>
 800bb58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	d003      	beq.n	800bb68 <_fwalk_reent+0x38>
 800bb60:	4629      	mov	r1, r5
 800bb62:	4640      	mov	r0, r8
 800bb64:	47c8      	blx	r9
 800bb66:	4306      	orrs	r6, r0
 800bb68:	3568      	adds	r5, #104	; 0x68
 800bb6a:	e7ee      	b.n	800bb4a <_fwalk_reent+0x1a>

0800bb6c <__swhatbuf_r>:
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	460e      	mov	r6, r1
 800bb70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb74:	2900      	cmp	r1, #0
 800bb76:	b090      	sub	sp, #64	; 0x40
 800bb78:	4614      	mov	r4, r2
 800bb7a:	461d      	mov	r5, r3
 800bb7c:	da07      	bge.n	800bb8e <__swhatbuf_r+0x22>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	602b      	str	r3, [r5, #0]
 800bb82:	89b3      	ldrh	r3, [r6, #12]
 800bb84:	061a      	lsls	r2, r3, #24
 800bb86:	d410      	bmi.n	800bbaa <__swhatbuf_r+0x3e>
 800bb88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb8c:	e00e      	b.n	800bbac <__swhatbuf_r+0x40>
 800bb8e:	aa01      	add	r2, sp, #4
 800bb90:	f000 fcde 	bl	800c550 <_fstat_r>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	dbf2      	blt.n	800bb7e <__swhatbuf_r+0x12>
 800bb98:	9a02      	ldr	r2, [sp, #8]
 800bb9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bba2:	425a      	negs	r2, r3
 800bba4:	415a      	adcs	r2, r3
 800bba6:	602a      	str	r2, [r5, #0]
 800bba8:	e7ee      	b.n	800bb88 <__swhatbuf_r+0x1c>
 800bbaa:	2340      	movs	r3, #64	; 0x40
 800bbac:	2000      	movs	r0, #0
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	b010      	add	sp, #64	; 0x40
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}

0800bbb4 <__smakebuf_r>:
 800bbb4:	898b      	ldrh	r3, [r1, #12]
 800bbb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbb8:	079d      	lsls	r5, r3, #30
 800bbba:	4606      	mov	r6, r0
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	d507      	bpl.n	800bbd0 <__smakebuf_r+0x1c>
 800bbc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	6123      	str	r3, [r4, #16]
 800bbc8:	2301      	movs	r3, #1
 800bbca:	6163      	str	r3, [r4, #20]
 800bbcc:	b002      	add	sp, #8
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	ab01      	add	r3, sp, #4
 800bbd2:	466a      	mov	r2, sp
 800bbd4:	f7ff ffca 	bl	800bb6c <__swhatbuf_r>
 800bbd8:	9900      	ldr	r1, [sp, #0]
 800bbda:	4605      	mov	r5, r0
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f7ff fc41 	bl	800b464 <_malloc_r>
 800bbe2:	b948      	cbnz	r0, 800bbf8 <__smakebuf_r+0x44>
 800bbe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbe8:	059a      	lsls	r2, r3, #22
 800bbea:	d4ef      	bmi.n	800bbcc <__smakebuf_r+0x18>
 800bbec:	f023 0303 	bic.w	r3, r3, #3
 800bbf0:	f043 0302 	orr.w	r3, r3, #2
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	e7e3      	b.n	800bbc0 <__smakebuf_r+0xc>
 800bbf8:	4b0d      	ldr	r3, [pc, #52]	; (800bc30 <__smakebuf_r+0x7c>)
 800bbfa:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	6020      	str	r0, [r4, #0]
 800bc00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc04:	81a3      	strh	r3, [r4, #12]
 800bc06:	9b00      	ldr	r3, [sp, #0]
 800bc08:	6163      	str	r3, [r4, #20]
 800bc0a:	9b01      	ldr	r3, [sp, #4]
 800bc0c:	6120      	str	r0, [r4, #16]
 800bc0e:	b15b      	cbz	r3, 800bc28 <__smakebuf_r+0x74>
 800bc10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc14:	4630      	mov	r0, r6
 800bc16:	f000 fcad 	bl	800c574 <_isatty_r>
 800bc1a:	b128      	cbz	r0, 800bc28 <__smakebuf_r+0x74>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f023 0303 	bic.w	r3, r3, #3
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	431d      	orrs	r5, r3
 800bc2c:	81a5      	strh	r5, [r4, #12]
 800bc2e:	e7cd      	b.n	800bbcc <__smakebuf_r+0x18>
 800bc30:	0800b9d9 	.word	0x0800b9d9

0800bc34 <__malloc_lock>:
 800bc34:	4770      	bx	lr

0800bc36 <__malloc_unlock>:
 800bc36:	4770      	bx	lr

0800bc38 <__ssputs_r>:
 800bc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc3c:	688e      	ldr	r6, [r1, #8]
 800bc3e:	429e      	cmp	r6, r3
 800bc40:	4682      	mov	sl, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	4691      	mov	r9, r2
 800bc46:	4698      	mov	r8, r3
 800bc48:	d835      	bhi.n	800bcb6 <__ssputs_r+0x7e>
 800bc4a:	898a      	ldrh	r2, [r1, #12]
 800bc4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc50:	d031      	beq.n	800bcb6 <__ssputs_r+0x7e>
 800bc52:	6825      	ldr	r5, [r4, #0]
 800bc54:	6909      	ldr	r1, [r1, #16]
 800bc56:	1a6f      	subs	r7, r5, r1
 800bc58:	6965      	ldr	r5, [r4, #20]
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc60:	fb95 f5f3 	sdiv	r5, r5, r3
 800bc64:	f108 0301 	add.w	r3, r8, #1
 800bc68:	443b      	add	r3, r7
 800bc6a:	429d      	cmp	r5, r3
 800bc6c:	bf38      	it	cc
 800bc6e:	461d      	movcc	r5, r3
 800bc70:	0553      	lsls	r3, r2, #21
 800bc72:	d531      	bpl.n	800bcd8 <__ssputs_r+0xa0>
 800bc74:	4629      	mov	r1, r5
 800bc76:	f7ff fbf5 	bl	800b464 <_malloc_r>
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	b950      	cbnz	r0, 800bc94 <__ssputs_r+0x5c>
 800bc7e:	230c      	movs	r3, #12
 800bc80:	f8ca 3000 	str.w	r3, [sl]
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc8a:	81a3      	strh	r3, [r4, #12]
 800bc8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc94:	463a      	mov	r2, r7
 800bc96:	6921      	ldr	r1, [r4, #16]
 800bc98:	f7ff fb83 	bl	800b3a2 <memcpy>
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca6:	81a3      	strh	r3, [r4, #12]
 800bca8:	6126      	str	r6, [r4, #16]
 800bcaa:	6165      	str	r5, [r4, #20]
 800bcac:	443e      	add	r6, r7
 800bcae:	1bed      	subs	r5, r5, r7
 800bcb0:	6026      	str	r6, [r4, #0]
 800bcb2:	60a5      	str	r5, [r4, #8]
 800bcb4:	4646      	mov	r6, r8
 800bcb6:	4546      	cmp	r6, r8
 800bcb8:	bf28      	it	cs
 800bcba:	4646      	movcs	r6, r8
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	6820      	ldr	r0, [r4, #0]
 800bcc2:	f000 fc79 	bl	800c5b8 <memmove>
 800bcc6:	68a3      	ldr	r3, [r4, #8]
 800bcc8:	1b9b      	subs	r3, r3, r6
 800bcca:	60a3      	str	r3, [r4, #8]
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	441e      	add	r6, r3
 800bcd0:	6026      	str	r6, [r4, #0]
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd8:	462a      	mov	r2, r5
 800bcda:	f000 fc87 	bl	800c5ec <_realloc_r>
 800bcde:	4606      	mov	r6, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d1e1      	bne.n	800bca8 <__ssputs_r+0x70>
 800bce4:	6921      	ldr	r1, [r4, #16]
 800bce6:	4650      	mov	r0, sl
 800bce8:	f7ff fb6e 	bl	800b3c8 <_free_r>
 800bcec:	e7c7      	b.n	800bc7e <__ssputs_r+0x46>
	...

0800bcf0 <_svfiprintf_r>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	b09d      	sub	sp, #116	; 0x74
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	9303      	str	r3, [sp, #12]
 800bcfa:	898b      	ldrh	r3, [r1, #12]
 800bcfc:	061c      	lsls	r4, r3, #24
 800bcfe:	460d      	mov	r5, r1
 800bd00:	4616      	mov	r6, r2
 800bd02:	d50f      	bpl.n	800bd24 <_svfiprintf_r+0x34>
 800bd04:	690b      	ldr	r3, [r1, #16]
 800bd06:	b96b      	cbnz	r3, 800bd24 <_svfiprintf_r+0x34>
 800bd08:	2140      	movs	r1, #64	; 0x40
 800bd0a:	f7ff fbab 	bl	800b464 <_malloc_r>
 800bd0e:	6028      	str	r0, [r5, #0]
 800bd10:	6128      	str	r0, [r5, #16]
 800bd12:	b928      	cbnz	r0, 800bd20 <_svfiprintf_r+0x30>
 800bd14:	230c      	movs	r3, #12
 800bd16:	f8c8 3000 	str.w	r3, [r8]
 800bd1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd1e:	e0c5      	b.n	800beac <_svfiprintf_r+0x1bc>
 800bd20:	2340      	movs	r3, #64	; 0x40
 800bd22:	616b      	str	r3, [r5, #20]
 800bd24:	2300      	movs	r3, #0
 800bd26:	9309      	str	r3, [sp, #36]	; 0x24
 800bd28:	2320      	movs	r3, #32
 800bd2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd2e:	2330      	movs	r3, #48	; 0x30
 800bd30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd34:	f04f 0b01 	mov.w	fp, #1
 800bd38:	4637      	mov	r7, r6
 800bd3a:	463c      	mov	r4, r7
 800bd3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d13c      	bne.n	800bdbe <_svfiprintf_r+0xce>
 800bd44:	ebb7 0a06 	subs.w	sl, r7, r6
 800bd48:	d00b      	beq.n	800bd62 <_svfiprintf_r+0x72>
 800bd4a:	4653      	mov	r3, sl
 800bd4c:	4632      	mov	r2, r6
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4640      	mov	r0, r8
 800bd52:	f7ff ff71 	bl	800bc38 <__ssputs_r>
 800bd56:	3001      	adds	r0, #1
 800bd58:	f000 80a3 	beq.w	800bea2 <_svfiprintf_r+0x1b2>
 800bd5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd5e:	4453      	add	r3, sl
 800bd60:	9309      	str	r3, [sp, #36]	; 0x24
 800bd62:	783b      	ldrb	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f000 809c 	beq.w	800bea2 <_svfiprintf_r+0x1b2>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	9307      	str	r3, [sp, #28]
 800bd74:	9205      	str	r2, [sp, #20]
 800bd76:	9306      	str	r3, [sp, #24]
 800bd78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd7c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd7e:	2205      	movs	r2, #5
 800bd80:	7821      	ldrb	r1, [r4, #0]
 800bd82:	4850      	ldr	r0, [pc, #320]	; (800bec4 <_svfiprintf_r+0x1d4>)
 800bd84:	f7f4 fa74 	bl	8000270 <memchr>
 800bd88:	1c67      	adds	r7, r4, #1
 800bd8a:	9b04      	ldr	r3, [sp, #16]
 800bd8c:	b9d8      	cbnz	r0, 800bdc6 <_svfiprintf_r+0xd6>
 800bd8e:	06d9      	lsls	r1, r3, #27
 800bd90:	bf44      	itt	mi
 800bd92:	2220      	movmi	r2, #32
 800bd94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd98:	071a      	lsls	r2, r3, #28
 800bd9a:	bf44      	itt	mi
 800bd9c:	222b      	movmi	r2, #43	; 0x2b
 800bd9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bda2:	7822      	ldrb	r2, [r4, #0]
 800bda4:	2a2a      	cmp	r2, #42	; 0x2a
 800bda6:	d016      	beq.n	800bdd6 <_svfiprintf_r+0xe6>
 800bda8:	9a07      	ldr	r2, [sp, #28]
 800bdaa:	2100      	movs	r1, #0
 800bdac:	200a      	movs	r0, #10
 800bdae:	4627      	mov	r7, r4
 800bdb0:	3401      	adds	r4, #1
 800bdb2:	783b      	ldrb	r3, [r7, #0]
 800bdb4:	3b30      	subs	r3, #48	; 0x30
 800bdb6:	2b09      	cmp	r3, #9
 800bdb8:	d951      	bls.n	800be5e <_svfiprintf_r+0x16e>
 800bdba:	b1c9      	cbz	r1, 800bdf0 <_svfiprintf_r+0x100>
 800bdbc:	e011      	b.n	800bde2 <_svfiprintf_r+0xf2>
 800bdbe:	2b25      	cmp	r3, #37	; 0x25
 800bdc0:	d0c0      	beq.n	800bd44 <_svfiprintf_r+0x54>
 800bdc2:	4627      	mov	r7, r4
 800bdc4:	e7b9      	b.n	800bd3a <_svfiprintf_r+0x4a>
 800bdc6:	4a3f      	ldr	r2, [pc, #252]	; (800bec4 <_svfiprintf_r+0x1d4>)
 800bdc8:	1a80      	subs	r0, r0, r2
 800bdca:	fa0b f000 	lsl.w	r0, fp, r0
 800bdce:	4318      	orrs	r0, r3
 800bdd0:	9004      	str	r0, [sp, #16]
 800bdd2:	463c      	mov	r4, r7
 800bdd4:	e7d3      	b.n	800bd7e <_svfiprintf_r+0x8e>
 800bdd6:	9a03      	ldr	r2, [sp, #12]
 800bdd8:	1d11      	adds	r1, r2, #4
 800bdda:	6812      	ldr	r2, [r2, #0]
 800bddc:	9103      	str	r1, [sp, #12]
 800bdde:	2a00      	cmp	r2, #0
 800bde0:	db01      	blt.n	800bde6 <_svfiprintf_r+0xf6>
 800bde2:	9207      	str	r2, [sp, #28]
 800bde4:	e004      	b.n	800bdf0 <_svfiprintf_r+0x100>
 800bde6:	4252      	negs	r2, r2
 800bde8:	f043 0302 	orr.w	r3, r3, #2
 800bdec:	9207      	str	r2, [sp, #28]
 800bdee:	9304      	str	r3, [sp, #16]
 800bdf0:	783b      	ldrb	r3, [r7, #0]
 800bdf2:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf4:	d10e      	bne.n	800be14 <_svfiprintf_r+0x124>
 800bdf6:	787b      	ldrb	r3, [r7, #1]
 800bdf8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdfa:	f107 0101 	add.w	r1, r7, #1
 800bdfe:	d132      	bne.n	800be66 <_svfiprintf_r+0x176>
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	1d1a      	adds	r2, r3, #4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	9203      	str	r2, [sp, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bfb8      	it	lt
 800be0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be10:	3702      	adds	r7, #2
 800be12:	9305      	str	r3, [sp, #20]
 800be14:	4c2c      	ldr	r4, [pc, #176]	; (800bec8 <_svfiprintf_r+0x1d8>)
 800be16:	7839      	ldrb	r1, [r7, #0]
 800be18:	2203      	movs	r2, #3
 800be1a:	4620      	mov	r0, r4
 800be1c:	f7f4 fa28 	bl	8000270 <memchr>
 800be20:	b138      	cbz	r0, 800be32 <_svfiprintf_r+0x142>
 800be22:	2340      	movs	r3, #64	; 0x40
 800be24:	1b00      	subs	r0, r0, r4
 800be26:	fa03 f000 	lsl.w	r0, r3, r0
 800be2a:	9b04      	ldr	r3, [sp, #16]
 800be2c:	4303      	orrs	r3, r0
 800be2e:	9304      	str	r3, [sp, #16]
 800be30:	3701      	adds	r7, #1
 800be32:	7839      	ldrb	r1, [r7, #0]
 800be34:	4825      	ldr	r0, [pc, #148]	; (800becc <_svfiprintf_r+0x1dc>)
 800be36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be3a:	2206      	movs	r2, #6
 800be3c:	1c7e      	adds	r6, r7, #1
 800be3e:	f7f4 fa17 	bl	8000270 <memchr>
 800be42:	2800      	cmp	r0, #0
 800be44:	d035      	beq.n	800beb2 <_svfiprintf_r+0x1c2>
 800be46:	4b22      	ldr	r3, [pc, #136]	; (800bed0 <_svfiprintf_r+0x1e0>)
 800be48:	b9fb      	cbnz	r3, 800be8a <_svfiprintf_r+0x19a>
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	3307      	adds	r3, #7
 800be4e:	f023 0307 	bic.w	r3, r3, #7
 800be52:	3308      	adds	r3, #8
 800be54:	9303      	str	r3, [sp, #12]
 800be56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be58:	444b      	add	r3, r9
 800be5a:	9309      	str	r3, [sp, #36]	; 0x24
 800be5c:	e76c      	b.n	800bd38 <_svfiprintf_r+0x48>
 800be5e:	fb00 3202 	mla	r2, r0, r2, r3
 800be62:	2101      	movs	r1, #1
 800be64:	e7a3      	b.n	800bdae <_svfiprintf_r+0xbe>
 800be66:	2300      	movs	r3, #0
 800be68:	9305      	str	r3, [sp, #20]
 800be6a:	4618      	mov	r0, r3
 800be6c:	240a      	movs	r4, #10
 800be6e:	460f      	mov	r7, r1
 800be70:	3101      	adds	r1, #1
 800be72:	783a      	ldrb	r2, [r7, #0]
 800be74:	3a30      	subs	r2, #48	; 0x30
 800be76:	2a09      	cmp	r2, #9
 800be78:	d903      	bls.n	800be82 <_svfiprintf_r+0x192>
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0ca      	beq.n	800be14 <_svfiprintf_r+0x124>
 800be7e:	9005      	str	r0, [sp, #20]
 800be80:	e7c8      	b.n	800be14 <_svfiprintf_r+0x124>
 800be82:	fb04 2000 	mla	r0, r4, r0, r2
 800be86:	2301      	movs	r3, #1
 800be88:	e7f1      	b.n	800be6e <_svfiprintf_r+0x17e>
 800be8a:	ab03      	add	r3, sp, #12
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	462a      	mov	r2, r5
 800be90:	4b10      	ldr	r3, [pc, #64]	; (800bed4 <_svfiprintf_r+0x1e4>)
 800be92:	a904      	add	r1, sp, #16
 800be94:	4640      	mov	r0, r8
 800be96:	f3af 8000 	nop.w
 800be9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800be9e:	4681      	mov	r9, r0
 800bea0:	d1d9      	bne.n	800be56 <_svfiprintf_r+0x166>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	065b      	lsls	r3, r3, #25
 800bea6:	f53f af38 	bmi.w	800bd1a <_svfiprintf_r+0x2a>
 800beaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beac:	b01d      	add	sp, #116	; 0x74
 800beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb2:	ab03      	add	r3, sp, #12
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	462a      	mov	r2, r5
 800beb8:	4b06      	ldr	r3, [pc, #24]	; (800bed4 <_svfiprintf_r+0x1e4>)
 800beba:	a904      	add	r1, sp, #16
 800bebc:	4640      	mov	r0, r8
 800bebe:	f000 f9c1 	bl	800c244 <_printf_i>
 800bec2:	e7ea      	b.n	800be9a <_svfiprintf_r+0x1aa>
 800bec4:	0800e58c 	.word	0x0800e58c
 800bec8:	0800e592 	.word	0x0800e592
 800becc:	0800e596 	.word	0x0800e596
 800bed0:	00000000 	.word	0x00000000
 800bed4:	0800bc39 	.word	0x0800bc39

0800bed8 <__sfputc_r>:
 800bed8:	6893      	ldr	r3, [r2, #8]
 800beda:	3b01      	subs	r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	b410      	push	{r4}
 800bee0:	6093      	str	r3, [r2, #8]
 800bee2:	da09      	bge.n	800bef8 <__sfputc_r+0x20>
 800bee4:	6994      	ldr	r4, [r2, #24]
 800bee6:	42a3      	cmp	r3, r4
 800bee8:	db02      	blt.n	800bef0 <__sfputc_r+0x18>
 800beea:	b2cb      	uxtb	r3, r1
 800beec:	2b0a      	cmp	r3, #10
 800beee:	d103      	bne.n	800bef8 <__sfputc_r+0x20>
 800bef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bef4:	f7ff bbfe 	b.w	800b6f4 <__swbuf_r>
 800bef8:	6813      	ldr	r3, [r2, #0]
 800befa:	1c58      	adds	r0, r3, #1
 800befc:	6010      	str	r0, [r2, #0]
 800befe:	7019      	strb	r1, [r3, #0]
 800bf00:	b2c8      	uxtb	r0, r1
 800bf02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <__sfputs_r>:
 800bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460f      	mov	r7, r1
 800bf0e:	4614      	mov	r4, r2
 800bf10:	18d5      	adds	r5, r2, r3
 800bf12:	42ac      	cmp	r4, r5
 800bf14:	d101      	bne.n	800bf1a <__sfputs_r+0x12>
 800bf16:	2000      	movs	r0, #0
 800bf18:	e007      	b.n	800bf2a <__sfputs_r+0x22>
 800bf1a:	463a      	mov	r2, r7
 800bf1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf20:	4630      	mov	r0, r6
 800bf22:	f7ff ffd9 	bl	800bed8 <__sfputc_r>
 800bf26:	1c43      	adds	r3, r0, #1
 800bf28:	d1f3      	bne.n	800bf12 <__sfputs_r+0xa>
 800bf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf2c <_vfiprintf_r>:
 800bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf30:	b09d      	sub	sp, #116	; 0x74
 800bf32:	460c      	mov	r4, r1
 800bf34:	4617      	mov	r7, r2
 800bf36:	9303      	str	r3, [sp, #12]
 800bf38:	4606      	mov	r6, r0
 800bf3a:	b118      	cbz	r0, 800bf44 <_vfiprintf_r+0x18>
 800bf3c:	6983      	ldr	r3, [r0, #24]
 800bf3e:	b90b      	cbnz	r3, 800bf44 <_vfiprintf_r+0x18>
 800bf40:	f7ff fd8a 	bl	800ba58 <__sinit>
 800bf44:	4b7c      	ldr	r3, [pc, #496]	; (800c138 <_vfiprintf_r+0x20c>)
 800bf46:	429c      	cmp	r4, r3
 800bf48:	d157      	bne.n	800bffa <_vfiprintf_r+0xce>
 800bf4a:	6874      	ldr	r4, [r6, #4]
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	0718      	lsls	r0, r3, #28
 800bf50:	d55d      	bpl.n	800c00e <_vfiprintf_r+0xe2>
 800bf52:	6923      	ldr	r3, [r4, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d05a      	beq.n	800c00e <_vfiprintf_r+0xe2>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5c:	2320      	movs	r3, #32
 800bf5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf62:	2330      	movs	r3, #48	; 0x30
 800bf64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf68:	f04f 0b01 	mov.w	fp, #1
 800bf6c:	46b8      	mov	r8, r7
 800bf6e:	4645      	mov	r5, r8
 800bf70:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d155      	bne.n	800c024 <_vfiprintf_r+0xf8>
 800bf78:	ebb8 0a07 	subs.w	sl, r8, r7
 800bf7c:	d00b      	beq.n	800bf96 <_vfiprintf_r+0x6a>
 800bf7e:	4653      	mov	r3, sl
 800bf80:	463a      	mov	r2, r7
 800bf82:	4621      	mov	r1, r4
 800bf84:	4630      	mov	r0, r6
 800bf86:	f7ff ffbf 	bl	800bf08 <__sfputs_r>
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	f000 80c4 	beq.w	800c118 <_vfiprintf_r+0x1ec>
 800bf90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf92:	4453      	add	r3, sl
 800bf94:	9309      	str	r3, [sp, #36]	; 0x24
 800bf96:	f898 3000 	ldrb.w	r3, [r8]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 80bc 	beq.w	800c118 <_vfiprintf_r+0x1ec>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfa6:	9304      	str	r3, [sp, #16]
 800bfa8:	9307      	str	r3, [sp, #28]
 800bfaa:	9205      	str	r2, [sp, #20]
 800bfac:	9306      	str	r3, [sp, #24]
 800bfae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfb2:	931a      	str	r3, [sp, #104]	; 0x68
 800bfb4:	2205      	movs	r2, #5
 800bfb6:	7829      	ldrb	r1, [r5, #0]
 800bfb8:	4860      	ldr	r0, [pc, #384]	; (800c13c <_vfiprintf_r+0x210>)
 800bfba:	f7f4 f959 	bl	8000270 <memchr>
 800bfbe:	f105 0801 	add.w	r8, r5, #1
 800bfc2:	9b04      	ldr	r3, [sp, #16]
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d131      	bne.n	800c02c <_vfiprintf_r+0x100>
 800bfc8:	06d9      	lsls	r1, r3, #27
 800bfca:	bf44      	itt	mi
 800bfcc:	2220      	movmi	r2, #32
 800bfce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfd2:	071a      	lsls	r2, r3, #28
 800bfd4:	bf44      	itt	mi
 800bfd6:	222b      	movmi	r2, #43	; 0x2b
 800bfd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfdc:	782a      	ldrb	r2, [r5, #0]
 800bfde:	2a2a      	cmp	r2, #42	; 0x2a
 800bfe0:	d02c      	beq.n	800c03c <_vfiprintf_r+0x110>
 800bfe2:	9a07      	ldr	r2, [sp, #28]
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	200a      	movs	r0, #10
 800bfe8:	46a8      	mov	r8, r5
 800bfea:	3501      	adds	r5, #1
 800bfec:	f898 3000 	ldrb.w	r3, [r8]
 800bff0:	3b30      	subs	r3, #48	; 0x30
 800bff2:	2b09      	cmp	r3, #9
 800bff4:	d96d      	bls.n	800c0d2 <_vfiprintf_r+0x1a6>
 800bff6:	b371      	cbz	r1, 800c056 <_vfiprintf_r+0x12a>
 800bff8:	e026      	b.n	800c048 <_vfiprintf_r+0x11c>
 800bffa:	4b51      	ldr	r3, [pc, #324]	; (800c140 <_vfiprintf_r+0x214>)
 800bffc:	429c      	cmp	r4, r3
 800bffe:	d101      	bne.n	800c004 <_vfiprintf_r+0xd8>
 800c000:	68b4      	ldr	r4, [r6, #8]
 800c002:	e7a3      	b.n	800bf4c <_vfiprintf_r+0x20>
 800c004:	4b4f      	ldr	r3, [pc, #316]	; (800c144 <_vfiprintf_r+0x218>)
 800c006:	429c      	cmp	r4, r3
 800c008:	bf08      	it	eq
 800c00a:	68f4      	ldreq	r4, [r6, #12]
 800c00c:	e79e      	b.n	800bf4c <_vfiprintf_r+0x20>
 800c00e:	4621      	mov	r1, r4
 800c010:	4630      	mov	r0, r6
 800c012:	f7ff fbc1 	bl	800b798 <__swsetup_r>
 800c016:	2800      	cmp	r0, #0
 800c018:	d09e      	beq.n	800bf58 <_vfiprintf_r+0x2c>
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c01e:	b01d      	add	sp, #116	; 0x74
 800c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c024:	2b25      	cmp	r3, #37	; 0x25
 800c026:	d0a7      	beq.n	800bf78 <_vfiprintf_r+0x4c>
 800c028:	46a8      	mov	r8, r5
 800c02a:	e7a0      	b.n	800bf6e <_vfiprintf_r+0x42>
 800c02c:	4a43      	ldr	r2, [pc, #268]	; (800c13c <_vfiprintf_r+0x210>)
 800c02e:	1a80      	subs	r0, r0, r2
 800c030:	fa0b f000 	lsl.w	r0, fp, r0
 800c034:	4318      	orrs	r0, r3
 800c036:	9004      	str	r0, [sp, #16]
 800c038:	4645      	mov	r5, r8
 800c03a:	e7bb      	b.n	800bfb4 <_vfiprintf_r+0x88>
 800c03c:	9a03      	ldr	r2, [sp, #12]
 800c03e:	1d11      	adds	r1, r2, #4
 800c040:	6812      	ldr	r2, [r2, #0]
 800c042:	9103      	str	r1, [sp, #12]
 800c044:	2a00      	cmp	r2, #0
 800c046:	db01      	blt.n	800c04c <_vfiprintf_r+0x120>
 800c048:	9207      	str	r2, [sp, #28]
 800c04a:	e004      	b.n	800c056 <_vfiprintf_r+0x12a>
 800c04c:	4252      	negs	r2, r2
 800c04e:	f043 0302 	orr.w	r3, r3, #2
 800c052:	9207      	str	r2, [sp, #28]
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	f898 3000 	ldrb.w	r3, [r8]
 800c05a:	2b2e      	cmp	r3, #46	; 0x2e
 800c05c:	d110      	bne.n	800c080 <_vfiprintf_r+0x154>
 800c05e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c062:	2b2a      	cmp	r3, #42	; 0x2a
 800c064:	f108 0101 	add.w	r1, r8, #1
 800c068:	d137      	bne.n	800c0da <_vfiprintf_r+0x1ae>
 800c06a:	9b03      	ldr	r3, [sp, #12]
 800c06c:	1d1a      	adds	r2, r3, #4
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	9203      	str	r2, [sp, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	bfb8      	it	lt
 800c076:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c07a:	f108 0802 	add.w	r8, r8, #2
 800c07e:	9305      	str	r3, [sp, #20]
 800c080:	4d31      	ldr	r5, [pc, #196]	; (800c148 <_vfiprintf_r+0x21c>)
 800c082:	f898 1000 	ldrb.w	r1, [r8]
 800c086:	2203      	movs	r2, #3
 800c088:	4628      	mov	r0, r5
 800c08a:	f7f4 f8f1 	bl	8000270 <memchr>
 800c08e:	b140      	cbz	r0, 800c0a2 <_vfiprintf_r+0x176>
 800c090:	2340      	movs	r3, #64	; 0x40
 800c092:	1b40      	subs	r0, r0, r5
 800c094:	fa03 f000 	lsl.w	r0, r3, r0
 800c098:	9b04      	ldr	r3, [sp, #16]
 800c09a:	4303      	orrs	r3, r0
 800c09c:	9304      	str	r3, [sp, #16]
 800c09e:	f108 0801 	add.w	r8, r8, #1
 800c0a2:	f898 1000 	ldrb.w	r1, [r8]
 800c0a6:	4829      	ldr	r0, [pc, #164]	; (800c14c <_vfiprintf_r+0x220>)
 800c0a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ac:	2206      	movs	r2, #6
 800c0ae:	f108 0701 	add.w	r7, r8, #1
 800c0b2:	f7f4 f8dd 	bl	8000270 <memchr>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d034      	beq.n	800c124 <_vfiprintf_r+0x1f8>
 800c0ba:	4b25      	ldr	r3, [pc, #148]	; (800c150 <_vfiprintf_r+0x224>)
 800c0bc:	bb03      	cbnz	r3, 800c100 <_vfiprintf_r+0x1d4>
 800c0be:	9b03      	ldr	r3, [sp, #12]
 800c0c0:	3307      	adds	r3, #7
 800c0c2:	f023 0307 	bic.w	r3, r3, #7
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	9303      	str	r3, [sp, #12]
 800c0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0cc:	444b      	add	r3, r9
 800c0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c0d0:	e74c      	b.n	800bf6c <_vfiprintf_r+0x40>
 800c0d2:	fb00 3202 	mla	r2, r0, r2, r3
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	e786      	b.n	800bfe8 <_vfiprintf_r+0xbc>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9305      	str	r3, [sp, #20]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	250a      	movs	r5, #10
 800c0e2:	4688      	mov	r8, r1
 800c0e4:	3101      	adds	r1, #1
 800c0e6:	f898 2000 	ldrb.w	r2, [r8]
 800c0ea:	3a30      	subs	r2, #48	; 0x30
 800c0ec:	2a09      	cmp	r2, #9
 800c0ee:	d903      	bls.n	800c0f8 <_vfiprintf_r+0x1cc>
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0c5      	beq.n	800c080 <_vfiprintf_r+0x154>
 800c0f4:	9005      	str	r0, [sp, #20]
 800c0f6:	e7c3      	b.n	800c080 <_vfiprintf_r+0x154>
 800c0f8:	fb05 2000 	mla	r0, r5, r0, r2
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e7f0      	b.n	800c0e2 <_vfiprintf_r+0x1b6>
 800c100:	ab03      	add	r3, sp, #12
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	4622      	mov	r2, r4
 800c106:	4b13      	ldr	r3, [pc, #76]	; (800c154 <_vfiprintf_r+0x228>)
 800c108:	a904      	add	r1, sp, #16
 800c10a:	4630      	mov	r0, r6
 800c10c:	f3af 8000 	nop.w
 800c110:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c114:	4681      	mov	r9, r0
 800c116:	d1d8      	bne.n	800c0ca <_vfiprintf_r+0x19e>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	065b      	lsls	r3, r3, #25
 800c11c:	f53f af7d 	bmi.w	800c01a <_vfiprintf_r+0xee>
 800c120:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c122:	e77c      	b.n	800c01e <_vfiprintf_r+0xf2>
 800c124:	ab03      	add	r3, sp, #12
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	4622      	mov	r2, r4
 800c12a:	4b0a      	ldr	r3, [pc, #40]	; (800c154 <_vfiprintf_r+0x228>)
 800c12c:	a904      	add	r1, sp, #16
 800c12e:	4630      	mov	r0, r6
 800c130:	f000 f888 	bl	800c244 <_printf_i>
 800c134:	e7ec      	b.n	800c110 <_vfiprintf_r+0x1e4>
 800c136:	bf00      	nop
 800c138:	0800e548 	.word	0x0800e548
 800c13c:	0800e58c 	.word	0x0800e58c
 800c140:	0800e568 	.word	0x0800e568
 800c144:	0800e528 	.word	0x0800e528
 800c148:	0800e592 	.word	0x0800e592
 800c14c:	0800e596 	.word	0x0800e596
 800c150:	00000000 	.word	0x00000000
 800c154:	0800bf09 	.word	0x0800bf09

0800c158 <_printf_common>:
 800c158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c15c:	4691      	mov	r9, r2
 800c15e:	461f      	mov	r7, r3
 800c160:	688a      	ldr	r2, [r1, #8]
 800c162:	690b      	ldr	r3, [r1, #16]
 800c164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c168:	4293      	cmp	r3, r2
 800c16a:	bfb8      	it	lt
 800c16c:	4613      	movlt	r3, r2
 800c16e:	f8c9 3000 	str.w	r3, [r9]
 800c172:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c176:	4606      	mov	r6, r0
 800c178:	460c      	mov	r4, r1
 800c17a:	b112      	cbz	r2, 800c182 <_printf_common+0x2a>
 800c17c:	3301      	adds	r3, #1
 800c17e:	f8c9 3000 	str.w	r3, [r9]
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	0699      	lsls	r1, r3, #26
 800c186:	bf42      	ittt	mi
 800c188:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c18c:	3302      	addmi	r3, #2
 800c18e:	f8c9 3000 	strmi.w	r3, [r9]
 800c192:	6825      	ldr	r5, [r4, #0]
 800c194:	f015 0506 	ands.w	r5, r5, #6
 800c198:	d107      	bne.n	800c1aa <_printf_common+0x52>
 800c19a:	f104 0a19 	add.w	sl, r4, #25
 800c19e:	68e3      	ldr	r3, [r4, #12]
 800c1a0:	f8d9 2000 	ldr.w	r2, [r9]
 800c1a4:	1a9b      	subs	r3, r3, r2
 800c1a6:	429d      	cmp	r5, r3
 800c1a8:	db29      	blt.n	800c1fe <_printf_common+0xa6>
 800c1aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c1ae:	6822      	ldr	r2, [r4, #0]
 800c1b0:	3300      	adds	r3, #0
 800c1b2:	bf18      	it	ne
 800c1b4:	2301      	movne	r3, #1
 800c1b6:	0692      	lsls	r2, r2, #26
 800c1b8:	d42e      	bmi.n	800c218 <_printf_common+0xc0>
 800c1ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1be:	4639      	mov	r1, r7
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	47c0      	blx	r8
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d021      	beq.n	800c20c <_printf_common+0xb4>
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	68e5      	ldr	r5, [r4, #12]
 800c1cc:	f8d9 2000 	ldr.w	r2, [r9]
 800c1d0:	f003 0306 	and.w	r3, r3, #6
 800c1d4:	2b04      	cmp	r3, #4
 800c1d6:	bf08      	it	eq
 800c1d8:	1aad      	subeq	r5, r5, r2
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	6922      	ldr	r2, [r4, #16]
 800c1de:	bf0c      	ite	eq
 800c1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1e4:	2500      	movne	r5, #0
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	bfc4      	itt	gt
 800c1ea:	1a9b      	subgt	r3, r3, r2
 800c1ec:	18ed      	addgt	r5, r5, r3
 800c1ee:	f04f 0900 	mov.w	r9, #0
 800c1f2:	341a      	adds	r4, #26
 800c1f4:	454d      	cmp	r5, r9
 800c1f6:	d11b      	bne.n	800c230 <_printf_common+0xd8>
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fe:	2301      	movs	r3, #1
 800c200:	4652      	mov	r2, sl
 800c202:	4639      	mov	r1, r7
 800c204:	4630      	mov	r0, r6
 800c206:	47c0      	blx	r8
 800c208:	3001      	adds	r0, #1
 800c20a:	d103      	bne.n	800c214 <_printf_common+0xbc>
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c214:	3501      	adds	r5, #1
 800c216:	e7c2      	b.n	800c19e <_printf_common+0x46>
 800c218:	18e1      	adds	r1, r4, r3
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	2030      	movs	r0, #48	; 0x30
 800c21e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c222:	4422      	add	r2, r4
 800c224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c22c:	3302      	adds	r3, #2
 800c22e:	e7c4      	b.n	800c1ba <_printf_common+0x62>
 800c230:	2301      	movs	r3, #1
 800c232:	4622      	mov	r2, r4
 800c234:	4639      	mov	r1, r7
 800c236:	4630      	mov	r0, r6
 800c238:	47c0      	blx	r8
 800c23a:	3001      	adds	r0, #1
 800c23c:	d0e6      	beq.n	800c20c <_printf_common+0xb4>
 800c23e:	f109 0901 	add.w	r9, r9, #1
 800c242:	e7d7      	b.n	800c1f4 <_printf_common+0x9c>

0800c244 <_printf_i>:
 800c244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c248:	4617      	mov	r7, r2
 800c24a:	7e0a      	ldrb	r2, [r1, #24]
 800c24c:	b085      	sub	sp, #20
 800c24e:	2a6e      	cmp	r2, #110	; 0x6e
 800c250:	4698      	mov	r8, r3
 800c252:	4606      	mov	r6, r0
 800c254:	460c      	mov	r4, r1
 800c256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c258:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c25c:	f000 80bc 	beq.w	800c3d8 <_printf_i+0x194>
 800c260:	d81a      	bhi.n	800c298 <_printf_i+0x54>
 800c262:	2a63      	cmp	r2, #99	; 0x63
 800c264:	d02e      	beq.n	800c2c4 <_printf_i+0x80>
 800c266:	d80a      	bhi.n	800c27e <_printf_i+0x3a>
 800c268:	2a00      	cmp	r2, #0
 800c26a:	f000 80c8 	beq.w	800c3fe <_printf_i+0x1ba>
 800c26e:	2a58      	cmp	r2, #88	; 0x58
 800c270:	f000 808a 	beq.w	800c388 <_printf_i+0x144>
 800c274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c278:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c27c:	e02a      	b.n	800c2d4 <_printf_i+0x90>
 800c27e:	2a64      	cmp	r2, #100	; 0x64
 800c280:	d001      	beq.n	800c286 <_printf_i+0x42>
 800c282:	2a69      	cmp	r2, #105	; 0x69
 800c284:	d1f6      	bne.n	800c274 <_printf_i+0x30>
 800c286:	6821      	ldr	r1, [r4, #0]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c28e:	d023      	beq.n	800c2d8 <_printf_i+0x94>
 800c290:	1d11      	adds	r1, r2, #4
 800c292:	6019      	str	r1, [r3, #0]
 800c294:	6813      	ldr	r3, [r2, #0]
 800c296:	e027      	b.n	800c2e8 <_printf_i+0xa4>
 800c298:	2a73      	cmp	r2, #115	; 0x73
 800c29a:	f000 80b4 	beq.w	800c406 <_printf_i+0x1c2>
 800c29e:	d808      	bhi.n	800c2b2 <_printf_i+0x6e>
 800c2a0:	2a6f      	cmp	r2, #111	; 0x6f
 800c2a2:	d02a      	beq.n	800c2fa <_printf_i+0xb6>
 800c2a4:	2a70      	cmp	r2, #112	; 0x70
 800c2a6:	d1e5      	bne.n	800c274 <_printf_i+0x30>
 800c2a8:	680a      	ldr	r2, [r1, #0]
 800c2aa:	f042 0220 	orr.w	r2, r2, #32
 800c2ae:	600a      	str	r2, [r1, #0]
 800c2b0:	e003      	b.n	800c2ba <_printf_i+0x76>
 800c2b2:	2a75      	cmp	r2, #117	; 0x75
 800c2b4:	d021      	beq.n	800c2fa <_printf_i+0xb6>
 800c2b6:	2a78      	cmp	r2, #120	; 0x78
 800c2b8:	d1dc      	bne.n	800c274 <_printf_i+0x30>
 800c2ba:	2278      	movs	r2, #120	; 0x78
 800c2bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c2c0:	496e      	ldr	r1, [pc, #440]	; (800c47c <_printf_i+0x238>)
 800c2c2:	e064      	b.n	800c38e <_printf_i+0x14a>
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800c2ca:	1d11      	adds	r1, r2, #4
 800c2cc:	6019      	str	r1, [r3, #0]
 800c2ce:	6813      	ldr	r3, [r2, #0]
 800c2d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e0a3      	b.n	800c420 <_printf_i+0x1dc>
 800c2d8:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c2dc:	f102 0104 	add.w	r1, r2, #4
 800c2e0:	6019      	str	r1, [r3, #0]
 800c2e2:	d0d7      	beq.n	800c294 <_printf_i+0x50>
 800c2e4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	da03      	bge.n	800c2f4 <_printf_i+0xb0>
 800c2ec:	222d      	movs	r2, #45	; 0x2d
 800c2ee:	425b      	negs	r3, r3
 800c2f0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c2f4:	4962      	ldr	r1, [pc, #392]	; (800c480 <_printf_i+0x23c>)
 800c2f6:	220a      	movs	r2, #10
 800c2f8:	e017      	b.n	800c32a <_printf_i+0xe6>
 800c2fa:	6820      	ldr	r0, [r4, #0]
 800c2fc:	6819      	ldr	r1, [r3, #0]
 800c2fe:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c302:	d003      	beq.n	800c30c <_printf_i+0xc8>
 800c304:	1d08      	adds	r0, r1, #4
 800c306:	6018      	str	r0, [r3, #0]
 800c308:	680b      	ldr	r3, [r1, #0]
 800c30a:	e006      	b.n	800c31a <_printf_i+0xd6>
 800c30c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c310:	f101 0004 	add.w	r0, r1, #4
 800c314:	6018      	str	r0, [r3, #0]
 800c316:	d0f7      	beq.n	800c308 <_printf_i+0xc4>
 800c318:	880b      	ldrh	r3, [r1, #0]
 800c31a:	4959      	ldr	r1, [pc, #356]	; (800c480 <_printf_i+0x23c>)
 800c31c:	2a6f      	cmp	r2, #111	; 0x6f
 800c31e:	bf14      	ite	ne
 800c320:	220a      	movne	r2, #10
 800c322:	2208      	moveq	r2, #8
 800c324:	2000      	movs	r0, #0
 800c326:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c32a:	6865      	ldr	r5, [r4, #4]
 800c32c:	60a5      	str	r5, [r4, #8]
 800c32e:	2d00      	cmp	r5, #0
 800c330:	f2c0 809c 	blt.w	800c46c <_printf_i+0x228>
 800c334:	6820      	ldr	r0, [r4, #0]
 800c336:	f020 0004 	bic.w	r0, r0, #4
 800c33a:	6020      	str	r0, [r4, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d13f      	bne.n	800c3c0 <_printf_i+0x17c>
 800c340:	2d00      	cmp	r5, #0
 800c342:	f040 8095 	bne.w	800c470 <_printf_i+0x22c>
 800c346:	4675      	mov	r5, lr
 800c348:	2a08      	cmp	r2, #8
 800c34a:	d10b      	bne.n	800c364 <_printf_i+0x120>
 800c34c:	6823      	ldr	r3, [r4, #0]
 800c34e:	07da      	lsls	r2, r3, #31
 800c350:	d508      	bpl.n	800c364 <_printf_i+0x120>
 800c352:	6923      	ldr	r3, [r4, #16]
 800c354:	6862      	ldr	r2, [r4, #4]
 800c356:	429a      	cmp	r2, r3
 800c358:	bfde      	ittt	le
 800c35a:	2330      	movle	r3, #48	; 0x30
 800c35c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c360:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c364:	ebae 0305 	sub.w	r3, lr, r5
 800c368:	6123      	str	r3, [r4, #16]
 800c36a:	f8cd 8000 	str.w	r8, [sp]
 800c36e:	463b      	mov	r3, r7
 800c370:	aa03      	add	r2, sp, #12
 800c372:	4621      	mov	r1, r4
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff feef 	bl	800c158 <_printf_common>
 800c37a:	3001      	adds	r0, #1
 800c37c:	d155      	bne.n	800c42a <_printf_i+0x1e6>
 800c37e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c382:	b005      	add	sp, #20
 800c384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c388:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c38c:	493c      	ldr	r1, [pc, #240]	; (800c480 <_printf_i+0x23c>)
 800c38e:	6822      	ldr	r2, [r4, #0]
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c396:	f100 0504 	add.w	r5, r0, #4
 800c39a:	601d      	str	r5, [r3, #0]
 800c39c:	d001      	beq.n	800c3a2 <_printf_i+0x15e>
 800c39e:	6803      	ldr	r3, [r0, #0]
 800c3a0:	e002      	b.n	800c3a8 <_printf_i+0x164>
 800c3a2:	0655      	lsls	r5, r2, #25
 800c3a4:	d5fb      	bpl.n	800c39e <_printf_i+0x15a>
 800c3a6:	8803      	ldrh	r3, [r0, #0]
 800c3a8:	07d0      	lsls	r0, r2, #31
 800c3aa:	bf44      	itt	mi
 800c3ac:	f042 0220 	orrmi.w	r2, r2, #32
 800c3b0:	6022      	strmi	r2, [r4, #0]
 800c3b2:	b91b      	cbnz	r3, 800c3bc <_printf_i+0x178>
 800c3b4:	6822      	ldr	r2, [r4, #0]
 800c3b6:	f022 0220 	bic.w	r2, r2, #32
 800c3ba:	6022      	str	r2, [r4, #0]
 800c3bc:	2210      	movs	r2, #16
 800c3be:	e7b1      	b.n	800c324 <_printf_i+0xe0>
 800c3c0:	4675      	mov	r5, lr
 800c3c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c3c6:	fb02 3310 	mls	r3, r2, r0, r3
 800c3ca:	5ccb      	ldrb	r3, [r1, r3]
 800c3cc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	d1f5      	bne.n	800c3c2 <_printf_i+0x17e>
 800c3d6:	e7b7      	b.n	800c348 <_printf_i+0x104>
 800c3d8:	6808      	ldr	r0, [r1, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	6949      	ldr	r1, [r1, #20]
 800c3de:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c3e2:	d004      	beq.n	800c3ee <_printf_i+0x1aa>
 800c3e4:	1d10      	adds	r0, r2, #4
 800c3e6:	6018      	str	r0, [r3, #0]
 800c3e8:	6813      	ldr	r3, [r2, #0]
 800c3ea:	6019      	str	r1, [r3, #0]
 800c3ec:	e007      	b.n	800c3fe <_printf_i+0x1ba>
 800c3ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3f2:	f102 0004 	add.w	r0, r2, #4
 800c3f6:	6018      	str	r0, [r3, #0]
 800c3f8:	6813      	ldr	r3, [r2, #0]
 800c3fa:	d0f6      	beq.n	800c3ea <_printf_i+0x1a6>
 800c3fc:	8019      	strh	r1, [r3, #0]
 800c3fe:	2300      	movs	r3, #0
 800c400:	6123      	str	r3, [r4, #16]
 800c402:	4675      	mov	r5, lr
 800c404:	e7b1      	b.n	800c36a <_printf_i+0x126>
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	1d11      	adds	r1, r2, #4
 800c40a:	6019      	str	r1, [r3, #0]
 800c40c:	6815      	ldr	r5, [r2, #0]
 800c40e:	6862      	ldr	r2, [r4, #4]
 800c410:	2100      	movs	r1, #0
 800c412:	4628      	mov	r0, r5
 800c414:	f7f3 ff2c 	bl	8000270 <memchr>
 800c418:	b108      	cbz	r0, 800c41e <_printf_i+0x1da>
 800c41a:	1b40      	subs	r0, r0, r5
 800c41c:	6060      	str	r0, [r4, #4]
 800c41e:	6863      	ldr	r3, [r4, #4]
 800c420:	6123      	str	r3, [r4, #16]
 800c422:	2300      	movs	r3, #0
 800c424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c428:	e79f      	b.n	800c36a <_printf_i+0x126>
 800c42a:	6923      	ldr	r3, [r4, #16]
 800c42c:	462a      	mov	r2, r5
 800c42e:	4639      	mov	r1, r7
 800c430:	4630      	mov	r0, r6
 800c432:	47c0      	blx	r8
 800c434:	3001      	adds	r0, #1
 800c436:	d0a2      	beq.n	800c37e <_printf_i+0x13a>
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	079b      	lsls	r3, r3, #30
 800c43c:	d507      	bpl.n	800c44e <_printf_i+0x20a>
 800c43e:	2500      	movs	r5, #0
 800c440:	f104 0919 	add.w	r9, r4, #25
 800c444:	68e3      	ldr	r3, [r4, #12]
 800c446:	9a03      	ldr	r2, [sp, #12]
 800c448:	1a9b      	subs	r3, r3, r2
 800c44a:	429d      	cmp	r5, r3
 800c44c:	db05      	blt.n	800c45a <_printf_i+0x216>
 800c44e:	68e0      	ldr	r0, [r4, #12]
 800c450:	9b03      	ldr	r3, [sp, #12]
 800c452:	4298      	cmp	r0, r3
 800c454:	bfb8      	it	lt
 800c456:	4618      	movlt	r0, r3
 800c458:	e793      	b.n	800c382 <_printf_i+0x13e>
 800c45a:	2301      	movs	r3, #1
 800c45c:	464a      	mov	r2, r9
 800c45e:	4639      	mov	r1, r7
 800c460:	4630      	mov	r0, r6
 800c462:	47c0      	blx	r8
 800c464:	3001      	adds	r0, #1
 800c466:	d08a      	beq.n	800c37e <_printf_i+0x13a>
 800c468:	3501      	adds	r5, #1
 800c46a:	e7eb      	b.n	800c444 <_printf_i+0x200>
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1a7      	bne.n	800c3c0 <_printf_i+0x17c>
 800c470:	780b      	ldrb	r3, [r1, #0]
 800c472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c476:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c47a:	e765      	b.n	800c348 <_printf_i+0x104>
 800c47c:	0800e5ae 	.word	0x0800e5ae
 800c480:	0800e59d 	.word	0x0800e59d

0800c484 <__sread>:
 800c484:	b510      	push	{r4, lr}
 800c486:	460c      	mov	r4, r1
 800c488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48c:	f000 f8d4 	bl	800c638 <_read_r>
 800c490:	2800      	cmp	r0, #0
 800c492:	bfab      	itete	ge
 800c494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c496:	89a3      	ldrhlt	r3, [r4, #12]
 800c498:	181b      	addge	r3, r3, r0
 800c49a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c49e:	bfac      	ite	ge
 800c4a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4a2:	81a3      	strhlt	r3, [r4, #12]
 800c4a4:	bd10      	pop	{r4, pc}

0800c4a6 <__swrite>:
 800c4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4aa:	461f      	mov	r7, r3
 800c4ac:	898b      	ldrh	r3, [r1, #12]
 800c4ae:	05db      	lsls	r3, r3, #23
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	4616      	mov	r6, r2
 800c4b6:	d505      	bpl.n	800c4c4 <__swrite+0x1e>
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c0:	f000 f868 	bl	800c594 <_lseek_r>
 800c4c4:	89a3      	ldrh	r3, [r4, #12]
 800c4c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4ce:	81a3      	strh	r3, [r4, #12]
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	463b      	mov	r3, r7
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4da:	f000 b817 	b.w	800c50c <_write_r>

0800c4de <__sseek>:
 800c4de:	b510      	push	{r4, lr}
 800c4e0:	460c      	mov	r4, r1
 800c4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e6:	f000 f855 	bl	800c594 <_lseek_r>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	bf15      	itete	ne
 800c4f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4fa:	81a3      	strheq	r3, [r4, #12]
 800c4fc:	bf18      	it	ne
 800c4fe:	81a3      	strhne	r3, [r4, #12]
 800c500:	bd10      	pop	{r4, pc}

0800c502 <__sclose>:
 800c502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c506:	f000 b813 	b.w	800c530 <_close_r>
	...

0800c50c <_write_r>:
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	4c07      	ldr	r4, [pc, #28]	; (800c52c <_write_r+0x20>)
 800c510:	4605      	mov	r5, r0
 800c512:	4608      	mov	r0, r1
 800c514:	4611      	mov	r1, r2
 800c516:	2200      	movs	r2, #0
 800c518:	6022      	str	r2, [r4, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	f7fe fe82 	bl	800b224 <_write>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_write_r+0x1e>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	b103      	cbz	r3, 800c52a <_write_r+0x1e>
 800c528:	602b      	str	r3, [r5, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	2003ef54 	.word	0x2003ef54

0800c530 <_close_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4c06      	ldr	r4, [pc, #24]	; (800c54c <_close_r+0x1c>)
 800c534:	2300      	movs	r3, #0
 800c536:	4605      	mov	r5, r0
 800c538:	4608      	mov	r0, r1
 800c53a:	6023      	str	r3, [r4, #0]
 800c53c:	f7fe fe9a 	bl	800b274 <_close>
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d102      	bne.n	800c54a <_close_r+0x1a>
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	b103      	cbz	r3, 800c54a <_close_r+0x1a>
 800c548:	602b      	str	r3, [r5, #0]
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	2003ef54 	.word	0x2003ef54

0800c550 <_fstat_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4c07      	ldr	r4, [pc, #28]	; (800c570 <_fstat_r+0x20>)
 800c554:	2300      	movs	r3, #0
 800c556:	4605      	mov	r5, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	4611      	mov	r1, r2
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	f7fe fe8c 	bl	800b27a <_fstat>
 800c562:	1c43      	adds	r3, r0, #1
 800c564:	d102      	bne.n	800c56c <_fstat_r+0x1c>
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	b103      	cbz	r3, 800c56c <_fstat_r+0x1c>
 800c56a:	602b      	str	r3, [r5, #0]
 800c56c:	bd38      	pop	{r3, r4, r5, pc}
 800c56e:	bf00      	nop
 800c570:	2003ef54 	.word	0x2003ef54

0800c574 <_isatty_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4c06      	ldr	r4, [pc, #24]	; (800c590 <_isatty_r+0x1c>)
 800c578:	2300      	movs	r3, #0
 800c57a:	4605      	mov	r5, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	6023      	str	r3, [r4, #0]
 800c580:	f7fe fe80 	bl	800b284 <_isatty>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_isatty_r+0x1a>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_isatty_r+0x1a>
 800c58c:	602b      	str	r3, [r5, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	2003ef54 	.word	0x2003ef54

0800c594 <_lseek_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4c07      	ldr	r4, [pc, #28]	; (800c5b4 <_lseek_r+0x20>)
 800c598:	4605      	mov	r5, r0
 800c59a:	4608      	mov	r0, r1
 800c59c:	4611      	mov	r1, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	6022      	str	r2, [r4, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f7fe fe70 	bl	800b288 <_lseek>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_lseek_r+0x1e>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_lseek_r+0x1e>
 800c5b0:	602b      	str	r3, [r5, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	2003ef54 	.word	0x2003ef54

0800c5b8 <memmove>:
 800c5b8:	4288      	cmp	r0, r1
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	eb01 0302 	add.w	r3, r1, r2
 800c5c0:	d803      	bhi.n	800c5ca <memmove+0x12>
 800c5c2:	1e42      	subs	r2, r0, #1
 800c5c4:	4299      	cmp	r1, r3
 800c5c6:	d10c      	bne.n	800c5e2 <memmove+0x2a>
 800c5c8:	bd10      	pop	{r4, pc}
 800c5ca:	4298      	cmp	r0, r3
 800c5cc:	d2f9      	bcs.n	800c5c2 <memmove+0xa>
 800c5ce:	1881      	adds	r1, r0, r2
 800c5d0:	1ad2      	subs	r2, r2, r3
 800c5d2:	42d3      	cmn	r3, r2
 800c5d4:	d100      	bne.n	800c5d8 <memmove+0x20>
 800c5d6:	bd10      	pop	{r4, pc}
 800c5d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c5e0:	e7f7      	b.n	800c5d2 <memmove+0x1a>
 800c5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c5ea:	e7eb      	b.n	800c5c4 <memmove+0xc>

0800c5ec <_realloc_r>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	4607      	mov	r7, r0
 800c5f0:	4614      	mov	r4, r2
 800c5f2:	460e      	mov	r6, r1
 800c5f4:	b921      	cbnz	r1, 800c600 <_realloc_r+0x14>
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5fc:	f7fe bf32 	b.w	800b464 <_malloc_r>
 800c600:	b922      	cbnz	r2, 800c60c <_realloc_r+0x20>
 800c602:	f7fe fee1 	bl	800b3c8 <_free_r>
 800c606:	4625      	mov	r5, r4
 800c608:	4628      	mov	r0, r5
 800c60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c60c:	f000 f826 	bl	800c65c <_malloc_usable_size_r>
 800c610:	4284      	cmp	r4, r0
 800c612:	d90f      	bls.n	800c634 <_realloc_r+0x48>
 800c614:	4621      	mov	r1, r4
 800c616:	4638      	mov	r0, r7
 800c618:	f7fe ff24 	bl	800b464 <_malloc_r>
 800c61c:	4605      	mov	r5, r0
 800c61e:	2800      	cmp	r0, #0
 800c620:	d0f2      	beq.n	800c608 <_realloc_r+0x1c>
 800c622:	4631      	mov	r1, r6
 800c624:	4622      	mov	r2, r4
 800c626:	f7fe febc 	bl	800b3a2 <memcpy>
 800c62a:	4631      	mov	r1, r6
 800c62c:	4638      	mov	r0, r7
 800c62e:	f7fe fecb 	bl	800b3c8 <_free_r>
 800c632:	e7e9      	b.n	800c608 <_realloc_r+0x1c>
 800c634:	4635      	mov	r5, r6
 800c636:	e7e7      	b.n	800c608 <_realloc_r+0x1c>

0800c638 <_read_r>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	4c07      	ldr	r4, [pc, #28]	; (800c658 <_read_r+0x20>)
 800c63c:	4605      	mov	r5, r0
 800c63e:	4608      	mov	r0, r1
 800c640:	4611      	mov	r1, r2
 800c642:	2200      	movs	r2, #0
 800c644:	6022      	str	r2, [r4, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	f7fe fdde 	bl	800b208 <_read>
 800c64c:	1c43      	adds	r3, r0, #1
 800c64e:	d102      	bne.n	800c656 <_read_r+0x1e>
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	b103      	cbz	r3, 800c656 <_read_r+0x1e>
 800c654:	602b      	str	r3, [r5, #0]
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	2003ef54 	.word	0x2003ef54

0800c65c <_malloc_usable_size_r>:
 800c65c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800c660:	2800      	cmp	r0, #0
 800c662:	f1a0 0004 	sub.w	r0, r0, #4
 800c666:	bfbc      	itt	lt
 800c668:	580b      	ldrlt	r3, [r1, r0]
 800c66a:	18c0      	addlt	r0, r0, r3
 800c66c:	4770      	bx	lr
	...

0800c670 <_init>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	bf00      	nop
 800c674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c676:	bc08      	pop	{r3}
 800c678:	469e      	mov	lr, r3
 800c67a:	4770      	bx	lr

0800c67c <_fini>:
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67e:	bf00      	nop
 800c680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c682:	bc08      	pop	{r3}
 800c684:	469e      	mov	lr, r3
 800c686:	4770      	bx	lr
